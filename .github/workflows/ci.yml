---
name: CI
on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:
jobs:
  ci-get-metadata:
    name: Get metadata
    runs-on: ubuntu-latest
    permissions:
      contents: none
    outputs:
      image: ${{ steps.image.outputs.image }}
      release-version: ${{ steps.version.outputs.version }}
    steps:
      - name: internal image
        if: ${{ ! startsWith(github.ref, 'refs/tags/v') }}
        run: |
          echo "WORKFLOW_IMAGE=ghcr.io/calyptia/internal/cli" >> $GITHUB_ENV
          echo "RELEASE_VERSION=v0.1-dev" >> $GITHUB_ENV
        shell: bash

      - name: release image
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "WORKFLOW_IMAGE=ghcr.io/${{ github.repository }}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
        shell: bash

      - id: image
        run: |
          echo "Using image: $WORKFLOW_IMAGE"
          echo "image=$WORKFLOW_IMAGE" >> $GITHUB_OUTPUT
        shell: bash

      - id: version
        run: |
          echo "Using version: $RELEASE_VERSION"
          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
        shell: bash

  # Taken from https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
  # We split this out to make it easier to restart just one of them if it fails and do all in parallel
  ci-build-single-arch-container-images:
    needs:
      - ci-get-metadata
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
          - arm64
    name: ${{ matrix.platform }} container image build
    runs-on: ${{ (contains(matrix.platform, 'arm') && 'actuated-arm64') || 'actuated' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Actuated mirror
        if: contains(matrix.platform, 'arm')
        uses: self-actuated/hub-mirror@master

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.CI_USERNAME }}
          password: ${{ secrets.CI_PAT }}

      - name: Build and push by digest the standard production image
        id: production
        uses: docker/build-push-action@v4
        with:
          # Use path context rather than Git context as we want local files
          context: .
          outputs: type=image,name=${{ needs.ci-get-metadata.outputs.image }},push-by-digest=true,name-canonical=true,push=true
          platforms: linux/${{ matrix.platform }}
          provenance: false
          labels: |
            org.opencontainers.image.title="calyptia/cli" \
            org.opencontainers.image.description="Calyptia Core CLI" \
            org.opencontainers.image.url="https://calyptia.com/products/calyptia-core/"
            org.opencontainers.image.licenses="/licenses/calyptia.txt"
            org.opencontainers.image.maintainer="Jorge Niedbalski <jorge@calyptia.com>" \
            org.opencontainers.image.vendor="Calyptia Inc"
            org.calyptia.contact="support@calyptia.com"

      - name: Export production digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.production.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
        shell: bash

      - name: Upload production digest
        uses: actions/upload-artifact@v4
        with:
          name: production-digests-${{ matrix.platform }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Take the digests and produce a multi-arch manifest from them.
  ci-build-container-image-manifest:
    permissions:
      contents: read
      packages: write
    name: Upload multi-arch container image manifests
    runs-on: ubuntu-latest
    needs:
      - ci-get-metadata
      - ci-build-single-arch-container-images
    outputs:
      tag: ${{ needs.ci-get-metadata.outputs.image }}:${{ steps.meta.outputs.version }}
      image: ${{ needs.ci-get-metadata.outputs.image }}
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Extract metadata from Github
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.ci-get-metadata.outputs.image }}
          tags: |
            # Get the raw tag, e.g. 1.2.3, and a purely numeric one
            type=semver,pattern={{version}},event=tag
            type=semver,pattern={{raw}},event=tag
            type=semver,pattern={{major}},event=tag
            type=semver,pattern=v{{major}},event=tag
            # defaults for others
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=main,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
          labels: |
            org.opencontainers.image.title="calyptia/cli" \
            org.opencontainers.image.description="Calyptia Core CLI" \
            org.opencontainers.image.url="https://calyptia.com/products/calyptia-core/"
            org.opencontainers.image.licenses="/licenses/calyptia.txt"
            org.opencontainers.image.maintainer="Jorge Niedbalski <jorge@calyptia.com>" \
            org.opencontainers.image.vendor="Calyptia Inc"
            org.calyptia.contact="support@calyptia.com"

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: production-digests-*
          merge-multiple: true
          path: /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.CI_USERNAME }}
          password: ${{ secrets.CI_PAT }}

      - name: Create production manifest
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ needs.ci-get-metadata.outputs.image }}@sha256:%s ' *)
        shell: bash
        working-directory: /tmp/digests

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ needs.ci-get-metadata.outputs.image }}:${{ steps.meta.outputs.version }}
        shell: bash

  cloud-e2e:
    # Do not run for releases, no point
    if: ${{ ! startsWith(github.ref, 'refs/tags/v') }}
    name: Run calyptia/cloud-e2e tests
    needs:
      - ci-build-container-image-manifest
    # Invoke via public repo, the public/private has to match
    uses: calyptia/core-product-release/.github/workflows/call-integration-tests.yaml@main
    permissions:
      contents: read
      packages: read
      id-token: write
    with:
      cli-image: ${{ needs.ci-build-container-image-manifest.outputs.tag }}
      calyptia-tests: "operator/"
    secrets:
      registry-username: ${{ secrets.CI_USERNAME }}
      registry-password: ${{ secrets.CI_PAT }}
      # Replace with playground key after: https://app.asana.com/0/1205042382663691/1205231066738712/f
      google-access-key: ${{ secrets.GCP_SA_KEY }}
      github-token: ${{ secrets.CI_PAT }}

  release:
    name: Release the artefacts
    permissions:
      contents: write
      packages: write
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: actuated-4cpu-16gb
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.CI_USERNAME }}
          password: ${{ secrets.CI_PAT }}

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_environment_variables: true
          create_credentials_file: true

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Extract image metadata
        id: meta-github-image
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=main,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=sha,prefix=,suffix=,format=short

      - name: Build and push docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          target: production
          platforms: linux/amd64, linux/arm64
          provenance: false
          push: true
          tags: ${{ steps.meta-github-image.outputs.tags }}
          labels: ${{ steps.meta-github-image.outputs.labels }}

      - name: Install Syft for sboms
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        shell: bash

      - name: Import GPG key
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.CALYPTIA_GPG_KEY }}
          passphrase: ${{ secrets.CALYPTIA_GPG_KEY_PASSPHRASE }}

      - name: Update the upx version
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          curl --silent -L https://github.com/upx/upx/releases/download/v4.1.0/upx-4.1.0-arm64_linux.tar.xz | tar -xJf - upx-4.1.0-arm64_linux/upx -O > upx
          sudo mv upx /bin/
          sudo chmod a+x /bin/upx
        shell: bash

      - name: Run GoReleaser
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          distribution: goreleaser-pro
          args: release --skip-validate --clean
        env:
          GITHUB_TOKEN: ${{ secrets.CI_PAT }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_PRO_KEY }}

  update-core-product-release:
    name: Push new version to core-product-release
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs:
      - release
    uses: calyptia/core-product-release/.github/workflows/update-product-version.yaml@main
    with:
      product: cli
      version: ${{ github.ref_name }}
    secrets:
      token: ${{ secrets.CI_PAT }}
