---
name: CI
on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:
jobs:
  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Unit tests
        run: |
          go test -v -covermode=atomic -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        if: ${{ github.event_name != 'pull_request' }}
        uses: codecov/codecov-action@v3.1.0
        with:
          file: ./coverage.out
          flags: ${{ runner.os }}
          token: ${{ secrets.CODECOV_TOKEN }}

  cloud-e2e:
    name: Run calyptia/cloud-e2e tests
    needs:
      - unit-tests
    strategy:
      fail-fast: true
      matrix:
        k8s-release: ["v1.23.5", "v1.22.7", "v1.21.10"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: CHeckoout cloud-e2e
        uses: actions/checkout@v3
        with:
          repository: calyptia/cloud-e2e
          token: ${{ secrets.CI_PAT }}
          ref: "main"
          path: cloud-e2e

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.CI_USERNAME }}
          password: ${{ secrets.CI_PAT }}

      - name: Extract image metadata
        id: meta-github-image
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=pr
            type=raw,value=main,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Build and load docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          target: production
          platforms: linux/amd64
          load: true
          tags: ${{ steps.meta-github-image.outputs.tags }}
          labels: ${{ steps.meta-github-image.outputs.labels }}

      - id: image-tag
        run: |
          echo "::set-output name=TAG::$(
            echo $FULL_TAG | cut -d ":" -f2
          )"
        env:
          FULL_TAG: ${{ steps.meta-github-image.outputs.tags }}

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.4.0
        with:
          node_image: kindest/node:${{ matrix.k8s-release }}
          cluster_name: kind

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y httpie jq
        shell: bash

      - name: Setup BATS
        uses: mig4/setup-bats@v1
        with:
          bats-version: 1.7.0

      - name: Load required images in the kind cluster
        run: |
          docker pull $CALYPTIA_CLOUD_IMAGE:$CALYPTIA_CLOUD_IMAGE_TAG
          kind load docker-image $CALYPTIA_CLOUD_IMAGE:$CALYPTIA_CLOUD_IMAGE_TAG

          docker pull $CALYPTIA_CORE_IMAGE:$CALYPTIA_CORE_IMAGE_TAG
          kind load docker-image $CALYPTIA_CORE_IMAGE:$CALYPTIA_CORE_IMAGE_TAG
        env:
          CALYPTIA_CLOUD_IMAGE: ghcr.io/calyptia/cloud/all-in-one
          CALYPTIA_CLOUD_IMAGE_TAG: main
          CALYPTIA_CORE_IMAGE: ghcr.io/calyptia/core
          CALYPTIA_CORE_IMAGE_TAG: main

      - name: Setup google credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_environment_variables: true
          create_credentials_file: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Run bats tests
        run: |
          ./run-bats.sh
        shell: bash
        timeout-minutes: 25
        env:
          CALYPTIA_CLOUD_IMAGE: ghcr.io/calyptia/cloud/all-in-one
          CALYPTIA_CLOUD_IMAGE_TAG: main
          CALYPTIA_CORE_IMAGE: ghcr.io/calyptia/core
          CALYPTIA_CORE_IMAGE_TAG: main
          CALYPTIA_CLI_IMAGE: ghcr.io/calyptia/cli
          CALYPTIA_CLI_IMAGE_TAG: ${{ steps.image-tag.outputs.TAG }}
        working-directory: cloud-e2e

  release:
    name: Release the artefacts
    permissions:
      contents: write
      packages: write
    needs:
      - cloud-e2e
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.CI_USERNAME }}
          password: ${{ secrets.CI_PAT }}

      - name: Login to Google Cloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Extract image metadata
        id: meta-github-image
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=main,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=sha,prefix=,suffix=,format=short

      - name: Build and push docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          target: production
          platforms: linux/amd64, linux/arm64
          push: true
          tags: ${{ steps.meta-github-image.outputs.tags }}
          labels: ${{ steps.meta-github-image.outputs.labels }}

      - name: Install Syft for sboms
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        shell: bash

      - name: Import GPG key
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.CALYPTIA_GPG_KEY }}
          passphrase: ${{ secrets.CALYPTIA_GPG_KEY_PASSPHRASE }}

      - name: Run GoReleaser
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: goreleaser/goreleaser-action@v3
        with:
          version: latest
          distribution: goreleaser-pro
          args: release --skip-validate --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.CI_PAT }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_PRO_KEY }}
