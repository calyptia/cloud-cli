// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"context"
	"sync"
)

// Ensure, that CoreInstancePollerMock does implement CoreInstancePoller.
// If this is not the case, regenerate this file with moq.
var _ CoreInstancePoller = &CoreInstancePollerMock{}

// CoreInstancePollerMock is a mock implementation of CoreInstancePoller.
//
//	func TestSomethingThatUsesCoreInstancePoller(t *testing.T) {
//
//		// make and configure a mocked CoreInstancePoller
//		mockedCoreInstancePoller := &CoreInstancePollerMock{
//			ReadyFunc: func(ctx context.Context, environment string, name string) (string, error) {
//				panic("mock out the Ready method")
//			},
//		}
//
//		// use mockedCoreInstancePoller in code that requires CoreInstancePoller
//		// and then make assertions.
//
//	}
type CoreInstancePollerMock struct {
	// ReadyFunc mocks the Ready method.
	ReadyFunc func(ctx context.Context, environment string, name string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Ready holds details about calls to the Ready method.
		Ready []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Environment is the environment argument value.
			Environment string
			// Name is the name argument value.
			Name string
		}
	}
	lockReady sync.RWMutex
}

// Ready calls ReadyFunc.
func (mock *CoreInstancePollerMock) Ready(ctx context.Context, environment string, name string) (string, error) {
	if mock.ReadyFunc == nil {
		panic("CoreInstancePollerMock.ReadyFunc: method is nil but CoreInstancePoller.Ready was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Environment string
		Name        string
	}{
		Ctx:         ctx,
		Environment: environment,
		Name:        name,
	}
	mock.lockReady.Lock()
	mock.calls.Ready = append(mock.calls.Ready, callInfo)
	mock.lockReady.Unlock()
	return mock.ReadyFunc(ctx, environment, name)
}

// ReadyCalls gets all the calls that were made to Ready.
// Check the length with:
//
//	len(mockedCoreInstancePoller.ReadyCalls())
func (mock *CoreInstancePollerMock) ReadyCalls() []struct {
	Ctx         context.Context
	Environment string
	Name        string
} {
	var calls []struct {
		Ctx         context.Context
		Environment string
		Name        string
	}
	mock.lockReady.RLock()
	calls = mock.calls.Ready
	mock.lockReady.RUnlock()
	return calls
}
