// Code generated by ifacemaker; DO NOT EDIT.

package main

import (
	"context"

	"github.com/calyptia/api/types"
)

// Client ...
type Client interface {
	// RegisterAgent within a project.
	// The project in which the agent is registered is parsed from the authorization token.
	// Users are not allowed to register agents.
	RegisterAgent(ctx context.Context, payload types.RegisterAgent) (types.RegisteredAgent, error)
	// Agents from the given project in descending order.
	Agents(ctx context.Context, projectID string, params types.AgentsParams) (types.Agents, error)
	// Agent by ID.
	Agent(ctx context.Context, agentID string) (types.Agent, error)
	// UpdateAgent by its ID.
	// Users are allowed to only update a restricted set of fields (name);
	// while agents are allowed to update the whole configuration.
	UpdateAgent(ctx context.Context, agentID string, payload types.UpdateAgent) error
	// DeleteAgent by its ID.
	DeleteAgent(ctx context.Context, agentID string) error
	// DeleteAgents from a project passing a list of the IDs to be deleted.
	DeleteAgents(ctx context.Context, projectID string, agentIDs ...string) error
	// AgentConfigHistory in descending order.
	// Every time an agent config is updated, a new history entry with the change is created.
	AgentConfigHistory(ctx context.Context, agentID string, params types.AgentConfigHistoryParams) (types.AgentConfigHistory, error)
	// SetUserAgent sets the "User-Agent" header of the client.
	SetUserAgent(s string)
	// SetProjectToken sets the "X-Project-Token" header of the client.
	SetProjectToken(s string)
	// SetAgentToken sets the "X-Agent-Token" header of the client.
	SetAgentToken(s string)
	// SetCoreInstanceToken sets the "X-Aggregator-Token" header of the client.
	SetCoreInstanceToken(s string)
	// CreateClusterObject within a core_instance.
	CreateClusterObject(ctx context.Context, coreInstanceID string, payload types.CreateClusterObject) (types.CreatedClusterObject, error)
	// ClusterObjects in descending order.
	ClusterObjects(ctx context.Context, coreInstanceID string, params types.ClusterObjectParams) (types.ClusterObjects, error)
	// ClusterObject by ID.
	ClusterObject(ctx context.Context, checkID string) (types.ClusterObject, error)
	// UpdateClusterObject by its ID.
	UpdateClusterObject(ctx context.Context, checkID string, opts types.UpdateClusterObject) error
	// DeleteClusterObject by its ID.
	DeleteClusterObject(ctx context.Context, checkID string) error
	CreateConfigSection(ctx context.Context, projectID string, in types.CreateConfigSection) (types.CreatedConfigSection, error)
	ConfigSections(ctx context.Context, projectID string, params types.ConfigSectionsParams) (types.ConfigSections, error)
	ConfigSection(ctx context.Context, configSectionID string) (types.ConfigSection, error)
	UpdateConfigSection(ctx context.Context, configSectionID string, in types.UpdateConfigSection) (types.UpdatedConfigSection, error)
	DeleteConfigSection(ctx context.Context, configSectionID string) error
	UpdateConfigSectionSet(ctx context.Context, pipelineID string, configSectionIDs ...string) error
	// ValidateConfig validates that an already parsed fluentbit or fluentd config is semantically valid.
	// To parse the raw agent config take a look at https://github.com/calyptia/fluent-bit-config-parser.
	ValidateConfig(ctx context.Context, agentType types.AgentType, payload types.ValidatingConfig) (types.ValidatedConfig, error)
	// ValidateConfigV2 validates that an already parsed fluentbit(only) config to check if semantically valid
	// To parse the raw agent config take a look at https://github.com/calyptia/fluent-bit-config-parser.
	ValidateConfigV2(ctx context.Context, payload types.ValidatingConfig) (types.ValidatedConfigV2, error)
	// CreateCoreInstance within a project.
	// The project in which the core instance is created is parser from the authorization token.
	// Users are not allowed to create core instances.
	CreateCoreInstance(ctx context.Context, payload types.CreateCoreInstance) (types.CreatedCoreInstance, error)
	// CoreInstances from a project in descending order.
	CoreInstances(ctx context.Context, projectID string, params types.CoreInstancesParams) (types.CoreInstances, error)
	// CoreInstance by ID.
	CoreInstance(ctx context.Context, instanceID string) (types.CoreInstance, error)
	// UpdateCoreInstance by its ID.
	UpdateCoreInstance(ctx context.Context, instanceID string, payload types.UpdateCoreInstance) error
	// DeleteCoreInstance by its ID.
	DeleteCoreInstance(ctx context.Context, instanceID string) error
	// CoreInstancePing by its ID.
	CoreInstancePing(ctx context.Context, instanceID string) (types.CoreInstancePingResponse, error)
	// DeleteCoreInstances from a project passing a list of the IDs to be deleted.
	DeleteCoreInstances(ctx context.Context, projectID string, instanceIDs ...string) error
	// CreateCoreInstanceCheck within a core_instance.
	CreateCoreInstanceCheck(ctx context.Context, coreInstanceID string, payload types.CreateCoreInstanceCheck) (types.CreatedCoreInstanceCheck, error)
	// CoreInstanceChecks in descending order.
	CoreInstanceChecks(ctx context.Context, coreInstanceID string, params types.CoreInstanceChecksParams) (types.CoreInstanceChecks, error)
	// CoreInstanceCheck by ID.
	CoreInstanceCheck(ctx context.Context, checkID string) (types.CoreInstanceCheck, error)
	// UpdateCoreInstanceCheck by its ID.
	UpdateCoreInstanceCheck(ctx context.Context, checkID string, opts types.UpdateCoreInstanceCheck) error
	// DeleteCoreInstanceCheck by its ID.
	DeleteCoreInstanceCheck(ctx context.Context, checkID string) error
	// CreateEnvironment within a project.
	CreateEnvironment(ctx context.Context, projectID string, payload types.CreateEnvironment) (types.CreatedEnvironment, error)
	// Environments from the given project in descending order.
	Environments(ctx context.Context, projectID string, params types.EnvironmentsParams) (types.Environments, error)
	// UpdateEnvironment by its ID.
	UpdateEnvironment(ctx context.Context, environmentID string, payload types.UpdateEnvironment) error
	// DeleteEnvironment by its ID.
	DeleteEnvironment(ctx context.Context, environmentID string) error
	// CreateIngestCheck within a core_instance.
	CreateIngestCheck(ctx context.Context, coreInstanceID string, payload types.CreateIngestCheck) (types.CreatedIngestCheck, error)
	// IngestChecks in descending order.
	IngestChecks(ctx context.Context, coreInstanceID string, params types.IngestChecksParams) (types.IngestChecks, error)
	// IngestCheck by ID.
	IngestCheck(ctx context.Context, checkID string) (types.IngestCheck, error)
	// UpdateIngestCheck by its ID.
	UpdateIngestCheck(ctx context.Context, checkID string, opts types.UpdateIngestCheck) error
	// DeleteIngestCheck by its ID.
	DeleteIngestCheck(ctx context.Context, checkID string) error
	// CreateInvitation to a project.
	// This will send an invitation email with a link to join to the email address provided.
	CreateInvitation(ctx context.Context, projectID string, payload types.CreateInvitation) error
	// AcceptInvitation to a project.
	// The project to which you join is parsed from the token.
	AcceptInvitation(ctx context.Context, payload types.AcceptInvitation) error
	// Members from a project in descending order.
	Members(ctx context.Context, projectID string, params types.MembersParams) (types.Memberships, error)
	// ProjectMetricsV1 contains an overview of the aggregated metrics for a project.
	// It includes metrics link the amount of records, bytes, and errors per plugin.
	ProjectMetricsV1(ctx context.Context, projectID string, params types.MetricsParams) (types.ProjectMetrics, error)
	// AgentMetricsV1 contains an overview of the aggregated metrics for an agent.
	// It includes metrics link the amount of records, bytes, and errors per plugin.
	AgentMetricsV1(ctx context.Context, agentID string, params types.MetricsParams) (types.AgentMetrics, error)
	// PipelineMetricsV1 contains an overview of the aggregated metrics for a pipeline.
	// It includes metrics link the amount of records, bytes, and errors per plugin.
	PipelineMetricsV1(ctx context.Context, pipelineID string, params types.MetricsParams) (types.AgentMetrics, error)
	// CoreInstanceMetricsV1 contains an overview of the aggregated metrics for a project.
	// It includes metrics link the amount of records, bytes, and errors per plugin.
	CoreInstanceMetricsV1(ctx context.Context, instanceID string, params types.MetricsParams) (types.CoreInstanceMetricsV1, error)
	// PipelinesMetricsV1 get the metrics for a set of pipelineIDs belonging to a core instance (bulk mode).
	PipelinesMetricsV1(ctx context.Context, instanceID string, params types.PipelinesMetricsParams) (types.PipelinesMetrics, error)
	// CoreInstanceMetrics contains an overview of the Core Instance metrics.
	// It includes metrics link the amount of records, bytes, and errors.
	CoreInstanceMetrics(ctx context.Context, coreInstanceID string, params types.MetricsParams) (types.MetricsSummary, error)
	// CoreInstanceMetricsByPlugin contains an overview of the Core Instance metrics.
	// It includes metrics link the amount of records, bytes, and errors per plugin.
	CoreInstanceMetricsByPlugin(ctx context.Context, coreInstanceID string, params types.MetricsParams) (types.MetricsSummaryPlugin, error)
	// CoreInstanceOverTimeMetrics contains Core Instance metrics overtime.
	// It includes metrics link the amount of records, bytes, and errors.
	CoreInstanceOverTimeMetrics(ctx context.Context, coreInstanceID string, params types.MetricsParams) (types.MetricsOverTime, error)
	// CoreInstanceMetricsOverTimeByPlugin contains an overview of the Core Instance metrics.
	// It includes metrics link the amount of records, bytes, and errors per plugin.
	CoreInstanceMetricsOverTimeByPlugin(ctx context.Context, coreInstanceID string, params types.MetricsParams) (types.MetricsOverTimeByPlugin, error)
	// PipelineMetrics contains an overview of the Pipeline metrics.
	// It includes metrics link the amount of records, bytes, and errors.
	PipelineMetrics(ctx context.Context, pipelineID string, params types.MetricsParams) (types.MetricsSummary, error)
	// PipelineMetricsByPlugin contains an overview of the Pipeline metrics.
	// It includes metrics link the amount of records, bytes, and errors per plugin.
	PipelineMetricsByPlugin(ctx context.Context, pipelineID string, params types.MetricsParams) (types.MetricsSummaryPlugin, error)
	// PipelineOverTimeMetrics contains Pipeline metrics overtime.
	// It includes metrics link the amount of records, bytes, and errors.
	PipelineOverTimeMetrics(ctx context.Context, pipelineID string, params types.MetricsParams) (types.MetricsOverTime, error)
	// PipelineMetricsOverTimeByPlugin contains an overview of the Pipeline metrics.
	// It includes metrics link the amount of records, bytes, and errors per plugin.
	PipelineMetricsOverTimeByPlugin(ctx context.Context, pipelineID string, params types.MetricsParams) (types.MetricsOverTimeByPlugin, error)
	// AgentMetrics contains an overview of the Agent metrics.
	// It includes metrics link the amount of records, bytes, and errors.
	AgentMetrics(ctx context.Context, agentID string, params types.MetricsParams) (types.MetricsSummary, error)
	// AgentMetricsByPlugin contains an overview of the Agent metrics.
	// It includes metrics link the amount of records, bytes, and errors per plugin.
	AgentMetricsByPlugin(ctx context.Context, agentID string, params types.MetricsParams) (types.MetricsSummaryPlugin, error)
	// AgentOverTimeMetrics contains Agent metrics overtime.
	// It includes metrics link the amount of records, bytes, and errors.
	AgentOverTimeMetrics(ctx context.Context, agentID string, params types.MetricsParams) (types.MetricsOverTime, error)
	// AgentMetricsOverTimeByPlugin contains an overview of the Agent metrics.
	// It includes metrics link the amount of records, bytes, and errors per plugin.
	AgentMetricsOverTimeByPlugin(ctx context.Context, agentID string, params types.MetricsParams) (types.MetricsOverTimeByPlugin, error)
	// CreatePipeline within a core instance.
	// The pipeline name must be unique within the core instance.
	// The resource profile must exist already. If you don't provide one, it will default to "best-effort-low-resource".
	// Use them to easily deploy configured agents to the core instance.
	CreatePipeline(ctx context.Context, instanceID string, payload types.CreatePipeline) (types.CreatedPipeline, error)
	// Pipelines from a core instance in descending order.
	Pipelines(ctx context.Context, instanceID string, params types.PipelinesParams) (types.Pipelines, error)
	// ProjectPipelines returns the entire set of pipelines from a project.
	ProjectPipelines(ctx context.Context, projectID string, params types.PipelinesParams) (types.Pipelines, error)
	// Pipeline by ID.
	Pipeline(ctx context.Context, pipelineID string, params types.PipelineParams) (types.Pipeline, error)
	// UpdatePipeline by its ID.
	UpdatePipeline(ctx context.Context, pipelineID string, opts types.UpdatePipeline) (types.UpdatedPipeline, error)
	// DeletePipeline by its ID.
	DeletePipeline(ctx context.Context, pipelineID string) error
	// DeletePipelines from a core instance passing a list of the IDs to be deleted.
	DeletePipelines(ctx context.Context, instanceID string, pipelineIDs ...string) error
	// UpdatePipelineClusterObjects update a list of related cluster objects to a pipeline.
	UpdatePipelineClusterObjects(ctx context.Context, pipelineID string, opts types.UpdatePipelineClusterObjects) error
	// DeletePipelineClusterObjects un-relate a list of cluster objects from a pipeline.
	DeletePipelineClusterObjects(ctx context.Context, pipelineID string, clusterObjectIDs ...string) error
	// PipelineClusterObjects returns the entire set of cluster objects associated to a pipeline.
	PipelineClusterObjects(ctx context.Context, pipelineID string, params types.PipelineClusterObjectsParams) (types.ClusterObjects, error)
	// CreatePipelineCheck within a pipeline.
	CreatePipelineCheck(ctx context.Context, pipelineID string, payload types.CreatePipelineCheck) (types.CreatedPipelineCheck, error)
	// PipelineChecks in descending order.
	PipelineChecks(ctx context.Context, pipelineID string, params types.PipelineChecksParams) (types.PipelineChecks, error)
	// PipelineCheck by ID.
	PipelineCheck(ctx context.Context, checkID string) (types.PipelineCheck, error)
	// UpdatePipelineCheck by its ID.
	UpdatePipelineCheck(ctx context.Context, checkID string, opts types.UpdatePipelineCheck) error
	// DeletePipelineCheck by its ID.
	DeletePipelineCheck(ctx context.Context, checkID string) error
	// PipelineConfigHistory in descending order.
	// Every time a pipeline config is updated, a new history entry with the change is created.
	PipelineConfigHistory(ctx context.Context, pipelineID string, params types.PipelineConfigHistoryParams) (types.PipelineConfigHistory, error)
	// CreatePipelineFile within a pipeline.
	// The given name is unique within the pipeline.
	// These files can be referenced by their name within a fluentbit configuration file like so `{{files.thename}}`.
	// Use them to share common stuff like parsers.
	CreatePipelineFile(ctx context.Context, pipelineID string, payload types.CreatePipelineFile) (types.CreatedPipelineFile, error)
	// PipelineFiles in descending order.
	PipelineFiles(ctx context.Context, pipelineID string, params types.PipelineFilesParams) (types.PipelineFiles, error)
	// PipelineFile by ID.
	PipelineFile(ctx context.Context, fileID string) (types.PipelineFile, error)
	// UpdatePipelineFile by its ID.
	UpdatePipelineFile(ctx context.Context, fileID string, opts types.UpdatePipelineFile) error
	// DeletePipelineFile by its ID.
	// The file cannot be deleted if some pipeline config is still referencing it;
	// you must delete the pipeline first if you want to delete the file.
	DeletePipelineFile(ctx context.Context, fileID string) error
	// CreatePipelinePort within a pipeline.
	// Ports can automatically be parsed from a config file, but this action allows you to programatically add more.
	CreatePipelinePort(ctx context.Context, pipelineID string, payload types.CreatePipelinePort) (types.CreatedPipelinePort, error)
	// PipelinePorts in descending order.
	PipelinePorts(ctx context.Context, pipelineID string, params types.PipelinePortsParams) (types.PipelinePorts, error)
	// PipelinePort by ID.
	PipelinePort(ctx context.Context, portID string) (types.PipelinePort, error)
	// UpdatePipelinePort by its ID.
	UpdatePipelinePort(ctx context.Context, portID string, opts types.UpdatePipelinePort) error
	// DeletePipelinePort by its ID.
	DeletePipelinePort(ctx context.Context, portID string) error
	// CreatePipelineSecret within a pipeline.
	// The given name is unique within the pipeline.
	// These secrets can be referenced by their name within a fluentbit configuration file like so `{{secrets.thename}}`.
	// Use them to hide sensible values from your config file.
	CreatePipelineSecret(ctx context.Context, pipelineID string, payload types.CreatePipelineSecret) (types.CreatedPipelineSecret, error)
	// PipelineSecrets in descending order.
	PipelineSecrets(ctx context.Context, pipelineID string, params types.PipelineSecretsParams) (types.PipelineSecrets, error)
	// PipelineSecret by ID.
	PipelineSecret(ctx context.Context, secretID string) (types.PipelineSecret, error)
	// UpdatePipelineSecret by its ID.
	UpdatePipelineSecret(ctx context.Context, secretID string, opts types.UpdatePipelineSecret) error
	// DeletePipelineSecret by its ID.
	// The secret cannot be deleted if some pipeline config is still referencing it;
	// you must delete the pipeline first if you want to delete the secret.
	DeletePipelineSecret(ctx context.Context, secretID string) error
	// PipelineStatusHistory in descending order.
	// Every time a pipeline status is changed, a new history entry with the change is created.
	PipelineStatusHistory(ctx context.Context, pipelineID string, params types.PipelineStatusHistoryParams) (types.PipelineStatusHistory, error)
	CreateProcessingRule(ctx context.Context, in types.CreateProcessingRule) (types.CreatedProcessingRule, error)
	ProcessingRules(ctx context.Context, params types.ProcessingRulesParams) (types.ProcessingRules, error)
	ProcessingRule(ctx context.Context, processingRuleID string) (types.ProcessingRule, error)
	UpdateProcessingRule(ctx context.Context, in types.UpdateProcessingRule) (types.UpdatedProcessingRule, error)
	DeleteProcessingRule(ctx context.Context, processingRuleID string) error
	PreviewProcessingRule(ctx context.Context, in types.PreviewProcessingRule) ([]types.FluentBitLog, error)
	// CreateProject creates a new project.
	// A project is the base unit of work at Calyptia Cloud.
	// You can register agents here, create core instances in which you can deploy an entire set of pipelines, and monitor them.
	// You can even invite other people to the project and have a team.
	CreateProject(ctx context.Context, payload types.CreateProject) (types.CreatedProject, error)
	// Projects you are a member of in descending order.
	Projects(ctx context.Context, params types.ProjectsParams) (types.Projects, error)
	// Project by ID.
	Project(ctx context.Context, projectID string) (types.Project, error)
	// UpdateProject by its ID.
	UpdateProject(ctx context.Context, projectID string, opts types.UpdateProject) error
	// CreateResourceProfile within a core instance.
	// A resource profile is a specification of a resource used during the deployment of a pipeline.
	// By default, when you setup a core instance, Calyptia Cloud will generate 3 resource profiles for you:
	// - high-performance-guaranteed-delivery.
	// - high-performance-optimal-throughput.
	// - best-effort-low-resource.
	CreateResourceProfile(ctx context.Context, instanceID string, payload types.CreateResourceProfile) (types.CreatedResourceProfile, error)
	// ResourceProfiles from a core instance in descending order.
	ResourceProfiles(ctx context.Context, instanceID string, params types.ResourceProfilesParams) (types.ResourceProfiles, error)
	// ResourceProfile by ID.
	ResourceProfile(ctx context.Context, resourceProfileID string) (types.ResourceProfile, error)
	// UpdateResourceProfile by its ID.
	UpdateResourceProfile(ctx context.Context, resourceProfileID string, opts types.UpdateResourceProfile) error
	// DeleteResourceProfile by its ID.
	// The profile cannot be deleted if some pipeline is still referencing it;
	// you must delete the pipeline first if you want to delete the profile.
	DeleteResourceProfile(ctx context.Context, resourceProfileID string) error
	// CreateToken within a project.
	// These tokens are to authorize other applications to access the project.
	// For example:
	// - an agent might use it to register itself to the project.
	// - you might create a new core instance in the project using the Calyptia CLI.
	// - you might use it within the Calyptia CLI to grant access to your project.
	CreateToken(ctx context.Context, projectID string, payload types.CreateToken) (types.Token, error)
	// Tokens from a project.
	Tokens(ctx context.Context, projectID string, params types.TokensParams) (types.Tokens, error)
	// Token by ID.
	Token(ctx context.Context, tokenID string) (types.Token, error)
	// UpdateToken by its ID.
	UpdateToken(ctx context.Context, tokenID string, opts types.UpdateToken) error
	// DeleteToken by its ID.
	// Once deleted, any application that might has been using it, will stop working.
	DeleteToken(ctx context.Context, tokenID string) error
	// CreateTraceSession within a pipeline.
	// A trace session can receive records from fluent-bit's tracing sidecar
	// while this is enabled (see its lifespan).
	// Only one trace session can be active at a time
	// you can either terminate it and create a new one, or update the existing one
	// and extend its lifespan.
	CreateTraceSession(ctx context.Context, pipelineID string, in types.CreateTraceSession) (types.CreatedTraceSession, error)
	// TraceSessions from a pipeline.
	// With backward pagination, the list is sorted by createdAt in descending order.
	TraceSessions(ctx context.Context, pipelineID string, params types.TraceSessionsParams) (types.TraceSessions, error)
	// TraceSession by ID. This can be still active or not.
	TraceSession(ctx context.Context, sessionID string) (types.TraceSession, error)
	// ActiveTraceSession from a pipeline if any.
	ActiveTraceSession(ctx context.Context, pipelineID string) (types.TraceSession, error)
	// UpdateTraceSession list of plugins to trace and/or lifespan.
	// The session must still be active.
	UpdateTraceSession(ctx context.Context, sessionID string, in types.UpdateTraceSession) (types.UpdatedTraceSession, error)
	// TerminateActiveTraceSession terminates the current active trace session
	// on the pipeline.
	TerminateActiveTraceSession(ctx context.Context, pipelineID string) (types.TerminatedTraceSession, error)
	// CreateTraceRecord on the current active trace session on the pipeline.
	// This endpoint is meant to be used by fluent-bit's tracing sidecar.
	CreateTraceRecord(ctx context.Context, pipelineID string, in types.CreateTraceRecord) (types.CreatedTraceRecord, error)
	// TraceRecords from a trace session.
	// With backward pagination, the list is sorted by createdAt in descending order.
	TraceRecords(ctx context.Context, sessionID string, params types.TraceRecordsParams) (types.TraceRecords, error)
	// SendVerificationEmail sends a verification email to the user.
	// When a new user registers within Calyptia Cloud with password, it should receive a verification email,
	// in the case it didn't receive it, or the email expired already,
	// use this endpoint to request a new one.
	SendVerificationEmail(ctx context.Context) error
}
