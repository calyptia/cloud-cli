// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"context"
	"sync"

	cloud "github.com/calyptia/api/types"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
// 	func TestSomethingThatUsesClient(t *testing.T) {
//
// 		// make and configure a mocked Client
// 		mockedClient := &ClientMock{
// 			AgentFunc: func(ctx context.Context, agentID string) (cloud.Agent, error) {
// 				panic("mock out the Agent method")
// 			},
// 			AgentConfigHistoryFunc: func(ctx context.Context, agentID string, params cloud.AgentConfigHistoryParams) (cloud.AgentConfigHistory, error) {
// 				panic("mock out the AgentConfigHistory method")
// 			},
// 			AgentMetricsFunc: func(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.AgentMetrics, error) {
// 				panic("mock out the AgentMetrics method")
// 			},
// 			AgentsFunc: func(ctx context.Context, projectID string, params cloud.AgentsParams) (cloud.Agents, error) {
// 				panic("mock out the Agents method")
// 			},
// 			AggregatorFunc: func(ctx context.Context, aggregatorID string) (cloud.Aggregator, error) {
// 				panic("mock out the Aggregator method")
// 			},
// 			AggregatorsFunc: func(ctx context.Context, projectID string, params cloud.AggregatorsParams) (cloud.Aggregators, error) {
// 				panic("mock out the Aggregators method")
// 			},
// 			CreateAggregatorFunc: func(ctx context.Context, payload cloud.CreateAggregator) (cloud.CreatedAggregator, error) {
// 				panic("mock out the CreateAggregator method")
// 			},
// 			CreateInvitationFunc: func(ctx context.Context, projectID string, payload cloud.CreateInvitation) error {
// 				panic("mock out the CreateInvitation method")
// 			},
// 			CreatePipelineFunc: func(ctx context.Context, aggregatorID string, payload cloud.CreatePipeline) (cloud.CreatedPipeline, error) {
// 				panic("mock out the CreatePipeline method")
// 			},
// 			CreatePipelineFileFunc: func(ctx context.Context, pipelineID string, payload cloud.CreatePipelineFile) (cloud.CreatedPipelineFile, error) {
// 				panic("mock out the CreatePipelineFile method")
// 			},
// 			CreatePipelinePortFunc: func(ctx context.Context, pipelineID string, payload cloud.CreatePipelinePort) (cloud.CreatedPipelinePort, error) {
// 				panic("mock out the CreatePipelinePort method")
// 			},
// 			CreatePipelineSecretFunc: func(ctx context.Context, pipelineID string, payload cloud.CreatePipelineSecret) (cloud.CreatedPipelineSecret, error) {
// 				panic("mock out the CreatePipelineSecret method")
// 			},
// 			CreateResourceProfileFunc: func(ctx context.Context, aggregatorID string, payload cloud.CreateResourceProfile) (cloud.CreatedResourceProfile, error) {
// 				panic("mock out the CreateResourceProfile method")
// 			},
// 			DeleteAgentFunc: func(ctx context.Context, agentID string) error {
// 				panic("mock out the DeleteAgent method")
// 			},
// 			DeleteAggregatorFunc: func(ctx context.Context, aggregatorID string) error {
// 				panic("mock out the DeleteAggregator method")
// 			},
// 			DeletePipelineFunc: func(ctx context.Context, pipelineID string) error {
// 				panic("mock out the DeletePipeline method")
// 			},
// 			DeletePipelineFileFunc: func(ctx context.Context, fileID string) error {
// 				panic("mock out the DeletePipelineFile method")
// 			},
// 			DeletePipelinePortFunc: func(ctx context.Context, portID string) error {
// 				panic("mock out the DeletePipelinePort method")
// 			},
// 			DeletePipelineSecretFunc: func(ctx context.Context, secretID string) error {
// 				panic("mock out the DeletePipelineSecret method")
// 			},
// 			DeleteResourceProfileFunc: func(ctx context.Context, resourceProfileID string) error {
// 				panic("mock out the DeleteResourceProfile method")
// 			},
// 			DeleteTokenFunc: func(ctx context.Context, tokenID string) error {
// 				panic("mock out the DeleteToken method")
// 			},
// 			EnvironmentsFunc: func(ctx context.Context, projectID string, params cloud.EnvironmentsParams) (cloud.Environments, error) {
// 				panic("mock out the Environments method")
// 			},
// 			MembersFunc: func(ctx context.Context, projectID string, params cloud.MembersParams) (cloud.Memberships, error) {
// 				panic("mock out the Members method")
// 			},
// 			PipelineFunc: func(ctx context.Context, pipelineID string, params cloud.PipelineParams) (cloud.Pipeline, error) {
// 				panic("mock out the Pipeline method")
// 			},
// 			PipelineConfigHistoryFunc: func(ctx context.Context, pipelineID string, params cloud.PipelineConfigHistoryParams) (cloud.PipelineConfigHistory, error) {
// 				panic("mock out the PipelineConfigHistory method")
// 			},
// 			PipelineFileFunc: func(ctx context.Context, fileID string) (cloud.PipelineFile, error) {
// 				panic("mock out the PipelineFile method")
// 			},
// 			PipelineFilesFunc: func(ctx context.Context, pipelineID string, params cloud.PipelineFilesParams) (cloud.PipelineFiles, error) {
// 				panic("mock out the PipelineFiles method")
// 			},
// 			PipelineMetricsFunc: func(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.AgentMetrics, error) {
// 				panic("mock out the PipelineMetrics method")
// 			},
// 			PipelinePortFunc: func(ctx context.Context, portID string) (cloud.PipelinePort, error) {
// 				panic("mock out the PipelinePort method")
// 			},
// 			PipelinePortsFunc: func(ctx context.Context, pipelineID string, params cloud.PipelinePortsParams) (cloud.PipelinePorts, error) {
// 				panic("mock out the PipelinePorts method")
// 			},
// 			PipelineSecretFunc: func(ctx context.Context, secretID string) (cloud.PipelineSecret, error) {
// 				panic("mock out the PipelineSecret method")
// 			},
// 			PipelineSecretsFunc: func(ctx context.Context, pipelineID string, params cloud.PipelineSecretsParams) (cloud.PipelineSecrets, error) {
// 				panic("mock out the PipelineSecrets method")
// 			},
// 			PipelineStatusHistoryFunc: func(ctx context.Context, pipelineID string, params cloud.PipelineStatusHistoryParams) (cloud.PipelineStatusHistory, error) {
// 				panic("mock out the PipelineStatusHistory method")
// 			},
// 			PipelinesFunc: func(ctx context.Context, aggregatorID string, params cloud.PipelinesParams) (cloud.Pipelines, error) {
// 				panic("mock out the Pipelines method")
// 			},
// 			ProjectFunc: func(ctx context.Context, projectID string) (cloud.Project, error) {
// 				panic("mock out the Project method")
// 			},
// 			ProjectMetricsFunc: func(ctx context.Context, projectID string, params cloud.MetricsParams) (cloud.ProjectMetrics, error) {
// 				panic("mock out the ProjectMetrics method")
// 			},
// 			ProjectPipelinesFunc: func(ctx context.Context, projectID string, params cloud.PipelinesParams) (cloud.Pipelines, error) {
// 				panic("mock out the ProjectPipelines method")
// 			},
// 			RegisterAgentFunc: func(ctx context.Context, payload cloud.RegisterAgent) (cloud.RegisteredAgent, error) {
// 				panic("mock out the RegisterAgent method")
// 			},
// 			ResourceProfileFunc: func(ctx context.Context, resourceProfileID string) (cloud.ResourceProfile, error) {
// 				panic("mock out the ResourceProfile method")
// 			},
// 			ResourceProfilesFunc: func(ctx context.Context, aggregatorID string, params cloud.ResourceProfilesParams) (cloud.ResourceProfiles, error) {
// 				panic("mock out the ResourceProfiles method")
// 			},
// 			TokenFunc: func(ctx context.Context, tokenID string) (cloud.Token, error) {
// 				panic("mock out the Token method")
// 			},
// 			UpdateAgentFunc: func(ctx context.Context, agentID string, payload cloud.UpdateAgent) error {
// 				panic("mock out the UpdateAgent method")
// 			},
// 			UpdateAggregatorFunc: func(ctx context.Context, aggregatorID string, payload cloud.UpdateAggregator) error {
// 				panic("mock out the UpdateAggregator method")
// 			},
// 			UpdatePipelineFunc: func(ctx context.Context, pipelineID string, opts cloud.UpdatePipeline) (cloud.UpdatedPipeline, error) {
// 				panic("mock out the UpdatePipeline method")
// 			},
// 			UpdatePipelineFileFunc: func(ctx context.Context, fileID string, opts cloud.UpdatePipelineFile) error {
// 				panic("mock out the UpdatePipelineFile method")
// 			},
// 			UpdatePipelinePortFunc: func(ctx context.Context, portID string, opts cloud.UpdatePipelinePort) error {
// 				panic("mock out the UpdatePipelinePort method")
// 			},
// 			UpdatePipelineSecretFunc: func(ctx context.Context, secretID string, opts cloud.UpdatePipelineSecret) error {
// 				panic("mock out the UpdatePipelineSecret method")
// 			},
// 			UpdateProjectFunc: func(ctx context.Context, projectID string, opts cloud.UpdateProject) error {
// 				panic("mock out the UpdateProject method")
// 			},
// 			UpdateResourceProfileFunc: func(ctx context.Context, resourceProfileID string, opts cloud.UpdateResourceProfile) error {
// 				panic("mock out the UpdateResourceProfile method")
// 			},
// 			UpdateTokenFunc: func(ctx context.Context, tokenID string, opts cloud.UpdateToken) error {
// 				panic("mock out the UpdateToken method")
// 			},
// 			ValidateConfigFunc: func(ctx context.Context, agentType cloud.AgentType, payload cloud.ValidatingConfig) (cloud.ValidatedConfig, error) {
// 				panic("mock out the ValidateConfig method")
// 			},
// 		}
//
// 		// use mockedClient in code that requires Client
// 		// and then make assertions.
//
// 	}
type ClientMock struct {
	// AgentFunc mocks the Agent method.
	AgentFunc func(ctx context.Context, agentID string) (cloud.Agent, error)

	// AgentConfigHistoryFunc mocks the AgentConfigHistory method.
	AgentConfigHistoryFunc func(ctx context.Context, agentID string, params cloud.AgentConfigHistoryParams) (cloud.AgentConfigHistory, error)

	// AgentMetricsFunc mocks the AgentMetrics method.
	AgentMetricsFunc func(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.AgentMetrics, error)

	// AgentsFunc mocks the Agents method.
	AgentsFunc func(ctx context.Context, projectID string, params cloud.AgentsParams) (cloud.Agents, error)

	// AggregatorFunc mocks the Aggregator method.
	AggregatorFunc func(ctx context.Context, aggregatorID string) (cloud.Aggregator, error)

	// AggregatorsFunc mocks the Aggregators method.
	AggregatorsFunc func(ctx context.Context, projectID string, params cloud.AggregatorsParams) (cloud.Aggregators, error)

	// CreateAggregatorFunc mocks the CreateAggregator method.
	CreateAggregatorFunc func(ctx context.Context, payload cloud.CreateAggregator) (cloud.CreatedAggregator, error)

	// CreateInvitationFunc mocks the CreateInvitation method.
	CreateInvitationFunc func(ctx context.Context, projectID string, payload cloud.CreateInvitation) error

	// CreatePipelineFunc mocks the CreatePipeline method.
	CreatePipelineFunc func(ctx context.Context, aggregatorID string, payload cloud.CreatePipeline) (cloud.CreatedPipeline, error)

	// CreatePipelineFileFunc mocks the CreatePipelineFile method.
	CreatePipelineFileFunc func(ctx context.Context, pipelineID string, payload cloud.CreatePipelineFile) (cloud.CreatedPipelineFile, error)

	// CreatePipelinePortFunc mocks the CreatePipelinePort method.
	CreatePipelinePortFunc func(ctx context.Context, pipelineID string, payload cloud.CreatePipelinePort) (cloud.CreatedPipelinePort, error)

	// CreatePipelineSecretFunc mocks the CreatePipelineSecret method.
	CreatePipelineSecretFunc func(ctx context.Context, pipelineID string, payload cloud.CreatePipelineSecret) (cloud.CreatedPipelineSecret, error)

	// CreateResourceProfileFunc mocks the CreateResourceProfile method.
	CreateResourceProfileFunc func(ctx context.Context, aggregatorID string, payload cloud.CreateResourceProfile) (cloud.CreatedResourceProfile, error)

	// DeleteAgentFunc mocks the DeleteAgent method.
	DeleteAgentFunc func(ctx context.Context, agentID string) error

	// DeleteAggregatorFunc mocks the DeleteAggregator method.
	DeleteAggregatorFunc func(ctx context.Context, aggregatorID string) error

	// DeletePipelineFunc mocks the DeletePipeline method.
	DeletePipelineFunc func(ctx context.Context, pipelineID string) error

	// DeletePipelineFileFunc mocks the DeletePipelineFile method.
	DeletePipelineFileFunc func(ctx context.Context, fileID string) error

	// DeletePipelinePortFunc mocks the DeletePipelinePort method.
	DeletePipelinePortFunc func(ctx context.Context, portID string) error

	// DeletePipelineSecretFunc mocks the DeletePipelineSecret method.
	DeletePipelineSecretFunc func(ctx context.Context, secretID string) error

	// DeleteResourceProfileFunc mocks the DeleteResourceProfile method.
	DeleteResourceProfileFunc func(ctx context.Context, resourceProfileID string) error

	// DeleteTokenFunc mocks the DeleteToken method.
	DeleteTokenFunc func(ctx context.Context, tokenID string) error

	// EnvironmentsFunc mocks the Environments method.
	EnvironmentsFunc func(ctx context.Context, projectID string, params cloud.EnvironmentsParams) (cloud.Environments, error)

	// MembersFunc mocks the Members method.
	MembersFunc func(ctx context.Context, projectID string, params cloud.MembersParams) (cloud.Memberships, error)

	// PipelineFunc mocks the Pipeline method.
	PipelineFunc func(ctx context.Context, pipelineID string, params cloud.PipelineParams) (cloud.Pipeline, error)

	// PipelineConfigHistoryFunc mocks the PipelineConfigHistory method.
	PipelineConfigHistoryFunc func(ctx context.Context, pipelineID string, params cloud.PipelineConfigHistoryParams) (cloud.PipelineConfigHistory, error)

	// PipelineFileFunc mocks the PipelineFile method.
	PipelineFileFunc func(ctx context.Context, fileID string) (cloud.PipelineFile, error)

	// PipelineFilesFunc mocks the PipelineFiles method.
	PipelineFilesFunc func(ctx context.Context, pipelineID string, params cloud.PipelineFilesParams) (cloud.PipelineFiles, error)

	// PipelineMetricsFunc mocks the PipelineMetrics method.
	PipelineMetricsFunc func(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.AgentMetrics, error)

	// PipelinePortFunc mocks the PipelinePort method.
	PipelinePortFunc func(ctx context.Context, portID string) (cloud.PipelinePort, error)

	// PipelinePortsFunc mocks the PipelinePorts method.
	PipelinePortsFunc func(ctx context.Context, pipelineID string, params cloud.PipelinePortsParams) (cloud.PipelinePorts, error)

	// PipelineSecretFunc mocks the PipelineSecret method.
	PipelineSecretFunc func(ctx context.Context, secretID string) (cloud.PipelineSecret, error)

	// PipelineSecretsFunc mocks the PipelineSecrets method.
	PipelineSecretsFunc func(ctx context.Context, pipelineID string, params cloud.PipelineSecretsParams) (cloud.PipelineSecrets, error)

	// PipelineStatusHistoryFunc mocks the PipelineStatusHistory method.
	PipelineStatusHistoryFunc func(ctx context.Context, pipelineID string, params cloud.PipelineStatusHistoryParams) (cloud.PipelineStatusHistory, error)

	// PipelinesFunc mocks the Pipelines method.
	PipelinesFunc func(ctx context.Context, aggregatorID string, params cloud.PipelinesParams) (cloud.Pipelines, error)

	// ProjectFunc mocks the Project method.
	ProjectFunc func(ctx context.Context, projectID string) (cloud.Project, error)

	// ProjectMetricsFunc mocks the ProjectMetrics method.
	ProjectMetricsFunc func(ctx context.Context, projectID string, params cloud.MetricsParams) (cloud.ProjectMetrics, error)

	// ProjectPipelinesFunc mocks the ProjectPipelines method.
	ProjectPipelinesFunc func(ctx context.Context, projectID string, params cloud.PipelinesParams) (cloud.Pipelines, error)

	// RegisterAgentFunc mocks the RegisterAgent method.
	RegisterAgentFunc func(ctx context.Context, payload cloud.RegisterAgent) (cloud.RegisteredAgent, error)

	// ResourceProfileFunc mocks the ResourceProfile method.
	ResourceProfileFunc func(ctx context.Context, resourceProfileID string) (cloud.ResourceProfile, error)

	// ResourceProfilesFunc mocks the ResourceProfiles method.
	ResourceProfilesFunc func(ctx context.Context, aggregatorID string, params cloud.ResourceProfilesParams) (cloud.ResourceProfiles, error)

	// TokenFunc mocks the Token method.
	TokenFunc func(ctx context.Context, tokenID string) (cloud.Token, error)

	// UpdateAgentFunc mocks the UpdateAgent method.
	UpdateAgentFunc func(ctx context.Context, agentID string, payload cloud.UpdateAgent) error

	// UpdateAggregatorFunc mocks the UpdateAggregator method.
	UpdateAggregatorFunc func(ctx context.Context, aggregatorID string, payload cloud.UpdateAggregator) error

	// UpdatePipelineFunc mocks the UpdatePipeline method.
	UpdatePipelineFunc func(ctx context.Context, pipelineID string, opts cloud.UpdatePipeline) (cloud.UpdatedPipeline, error)

	// UpdatePipelineFileFunc mocks the UpdatePipelineFile method.
	UpdatePipelineFileFunc func(ctx context.Context, fileID string, opts cloud.UpdatePipelineFile) error

	// UpdatePipelinePortFunc mocks the UpdatePipelinePort method.
	UpdatePipelinePortFunc func(ctx context.Context, portID string, opts cloud.UpdatePipelinePort) error

	// UpdatePipelineSecretFunc mocks the UpdatePipelineSecret method.
	UpdatePipelineSecretFunc func(ctx context.Context, secretID string, opts cloud.UpdatePipelineSecret) error

	// UpdateProjectFunc mocks the UpdateProject method.
	UpdateProjectFunc func(ctx context.Context, projectID string, opts cloud.UpdateProject) error

	// UpdateResourceProfileFunc mocks the UpdateResourceProfile method.
	UpdateResourceProfileFunc func(ctx context.Context, resourceProfileID string, opts cloud.UpdateResourceProfile) error

	// UpdateTokenFunc mocks the UpdateToken method.
	UpdateTokenFunc func(ctx context.Context, tokenID string, opts cloud.UpdateToken) error

	// ValidateConfigFunc mocks the ValidateConfig method.
	ValidateConfigFunc func(ctx context.Context, agentType cloud.AgentType, payload cloud.ValidatingConfig) (cloud.ValidatedConfig, error)

	// calls tracks calls to the methods.
	calls struct {
		// Agent holds details about calls to the Agent method.
		Agent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
		}
		// AgentConfigHistory holds details about calls to the AgentConfigHistory method.
		AgentConfigHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
			// Params is the params argument value.
			Params cloud.AgentConfigHistoryParams
		}
		// AgentMetrics holds details about calls to the AgentMetrics method.
		AgentMetrics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// Agents holds details about calls to the Agents method.
		Agents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Params is the params argument value.
			Params cloud.AgentsParams
		}
		// Aggregator holds details about calls to the Aggregator method.
		Aggregator []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AggregatorID is the aggregatorID argument value.
			AggregatorID string
		}
		// Aggregators holds details about calls to the Aggregators method.
		Aggregators []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Params is the params argument value.
			Params cloud.AggregatorsParams
		}
		// CreateAggregator holds details about calls to the CreateAggregator method.
		CreateAggregator []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Payload is the payload argument value.
			Payload cloud.CreateAggregator
		}
		// CreateInvitation holds details about calls to the CreateInvitation method.
		CreateInvitation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Payload is the payload argument value.
			Payload cloud.CreateInvitation
		}
		// CreatePipeline holds details about calls to the CreatePipeline method.
		CreatePipeline []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AggregatorID is the aggregatorID argument value.
			AggregatorID string
			// Payload is the payload argument value.
			Payload cloud.CreatePipeline
		}
		// CreatePipelineFile holds details about calls to the CreatePipelineFile method.
		CreatePipelineFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Payload is the payload argument value.
			Payload cloud.CreatePipelineFile
		}
		// CreatePipelinePort holds details about calls to the CreatePipelinePort method.
		CreatePipelinePort []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Payload is the payload argument value.
			Payload cloud.CreatePipelinePort
		}
		// CreatePipelineSecret holds details about calls to the CreatePipelineSecret method.
		CreatePipelineSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Payload is the payload argument value.
			Payload cloud.CreatePipelineSecret
		}
		// CreateResourceProfile holds details about calls to the CreateResourceProfile method.
		CreateResourceProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AggregatorID is the aggregatorID argument value.
			AggregatorID string
			// Payload is the payload argument value.
			Payload cloud.CreateResourceProfile
		}
		// DeleteAgent holds details about calls to the DeleteAgent method.
		DeleteAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
		}
		// DeleteAggregator holds details about calls to the DeleteAggregator method.
		DeleteAggregator []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AggregatorID is the aggregatorID argument value.
			AggregatorID string
		}
		// DeletePipeline holds details about calls to the DeletePipeline method.
		DeletePipeline []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
		}
		// DeletePipelineFile holds details about calls to the DeletePipelineFile method.
		DeletePipelineFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileID is the fileID argument value.
			FileID string
		}
		// DeletePipelinePort holds details about calls to the DeletePipelinePort method.
		DeletePipelinePort []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PortID is the portID argument value.
			PortID string
		}
		// DeletePipelineSecret holds details about calls to the DeletePipelineSecret method.
		DeletePipelineSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SecretID is the secretID argument value.
			SecretID string
		}
		// DeleteResourceProfile holds details about calls to the DeleteResourceProfile method.
		DeleteResourceProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ResourceProfileID is the resourceProfileID argument value.
			ResourceProfileID string
		}
		// DeleteToken holds details about calls to the DeleteToken method.
		DeleteToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TokenID is the tokenID argument value.
			TokenID string
		}
		// Environments holds details about calls to the Environments method.
		Environments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Params is the params argument value.
			Params cloud.EnvironmentsParams
		}
		// Members holds details about calls to the Members method.
		Members []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Params is the params argument value.
			Params cloud.MembersParams
		}
		// Pipeline holds details about calls to the Pipeline method.
		Pipeline []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.PipelineParams
		}
		// PipelineConfigHistory holds details about calls to the PipelineConfigHistory method.
		PipelineConfigHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.PipelineConfigHistoryParams
		}
		// PipelineFile holds details about calls to the PipelineFile method.
		PipelineFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileID is the fileID argument value.
			FileID string
		}
		// PipelineFiles holds details about calls to the PipelineFiles method.
		PipelineFiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.PipelineFilesParams
		}
		// PipelineMetrics holds details about calls to the PipelineMetrics method.
		PipelineMetrics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// PipelinePort holds details about calls to the PipelinePort method.
		PipelinePort []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PortID is the portID argument value.
			PortID string
		}
		// PipelinePorts holds details about calls to the PipelinePorts method.
		PipelinePorts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.PipelinePortsParams
		}
		// PipelineSecret holds details about calls to the PipelineSecret method.
		PipelineSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SecretID is the secretID argument value.
			SecretID string
		}
		// PipelineSecrets holds details about calls to the PipelineSecrets method.
		PipelineSecrets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.PipelineSecretsParams
		}
		// PipelineStatusHistory holds details about calls to the PipelineStatusHistory method.
		PipelineStatusHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.PipelineStatusHistoryParams
		}
		// Pipelines holds details about calls to the Pipelines method.
		Pipelines []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AggregatorID is the aggregatorID argument value.
			AggregatorID string
			// Params is the params argument value.
			Params cloud.PipelinesParams
		}
		// Project holds details about calls to the Project method.
		Project []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
		}
		// ProjectMetrics holds details about calls to the ProjectMetrics method.
		ProjectMetrics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// ProjectPipelines holds details about calls to the ProjectPipelines method.
		ProjectPipelines []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Params is the params argument value.
			Params cloud.PipelinesParams
		}
		// RegisterAgent holds details about calls to the RegisterAgent method.
		RegisterAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Payload is the payload argument value.
			Payload cloud.RegisterAgent
		}
		// ResourceProfile holds details about calls to the ResourceProfile method.
		ResourceProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ResourceProfileID is the resourceProfileID argument value.
			ResourceProfileID string
		}
		// ResourceProfiles holds details about calls to the ResourceProfiles method.
		ResourceProfiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AggregatorID is the aggregatorID argument value.
			AggregatorID string
			// Params is the params argument value.
			Params cloud.ResourceProfilesParams
		}
		// Token holds details about calls to the Token method.
		Token []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TokenID is the tokenID argument value.
			TokenID string
		}
		// UpdateAgent holds details about calls to the UpdateAgent method.
		UpdateAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
			// Payload is the payload argument value.
			Payload cloud.UpdateAgent
		}
		// UpdateAggregator holds details about calls to the UpdateAggregator method.
		UpdateAggregator []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AggregatorID is the aggregatorID argument value.
			AggregatorID string
			// Payload is the payload argument value.
			Payload cloud.UpdateAggregator
		}
		// UpdatePipeline holds details about calls to the UpdatePipeline method.
		UpdatePipeline []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Opts is the opts argument value.
			Opts cloud.UpdatePipeline
		}
		// UpdatePipelineFile holds details about calls to the UpdatePipelineFile method.
		UpdatePipelineFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileID is the fileID argument value.
			FileID string
			// Opts is the opts argument value.
			Opts cloud.UpdatePipelineFile
		}
		// UpdatePipelinePort holds details about calls to the UpdatePipelinePort method.
		UpdatePipelinePort []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PortID is the portID argument value.
			PortID string
			// Opts is the opts argument value.
			Opts cloud.UpdatePipelinePort
		}
		// UpdatePipelineSecret holds details about calls to the UpdatePipelineSecret method.
		UpdatePipelineSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SecretID is the secretID argument value.
			SecretID string
			// Opts is the opts argument value.
			Opts cloud.UpdatePipelineSecret
		}
		// UpdateProject holds details about calls to the UpdateProject method.
		UpdateProject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Opts is the opts argument value.
			Opts cloud.UpdateProject
		}
		// UpdateResourceProfile holds details about calls to the UpdateResourceProfile method.
		UpdateResourceProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ResourceProfileID is the resourceProfileID argument value.
			ResourceProfileID string
			// Opts is the opts argument value.
			Opts cloud.UpdateResourceProfile
		}
		// UpdateToken holds details about calls to the UpdateToken method.
		UpdateToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TokenID is the tokenID argument value.
			TokenID string
			// Opts is the opts argument value.
			Opts cloud.UpdateToken
		}
		// ValidateConfig holds details about calls to the ValidateConfig method.
		ValidateConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentType is the agentType argument value.
			AgentType cloud.AgentType
			// Payload is the payload argument value.
			Payload cloud.ValidatingConfig
		}
	}
	lockAgent                 sync.RWMutex
	lockAgentConfigHistory    sync.RWMutex
	lockAgentMetrics          sync.RWMutex
	lockAgents                sync.RWMutex
	lockAggregator            sync.RWMutex
	lockAggregators           sync.RWMutex
	lockCreateAggregator      sync.RWMutex
	lockCreateInvitation      sync.RWMutex
	lockCreatePipeline        sync.RWMutex
	lockCreatePipelineFile    sync.RWMutex
	lockCreatePipelinePort    sync.RWMutex
	lockCreatePipelineSecret  sync.RWMutex
	lockCreateResourceProfile sync.RWMutex
	lockDeleteAgent           sync.RWMutex
	lockDeleteAggregator      sync.RWMutex
	lockDeletePipeline        sync.RWMutex
	lockDeletePipelineFile    sync.RWMutex
	lockDeletePipelinePort    sync.RWMutex
	lockDeletePipelineSecret  sync.RWMutex
	lockDeleteResourceProfile sync.RWMutex
	lockDeleteToken           sync.RWMutex
	lockEnvironments          sync.RWMutex
	lockMembers               sync.RWMutex
	lockPipeline              sync.RWMutex
	lockPipelineConfigHistory sync.RWMutex
	lockPipelineFile          sync.RWMutex
	lockPipelineFiles         sync.RWMutex
	lockPipelineMetrics       sync.RWMutex
	lockPipelinePort          sync.RWMutex
	lockPipelinePorts         sync.RWMutex
	lockPipelineSecret        sync.RWMutex
	lockPipelineSecrets       sync.RWMutex
	lockPipelineStatusHistory sync.RWMutex
	lockPipelines             sync.RWMutex
	lockProject               sync.RWMutex
	lockProjectMetrics        sync.RWMutex
	lockProjectPipelines      sync.RWMutex
	lockRegisterAgent         sync.RWMutex
	lockResourceProfile       sync.RWMutex
	lockResourceProfiles      sync.RWMutex
	lockToken                 sync.RWMutex
	lockUpdateAgent           sync.RWMutex
	lockUpdateAggregator      sync.RWMutex
	lockUpdatePipeline        sync.RWMutex
	lockUpdatePipelineFile    sync.RWMutex
	lockUpdatePipelinePort    sync.RWMutex
	lockUpdatePipelineSecret  sync.RWMutex
	lockUpdateProject         sync.RWMutex
	lockUpdateResourceProfile sync.RWMutex
	lockUpdateToken           sync.RWMutex
	lockValidateConfig        sync.RWMutex
}

// Agent calls AgentFunc.
func (mock *ClientMock) Agent(ctx context.Context, agentID string) (cloud.Agent, error) {
	callInfo := struct {
		Ctx     context.Context
		AgentID string
	}{
		Ctx:     ctx,
		AgentID: agentID,
	}
	mock.lockAgent.Lock()
	mock.calls.Agent = append(mock.calls.Agent, callInfo)
	mock.lockAgent.Unlock()
	if mock.AgentFunc == nil {
		var (
			agentOut cloud.Agent
			errOut   error
		)
		return agentOut, errOut
	}
	return mock.AgentFunc(ctx, agentID)
}

// AgentCalls gets all the calls that were made to Agent.
// Check the length with:
//     len(mockedClient.AgentCalls())
func (mock *ClientMock) AgentCalls() []struct {
	Ctx     context.Context
	AgentID string
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
	}
	mock.lockAgent.RLock()
	calls = mock.calls.Agent
	mock.lockAgent.RUnlock()
	return calls
}

// AgentConfigHistory calls AgentConfigHistoryFunc.
func (mock *ClientMock) AgentConfigHistory(ctx context.Context, agentID string, params cloud.AgentConfigHistoryParams) (cloud.AgentConfigHistory, error) {
	callInfo := struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.AgentConfigHistoryParams
	}{
		Ctx:     ctx,
		AgentID: agentID,
		Params:  params,
	}
	mock.lockAgentConfigHistory.Lock()
	mock.calls.AgentConfigHistory = append(mock.calls.AgentConfigHistory, callInfo)
	mock.lockAgentConfigHistory.Unlock()
	if mock.AgentConfigHistoryFunc == nil {
		var (
			agentConfigHistoryOut cloud.AgentConfigHistory
			errOut                error
		)
		return agentConfigHistoryOut, errOut
	}
	return mock.AgentConfigHistoryFunc(ctx, agentID, params)
}

// AgentConfigHistoryCalls gets all the calls that were made to AgentConfigHistory.
// Check the length with:
//     len(mockedClient.AgentConfigHistoryCalls())
func (mock *ClientMock) AgentConfigHistoryCalls() []struct {
	Ctx     context.Context
	AgentID string
	Params  cloud.AgentConfigHistoryParams
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.AgentConfigHistoryParams
	}
	mock.lockAgentConfigHistory.RLock()
	calls = mock.calls.AgentConfigHistory
	mock.lockAgentConfigHistory.RUnlock()
	return calls
}

// AgentMetrics calls AgentMetricsFunc.
func (mock *ClientMock) AgentMetrics(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.AgentMetrics, error) {
	callInfo := struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.MetricsParams
	}{
		Ctx:     ctx,
		AgentID: agentID,
		Params:  params,
	}
	mock.lockAgentMetrics.Lock()
	mock.calls.AgentMetrics = append(mock.calls.AgentMetrics, callInfo)
	mock.lockAgentMetrics.Unlock()
	if mock.AgentMetricsFunc == nil {
		var (
			agentMetricsOut cloud.AgentMetrics
			errOut          error
		)
		return agentMetricsOut, errOut
	}
	return mock.AgentMetricsFunc(ctx, agentID, params)
}

// AgentMetricsCalls gets all the calls that were made to AgentMetrics.
// Check the length with:
//     len(mockedClient.AgentMetricsCalls())
func (mock *ClientMock) AgentMetricsCalls() []struct {
	Ctx     context.Context
	AgentID string
	Params  cloud.MetricsParams
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.MetricsParams
	}
	mock.lockAgentMetrics.RLock()
	calls = mock.calls.AgentMetrics
	mock.lockAgentMetrics.RUnlock()
	return calls
}

// Agents calls AgentsFunc.
func (mock *ClientMock) Agents(ctx context.Context, projectID string, params cloud.AgentsParams) (cloud.Agents, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.AgentsParams
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Params:    params,
	}
	mock.lockAgents.Lock()
	mock.calls.Agents = append(mock.calls.Agents, callInfo)
	mock.lockAgents.Unlock()
	if mock.AgentsFunc == nil {
		var (
			agentsOut cloud.Agents
			errOut    error
		)
		return agentsOut, errOut
	}
	return mock.AgentsFunc(ctx, projectID, params)
}

// AgentsCalls gets all the calls that were made to Agents.
// Check the length with:
//     len(mockedClient.AgentsCalls())
func (mock *ClientMock) AgentsCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Params    cloud.AgentsParams
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.AgentsParams
	}
	mock.lockAgents.RLock()
	calls = mock.calls.Agents
	mock.lockAgents.RUnlock()
	return calls
}

// Aggregator calls AggregatorFunc.
func (mock *ClientMock) Aggregator(ctx context.Context, aggregatorID string) (cloud.Aggregator, error) {
	callInfo := struct {
		Ctx          context.Context
		AggregatorID string
	}{
		Ctx:          ctx,
		AggregatorID: aggregatorID,
	}
	mock.lockAggregator.Lock()
	mock.calls.Aggregator = append(mock.calls.Aggregator, callInfo)
	mock.lockAggregator.Unlock()
	if mock.AggregatorFunc == nil {
		var (
			aggregatorOut cloud.Aggregator
			errOut        error
		)
		return aggregatorOut, errOut
	}
	return mock.AggregatorFunc(ctx, aggregatorID)
}

// AggregatorCalls gets all the calls that were made to Aggregator.
// Check the length with:
//     len(mockedClient.AggregatorCalls())
func (mock *ClientMock) AggregatorCalls() []struct {
	Ctx          context.Context
	AggregatorID string
} {
	var calls []struct {
		Ctx          context.Context
		AggregatorID string
	}
	mock.lockAggregator.RLock()
	calls = mock.calls.Aggregator
	mock.lockAggregator.RUnlock()
	return calls
}

// Aggregators calls AggregatorsFunc.
func (mock *ClientMock) Aggregators(ctx context.Context, projectID string, params cloud.AggregatorsParams) (cloud.Aggregators, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.AggregatorsParams
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Params:    params,
	}
	mock.lockAggregators.Lock()
	mock.calls.Aggregators = append(mock.calls.Aggregators, callInfo)
	mock.lockAggregators.Unlock()
	if mock.AggregatorsFunc == nil {
		var (
			aggregatorsOut cloud.Aggregators
			errOut         error
		)
		return aggregatorsOut, errOut
	}
	return mock.AggregatorsFunc(ctx, projectID, params)
}

// AggregatorsCalls gets all the calls that were made to Aggregators.
// Check the length with:
//     len(mockedClient.AggregatorsCalls())
func (mock *ClientMock) AggregatorsCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Params    cloud.AggregatorsParams
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.AggregatorsParams
	}
	mock.lockAggregators.RLock()
	calls = mock.calls.Aggregators
	mock.lockAggregators.RUnlock()
	return calls
}

// CreateAggregator calls CreateAggregatorFunc.
func (mock *ClientMock) CreateAggregator(ctx context.Context, payload cloud.CreateAggregator) (cloud.CreatedAggregator, error) {
	callInfo := struct {
		Ctx     context.Context
		Payload cloud.CreateAggregator
	}{
		Ctx:     ctx,
		Payload: payload,
	}
	mock.lockCreateAggregator.Lock()
	mock.calls.CreateAggregator = append(mock.calls.CreateAggregator, callInfo)
	mock.lockCreateAggregator.Unlock()
	if mock.CreateAggregatorFunc == nil {
		var (
			createdAggregatorOut cloud.CreatedAggregator
			errOut               error
		)
		return createdAggregatorOut, errOut
	}
	return mock.CreateAggregatorFunc(ctx, payload)
}

// CreateAggregatorCalls gets all the calls that were made to CreateAggregator.
// Check the length with:
//     len(mockedClient.CreateAggregatorCalls())
func (mock *ClientMock) CreateAggregatorCalls() []struct {
	Ctx     context.Context
	Payload cloud.CreateAggregator
} {
	var calls []struct {
		Ctx     context.Context
		Payload cloud.CreateAggregator
	}
	mock.lockCreateAggregator.RLock()
	calls = mock.calls.CreateAggregator
	mock.lockCreateAggregator.RUnlock()
	return calls
}

// CreateInvitation calls CreateInvitationFunc.
func (mock *ClientMock) CreateInvitation(ctx context.Context, projectID string, payload cloud.CreateInvitation) error {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Payload   cloud.CreateInvitation
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Payload:   payload,
	}
	mock.lockCreateInvitation.Lock()
	mock.calls.CreateInvitation = append(mock.calls.CreateInvitation, callInfo)
	mock.lockCreateInvitation.Unlock()
	if mock.CreateInvitationFunc == nil {
		var errOut error
		return errOut
	}
	return mock.CreateInvitationFunc(ctx, projectID, payload)
}

// CreateInvitationCalls gets all the calls that were made to CreateInvitation.
// Check the length with:
//     len(mockedClient.CreateInvitationCalls())
func (mock *ClientMock) CreateInvitationCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Payload   cloud.CreateInvitation
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Payload   cloud.CreateInvitation
	}
	mock.lockCreateInvitation.RLock()
	calls = mock.calls.CreateInvitation
	mock.lockCreateInvitation.RUnlock()
	return calls
}

// CreatePipeline calls CreatePipelineFunc.
func (mock *ClientMock) CreatePipeline(ctx context.Context, aggregatorID string, payload cloud.CreatePipeline) (cloud.CreatedPipeline, error) {
	callInfo := struct {
		Ctx          context.Context
		AggregatorID string
		Payload      cloud.CreatePipeline
	}{
		Ctx:          ctx,
		AggregatorID: aggregatorID,
		Payload:      payload,
	}
	mock.lockCreatePipeline.Lock()
	mock.calls.CreatePipeline = append(mock.calls.CreatePipeline, callInfo)
	mock.lockCreatePipeline.Unlock()
	if mock.CreatePipelineFunc == nil {
		var (
			createdPipelineOut cloud.CreatedPipeline
			errOut             error
		)
		return createdPipelineOut, errOut
	}
	return mock.CreatePipelineFunc(ctx, aggregatorID, payload)
}

// CreatePipelineCalls gets all the calls that were made to CreatePipeline.
// Check the length with:
//     len(mockedClient.CreatePipelineCalls())
func (mock *ClientMock) CreatePipelineCalls() []struct {
	Ctx          context.Context
	AggregatorID string
	Payload      cloud.CreatePipeline
} {
	var calls []struct {
		Ctx          context.Context
		AggregatorID string
		Payload      cloud.CreatePipeline
	}
	mock.lockCreatePipeline.RLock()
	calls = mock.calls.CreatePipeline
	mock.lockCreatePipeline.RUnlock()
	return calls
}

// CreatePipelineFile calls CreatePipelineFileFunc.
func (mock *ClientMock) CreatePipelineFile(ctx context.Context, pipelineID string, payload cloud.CreatePipelineFile) (cloud.CreatedPipelineFile, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Payload    cloud.CreatePipelineFile
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Payload:    payload,
	}
	mock.lockCreatePipelineFile.Lock()
	mock.calls.CreatePipelineFile = append(mock.calls.CreatePipelineFile, callInfo)
	mock.lockCreatePipelineFile.Unlock()
	if mock.CreatePipelineFileFunc == nil {
		var (
			createdPipelineFileOut cloud.CreatedPipelineFile
			errOut                 error
		)
		return createdPipelineFileOut, errOut
	}
	return mock.CreatePipelineFileFunc(ctx, pipelineID, payload)
}

// CreatePipelineFileCalls gets all the calls that were made to CreatePipelineFile.
// Check the length with:
//     len(mockedClient.CreatePipelineFileCalls())
func (mock *ClientMock) CreatePipelineFileCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Payload    cloud.CreatePipelineFile
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Payload    cloud.CreatePipelineFile
	}
	mock.lockCreatePipelineFile.RLock()
	calls = mock.calls.CreatePipelineFile
	mock.lockCreatePipelineFile.RUnlock()
	return calls
}

// CreatePipelinePort calls CreatePipelinePortFunc.
func (mock *ClientMock) CreatePipelinePort(ctx context.Context, pipelineID string, payload cloud.CreatePipelinePort) (cloud.CreatedPipelinePort, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Payload    cloud.CreatePipelinePort
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Payload:    payload,
	}
	mock.lockCreatePipelinePort.Lock()
	mock.calls.CreatePipelinePort = append(mock.calls.CreatePipelinePort, callInfo)
	mock.lockCreatePipelinePort.Unlock()
	if mock.CreatePipelinePortFunc == nil {
		var (
			createdPipelinePortOut cloud.CreatedPipelinePort
			errOut                 error
		)
		return createdPipelinePortOut, errOut
	}
	return mock.CreatePipelinePortFunc(ctx, pipelineID, payload)
}

// CreatePipelinePortCalls gets all the calls that were made to CreatePipelinePort.
// Check the length with:
//     len(mockedClient.CreatePipelinePortCalls())
func (mock *ClientMock) CreatePipelinePortCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Payload    cloud.CreatePipelinePort
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Payload    cloud.CreatePipelinePort
	}
	mock.lockCreatePipelinePort.RLock()
	calls = mock.calls.CreatePipelinePort
	mock.lockCreatePipelinePort.RUnlock()
	return calls
}

// CreatePipelineSecret calls CreatePipelineSecretFunc.
func (mock *ClientMock) CreatePipelineSecret(ctx context.Context, pipelineID string, payload cloud.CreatePipelineSecret) (cloud.CreatedPipelineSecret, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Payload    cloud.CreatePipelineSecret
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Payload:    payload,
	}
	mock.lockCreatePipelineSecret.Lock()
	mock.calls.CreatePipelineSecret = append(mock.calls.CreatePipelineSecret, callInfo)
	mock.lockCreatePipelineSecret.Unlock()
	if mock.CreatePipelineSecretFunc == nil {
		var (
			createdPipelineSecretOut cloud.CreatedPipelineSecret
			errOut                   error
		)
		return createdPipelineSecretOut, errOut
	}
	return mock.CreatePipelineSecretFunc(ctx, pipelineID, payload)
}

// CreatePipelineSecretCalls gets all the calls that were made to CreatePipelineSecret.
// Check the length with:
//     len(mockedClient.CreatePipelineSecretCalls())
func (mock *ClientMock) CreatePipelineSecretCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Payload    cloud.CreatePipelineSecret
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Payload    cloud.CreatePipelineSecret
	}
	mock.lockCreatePipelineSecret.RLock()
	calls = mock.calls.CreatePipelineSecret
	mock.lockCreatePipelineSecret.RUnlock()
	return calls
}

// CreateResourceProfile calls CreateResourceProfileFunc.
func (mock *ClientMock) CreateResourceProfile(ctx context.Context, aggregatorID string, payload cloud.CreateResourceProfile) (cloud.CreatedResourceProfile, error) {
	callInfo := struct {
		Ctx          context.Context
		AggregatorID string
		Payload      cloud.CreateResourceProfile
	}{
		Ctx:          ctx,
		AggregatorID: aggregatorID,
		Payload:      payload,
	}
	mock.lockCreateResourceProfile.Lock()
	mock.calls.CreateResourceProfile = append(mock.calls.CreateResourceProfile, callInfo)
	mock.lockCreateResourceProfile.Unlock()
	if mock.CreateResourceProfileFunc == nil {
		var (
			createdResourceProfileOut cloud.CreatedResourceProfile
			errOut                    error
		)
		return createdResourceProfileOut, errOut
	}
	return mock.CreateResourceProfileFunc(ctx, aggregatorID, payload)
}

// CreateResourceProfileCalls gets all the calls that were made to CreateResourceProfile.
// Check the length with:
//     len(mockedClient.CreateResourceProfileCalls())
func (mock *ClientMock) CreateResourceProfileCalls() []struct {
	Ctx          context.Context
	AggregatorID string
	Payload      cloud.CreateResourceProfile
} {
	var calls []struct {
		Ctx          context.Context
		AggregatorID string
		Payload      cloud.CreateResourceProfile
	}
	mock.lockCreateResourceProfile.RLock()
	calls = mock.calls.CreateResourceProfile
	mock.lockCreateResourceProfile.RUnlock()
	return calls
}

// DeleteAgent calls DeleteAgentFunc.
func (mock *ClientMock) DeleteAgent(ctx context.Context, agentID string) error {
	callInfo := struct {
		Ctx     context.Context
		AgentID string
	}{
		Ctx:     ctx,
		AgentID: agentID,
	}
	mock.lockDeleteAgent.Lock()
	mock.calls.DeleteAgent = append(mock.calls.DeleteAgent, callInfo)
	mock.lockDeleteAgent.Unlock()
	if mock.DeleteAgentFunc == nil {
		var errOut error
		return errOut
	}
	return mock.DeleteAgentFunc(ctx, agentID)
}

// DeleteAgentCalls gets all the calls that were made to DeleteAgent.
// Check the length with:
//     len(mockedClient.DeleteAgentCalls())
func (mock *ClientMock) DeleteAgentCalls() []struct {
	Ctx     context.Context
	AgentID string
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
	}
	mock.lockDeleteAgent.RLock()
	calls = mock.calls.DeleteAgent
	mock.lockDeleteAgent.RUnlock()
	return calls
}

// DeleteAggregator calls DeleteAggregatorFunc.
func (mock *ClientMock) DeleteAggregator(ctx context.Context, aggregatorID string) error {
	callInfo := struct {
		Ctx          context.Context
		AggregatorID string
	}{
		Ctx:          ctx,
		AggregatorID: aggregatorID,
	}
	mock.lockDeleteAggregator.Lock()
	mock.calls.DeleteAggregator = append(mock.calls.DeleteAggregator, callInfo)
	mock.lockDeleteAggregator.Unlock()
	if mock.DeleteAggregatorFunc == nil {
		var errOut error
		return errOut
	}
	return mock.DeleteAggregatorFunc(ctx, aggregatorID)
}

// DeleteAggregatorCalls gets all the calls that were made to DeleteAggregator.
// Check the length with:
//     len(mockedClient.DeleteAggregatorCalls())
func (mock *ClientMock) DeleteAggregatorCalls() []struct {
	Ctx          context.Context
	AggregatorID string
} {
	var calls []struct {
		Ctx          context.Context
		AggregatorID string
	}
	mock.lockDeleteAggregator.RLock()
	calls = mock.calls.DeleteAggregator
	mock.lockDeleteAggregator.RUnlock()
	return calls
}

// DeletePipeline calls DeletePipelineFunc.
func (mock *ClientMock) DeletePipeline(ctx context.Context, pipelineID string) error {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
	}
	mock.lockDeletePipeline.Lock()
	mock.calls.DeletePipeline = append(mock.calls.DeletePipeline, callInfo)
	mock.lockDeletePipeline.Unlock()
	if mock.DeletePipelineFunc == nil {
		var errOut error
		return errOut
	}
	return mock.DeletePipelineFunc(ctx, pipelineID)
}

// DeletePipelineCalls gets all the calls that were made to DeletePipeline.
// Check the length with:
//     len(mockedClient.DeletePipelineCalls())
func (mock *ClientMock) DeletePipelineCalls() []struct {
	Ctx        context.Context
	PipelineID string
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
	}
	mock.lockDeletePipeline.RLock()
	calls = mock.calls.DeletePipeline
	mock.lockDeletePipeline.RUnlock()
	return calls
}

// DeletePipelineFile calls DeletePipelineFileFunc.
func (mock *ClientMock) DeletePipelineFile(ctx context.Context, fileID string) error {
	callInfo := struct {
		Ctx    context.Context
		FileID string
	}{
		Ctx:    ctx,
		FileID: fileID,
	}
	mock.lockDeletePipelineFile.Lock()
	mock.calls.DeletePipelineFile = append(mock.calls.DeletePipelineFile, callInfo)
	mock.lockDeletePipelineFile.Unlock()
	if mock.DeletePipelineFileFunc == nil {
		var errOut error
		return errOut
	}
	return mock.DeletePipelineFileFunc(ctx, fileID)
}

// DeletePipelineFileCalls gets all the calls that were made to DeletePipelineFile.
// Check the length with:
//     len(mockedClient.DeletePipelineFileCalls())
func (mock *ClientMock) DeletePipelineFileCalls() []struct {
	Ctx    context.Context
	FileID string
} {
	var calls []struct {
		Ctx    context.Context
		FileID string
	}
	mock.lockDeletePipelineFile.RLock()
	calls = mock.calls.DeletePipelineFile
	mock.lockDeletePipelineFile.RUnlock()
	return calls
}

// DeletePipelinePort calls DeletePipelinePortFunc.
func (mock *ClientMock) DeletePipelinePort(ctx context.Context, portID string) error {
	callInfo := struct {
		Ctx    context.Context
		PortID string
	}{
		Ctx:    ctx,
		PortID: portID,
	}
	mock.lockDeletePipelinePort.Lock()
	mock.calls.DeletePipelinePort = append(mock.calls.DeletePipelinePort, callInfo)
	mock.lockDeletePipelinePort.Unlock()
	if mock.DeletePipelinePortFunc == nil {
		var errOut error
		return errOut
	}
	return mock.DeletePipelinePortFunc(ctx, portID)
}

// DeletePipelinePortCalls gets all the calls that were made to DeletePipelinePort.
// Check the length with:
//     len(mockedClient.DeletePipelinePortCalls())
func (mock *ClientMock) DeletePipelinePortCalls() []struct {
	Ctx    context.Context
	PortID string
} {
	var calls []struct {
		Ctx    context.Context
		PortID string
	}
	mock.lockDeletePipelinePort.RLock()
	calls = mock.calls.DeletePipelinePort
	mock.lockDeletePipelinePort.RUnlock()
	return calls
}

// DeletePipelineSecret calls DeletePipelineSecretFunc.
func (mock *ClientMock) DeletePipelineSecret(ctx context.Context, secretID string) error {
	callInfo := struct {
		Ctx      context.Context
		SecretID string
	}{
		Ctx:      ctx,
		SecretID: secretID,
	}
	mock.lockDeletePipelineSecret.Lock()
	mock.calls.DeletePipelineSecret = append(mock.calls.DeletePipelineSecret, callInfo)
	mock.lockDeletePipelineSecret.Unlock()
	if mock.DeletePipelineSecretFunc == nil {
		var errOut error
		return errOut
	}
	return mock.DeletePipelineSecretFunc(ctx, secretID)
}

// DeletePipelineSecretCalls gets all the calls that were made to DeletePipelineSecret.
// Check the length with:
//     len(mockedClient.DeletePipelineSecretCalls())
func (mock *ClientMock) DeletePipelineSecretCalls() []struct {
	Ctx      context.Context
	SecretID string
} {
	var calls []struct {
		Ctx      context.Context
		SecretID string
	}
	mock.lockDeletePipelineSecret.RLock()
	calls = mock.calls.DeletePipelineSecret
	mock.lockDeletePipelineSecret.RUnlock()
	return calls
}

// DeleteResourceProfile calls DeleteResourceProfileFunc.
func (mock *ClientMock) DeleteResourceProfile(ctx context.Context, resourceProfileID string) error {
	callInfo := struct {
		Ctx               context.Context
		ResourceProfileID string
	}{
		Ctx:               ctx,
		ResourceProfileID: resourceProfileID,
	}
	mock.lockDeleteResourceProfile.Lock()
	mock.calls.DeleteResourceProfile = append(mock.calls.DeleteResourceProfile, callInfo)
	mock.lockDeleteResourceProfile.Unlock()
	if mock.DeleteResourceProfileFunc == nil {
		var errOut error
		return errOut
	}
	return mock.DeleteResourceProfileFunc(ctx, resourceProfileID)
}

// DeleteResourceProfileCalls gets all the calls that were made to DeleteResourceProfile.
// Check the length with:
//     len(mockedClient.DeleteResourceProfileCalls())
func (mock *ClientMock) DeleteResourceProfileCalls() []struct {
	Ctx               context.Context
	ResourceProfileID string
} {
	var calls []struct {
		Ctx               context.Context
		ResourceProfileID string
	}
	mock.lockDeleteResourceProfile.RLock()
	calls = mock.calls.DeleteResourceProfile
	mock.lockDeleteResourceProfile.RUnlock()
	return calls
}

// DeleteToken calls DeleteTokenFunc.
func (mock *ClientMock) DeleteToken(ctx context.Context, tokenID string) error {
	callInfo := struct {
		Ctx     context.Context
		TokenID string
	}{
		Ctx:     ctx,
		TokenID: tokenID,
	}
	mock.lockDeleteToken.Lock()
	mock.calls.DeleteToken = append(mock.calls.DeleteToken, callInfo)
	mock.lockDeleteToken.Unlock()
	if mock.DeleteTokenFunc == nil {
		var errOut error
		return errOut
	}
	return mock.DeleteTokenFunc(ctx, tokenID)
}

// DeleteTokenCalls gets all the calls that were made to DeleteToken.
// Check the length with:
//     len(mockedClient.DeleteTokenCalls())
func (mock *ClientMock) DeleteTokenCalls() []struct {
	Ctx     context.Context
	TokenID string
} {
	var calls []struct {
		Ctx     context.Context
		TokenID string
	}
	mock.lockDeleteToken.RLock()
	calls = mock.calls.DeleteToken
	mock.lockDeleteToken.RUnlock()
	return calls
}

// Environments calls EnvironmentsFunc.
func (mock *ClientMock) Environments(ctx context.Context, projectID string, params cloud.EnvironmentsParams) (cloud.Environments, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.EnvironmentsParams
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Params:    params,
	}
	mock.lockEnvironments.Lock()
	mock.calls.Environments = append(mock.calls.Environments, callInfo)
	mock.lockEnvironments.Unlock()
	if mock.EnvironmentsFunc == nil {
		var (
			environmentsOut cloud.Environments
			errOut          error
		)
		return environmentsOut, errOut
	}
	return mock.EnvironmentsFunc(ctx, projectID, params)
}

// EnvironmentsCalls gets all the calls that were made to Environments.
// Check the length with:
//     len(mockedClient.EnvironmentsCalls())
func (mock *ClientMock) EnvironmentsCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Params    cloud.EnvironmentsParams
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.EnvironmentsParams
	}
	mock.lockEnvironments.RLock()
	calls = mock.calls.Environments
	mock.lockEnvironments.RUnlock()
	return calls
}

// Members calls MembersFunc.
func (mock *ClientMock) Members(ctx context.Context, projectID string, params cloud.MembersParams) (cloud.Memberships, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.MembersParams
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Params:    params,
	}
	mock.lockMembers.Lock()
	mock.calls.Members = append(mock.calls.Members, callInfo)
	mock.lockMembers.Unlock()
	if mock.MembersFunc == nil {
		var (
			membershipsOut cloud.Memberships
			errOut         error
		)
		return membershipsOut, errOut
	}
	return mock.MembersFunc(ctx, projectID, params)
}

// MembersCalls gets all the calls that were made to Members.
// Check the length with:
//     len(mockedClient.MembersCalls())
func (mock *ClientMock) MembersCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Params    cloud.MembersParams
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.MembersParams
	}
	mock.lockMembers.RLock()
	calls = mock.calls.Members
	mock.lockMembers.RUnlock()
	return calls
}

// Pipeline calls PipelineFunc.
func (mock *ClientMock) Pipeline(ctx context.Context, pipelineID string, params cloud.PipelineParams) (cloud.Pipeline, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipeline.Lock()
	mock.calls.Pipeline = append(mock.calls.Pipeline, callInfo)
	mock.lockPipeline.Unlock()
	if mock.PipelineFunc == nil {
		var (
			pipelineOut cloud.Pipeline
			errOut      error
		)
		return pipelineOut, errOut
	}
	return mock.PipelineFunc(ctx, pipelineID, params)
}

// PipelineCalls gets all the calls that were made to Pipeline.
// Check the length with:
//     len(mockedClient.PipelineCalls())
func (mock *ClientMock) PipelineCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.PipelineParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineParams
	}
	mock.lockPipeline.RLock()
	calls = mock.calls.Pipeline
	mock.lockPipeline.RUnlock()
	return calls
}

// PipelineConfigHistory calls PipelineConfigHistoryFunc.
func (mock *ClientMock) PipelineConfigHistory(ctx context.Context, pipelineID string, params cloud.PipelineConfigHistoryParams) (cloud.PipelineConfigHistory, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineConfigHistoryParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineConfigHistory.Lock()
	mock.calls.PipelineConfigHistory = append(mock.calls.PipelineConfigHistory, callInfo)
	mock.lockPipelineConfigHistory.Unlock()
	if mock.PipelineConfigHistoryFunc == nil {
		var (
			pipelineConfigHistoryOut cloud.PipelineConfigHistory
			errOut                   error
		)
		return pipelineConfigHistoryOut, errOut
	}
	return mock.PipelineConfigHistoryFunc(ctx, pipelineID, params)
}

// PipelineConfigHistoryCalls gets all the calls that were made to PipelineConfigHistory.
// Check the length with:
//     len(mockedClient.PipelineConfigHistoryCalls())
func (mock *ClientMock) PipelineConfigHistoryCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.PipelineConfigHistoryParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineConfigHistoryParams
	}
	mock.lockPipelineConfigHistory.RLock()
	calls = mock.calls.PipelineConfigHistory
	mock.lockPipelineConfigHistory.RUnlock()
	return calls
}

// PipelineFile calls PipelineFileFunc.
func (mock *ClientMock) PipelineFile(ctx context.Context, fileID string) (cloud.PipelineFile, error) {
	callInfo := struct {
		Ctx    context.Context
		FileID string
	}{
		Ctx:    ctx,
		FileID: fileID,
	}
	mock.lockPipelineFile.Lock()
	mock.calls.PipelineFile = append(mock.calls.PipelineFile, callInfo)
	mock.lockPipelineFile.Unlock()
	if mock.PipelineFileFunc == nil {
		var (
			pipelineFileOut cloud.PipelineFile
			errOut          error
		)
		return pipelineFileOut, errOut
	}
	return mock.PipelineFileFunc(ctx, fileID)
}

// PipelineFileCalls gets all the calls that were made to PipelineFile.
// Check the length with:
//     len(mockedClient.PipelineFileCalls())
func (mock *ClientMock) PipelineFileCalls() []struct {
	Ctx    context.Context
	FileID string
} {
	var calls []struct {
		Ctx    context.Context
		FileID string
	}
	mock.lockPipelineFile.RLock()
	calls = mock.calls.PipelineFile
	mock.lockPipelineFile.RUnlock()
	return calls
}

// PipelineFiles calls PipelineFilesFunc.
func (mock *ClientMock) PipelineFiles(ctx context.Context, pipelineID string, params cloud.PipelineFilesParams) (cloud.PipelineFiles, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineFilesParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineFiles.Lock()
	mock.calls.PipelineFiles = append(mock.calls.PipelineFiles, callInfo)
	mock.lockPipelineFiles.Unlock()
	if mock.PipelineFilesFunc == nil {
		var (
			pipelineFilesOut cloud.PipelineFiles
			errOut           error
		)
		return pipelineFilesOut, errOut
	}
	return mock.PipelineFilesFunc(ctx, pipelineID, params)
}

// PipelineFilesCalls gets all the calls that were made to PipelineFiles.
// Check the length with:
//     len(mockedClient.PipelineFilesCalls())
func (mock *ClientMock) PipelineFilesCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.PipelineFilesParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineFilesParams
	}
	mock.lockPipelineFiles.RLock()
	calls = mock.calls.PipelineFiles
	mock.lockPipelineFiles.RUnlock()
	return calls
}

// PipelineMetrics calls PipelineMetricsFunc.
func (mock *ClientMock) PipelineMetrics(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.AgentMetrics, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.MetricsParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineMetrics.Lock()
	mock.calls.PipelineMetrics = append(mock.calls.PipelineMetrics, callInfo)
	mock.lockPipelineMetrics.Unlock()
	if mock.PipelineMetricsFunc == nil {
		var (
			agentMetricsOut cloud.AgentMetrics
			errOut          error
		)
		return agentMetricsOut, errOut
	}
	return mock.PipelineMetricsFunc(ctx, pipelineID, params)
}

// PipelineMetricsCalls gets all the calls that were made to PipelineMetrics.
// Check the length with:
//     len(mockedClient.PipelineMetricsCalls())
func (mock *ClientMock) PipelineMetricsCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.MetricsParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.MetricsParams
	}
	mock.lockPipelineMetrics.RLock()
	calls = mock.calls.PipelineMetrics
	mock.lockPipelineMetrics.RUnlock()
	return calls
}

// PipelinePort calls PipelinePortFunc.
func (mock *ClientMock) PipelinePort(ctx context.Context, portID string) (cloud.PipelinePort, error) {
	callInfo := struct {
		Ctx    context.Context
		PortID string
	}{
		Ctx:    ctx,
		PortID: portID,
	}
	mock.lockPipelinePort.Lock()
	mock.calls.PipelinePort = append(mock.calls.PipelinePort, callInfo)
	mock.lockPipelinePort.Unlock()
	if mock.PipelinePortFunc == nil {
		var (
			pipelinePortOut cloud.PipelinePort
			errOut          error
		)
		return pipelinePortOut, errOut
	}
	return mock.PipelinePortFunc(ctx, portID)
}

// PipelinePortCalls gets all the calls that were made to PipelinePort.
// Check the length with:
//     len(mockedClient.PipelinePortCalls())
func (mock *ClientMock) PipelinePortCalls() []struct {
	Ctx    context.Context
	PortID string
} {
	var calls []struct {
		Ctx    context.Context
		PortID string
	}
	mock.lockPipelinePort.RLock()
	calls = mock.calls.PipelinePort
	mock.lockPipelinePort.RUnlock()
	return calls
}

// PipelinePorts calls PipelinePortsFunc.
func (mock *ClientMock) PipelinePorts(ctx context.Context, pipelineID string, params cloud.PipelinePortsParams) (cloud.PipelinePorts, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelinePortsParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelinePorts.Lock()
	mock.calls.PipelinePorts = append(mock.calls.PipelinePorts, callInfo)
	mock.lockPipelinePorts.Unlock()
	if mock.PipelinePortsFunc == nil {
		var (
			pipelinePortsOut cloud.PipelinePorts
			errOut           error
		)
		return pipelinePortsOut, errOut
	}
	return mock.PipelinePortsFunc(ctx, pipelineID, params)
}

// PipelinePortsCalls gets all the calls that were made to PipelinePorts.
// Check the length with:
//     len(mockedClient.PipelinePortsCalls())
func (mock *ClientMock) PipelinePortsCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.PipelinePortsParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelinePortsParams
	}
	mock.lockPipelinePorts.RLock()
	calls = mock.calls.PipelinePorts
	mock.lockPipelinePorts.RUnlock()
	return calls
}

// PipelineSecret calls PipelineSecretFunc.
func (mock *ClientMock) PipelineSecret(ctx context.Context, secretID string) (cloud.PipelineSecret, error) {
	callInfo := struct {
		Ctx      context.Context
		SecretID string
	}{
		Ctx:      ctx,
		SecretID: secretID,
	}
	mock.lockPipelineSecret.Lock()
	mock.calls.PipelineSecret = append(mock.calls.PipelineSecret, callInfo)
	mock.lockPipelineSecret.Unlock()
	if mock.PipelineSecretFunc == nil {
		var (
			pipelineSecretOut cloud.PipelineSecret
			errOut            error
		)
		return pipelineSecretOut, errOut
	}
	return mock.PipelineSecretFunc(ctx, secretID)
}

// PipelineSecretCalls gets all the calls that were made to PipelineSecret.
// Check the length with:
//     len(mockedClient.PipelineSecretCalls())
func (mock *ClientMock) PipelineSecretCalls() []struct {
	Ctx      context.Context
	SecretID string
} {
	var calls []struct {
		Ctx      context.Context
		SecretID string
	}
	mock.lockPipelineSecret.RLock()
	calls = mock.calls.PipelineSecret
	mock.lockPipelineSecret.RUnlock()
	return calls
}

// PipelineSecrets calls PipelineSecretsFunc.
func (mock *ClientMock) PipelineSecrets(ctx context.Context, pipelineID string, params cloud.PipelineSecretsParams) (cloud.PipelineSecrets, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineSecretsParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineSecrets.Lock()
	mock.calls.PipelineSecrets = append(mock.calls.PipelineSecrets, callInfo)
	mock.lockPipelineSecrets.Unlock()
	if mock.PipelineSecretsFunc == nil {
		var (
			pipelineSecretsOut cloud.PipelineSecrets
			errOut             error
		)
		return pipelineSecretsOut, errOut
	}
	return mock.PipelineSecretsFunc(ctx, pipelineID, params)
}

// PipelineSecretsCalls gets all the calls that were made to PipelineSecrets.
// Check the length with:
//     len(mockedClient.PipelineSecretsCalls())
func (mock *ClientMock) PipelineSecretsCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.PipelineSecretsParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineSecretsParams
	}
	mock.lockPipelineSecrets.RLock()
	calls = mock.calls.PipelineSecrets
	mock.lockPipelineSecrets.RUnlock()
	return calls
}

// PipelineStatusHistory calls PipelineStatusHistoryFunc.
func (mock *ClientMock) PipelineStatusHistory(ctx context.Context, pipelineID string, params cloud.PipelineStatusHistoryParams) (cloud.PipelineStatusHistory, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineStatusHistoryParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineStatusHistory.Lock()
	mock.calls.PipelineStatusHistory = append(mock.calls.PipelineStatusHistory, callInfo)
	mock.lockPipelineStatusHistory.Unlock()
	if mock.PipelineStatusHistoryFunc == nil {
		var (
			pipelineStatusHistoryOut cloud.PipelineStatusHistory
			errOut                   error
		)
		return pipelineStatusHistoryOut, errOut
	}
	return mock.PipelineStatusHistoryFunc(ctx, pipelineID, params)
}

// PipelineStatusHistoryCalls gets all the calls that were made to PipelineStatusHistory.
// Check the length with:
//     len(mockedClient.PipelineStatusHistoryCalls())
func (mock *ClientMock) PipelineStatusHistoryCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.PipelineStatusHistoryParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineStatusHistoryParams
	}
	mock.lockPipelineStatusHistory.RLock()
	calls = mock.calls.PipelineStatusHistory
	mock.lockPipelineStatusHistory.RUnlock()
	return calls
}

// Pipelines calls PipelinesFunc.
func (mock *ClientMock) Pipelines(ctx context.Context, aggregatorID string, params cloud.PipelinesParams) (cloud.Pipelines, error) {
	callInfo := struct {
		Ctx          context.Context
		AggregatorID string
		Params       cloud.PipelinesParams
	}{
		Ctx:          ctx,
		AggregatorID: aggregatorID,
		Params:       params,
	}
	mock.lockPipelines.Lock()
	mock.calls.Pipelines = append(mock.calls.Pipelines, callInfo)
	mock.lockPipelines.Unlock()
	if mock.PipelinesFunc == nil {
		var (
			pipelinesOut cloud.Pipelines
			errOut       error
		)
		return pipelinesOut, errOut
	}
	return mock.PipelinesFunc(ctx, aggregatorID, params)
}

// PipelinesCalls gets all the calls that were made to Pipelines.
// Check the length with:
//     len(mockedClient.PipelinesCalls())
func (mock *ClientMock) PipelinesCalls() []struct {
	Ctx          context.Context
	AggregatorID string
	Params       cloud.PipelinesParams
} {
	var calls []struct {
		Ctx          context.Context
		AggregatorID string
		Params       cloud.PipelinesParams
	}
	mock.lockPipelines.RLock()
	calls = mock.calls.Pipelines
	mock.lockPipelines.RUnlock()
	return calls
}

// Project calls ProjectFunc.
func (mock *ClientMock) Project(ctx context.Context, projectID string) (cloud.Project, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
	}{
		Ctx:       ctx,
		ProjectID: projectID,
	}
	mock.lockProject.Lock()
	mock.calls.Project = append(mock.calls.Project, callInfo)
	mock.lockProject.Unlock()
	if mock.ProjectFunc == nil {
		var (
			projectOut cloud.Project
			errOut     error
		)
		return projectOut, errOut
	}
	return mock.ProjectFunc(ctx, projectID)
}

// ProjectCalls gets all the calls that were made to Project.
// Check the length with:
//     len(mockedClient.ProjectCalls())
func (mock *ClientMock) ProjectCalls() []struct {
	Ctx       context.Context
	ProjectID string
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
	}
	mock.lockProject.RLock()
	calls = mock.calls.Project
	mock.lockProject.RUnlock()
	return calls
}

// ProjectMetrics calls ProjectMetricsFunc.
func (mock *ClientMock) ProjectMetrics(ctx context.Context, projectID string, params cloud.MetricsParams) (cloud.ProjectMetrics, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.MetricsParams
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Params:    params,
	}
	mock.lockProjectMetrics.Lock()
	mock.calls.ProjectMetrics = append(mock.calls.ProjectMetrics, callInfo)
	mock.lockProjectMetrics.Unlock()
	if mock.ProjectMetricsFunc == nil {
		var (
			projectMetricsOut cloud.ProjectMetrics
			errOut            error
		)
		return projectMetricsOut, errOut
	}
	return mock.ProjectMetricsFunc(ctx, projectID, params)
}

// ProjectMetricsCalls gets all the calls that were made to ProjectMetrics.
// Check the length with:
//     len(mockedClient.ProjectMetricsCalls())
func (mock *ClientMock) ProjectMetricsCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Params    cloud.MetricsParams
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.MetricsParams
	}
	mock.lockProjectMetrics.RLock()
	calls = mock.calls.ProjectMetrics
	mock.lockProjectMetrics.RUnlock()
	return calls
}

// ProjectPipelines calls ProjectPipelinesFunc.
func (mock *ClientMock) ProjectPipelines(ctx context.Context, projectID string, params cloud.PipelinesParams) (cloud.Pipelines, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.PipelinesParams
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Params:    params,
	}
	mock.lockProjectPipelines.Lock()
	mock.calls.ProjectPipelines = append(mock.calls.ProjectPipelines, callInfo)
	mock.lockProjectPipelines.Unlock()
	if mock.ProjectPipelinesFunc == nil {
		var (
			pipelinesOut cloud.Pipelines
			errOut       error
		)
		return pipelinesOut, errOut
	}
	return mock.ProjectPipelinesFunc(ctx, projectID, params)
}

// ProjectPipelinesCalls gets all the calls that were made to ProjectPipelines.
// Check the length with:
//     len(mockedClient.ProjectPipelinesCalls())
func (mock *ClientMock) ProjectPipelinesCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Params    cloud.PipelinesParams
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.PipelinesParams
	}
	mock.lockProjectPipelines.RLock()
	calls = mock.calls.ProjectPipelines
	mock.lockProjectPipelines.RUnlock()
	return calls
}

// RegisterAgent calls RegisterAgentFunc.
func (mock *ClientMock) RegisterAgent(ctx context.Context, payload cloud.RegisterAgent) (cloud.RegisteredAgent, error) {
	callInfo := struct {
		Ctx     context.Context
		Payload cloud.RegisterAgent
	}{
		Ctx:     ctx,
		Payload: payload,
	}
	mock.lockRegisterAgent.Lock()
	mock.calls.RegisterAgent = append(mock.calls.RegisterAgent, callInfo)
	mock.lockRegisterAgent.Unlock()
	if mock.RegisterAgentFunc == nil {
		var (
			registeredAgentOut cloud.RegisteredAgent
			errOut             error
		)
		return registeredAgentOut, errOut
	}
	return mock.RegisterAgentFunc(ctx, payload)
}

// RegisterAgentCalls gets all the calls that were made to RegisterAgent.
// Check the length with:
//     len(mockedClient.RegisterAgentCalls())
func (mock *ClientMock) RegisterAgentCalls() []struct {
	Ctx     context.Context
	Payload cloud.RegisterAgent
} {
	var calls []struct {
		Ctx     context.Context
		Payload cloud.RegisterAgent
	}
	mock.lockRegisterAgent.RLock()
	calls = mock.calls.RegisterAgent
	mock.lockRegisterAgent.RUnlock()
	return calls
}

// ResourceProfile calls ResourceProfileFunc.
func (mock *ClientMock) ResourceProfile(ctx context.Context, resourceProfileID string) (cloud.ResourceProfile, error) {
	callInfo := struct {
		Ctx               context.Context
		ResourceProfileID string
	}{
		Ctx:               ctx,
		ResourceProfileID: resourceProfileID,
	}
	mock.lockResourceProfile.Lock()
	mock.calls.ResourceProfile = append(mock.calls.ResourceProfile, callInfo)
	mock.lockResourceProfile.Unlock()
	if mock.ResourceProfileFunc == nil {
		var (
			resourceProfileOut cloud.ResourceProfile
			errOut             error
		)
		return resourceProfileOut, errOut
	}
	return mock.ResourceProfileFunc(ctx, resourceProfileID)
}

// ResourceProfileCalls gets all the calls that were made to ResourceProfile.
// Check the length with:
//     len(mockedClient.ResourceProfileCalls())
func (mock *ClientMock) ResourceProfileCalls() []struct {
	Ctx               context.Context
	ResourceProfileID string
} {
	var calls []struct {
		Ctx               context.Context
		ResourceProfileID string
	}
	mock.lockResourceProfile.RLock()
	calls = mock.calls.ResourceProfile
	mock.lockResourceProfile.RUnlock()
	return calls
}

// ResourceProfiles calls ResourceProfilesFunc.
func (mock *ClientMock) ResourceProfiles(ctx context.Context, aggregatorID string, params cloud.ResourceProfilesParams) (cloud.ResourceProfiles, error) {
	callInfo := struct {
		Ctx          context.Context
		AggregatorID string
		Params       cloud.ResourceProfilesParams
	}{
		Ctx:          ctx,
		AggregatorID: aggregatorID,
		Params:       params,
	}
	mock.lockResourceProfiles.Lock()
	mock.calls.ResourceProfiles = append(mock.calls.ResourceProfiles, callInfo)
	mock.lockResourceProfiles.Unlock()
	if mock.ResourceProfilesFunc == nil {
		var (
			resourceProfilesOut cloud.ResourceProfiles
			errOut              error
		)
		return resourceProfilesOut, errOut
	}
	return mock.ResourceProfilesFunc(ctx, aggregatorID, params)
}

// ResourceProfilesCalls gets all the calls that were made to ResourceProfiles.
// Check the length with:
//     len(mockedClient.ResourceProfilesCalls())
func (mock *ClientMock) ResourceProfilesCalls() []struct {
	Ctx          context.Context
	AggregatorID string
	Params       cloud.ResourceProfilesParams
} {
	var calls []struct {
		Ctx          context.Context
		AggregatorID string
		Params       cloud.ResourceProfilesParams
	}
	mock.lockResourceProfiles.RLock()
	calls = mock.calls.ResourceProfiles
	mock.lockResourceProfiles.RUnlock()
	return calls
}

// Token calls TokenFunc.
func (mock *ClientMock) Token(ctx context.Context, tokenID string) (cloud.Token, error) {
	callInfo := struct {
		Ctx     context.Context
		TokenID string
	}{
		Ctx:     ctx,
		TokenID: tokenID,
	}
	mock.lockToken.Lock()
	mock.calls.Token = append(mock.calls.Token, callInfo)
	mock.lockToken.Unlock()
	if mock.TokenFunc == nil {
		var (
			tokenOut cloud.Token
			errOut   error
		)
		return tokenOut, errOut
	}
	return mock.TokenFunc(ctx, tokenID)
}

// TokenCalls gets all the calls that were made to Token.
// Check the length with:
//     len(mockedClient.TokenCalls())
func (mock *ClientMock) TokenCalls() []struct {
	Ctx     context.Context
	TokenID string
} {
	var calls []struct {
		Ctx     context.Context
		TokenID string
	}
	mock.lockToken.RLock()
	calls = mock.calls.Token
	mock.lockToken.RUnlock()
	return calls
}

// UpdateAgent calls UpdateAgentFunc.
func (mock *ClientMock) UpdateAgent(ctx context.Context, agentID string, payload cloud.UpdateAgent) error {
	callInfo := struct {
		Ctx     context.Context
		AgentID string
		Payload cloud.UpdateAgent
	}{
		Ctx:     ctx,
		AgentID: agentID,
		Payload: payload,
	}
	mock.lockUpdateAgent.Lock()
	mock.calls.UpdateAgent = append(mock.calls.UpdateAgent, callInfo)
	mock.lockUpdateAgent.Unlock()
	if mock.UpdateAgentFunc == nil {
		var errOut error
		return errOut
	}
	return mock.UpdateAgentFunc(ctx, agentID, payload)
}

// UpdateAgentCalls gets all the calls that were made to UpdateAgent.
// Check the length with:
//     len(mockedClient.UpdateAgentCalls())
func (mock *ClientMock) UpdateAgentCalls() []struct {
	Ctx     context.Context
	AgentID string
	Payload cloud.UpdateAgent
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
		Payload cloud.UpdateAgent
	}
	mock.lockUpdateAgent.RLock()
	calls = mock.calls.UpdateAgent
	mock.lockUpdateAgent.RUnlock()
	return calls
}

// UpdateAggregator calls UpdateAggregatorFunc.
func (mock *ClientMock) UpdateAggregator(ctx context.Context, aggregatorID string, payload cloud.UpdateAggregator) error {
	callInfo := struct {
		Ctx          context.Context
		AggregatorID string
		Payload      cloud.UpdateAggregator
	}{
		Ctx:          ctx,
		AggregatorID: aggregatorID,
		Payload:      payload,
	}
	mock.lockUpdateAggregator.Lock()
	mock.calls.UpdateAggregator = append(mock.calls.UpdateAggregator, callInfo)
	mock.lockUpdateAggregator.Unlock()
	if mock.UpdateAggregatorFunc == nil {
		var errOut error
		return errOut
	}
	return mock.UpdateAggregatorFunc(ctx, aggregatorID, payload)
}

// UpdateAggregatorCalls gets all the calls that were made to UpdateAggregator.
// Check the length with:
//     len(mockedClient.UpdateAggregatorCalls())
func (mock *ClientMock) UpdateAggregatorCalls() []struct {
	Ctx          context.Context
	AggregatorID string
	Payload      cloud.UpdateAggregator
} {
	var calls []struct {
		Ctx          context.Context
		AggregatorID string
		Payload      cloud.UpdateAggregator
	}
	mock.lockUpdateAggregator.RLock()
	calls = mock.calls.UpdateAggregator
	mock.lockUpdateAggregator.RUnlock()
	return calls
}

// UpdatePipeline calls UpdatePipelineFunc.
func (mock *ClientMock) UpdatePipeline(ctx context.Context, pipelineID string, opts cloud.UpdatePipeline) (cloud.UpdatedPipeline, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Opts       cloud.UpdatePipeline
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Opts:       opts,
	}
	mock.lockUpdatePipeline.Lock()
	mock.calls.UpdatePipeline = append(mock.calls.UpdatePipeline, callInfo)
	mock.lockUpdatePipeline.Unlock()
	if mock.UpdatePipelineFunc == nil {
		var (
			updatedPipelineOut cloud.UpdatedPipeline
			errOut             error
		)
		return updatedPipelineOut, errOut
	}
	return mock.UpdatePipelineFunc(ctx, pipelineID, opts)
}

// UpdatePipelineCalls gets all the calls that were made to UpdatePipeline.
// Check the length with:
//     len(mockedClient.UpdatePipelineCalls())
func (mock *ClientMock) UpdatePipelineCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Opts       cloud.UpdatePipeline
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Opts       cloud.UpdatePipeline
	}
	mock.lockUpdatePipeline.RLock()
	calls = mock.calls.UpdatePipeline
	mock.lockUpdatePipeline.RUnlock()
	return calls
}

// UpdatePipelineFile calls UpdatePipelineFileFunc.
func (mock *ClientMock) UpdatePipelineFile(ctx context.Context, fileID string, opts cloud.UpdatePipelineFile) error {
	callInfo := struct {
		Ctx    context.Context
		FileID string
		Opts   cloud.UpdatePipelineFile
	}{
		Ctx:    ctx,
		FileID: fileID,
		Opts:   opts,
	}
	mock.lockUpdatePipelineFile.Lock()
	mock.calls.UpdatePipelineFile = append(mock.calls.UpdatePipelineFile, callInfo)
	mock.lockUpdatePipelineFile.Unlock()
	if mock.UpdatePipelineFileFunc == nil {
		var errOut error
		return errOut
	}
	return mock.UpdatePipelineFileFunc(ctx, fileID, opts)
}

// UpdatePipelineFileCalls gets all the calls that were made to UpdatePipelineFile.
// Check the length with:
//     len(mockedClient.UpdatePipelineFileCalls())
func (mock *ClientMock) UpdatePipelineFileCalls() []struct {
	Ctx    context.Context
	FileID string
	Opts   cloud.UpdatePipelineFile
} {
	var calls []struct {
		Ctx    context.Context
		FileID string
		Opts   cloud.UpdatePipelineFile
	}
	mock.lockUpdatePipelineFile.RLock()
	calls = mock.calls.UpdatePipelineFile
	mock.lockUpdatePipelineFile.RUnlock()
	return calls
}

// UpdatePipelinePort calls UpdatePipelinePortFunc.
func (mock *ClientMock) UpdatePipelinePort(ctx context.Context, portID string, opts cloud.UpdatePipelinePort) error {
	callInfo := struct {
		Ctx    context.Context
		PortID string
		Opts   cloud.UpdatePipelinePort
	}{
		Ctx:    ctx,
		PortID: portID,
		Opts:   opts,
	}
	mock.lockUpdatePipelinePort.Lock()
	mock.calls.UpdatePipelinePort = append(mock.calls.UpdatePipelinePort, callInfo)
	mock.lockUpdatePipelinePort.Unlock()
	if mock.UpdatePipelinePortFunc == nil {
		var errOut error
		return errOut
	}
	return mock.UpdatePipelinePortFunc(ctx, portID, opts)
}

// UpdatePipelinePortCalls gets all the calls that were made to UpdatePipelinePort.
// Check the length with:
//     len(mockedClient.UpdatePipelinePortCalls())
func (mock *ClientMock) UpdatePipelinePortCalls() []struct {
	Ctx    context.Context
	PortID string
	Opts   cloud.UpdatePipelinePort
} {
	var calls []struct {
		Ctx    context.Context
		PortID string
		Opts   cloud.UpdatePipelinePort
	}
	mock.lockUpdatePipelinePort.RLock()
	calls = mock.calls.UpdatePipelinePort
	mock.lockUpdatePipelinePort.RUnlock()
	return calls
}

// UpdatePipelineSecret calls UpdatePipelineSecretFunc.
func (mock *ClientMock) UpdatePipelineSecret(ctx context.Context, secretID string, opts cloud.UpdatePipelineSecret) error {
	callInfo := struct {
		Ctx      context.Context
		SecretID string
		Opts     cloud.UpdatePipelineSecret
	}{
		Ctx:      ctx,
		SecretID: secretID,
		Opts:     opts,
	}
	mock.lockUpdatePipelineSecret.Lock()
	mock.calls.UpdatePipelineSecret = append(mock.calls.UpdatePipelineSecret, callInfo)
	mock.lockUpdatePipelineSecret.Unlock()
	if mock.UpdatePipelineSecretFunc == nil {
		var errOut error
		return errOut
	}
	return mock.UpdatePipelineSecretFunc(ctx, secretID, opts)
}

// UpdatePipelineSecretCalls gets all the calls that were made to UpdatePipelineSecret.
// Check the length with:
//     len(mockedClient.UpdatePipelineSecretCalls())
func (mock *ClientMock) UpdatePipelineSecretCalls() []struct {
	Ctx      context.Context
	SecretID string
	Opts     cloud.UpdatePipelineSecret
} {
	var calls []struct {
		Ctx      context.Context
		SecretID string
		Opts     cloud.UpdatePipelineSecret
	}
	mock.lockUpdatePipelineSecret.RLock()
	calls = mock.calls.UpdatePipelineSecret
	mock.lockUpdatePipelineSecret.RUnlock()
	return calls
}

// UpdateProject calls UpdateProjectFunc.
func (mock *ClientMock) UpdateProject(ctx context.Context, projectID string, opts cloud.UpdateProject) error {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Opts      cloud.UpdateProject
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Opts:      opts,
	}
	mock.lockUpdateProject.Lock()
	mock.calls.UpdateProject = append(mock.calls.UpdateProject, callInfo)
	mock.lockUpdateProject.Unlock()
	if mock.UpdateProjectFunc == nil {
		var errOut error
		return errOut
	}
	return mock.UpdateProjectFunc(ctx, projectID, opts)
}

// UpdateProjectCalls gets all the calls that were made to UpdateProject.
// Check the length with:
//     len(mockedClient.UpdateProjectCalls())
func (mock *ClientMock) UpdateProjectCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Opts      cloud.UpdateProject
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Opts      cloud.UpdateProject
	}
	mock.lockUpdateProject.RLock()
	calls = mock.calls.UpdateProject
	mock.lockUpdateProject.RUnlock()
	return calls
}

// UpdateResourceProfile calls UpdateResourceProfileFunc.
func (mock *ClientMock) UpdateResourceProfile(ctx context.Context, resourceProfileID string, opts cloud.UpdateResourceProfile) error {
	callInfo := struct {
		Ctx               context.Context
		ResourceProfileID string
		Opts              cloud.UpdateResourceProfile
	}{
		Ctx:               ctx,
		ResourceProfileID: resourceProfileID,
		Opts:              opts,
	}
	mock.lockUpdateResourceProfile.Lock()
	mock.calls.UpdateResourceProfile = append(mock.calls.UpdateResourceProfile, callInfo)
	mock.lockUpdateResourceProfile.Unlock()
	if mock.UpdateResourceProfileFunc == nil {
		var errOut error
		return errOut
	}
	return mock.UpdateResourceProfileFunc(ctx, resourceProfileID, opts)
}

// UpdateResourceProfileCalls gets all the calls that were made to UpdateResourceProfile.
// Check the length with:
//     len(mockedClient.UpdateResourceProfileCalls())
func (mock *ClientMock) UpdateResourceProfileCalls() []struct {
	Ctx               context.Context
	ResourceProfileID string
	Opts              cloud.UpdateResourceProfile
} {
	var calls []struct {
		Ctx               context.Context
		ResourceProfileID string
		Opts              cloud.UpdateResourceProfile
	}
	mock.lockUpdateResourceProfile.RLock()
	calls = mock.calls.UpdateResourceProfile
	mock.lockUpdateResourceProfile.RUnlock()
	return calls
}

// UpdateToken calls UpdateTokenFunc.
func (mock *ClientMock) UpdateToken(ctx context.Context, tokenID string, opts cloud.UpdateToken) error {
	callInfo := struct {
		Ctx     context.Context
		TokenID string
		Opts    cloud.UpdateToken
	}{
		Ctx:     ctx,
		TokenID: tokenID,
		Opts:    opts,
	}
	mock.lockUpdateToken.Lock()
	mock.calls.UpdateToken = append(mock.calls.UpdateToken, callInfo)
	mock.lockUpdateToken.Unlock()
	if mock.UpdateTokenFunc == nil {
		var errOut error
		return errOut
	}
	return mock.UpdateTokenFunc(ctx, tokenID, opts)
}

// UpdateTokenCalls gets all the calls that were made to UpdateToken.
// Check the length with:
//     len(mockedClient.UpdateTokenCalls())
func (mock *ClientMock) UpdateTokenCalls() []struct {
	Ctx     context.Context
	TokenID string
	Opts    cloud.UpdateToken
} {
	var calls []struct {
		Ctx     context.Context
		TokenID string
		Opts    cloud.UpdateToken
	}
	mock.lockUpdateToken.RLock()
	calls = mock.calls.UpdateToken
	mock.lockUpdateToken.RUnlock()
	return calls
}

// ValidateConfig calls ValidateConfigFunc.
func (mock *ClientMock) ValidateConfig(ctx context.Context, agentType cloud.AgentType, payload cloud.ValidatingConfig) (cloud.ValidatedConfig, error) {
	callInfo := struct {
		Ctx       context.Context
		AgentType cloud.AgentType
		Payload   cloud.ValidatingConfig
	}{
		Ctx:       ctx,
		AgentType: agentType,
		Payload:   payload,
	}
	mock.lockValidateConfig.Lock()
	mock.calls.ValidateConfig = append(mock.calls.ValidateConfig, callInfo)
	mock.lockValidateConfig.Unlock()
	if mock.ValidateConfigFunc == nil {
		var (
			validatedConfigOut cloud.ValidatedConfig
			errOut             error
		)
		return validatedConfigOut, errOut
	}
	return mock.ValidateConfigFunc(ctx, agentType, payload)
}

// ValidateConfigCalls gets all the calls that were made to ValidateConfig.
// Check the length with:
//     len(mockedClient.ValidateConfigCalls())
func (mock *ClientMock) ValidateConfigCalls() []struct {
	Ctx       context.Context
	AgentType cloud.AgentType
	Payload   cloud.ValidatingConfig
} {
	var calls []struct {
		Ctx       context.Context
		AgentType cloud.AgentType
		Payload   cloud.ValidatingConfig
	}
	mock.lockValidateConfig.RLock()
	calls = mock.calls.ValidateConfig
	mock.lockValidateConfig.RUnlock()
	return calls
}
