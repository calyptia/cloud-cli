// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"context"
	cloud "github.com/calyptia/api/types"
	"sync"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked Client
//		mockedClient := &ClientMock{
//			AcceptInvitationFunc: func(ctx context.Context, payload cloud.AcceptInvitation) error {
//				panic("mock out the AcceptInvitation method")
//			},
//			ActiveTraceSessionFunc: func(ctx context.Context, pipelineID string) (cloud.TraceSession, error) {
//				panic("mock out the ActiveTraceSession method")
//			},
//			AgentFunc: func(ctx context.Context, agentID string) (cloud.Agent, error) {
//				panic("mock out the Agent method")
//			},
//			AgentConfigHistoryFunc: func(ctx context.Context, agentID string, params cloud.AgentConfigHistoryParams) (cloud.AgentConfigHistory, error) {
//				panic("mock out the AgentConfigHistory method")
//			},
//			AgentMetricsFunc: func(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.MetricsSummary, error) {
//				panic("mock out the AgentMetrics method")
//			},
//			AgentMetricsByPluginFunc: func(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.MetricsSummaryPlugin, error) {
//				panic("mock out the AgentMetricsByPlugin method")
//			},
//			AgentMetricsOverTimeByPluginFunc: func(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.MetricsOverTimeByPlugin, error) {
//				panic("mock out the AgentMetricsOverTimeByPlugin method")
//			},
//			AgentMetricsV1Func: func(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.AgentMetrics, error) {
//				panic("mock out the AgentMetricsV1 method")
//			},
//			AgentOverTimeMetricsFunc: func(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.MetricsOverTime, error) {
//				panic("mock out the AgentOverTimeMetrics method")
//			},
//			AgentsFunc: func(ctx context.Context, projectID string, params cloud.AgentsParams) (cloud.Agents, error) {
//				panic("mock out the Agents method")
//			},
//			ClusterObjectFunc: func(ctx context.Context, checkID string) (cloud.ClusterObject, error) {
//				panic("mock out the ClusterObject method")
//			},
//			ClusterObjectsFunc: func(ctx context.Context, coreInstanceID string, params cloud.ClusterObjectParams) (cloud.ClusterObjects, error) {
//				panic("mock out the ClusterObjects method")
//			},
//			ConfigSectionFunc: func(ctx context.Context, configSectionID string) (cloud.ConfigSection, error) {
//				panic("mock out the ConfigSection method")
//			},
//			ConfigSectionsFunc: func(ctx context.Context, projectID string, params cloud.ConfigSectionsParams) (cloud.ConfigSections, error) {
//				panic("mock out the ConfigSections method")
//			},
//			CoreInstanceFunc: func(ctx context.Context, instanceID string) (cloud.CoreInstance, error) {
//				panic("mock out the CoreInstance method")
//			},
//			CoreInstanceCheckFunc: func(ctx context.Context, checkID string) (cloud.CoreInstanceCheck, error) {
//				panic("mock out the CoreInstanceCheck method")
//			},
//			CoreInstanceChecksFunc: func(ctx context.Context, coreInstanceID string, params cloud.CoreInstanceChecksParams) (cloud.CoreInstanceChecks, error) {
//				panic("mock out the CoreInstanceChecks method")
//			},
//			CoreInstanceMetricsFunc: func(ctx context.Context, coreInstanceID string, params cloud.MetricsParams) (cloud.MetricsSummary, error) {
//				panic("mock out the CoreInstanceMetrics method")
//			},
//			CoreInstanceMetricsByPluginFunc: func(ctx context.Context, coreInstanceID string, params cloud.MetricsParams) (cloud.MetricsSummaryPlugin, error) {
//				panic("mock out the CoreInstanceMetricsByPlugin method")
//			},
//			CoreInstanceMetricsOverTimeByPluginFunc: func(ctx context.Context, coreInstanceID string, params cloud.MetricsParams) (cloud.MetricsOverTimeByPlugin, error) {
//				panic("mock out the CoreInstanceMetricsOverTimeByPlugin method")
//			},
//			CoreInstanceMetricsV1Func: func(ctx context.Context, instanceID string, params cloud.MetricsParams) (cloud.CoreInstanceMetricsV1, error) {
//				panic("mock out the CoreInstanceMetricsV1 method")
//			},
//			CoreInstanceOverTimeMetricsFunc: func(ctx context.Context, coreInstanceID string, params cloud.MetricsParams) (cloud.MetricsOverTime, error) {
//				panic("mock out the CoreInstanceOverTimeMetrics method")
//			},
//			CoreInstancePingFunc: func(ctx context.Context, instanceID string) (cloud.CoreInstancePingResponse, error) {
//				panic("mock out the CoreInstancePing method")
//			},
//			CoreInstancesFunc: func(ctx context.Context, projectID string, params cloud.CoreInstancesParams) (cloud.CoreInstances, error) {
//				panic("mock out the CoreInstances method")
//			},
//			CreateClusterObjectFunc: func(ctx context.Context, coreInstanceID string, payload cloud.CreateClusterObject) (cloud.CreatedClusterObject, error) {
//				panic("mock out the CreateClusterObject method")
//			},
//			CreateConfigSectionFunc: func(ctx context.Context, projectID string, in cloud.CreateConfigSection) (cloud.CreatedConfigSection, error) {
//				panic("mock out the CreateConfigSection method")
//			},
//			CreateCoreInstanceFunc: func(ctx context.Context, payload cloud.CreateCoreInstance) (cloud.CreatedCoreInstance, error) {
//				panic("mock out the CreateCoreInstance method")
//			},
//			CreateCoreInstanceCheckFunc: func(ctx context.Context, coreInstanceID string, payload cloud.CreateCoreInstanceCheck) (cloud.CreatedCoreInstanceCheck, error) {
//				panic("mock out the CreateCoreInstanceCheck method")
//			},
//			CreateEnvironmentFunc: func(ctx context.Context, projectID string, payload cloud.CreateEnvironment) (cloud.CreatedEnvironment, error) {
//				panic("mock out the CreateEnvironment method")
//			},
//			CreateIngestCheckFunc: func(ctx context.Context, coreInstanceID string, payload cloud.CreateIngestCheck) (cloud.CreatedIngestCheck, error) {
//				panic("mock out the CreateIngestCheck method")
//			},
//			CreateInvitationFunc: func(ctx context.Context, projectID string, payload cloud.CreateInvitation) error {
//				panic("mock out the CreateInvitation method")
//			},
//			CreatePipelineFunc: func(ctx context.Context, instanceID string, payload cloud.CreatePipeline) (cloud.CreatedPipeline, error) {
//				panic("mock out the CreatePipeline method")
//			},
//			CreatePipelineCheckFunc: func(ctx context.Context, pipelineID string, payload cloud.CreatePipelineCheck) (cloud.CreatedPipelineCheck, error) {
//				panic("mock out the CreatePipelineCheck method")
//			},
//			CreatePipelineFileFunc: func(ctx context.Context, pipelineID string, payload cloud.CreatePipelineFile) (cloud.CreatedPipelineFile, error) {
//				panic("mock out the CreatePipelineFile method")
//			},
//			CreatePipelinePortFunc: func(ctx context.Context, pipelineID string, payload cloud.CreatePipelinePort) (cloud.CreatedPipelinePort, error) {
//				panic("mock out the CreatePipelinePort method")
//			},
//			CreatePipelineSecretFunc: func(ctx context.Context, pipelineID string, payload cloud.CreatePipelineSecret) (cloud.CreatedPipelineSecret, error) {
//				panic("mock out the CreatePipelineSecret method")
//			},
//			CreateProcessingRuleFunc: func(ctx context.Context, in cloud.CreateProcessingRule) (cloud.CreatedProcessingRule, error) {
//				panic("mock out the CreateProcessingRule method")
//			},
//			CreateProjectFunc: func(ctx context.Context, payload cloud.CreateProject) (cloud.CreatedProject, error) {
//				panic("mock out the CreateProject method")
//			},
//			CreateResourceProfileFunc: func(ctx context.Context, instanceID string, payload cloud.CreateResourceProfile) (cloud.CreatedResourceProfile, error) {
//				panic("mock out the CreateResourceProfile method")
//			},
//			CreateTokenFunc: func(ctx context.Context, projectID string, payload cloud.CreateToken) (cloud.Token, error) {
//				panic("mock out the CreateToken method")
//			},
//			CreateTraceRecordFunc: func(ctx context.Context, pipelineID string, in cloud.CreateTraceRecord) (cloud.CreatedTraceRecord, error) {
//				panic("mock out the CreateTraceRecord method")
//			},
//			CreateTraceSessionFunc: func(ctx context.Context, pipelineID string, in cloud.CreateTraceSession) (cloud.CreatedTraceSession, error) {
//				panic("mock out the CreateTraceSession method")
//			},
//			DeleteAgentFunc: func(ctx context.Context, agentID string) error {
//				panic("mock out the DeleteAgent method")
//			},
//			DeleteAgentsFunc: func(ctx context.Context, projectID string, agentIDs ...string) error {
//				panic("mock out the DeleteAgents method")
//			},
//			DeleteClusterObjectFunc: func(ctx context.Context, checkID string) error {
//				panic("mock out the DeleteClusterObject method")
//			},
//			DeleteConfigSectionFunc: func(ctx context.Context, configSectionID string) error {
//				panic("mock out the DeleteConfigSection method")
//			},
//			DeleteCoreInstanceFunc: func(ctx context.Context, instanceID string) error {
//				panic("mock out the DeleteCoreInstance method")
//			},
//			DeleteCoreInstanceCheckFunc: func(ctx context.Context, checkID string) error {
//				panic("mock out the DeleteCoreInstanceCheck method")
//			},
//			DeleteCoreInstancesFunc: func(ctx context.Context, projectID string, instanceIDs ...string) error {
//				panic("mock out the DeleteCoreInstances method")
//			},
//			DeleteEnvironmentFunc: func(ctx context.Context, environmentID string) error {
//				panic("mock out the DeleteEnvironment method")
//			},
//			DeleteIngestCheckFunc: func(ctx context.Context, checkID string) error {
//				panic("mock out the DeleteIngestCheck method")
//			},
//			DeletePipelineFunc: func(ctx context.Context, pipelineID string) error {
//				panic("mock out the DeletePipeline method")
//			},
//			DeletePipelineCheckFunc: func(ctx context.Context, checkID string) error {
//				panic("mock out the DeletePipelineCheck method")
//			},
//			DeletePipelineClusterObjectsFunc: func(ctx context.Context, pipelineID string, clusterObjectIDs ...string) error {
//				panic("mock out the DeletePipelineClusterObjects method")
//			},
//			DeletePipelineFileFunc: func(ctx context.Context, fileID string) error {
//				panic("mock out the DeletePipelineFile method")
//			},
//			DeletePipelinePortFunc: func(ctx context.Context, portID string) error {
//				panic("mock out the DeletePipelinePort method")
//			},
//			DeletePipelineSecretFunc: func(ctx context.Context, secretID string) error {
//				panic("mock out the DeletePipelineSecret method")
//			},
//			DeletePipelinesFunc: func(ctx context.Context, instanceID string, pipelineIDs ...string) error {
//				panic("mock out the DeletePipelines method")
//			},
//			DeleteProcessingRuleFunc: func(ctx context.Context, processingRuleID string) error {
//				panic("mock out the DeleteProcessingRule method")
//			},
//			DeleteResourceProfileFunc: func(ctx context.Context, resourceProfileID string) error {
//				panic("mock out the DeleteResourceProfile method")
//			},
//			DeleteTokenFunc: func(ctx context.Context, tokenID string) error {
//				panic("mock out the DeleteToken method")
//			},
//			EnvironmentsFunc: func(ctx context.Context, projectID string, params cloud.EnvironmentsParams) (cloud.Environments, error) {
//				panic("mock out the Environments method")
//			},
//			IngestCheckFunc: func(ctx context.Context, checkID string) (cloud.IngestCheck, error) {
//				panic("mock out the IngestCheck method")
//			},
//			IngestChecksFunc: func(ctx context.Context, coreInstanceID string, params cloud.IngestChecksParams) (cloud.IngestChecks, error) {
//				panic("mock out the IngestChecks method")
//			},
//			MembersFunc: func(ctx context.Context, projectID string, params cloud.MembersParams) (cloud.Memberships, error) {
//				panic("mock out the Members method")
//			},
//			PipelineFunc: func(ctx context.Context, pipelineID string, params cloud.PipelineParams) (cloud.Pipeline, error) {
//				panic("mock out the Pipeline method")
//			},
//			PipelineCheckFunc: func(ctx context.Context, checkID string) (cloud.PipelineCheck, error) {
//				panic("mock out the PipelineCheck method")
//			},
//			PipelineChecksFunc: func(ctx context.Context, pipelineID string, params cloud.PipelineChecksParams) (cloud.PipelineChecks, error) {
//				panic("mock out the PipelineChecks method")
//			},
//			PipelineClusterObjectsFunc: func(ctx context.Context, pipelineID string, params cloud.PipelineClusterObjectsParams) (cloud.ClusterObjects, error) {
//				panic("mock out the PipelineClusterObjects method")
//			},
//			PipelineConfigHistoryFunc: func(ctx context.Context, pipelineID string, params cloud.PipelineConfigHistoryParams) (cloud.PipelineConfigHistory, error) {
//				panic("mock out the PipelineConfigHistory method")
//			},
//			PipelineFileFunc: func(ctx context.Context, fileID string) (cloud.PipelineFile, error) {
//				panic("mock out the PipelineFile method")
//			},
//			PipelineFilesFunc: func(ctx context.Context, pipelineID string, params cloud.PipelineFilesParams) (cloud.PipelineFiles, error) {
//				panic("mock out the PipelineFiles method")
//			},
//			PipelineMetricsFunc: func(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.MetricsSummary, error) {
//				panic("mock out the PipelineMetrics method")
//			},
//			PipelineMetricsByPluginFunc: func(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.MetricsSummaryPlugin, error) {
//				panic("mock out the PipelineMetricsByPlugin method")
//			},
//			PipelineMetricsOverTimeByPluginFunc: func(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.MetricsOverTimeByPlugin, error) {
//				panic("mock out the PipelineMetricsOverTimeByPlugin method")
//			},
//			PipelineMetricsV1Func: func(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.AgentMetrics, error) {
//				panic("mock out the PipelineMetricsV1 method")
//			},
//			PipelineOverTimeMetricsFunc: func(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.MetricsOverTime, error) {
//				panic("mock out the PipelineOverTimeMetrics method")
//			},
//			PipelinePortFunc: func(ctx context.Context, portID string) (cloud.PipelinePort, error) {
//				panic("mock out the PipelinePort method")
//			},
//			PipelinePortsFunc: func(ctx context.Context, pipelineID string, params cloud.PipelinePortsParams) (cloud.PipelinePorts, error) {
//				panic("mock out the PipelinePorts method")
//			},
//			PipelineSecretFunc: func(ctx context.Context, secretID string) (cloud.PipelineSecret, error) {
//				panic("mock out the PipelineSecret method")
//			},
//			PipelineSecretsFunc: func(ctx context.Context, pipelineID string, params cloud.PipelineSecretsParams) (cloud.PipelineSecrets, error) {
//				panic("mock out the PipelineSecrets method")
//			},
//			PipelineStatusHistoryFunc: func(ctx context.Context, pipelineID string, params cloud.PipelineStatusHistoryParams) (cloud.PipelineStatusHistory, error) {
//				panic("mock out the PipelineStatusHistory method")
//			},
//			PipelinesFunc: func(ctx context.Context, instanceID string, params cloud.PipelinesParams) (cloud.Pipelines, error) {
//				panic("mock out the Pipelines method")
//			},
//			PipelinesMetricsV1Func: func(ctx context.Context, instanceID string, params cloud.PipelinesMetricsParams) (cloud.PipelinesMetrics, error) {
//				panic("mock out the PipelinesMetricsV1 method")
//			},
//			PreviewProcessingRuleFunc: func(ctx context.Context, in cloud.PreviewProcessingRule) ([]cloud.FluentBitLog, error) {
//				panic("mock out the PreviewProcessingRule method")
//			},
//			ProcessingRuleFunc: func(ctx context.Context, processingRuleID string) (cloud.ProcessingRule, error) {
//				panic("mock out the ProcessingRule method")
//			},
//			ProcessingRulesFunc: func(ctx context.Context, params cloud.ProcessingRulesParams) (cloud.ProcessingRules, error) {
//				panic("mock out the ProcessingRules method")
//			},
//			ProjectFunc: func(ctx context.Context, projectID string) (cloud.Project, error) {
//				panic("mock out the Project method")
//			},
//			ProjectMetricsV1Func: func(ctx context.Context, projectID string, params cloud.MetricsParams) (cloud.ProjectMetrics, error) {
//				panic("mock out the ProjectMetricsV1 method")
//			},
//			ProjectPipelinesFunc: func(ctx context.Context, projectID string, params cloud.PipelinesParams) (cloud.Pipelines, error) {
//				panic("mock out the ProjectPipelines method")
//			},
//			ProjectsFunc: func(ctx context.Context, params cloud.ProjectsParams) (cloud.Projects, error) {
//				panic("mock out the Projects method")
//			},
//			RegisterAgentFunc: func(ctx context.Context, payload cloud.RegisterAgent) (cloud.RegisteredAgent, error) {
//				panic("mock out the RegisterAgent method")
//			},
//			ResourceProfileFunc: func(ctx context.Context, resourceProfileID string) (cloud.ResourceProfile, error) {
//				panic("mock out the ResourceProfile method")
//			},
//			ResourceProfilesFunc: func(ctx context.Context, instanceID string, params cloud.ResourceProfilesParams) (cloud.ResourceProfiles, error) {
//				panic("mock out the ResourceProfiles method")
//			},
//			SendVerificationEmailFunc: func(ctx context.Context) error {
//				panic("mock out the SendVerificationEmail method")
//			},
//			SetAgentTokenFunc: func(s string)  {
//				panic("mock out the SetAgentToken method")
//			},
//			SetCoreInstanceTokenFunc: func(s string)  {
//				panic("mock out the SetCoreInstanceToken method")
//			},
//			SetProjectTokenFunc: func(s string)  {
//				panic("mock out the SetProjectToken method")
//			},
//			SetUserAgentFunc: func(s string)  {
//				panic("mock out the SetUserAgent method")
//			},
//			TerminateActiveTraceSessionFunc: func(ctx context.Context, pipelineID string) (cloud.TerminatedTraceSession, error) {
//				panic("mock out the TerminateActiveTraceSession method")
//			},
//			TokenFunc: func(ctx context.Context, tokenID string) (cloud.Token, error) {
//				panic("mock out the Token method")
//			},
//			TokensFunc: func(ctx context.Context, projectID string, params cloud.TokensParams) (cloud.Tokens, error) {
//				panic("mock out the Tokens method")
//			},
//			TraceRecordsFunc: func(ctx context.Context, sessionID string, params cloud.TraceRecordsParams) (cloud.TraceRecords, error) {
//				panic("mock out the TraceRecords method")
//			},
//			TraceSessionFunc: func(ctx context.Context, sessionID string) (cloud.TraceSession, error) {
//				panic("mock out the TraceSession method")
//			},
//			TraceSessionsFunc: func(ctx context.Context, pipelineID string, params cloud.TraceSessionsParams) (cloud.TraceSessions, error) {
//				panic("mock out the TraceSessions method")
//			},
//			UpdateAgentFunc: func(ctx context.Context, agentID string, payload cloud.UpdateAgent) error {
//				panic("mock out the UpdateAgent method")
//			},
//			UpdateClusterObjectFunc: func(ctx context.Context, checkID string, opts cloud.UpdateClusterObject) error {
//				panic("mock out the UpdateClusterObject method")
//			},
//			UpdateConfigSectionFunc: func(ctx context.Context, configSectionID string, in cloud.UpdateConfigSection) (cloud.UpdatedConfigSection, error) {
//				panic("mock out the UpdateConfigSection method")
//			},
//			UpdateConfigSectionSetFunc: func(ctx context.Context, pipelineID string, configSectionIDs ...string) error {
//				panic("mock out the UpdateConfigSectionSet method")
//			},
//			UpdateCoreInstanceFunc: func(ctx context.Context, instanceID string, payload cloud.UpdateCoreInstance) error {
//				panic("mock out the UpdateCoreInstance method")
//			},
//			UpdateCoreInstanceCheckFunc: func(ctx context.Context, checkID string, opts cloud.UpdateCoreInstanceCheck) error {
//				panic("mock out the UpdateCoreInstanceCheck method")
//			},
//			UpdateEnvironmentFunc: func(ctx context.Context, environmentID string, payload cloud.UpdateEnvironment) error {
//				panic("mock out the UpdateEnvironment method")
//			},
//			UpdateIngestCheckFunc: func(ctx context.Context, checkID string, opts cloud.UpdateIngestCheck) error {
//				panic("mock out the UpdateIngestCheck method")
//			},
//			UpdatePipelineFunc: func(ctx context.Context, pipelineID string, opts cloud.UpdatePipeline) (cloud.UpdatedPipeline, error) {
//				panic("mock out the UpdatePipeline method")
//			},
//			UpdatePipelineCheckFunc: func(ctx context.Context, checkID string, opts cloud.UpdatePipelineCheck) error {
//				panic("mock out the UpdatePipelineCheck method")
//			},
//			UpdatePipelineClusterObjectsFunc: func(ctx context.Context, pipelineID string, opts cloud.UpdatePipelineClusterObjects) error {
//				panic("mock out the UpdatePipelineClusterObjects method")
//			},
//			UpdatePipelineFileFunc: func(ctx context.Context, fileID string, opts cloud.UpdatePipelineFile) error {
//				panic("mock out the UpdatePipelineFile method")
//			},
//			UpdatePipelinePortFunc: func(ctx context.Context, portID string, opts cloud.UpdatePipelinePort) error {
//				panic("mock out the UpdatePipelinePort method")
//			},
//			UpdatePipelineSecretFunc: func(ctx context.Context, secretID string, opts cloud.UpdatePipelineSecret) error {
//				panic("mock out the UpdatePipelineSecret method")
//			},
//			UpdateProcessingRuleFunc: func(ctx context.Context, in cloud.UpdateProcessingRule) (cloud.UpdatedProcessingRule, error) {
//				panic("mock out the UpdateProcessingRule method")
//			},
//			UpdateProjectFunc: func(ctx context.Context, projectID string, opts cloud.UpdateProject) error {
//				panic("mock out the UpdateProject method")
//			},
//			UpdateResourceProfileFunc: func(ctx context.Context, resourceProfileID string, opts cloud.UpdateResourceProfile) error {
//				panic("mock out the UpdateResourceProfile method")
//			},
//			UpdateTokenFunc: func(ctx context.Context, tokenID string, opts cloud.UpdateToken) error {
//				panic("mock out the UpdateToken method")
//			},
//			UpdateTraceSessionFunc: func(ctx context.Context, sessionID string, in cloud.UpdateTraceSession) (cloud.UpdatedTraceSession, error) {
//				panic("mock out the UpdateTraceSession method")
//			},
//			ValidateConfigFunc: func(ctx context.Context, agentType cloud.AgentType, payload cloud.ValidatingConfig) (cloud.ValidatedConfig, error) {
//				panic("mock out the ValidateConfig method")
//			},
//			ValidateConfigV2Func: func(ctx context.Context, payload cloud.ValidatingConfig) (cloud.ValidatedConfigV2, error) {
//				panic("mock out the ValidateConfigV2 method")
//			},
//		}
//
//		// use mockedClient in code that requires Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// AcceptInvitationFunc mocks the AcceptInvitation method.
	AcceptInvitationFunc func(ctx context.Context, payload cloud.AcceptInvitation) error

	// ActiveTraceSessionFunc mocks the ActiveTraceSession method.
	ActiveTraceSessionFunc func(ctx context.Context, pipelineID string) (cloud.TraceSession, error)

	// AgentFunc mocks the Agent method.
	AgentFunc func(ctx context.Context, agentID string) (cloud.Agent, error)

	// AgentConfigHistoryFunc mocks the AgentConfigHistory method.
	AgentConfigHistoryFunc func(ctx context.Context, agentID string, params cloud.AgentConfigHistoryParams) (cloud.AgentConfigHistory, error)

	// AgentMetricsFunc mocks the AgentMetrics method.
	AgentMetricsFunc func(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.MetricsSummary, error)

	// AgentMetricsByPluginFunc mocks the AgentMetricsByPlugin method.
	AgentMetricsByPluginFunc func(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.MetricsSummaryPlugin, error)

	// AgentMetricsOverTimeByPluginFunc mocks the AgentMetricsOverTimeByPlugin method.
	AgentMetricsOverTimeByPluginFunc func(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.MetricsOverTimeByPlugin, error)

	// AgentMetricsV1Func mocks the AgentMetricsV1 method.
	AgentMetricsV1Func func(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.AgentMetrics, error)

	// AgentOverTimeMetricsFunc mocks the AgentOverTimeMetrics method.
	AgentOverTimeMetricsFunc func(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.MetricsOverTime, error)

	// AgentsFunc mocks the Agents method.
	AgentsFunc func(ctx context.Context, projectID string, params cloud.AgentsParams) (cloud.Agents, error)

	// ClusterObjectFunc mocks the ClusterObject method.
	ClusterObjectFunc func(ctx context.Context, checkID string) (cloud.ClusterObject, error)

	// ClusterObjectsFunc mocks the ClusterObjects method.
	ClusterObjectsFunc func(ctx context.Context, coreInstanceID string, params cloud.ClusterObjectParams) (cloud.ClusterObjects, error)

	// ConfigSectionFunc mocks the ConfigSection method.
	ConfigSectionFunc func(ctx context.Context, configSectionID string) (cloud.ConfigSection, error)

	// ConfigSectionsFunc mocks the ConfigSections method.
	ConfigSectionsFunc func(ctx context.Context, projectID string, params cloud.ConfigSectionsParams) (cloud.ConfigSections, error)

	// CoreInstanceFunc mocks the CoreInstance method.
	CoreInstanceFunc func(ctx context.Context, instanceID string) (cloud.CoreInstance, error)

	// CoreInstanceCheckFunc mocks the CoreInstanceCheck method.
	CoreInstanceCheckFunc func(ctx context.Context, checkID string) (cloud.CoreInstanceCheck, error)

	// CoreInstanceChecksFunc mocks the CoreInstanceChecks method.
	CoreInstanceChecksFunc func(ctx context.Context, coreInstanceID string, params cloud.CoreInstanceChecksParams) (cloud.CoreInstanceChecks, error)

	// CoreInstanceMetricsFunc mocks the CoreInstanceMetrics method.
	CoreInstanceMetricsFunc func(ctx context.Context, coreInstanceID string, params cloud.MetricsParams) (cloud.MetricsSummary, error)

	// CoreInstanceMetricsByPluginFunc mocks the CoreInstanceMetricsByPlugin method.
	CoreInstanceMetricsByPluginFunc func(ctx context.Context, coreInstanceID string, params cloud.MetricsParams) (cloud.MetricsSummaryPlugin, error)

	// CoreInstanceMetricsOverTimeByPluginFunc mocks the CoreInstanceMetricsOverTimeByPlugin method.
	CoreInstanceMetricsOverTimeByPluginFunc func(ctx context.Context, coreInstanceID string, params cloud.MetricsParams) (cloud.MetricsOverTimeByPlugin, error)

	// CoreInstanceMetricsV1Func mocks the CoreInstanceMetricsV1 method.
	CoreInstanceMetricsV1Func func(ctx context.Context, instanceID string, params cloud.MetricsParams) (cloud.CoreInstanceMetricsV1, error)

	// CoreInstanceOverTimeMetricsFunc mocks the CoreInstanceOverTimeMetrics method.
	CoreInstanceOverTimeMetricsFunc func(ctx context.Context, coreInstanceID string, params cloud.MetricsParams) (cloud.MetricsOverTime, error)

	// CoreInstancePingFunc mocks the CoreInstancePing method.
	CoreInstancePingFunc func(ctx context.Context, instanceID string) (cloud.CoreInstancePingResponse, error)

	// CoreInstancesFunc mocks the CoreInstances method.
	CoreInstancesFunc func(ctx context.Context, projectID string, params cloud.CoreInstancesParams) (cloud.CoreInstances, error)

	// CreateClusterObjectFunc mocks the CreateClusterObject method.
	CreateClusterObjectFunc func(ctx context.Context, coreInstanceID string, payload cloud.CreateClusterObject) (cloud.CreatedClusterObject, error)

	// CreateConfigSectionFunc mocks the CreateConfigSection method.
	CreateConfigSectionFunc func(ctx context.Context, projectID string, in cloud.CreateConfigSection) (cloud.CreatedConfigSection, error)

	// CreateCoreInstanceFunc mocks the CreateCoreInstance method.
	CreateCoreInstanceFunc func(ctx context.Context, payload cloud.CreateCoreInstance) (cloud.CreatedCoreInstance, error)

	// CreateCoreInstanceCheckFunc mocks the CreateCoreInstanceCheck method.
	CreateCoreInstanceCheckFunc func(ctx context.Context, coreInstanceID string, payload cloud.CreateCoreInstanceCheck) (cloud.CreatedCoreInstanceCheck, error)

	// CreateEnvironmentFunc mocks the CreateEnvironment method.
	CreateEnvironmentFunc func(ctx context.Context, projectID string, payload cloud.CreateEnvironment) (cloud.CreatedEnvironment, error)

	// CreateIngestCheckFunc mocks the CreateIngestCheck method.
	CreateIngestCheckFunc func(ctx context.Context, coreInstanceID string, payload cloud.CreateIngestCheck) (cloud.CreatedIngestCheck, error)

	// CreateInvitationFunc mocks the CreateInvitation method.
	CreateInvitationFunc func(ctx context.Context, projectID string, payload cloud.CreateInvitation) error

	// CreatePipelineFunc mocks the CreatePipeline method.
	CreatePipelineFunc func(ctx context.Context, instanceID string, payload cloud.CreatePipeline) (cloud.CreatedPipeline, error)

	// CreatePipelineCheckFunc mocks the CreatePipelineCheck method.
	CreatePipelineCheckFunc func(ctx context.Context, pipelineID string, payload cloud.CreatePipelineCheck) (cloud.CreatedPipelineCheck, error)

	// CreatePipelineFileFunc mocks the CreatePipelineFile method.
	CreatePipelineFileFunc func(ctx context.Context, pipelineID string, payload cloud.CreatePipelineFile) (cloud.CreatedPipelineFile, error)

	// CreatePipelinePortFunc mocks the CreatePipelinePort method.
	CreatePipelinePortFunc func(ctx context.Context, pipelineID string, payload cloud.CreatePipelinePort) (cloud.CreatedPipelinePort, error)

	// CreatePipelineSecretFunc mocks the CreatePipelineSecret method.
	CreatePipelineSecretFunc func(ctx context.Context, pipelineID string, payload cloud.CreatePipelineSecret) (cloud.CreatedPipelineSecret, error)

	// CreateProcessingRuleFunc mocks the CreateProcessingRule method.
	CreateProcessingRuleFunc func(ctx context.Context, in cloud.CreateProcessingRule) (cloud.CreatedProcessingRule, error)

	// CreateProjectFunc mocks the CreateProject method.
	CreateProjectFunc func(ctx context.Context, payload cloud.CreateProject) (cloud.CreatedProject, error)

	// CreateResourceProfileFunc mocks the CreateResourceProfile method.
	CreateResourceProfileFunc func(ctx context.Context, instanceID string, payload cloud.CreateResourceProfile) (cloud.CreatedResourceProfile, error)

	// CreateTokenFunc mocks the CreateToken method.
	CreateTokenFunc func(ctx context.Context, projectID string, payload cloud.CreateToken) (cloud.Token, error)

	// CreateTraceRecordFunc mocks the CreateTraceRecord method.
	CreateTraceRecordFunc func(ctx context.Context, pipelineID string, in cloud.CreateTraceRecord) (cloud.CreatedTraceRecord, error)

	// CreateTraceSessionFunc mocks the CreateTraceSession method.
	CreateTraceSessionFunc func(ctx context.Context, pipelineID string, in cloud.CreateTraceSession) (cloud.CreatedTraceSession, error)

	// DeleteAgentFunc mocks the DeleteAgent method.
	DeleteAgentFunc func(ctx context.Context, agentID string) error

	// DeleteAgentsFunc mocks the DeleteAgents method.
	DeleteAgentsFunc func(ctx context.Context, projectID string, agentIDs ...string) error

	// DeleteClusterObjectFunc mocks the DeleteClusterObject method.
	DeleteClusterObjectFunc func(ctx context.Context, checkID string) error

	// DeleteConfigSectionFunc mocks the DeleteConfigSection method.
	DeleteConfigSectionFunc func(ctx context.Context, configSectionID string) error

	// DeleteCoreInstanceFunc mocks the DeleteCoreInstance method.
	DeleteCoreInstanceFunc func(ctx context.Context, instanceID string) error

	// DeleteCoreInstanceCheckFunc mocks the DeleteCoreInstanceCheck method.
	DeleteCoreInstanceCheckFunc func(ctx context.Context, checkID string) error

	// DeleteCoreInstancesFunc mocks the DeleteCoreInstances method.
	DeleteCoreInstancesFunc func(ctx context.Context, projectID string, instanceIDs ...string) error

	// DeleteEnvironmentFunc mocks the DeleteEnvironment method.
	DeleteEnvironmentFunc func(ctx context.Context, environmentID string) error

	// DeleteIngestCheckFunc mocks the DeleteIngestCheck method.
	DeleteIngestCheckFunc func(ctx context.Context, checkID string) error

	// DeletePipelineFunc mocks the DeletePipeline method.
	DeletePipelineFunc func(ctx context.Context, pipelineID string) error

	// DeletePipelineCheckFunc mocks the DeletePipelineCheck method.
	DeletePipelineCheckFunc func(ctx context.Context, checkID string) error

	// DeletePipelineClusterObjectsFunc mocks the DeletePipelineClusterObjects method.
	DeletePipelineClusterObjectsFunc func(ctx context.Context, pipelineID string, clusterObjectIDs ...string) error

	// DeletePipelineFileFunc mocks the DeletePipelineFile method.
	DeletePipelineFileFunc func(ctx context.Context, fileID string) error

	// DeletePipelinePortFunc mocks the DeletePipelinePort method.
	DeletePipelinePortFunc func(ctx context.Context, portID string) error

	// DeletePipelineSecretFunc mocks the DeletePipelineSecret method.
	DeletePipelineSecretFunc func(ctx context.Context, secretID string) error

	// DeletePipelinesFunc mocks the DeletePipelines method.
	DeletePipelinesFunc func(ctx context.Context, instanceID string, pipelineIDs ...string) error

	// DeleteProcessingRuleFunc mocks the DeleteProcessingRule method.
	DeleteProcessingRuleFunc func(ctx context.Context, processingRuleID string) error

	// DeleteResourceProfileFunc mocks the DeleteResourceProfile method.
	DeleteResourceProfileFunc func(ctx context.Context, resourceProfileID string) error

	// DeleteTokenFunc mocks the DeleteToken method.
	DeleteTokenFunc func(ctx context.Context, tokenID string) error

	// EnvironmentsFunc mocks the Environments method.
	EnvironmentsFunc func(ctx context.Context, projectID string, params cloud.EnvironmentsParams) (cloud.Environments, error)

	// IngestCheckFunc mocks the IngestCheck method.
	IngestCheckFunc func(ctx context.Context, checkID string) (cloud.IngestCheck, error)

	// IngestChecksFunc mocks the IngestChecks method.
	IngestChecksFunc func(ctx context.Context, coreInstanceID string, params cloud.IngestChecksParams) (cloud.IngestChecks, error)

	// MembersFunc mocks the Members method.
	MembersFunc func(ctx context.Context, projectID string, params cloud.MembersParams) (cloud.Memberships, error)

	// PipelineFunc mocks the Pipeline method.
	PipelineFunc func(ctx context.Context, pipelineID string, params cloud.PipelineParams) (cloud.Pipeline, error)

	// PipelineCheckFunc mocks the PipelineCheck method.
	PipelineCheckFunc func(ctx context.Context, checkID string) (cloud.PipelineCheck, error)

	// PipelineChecksFunc mocks the PipelineChecks method.
	PipelineChecksFunc func(ctx context.Context, pipelineID string, params cloud.PipelineChecksParams) (cloud.PipelineChecks, error)

	// PipelineClusterObjectsFunc mocks the PipelineClusterObjects method.
	PipelineClusterObjectsFunc func(ctx context.Context, pipelineID string, params cloud.PipelineClusterObjectsParams) (cloud.ClusterObjects, error)

	// PipelineConfigHistoryFunc mocks the PipelineConfigHistory method.
	PipelineConfigHistoryFunc func(ctx context.Context, pipelineID string, params cloud.PipelineConfigHistoryParams) (cloud.PipelineConfigHistory, error)

	// PipelineFileFunc mocks the PipelineFile method.
	PipelineFileFunc func(ctx context.Context, fileID string) (cloud.PipelineFile, error)

	// PipelineFilesFunc mocks the PipelineFiles method.
	PipelineFilesFunc func(ctx context.Context, pipelineID string, params cloud.PipelineFilesParams) (cloud.PipelineFiles, error)

	// PipelineMetricsFunc mocks the PipelineMetrics method.
	PipelineMetricsFunc func(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.MetricsSummary, error)

	// PipelineMetricsByPluginFunc mocks the PipelineMetricsByPlugin method.
	PipelineMetricsByPluginFunc func(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.MetricsSummaryPlugin, error)

	// PipelineMetricsOverTimeByPluginFunc mocks the PipelineMetricsOverTimeByPlugin method.
	PipelineMetricsOverTimeByPluginFunc func(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.MetricsOverTimeByPlugin, error)

	// PipelineMetricsV1Func mocks the PipelineMetricsV1 method.
	PipelineMetricsV1Func func(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.AgentMetrics, error)

	// PipelineOverTimeMetricsFunc mocks the PipelineOverTimeMetrics method.
	PipelineOverTimeMetricsFunc func(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.MetricsOverTime, error)

	// PipelinePortFunc mocks the PipelinePort method.
	PipelinePortFunc func(ctx context.Context, portID string) (cloud.PipelinePort, error)

	// PipelinePortsFunc mocks the PipelinePorts method.
	PipelinePortsFunc func(ctx context.Context, pipelineID string, params cloud.PipelinePortsParams) (cloud.PipelinePorts, error)

	// PipelineSecretFunc mocks the PipelineSecret method.
	PipelineSecretFunc func(ctx context.Context, secretID string) (cloud.PipelineSecret, error)

	// PipelineSecretsFunc mocks the PipelineSecrets method.
	PipelineSecretsFunc func(ctx context.Context, pipelineID string, params cloud.PipelineSecretsParams) (cloud.PipelineSecrets, error)

	// PipelineStatusHistoryFunc mocks the PipelineStatusHistory method.
	PipelineStatusHistoryFunc func(ctx context.Context, pipelineID string, params cloud.PipelineStatusHistoryParams) (cloud.PipelineStatusHistory, error)

	// PipelinesFunc mocks the Pipelines method.
	PipelinesFunc func(ctx context.Context, instanceID string, params cloud.PipelinesParams) (cloud.Pipelines, error)

	// PipelinesMetricsV1Func mocks the PipelinesMetricsV1 method.
	PipelinesMetricsV1Func func(ctx context.Context, instanceID string, params cloud.PipelinesMetricsParams) (cloud.PipelinesMetrics, error)

	// PreviewProcessingRuleFunc mocks the PreviewProcessingRule method.
	PreviewProcessingRuleFunc func(ctx context.Context, in cloud.PreviewProcessingRule) ([]cloud.FluentBitLog, error)

	// ProcessingRuleFunc mocks the ProcessingRule method.
	ProcessingRuleFunc func(ctx context.Context, processingRuleID string) (cloud.ProcessingRule, error)

	// ProcessingRulesFunc mocks the ProcessingRules method.
	ProcessingRulesFunc func(ctx context.Context, params cloud.ProcessingRulesParams) (cloud.ProcessingRules, error)

	// ProjectFunc mocks the Project method.
	ProjectFunc func(ctx context.Context, projectID string) (cloud.Project, error)

	// ProjectMetricsV1Func mocks the ProjectMetricsV1 method.
	ProjectMetricsV1Func func(ctx context.Context, projectID string, params cloud.MetricsParams) (cloud.ProjectMetrics, error)

	// ProjectPipelinesFunc mocks the ProjectPipelines method.
	ProjectPipelinesFunc func(ctx context.Context, projectID string, params cloud.PipelinesParams) (cloud.Pipelines, error)

	// ProjectsFunc mocks the Projects method.
	ProjectsFunc func(ctx context.Context, params cloud.ProjectsParams) (cloud.Projects, error)

	// RegisterAgentFunc mocks the RegisterAgent method.
	RegisterAgentFunc func(ctx context.Context, payload cloud.RegisterAgent) (cloud.RegisteredAgent, error)

	// ResourceProfileFunc mocks the ResourceProfile method.
	ResourceProfileFunc func(ctx context.Context, resourceProfileID string) (cloud.ResourceProfile, error)

	// ResourceProfilesFunc mocks the ResourceProfiles method.
	ResourceProfilesFunc func(ctx context.Context, instanceID string, params cloud.ResourceProfilesParams) (cloud.ResourceProfiles, error)

	// SendVerificationEmailFunc mocks the SendVerificationEmail method.
	SendVerificationEmailFunc func(ctx context.Context) error

	// SetAgentTokenFunc mocks the SetAgentToken method.
	SetAgentTokenFunc func(s string)

	// SetCoreInstanceTokenFunc mocks the SetCoreInstanceToken method.
	SetCoreInstanceTokenFunc func(s string)

	// SetProjectTokenFunc mocks the SetProjectToken method.
	SetProjectTokenFunc func(s string)

	// SetUserAgentFunc mocks the SetUserAgent method.
	SetUserAgentFunc func(s string)

	// TerminateActiveTraceSessionFunc mocks the TerminateActiveTraceSession method.
	TerminateActiveTraceSessionFunc func(ctx context.Context, pipelineID string) (cloud.TerminatedTraceSession, error)

	// TokenFunc mocks the Token method.
	TokenFunc func(ctx context.Context, tokenID string) (cloud.Token, error)

	// TokensFunc mocks the Tokens method.
	TokensFunc func(ctx context.Context, projectID string, params cloud.TokensParams) (cloud.Tokens, error)

	// TraceRecordsFunc mocks the TraceRecords method.
	TraceRecordsFunc func(ctx context.Context, sessionID string, params cloud.TraceRecordsParams) (cloud.TraceRecords, error)

	// TraceSessionFunc mocks the TraceSession method.
	TraceSessionFunc func(ctx context.Context, sessionID string) (cloud.TraceSession, error)

	// TraceSessionsFunc mocks the TraceSessions method.
	TraceSessionsFunc func(ctx context.Context, pipelineID string, params cloud.TraceSessionsParams) (cloud.TraceSessions, error)

	// UpdateAgentFunc mocks the UpdateAgent method.
	UpdateAgentFunc func(ctx context.Context, agentID string, payload cloud.UpdateAgent) error

	// UpdateClusterObjectFunc mocks the UpdateClusterObject method.
	UpdateClusterObjectFunc func(ctx context.Context, checkID string, opts cloud.UpdateClusterObject) error

	// UpdateConfigSectionFunc mocks the UpdateConfigSection method.
	UpdateConfigSectionFunc func(ctx context.Context, configSectionID string, in cloud.UpdateConfigSection) (cloud.UpdatedConfigSection, error)

	// UpdateConfigSectionSetFunc mocks the UpdateConfigSectionSet method.
	UpdateConfigSectionSetFunc func(ctx context.Context, pipelineID string, configSectionIDs ...string) error

	// UpdateCoreInstanceFunc mocks the UpdateCoreInstance method.
	UpdateCoreInstanceFunc func(ctx context.Context, instanceID string, payload cloud.UpdateCoreInstance) error

	// UpdateCoreInstanceCheckFunc mocks the UpdateCoreInstanceCheck method.
	UpdateCoreInstanceCheckFunc func(ctx context.Context, checkID string, opts cloud.UpdateCoreInstanceCheck) error

	// UpdateEnvironmentFunc mocks the UpdateEnvironment method.
	UpdateEnvironmentFunc func(ctx context.Context, environmentID string, payload cloud.UpdateEnvironment) error

	// UpdateIngestCheckFunc mocks the UpdateIngestCheck method.
	UpdateIngestCheckFunc func(ctx context.Context, checkID string, opts cloud.UpdateIngestCheck) error

	// UpdatePipelineFunc mocks the UpdatePipeline method.
	UpdatePipelineFunc func(ctx context.Context, pipelineID string, opts cloud.UpdatePipeline) (cloud.UpdatedPipeline, error)

	// UpdatePipelineCheckFunc mocks the UpdatePipelineCheck method.
	UpdatePipelineCheckFunc func(ctx context.Context, checkID string, opts cloud.UpdatePipelineCheck) error

	// UpdatePipelineClusterObjectsFunc mocks the UpdatePipelineClusterObjects method.
	UpdatePipelineClusterObjectsFunc func(ctx context.Context, pipelineID string, opts cloud.UpdatePipelineClusterObjects) error

	// UpdatePipelineFileFunc mocks the UpdatePipelineFile method.
	UpdatePipelineFileFunc func(ctx context.Context, fileID string, opts cloud.UpdatePipelineFile) error

	// UpdatePipelinePortFunc mocks the UpdatePipelinePort method.
	UpdatePipelinePortFunc func(ctx context.Context, portID string, opts cloud.UpdatePipelinePort) error

	// UpdatePipelineSecretFunc mocks the UpdatePipelineSecret method.
	UpdatePipelineSecretFunc func(ctx context.Context, secretID string, opts cloud.UpdatePipelineSecret) error

	// UpdateProcessingRuleFunc mocks the UpdateProcessingRule method.
	UpdateProcessingRuleFunc func(ctx context.Context, in cloud.UpdateProcessingRule) (cloud.UpdatedProcessingRule, error)

	// UpdateProjectFunc mocks the UpdateProject method.
	UpdateProjectFunc func(ctx context.Context, projectID string, opts cloud.UpdateProject) error

	// UpdateResourceProfileFunc mocks the UpdateResourceProfile method.
	UpdateResourceProfileFunc func(ctx context.Context, resourceProfileID string, opts cloud.UpdateResourceProfile) error

	// UpdateTokenFunc mocks the UpdateToken method.
	UpdateTokenFunc func(ctx context.Context, tokenID string, opts cloud.UpdateToken) error

	// UpdateTraceSessionFunc mocks the UpdateTraceSession method.
	UpdateTraceSessionFunc func(ctx context.Context, sessionID string, in cloud.UpdateTraceSession) (cloud.UpdatedTraceSession, error)

	// ValidateConfigFunc mocks the ValidateConfig method.
	ValidateConfigFunc func(ctx context.Context, agentType cloud.AgentType, payload cloud.ValidatingConfig) (cloud.ValidatedConfig, error)

	// ValidateConfigV2Func mocks the ValidateConfigV2 method.
	ValidateConfigV2Func func(ctx context.Context, payload cloud.ValidatingConfig) (cloud.ValidatedConfigV2, error)

	// calls tracks calls to the methods.
	calls struct {
		// AcceptInvitation holds details about calls to the AcceptInvitation method.
		AcceptInvitation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Payload is the payload argument value.
			Payload cloud.AcceptInvitation
		}
		// ActiveTraceSession holds details about calls to the ActiveTraceSession method.
		ActiveTraceSession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
		}
		// Agent holds details about calls to the Agent method.
		Agent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
		}
		// AgentConfigHistory holds details about calls to the AgentConfigHistory method.
		AgentConfigHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
			// Params is the params argument value.
			Params cloud.AgentConfigHistoryParams
		}
		// AgentMetrics holds details about calls to the AgentMetrics method.
		AgentMetrics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// AgentMetricsByPlugin holds details about calls to the AgentMetricsByPlugin method.
		AgentMetricsByPlugin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// AgentMetricsOverTimeByPlugin holds details about calls to the AgentMetricsOverTimeByPlugin method.
		AgentMetricsOverTimeByPlugin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// AgentMetricsV1 holds details about calls to the AgentMetricsV1 method.
		AgentMetricsV1 []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// AgentOverTimeMetrics holds details about calls to the AgentOverTimeMetrics method.
		AgentOverTimeMetrics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// Agents holds details about calls to the Agents method.
		Agents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Params is the params argument value.
			Params cloud.AgentsParams
		}
		// ClusterObject holds details about calls to the ClusterObject method.
		ClusterObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CheckID is the checkID argument value.
			CheckID string
		}
		// ClusterObjects holds details about calls to the ClusterObjects method.
		ClusterObjects []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CoreInstanceID is the coreInstanceID argument value.
			CoreInstanceID string
			// Params is the params argument value.
			Params cloud.ClusterObjectParams
		}
		// ConfigSection holds details about calls to the ConfigSection method.
		ConfigSection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConfigSectionID is the configSectionID argument value.
			ConfigSectionID string
		}
		// ConfigSections holds details about calls to the ConfigSections method.
		ConfigSections []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Params is the params argument value.
			Params cloud.ConfigSectionsParams
		}
		// CoreInstance holds details about calls to the CoreInstance method.
		CoreInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
		// CoreInstanceCheck holds details about calls to the CoreInstanceCheck method.
		CoreInstanceCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CheckID is the checkID argument value.
			CheckID string
		}
		// CoreInstanceChecks holds details about calls to the CoreInstanceChecks method.
		CoreInstanceChecks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CoreInstanceID is the coreInstanceID argument value.
			CoreInstanceID string
			// Params is the params argument value.
			Params cloud.CoreInstanceChecksParams
		}
		// CoreInstanceMetrics holds details about calls to the CoreInstanceMetrics method.
		CoreInstanceMetrics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CoreInstanceID is the coreInstanceID argument value.
			CoreInstanceID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// CoreInstanceMetricsByPlugin holds details about calls to the CoreInstanceMetricsByPlugin method.
		CoreInstanceMetricsByPlugin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CoreInstanceID is the coreInstanceID argument value.
			CoreInstanceID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// CoreInstanceMetricsOverTimeByPlugin holds details about calls to the CoreInstanceMetricsOverTimeByPlugin method.
		CoreInstanceMetricsOverTimeByPlugin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CoreInstanceID is the coreInstanceID argument value.
			CoreInstanceID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// CoreInstanceMetricsV1 holds details about calls to the CoreInstanceMetricsV1 method.
		CoreInstanceMetricsV1 []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// CoreInstanceOverTimeMetrics holds details about calls to the CoreInstanceOverTimeMetrics method.
		CoreInstanceOverTimeMetrics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CoreInstanceID is the coreInstanceID argument value.
			CoreInstanceID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// CoreInstancePing holds details about calls to the CoreInstancePing method.
		CoreInstancePing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
		// CoreInstances holds details about calls to the CoreInstances method.
		CoreInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Params is the params argument value.
			Params cloud.CoreInstancesParams
		}
		// CreateClusterObject holds details about calls to the CreateClusterObject method.
		CreateClusterObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CoreInstanceID is the coreInstanceID argument value.
			CoreInstanceID string
			// Payload is the payload argument value.
			Payload cloud.CreateClusterObject
		}
		// CreateConfigSection holds details about calls to the CreateConfigSection method.
		CreateConfigSection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// In is the in argument value.
			In cloud.CreateConfigSection
		}
		// CreateCoreInstance holds details about calls to the CreateCoreInstance method.
		CreateCoreInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Payload is the payload argument value.
			Payload cloud.CreateCoreInstance
		}
		// CreateCoreInstanceCheck holds details about calls to the CreateCoreInstanceCheck method.
		CreateCoreInstanceCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CoreInstanceID is the coreInstanceID argument value.
			CoreInstanceID string
			// Payload is the payload argument value.
			Payload cloud.CreateCoreInstanceCheck
		}
		// CreateEnvironment holds details about calls to the CreateEnvironment method.
		CreateEnvironment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Payload is the payload argument value.
			Payload cloud.CreateEnvironment
		}
		// CreateIngestCheck holds details about calls to the CreateIngestCheck method.
		CreateIngestCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CoreInstanceID is the coreInstanceID argument value.
			CoreInstanceID string
			// Payload is the payload argument value.
			Payload cloud.CreateIngestCheck
		}
		// CreateInvitation holds details about calls to the CreateInvitation method.
		CreateInvitation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Payload is the payload argument value.
			Payload cloud.CreateInvitation
		}
		// CreatePipeline holds details about calls to the CreatePipeline method.
		CreatePipeline []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Payload is the payload argument value.
			Payload cloud.CreatePipeline
		}
		// CreatePipelineCheck holds details about calls to the CreatePipelineCheck method.
		CreatePipelineCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Payload is the payload argument value.
			Payload cloud.CreatePipelineCheck
		}
		// CreatePipelineFile holds details about calls to the CreatePipelineFile method.
		CreatePipelineFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Payload is the payload argument value.
			Payload cloud.CreatePipelineFile
		}
		// CreatePipelinePort holds details about calls to the CreatePipelinePort method.
		CreatePipelinePort []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Payload is the payload argument value.
			Payload cloud.CreatePipelinePort
		}
		// CreatePipelineSecret holds details about calls to the CreatePipelineSecret method.
		CreatePipelineSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Payload is the payload argument value.
			Payload cloud.CreatePipelineSecret
		}
		// CreateProcessingRule holds details about calls to the CreateProcessingRule method.
		CreateProcessingRule []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In cloud.CreateProcessingRule
		}
		// CreateProject holds details about calls to the CreateProject method.
		CreateProject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Payload is the payload argument value.
			Payload cloud.CreateProject
		}
		// CreateResourceProfile holds details about calls to the CreateResourceProfile method.
		CreateResourceProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Payload is the payload argument value.
			Payload cloud.CreateResourceProfile
		}
		// CreateToken holds details about calls to the CreateToken method.
		CreateToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Payload is the payload argument value.
			Payload cloud.CreateToken
		}
		// CreateTraceRecord holds details about calls to the CreateTraceRecord method.
		CreateTraceRecord []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// In is the in argument value.
			In cloud.CreateTraceRecord
		}
		// CreateTraceSession holds details about calls to the CreateTraceSession method.
		CreateTraceSession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// In is the in argument value.
			In cloud.CreateTraceSession
		}
		// DeleteAgent holds details about calls to the DeleteAgent method.
		DeleteAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
		}
		// DeleteAgents holds details about calls to the DeleteAgents method.
		DeleteAgents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// AgentIDs is the agentIDs argument value.
			AgentIDs []string
		}
		// DeleteClusterObject holds details about calls to the DeleteClusterObject method.
		DeleteClusterObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CheckID is the checkID argument value.
			CheckID string
		}
		// DeleteConfigSection holds details about calls to the DeleteConfigSection method.
		DeleteConfigSection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConfigSectionID is the configSectionID argument value.
			ConfigSectionID string
		}
		// DeleteCoreInstance holds details about calls to the DeleteCoreInstance method.
		DeleteCoreInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
		// DeleteCoreInstanceCheck holds details about calls to the DeleteCoreInstanceCheck method.
		DeleteCoreInstanceCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CheckID is the checkID argument value.
			CheckID string
		}
		// DeleteCoreInstances holds details about calls to the DeleteCoreInstances method.
		DeleteCoreInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// InstanceIDs is the instanceIDs argument value.
			InstanceIDs []string
		}
		// DeleteEnvironment holds details about calls to the DeleteEnvironment method.
		DeleteEnvironment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EnvironmentID is the environmentID argument value.
			EnvironmentID string
		}
		// DeleteIngestCheck holds details about calls to the DeleteIngestCheck method.
		DeleteIngestCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CheckID is the checkID argument value.
			CheckID string
		}
		// DeletePipeline holds details about calls to the DeletePipeline method.
		DeletePipeline []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
		}
		// DeletePipelineCheck holds details about calls to the DeletePipelineCheck method.
		DeletePipelineCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CheckID is the checkID argument value.
			CheckID string
		}
		// DeletePipelineClusterObjects holds details about calls to the DeletePipelineClusterObjects method.
		DeletePipelineClusterObjects []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// ClusterObjectIDs is the clusterObjectIDs argument value.
			ClusterObjectIDs []string
		}
		// DeletePipelineFile holds details about calls to the DeletePipelineFile method.
		DeletePipelineFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileID is the fileID argument value.
			FileID string
		}
		// DeletePipelinePort holds details about calls to the DeletePipelinePort method.
		DeletePipelinePort []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PortID is the portID argument value.
			PortID string
		}
		// DeletePipelineSecret holds details about calls to the DeletePipelineSecret method.
		DeletePipelineSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SecretID is the secretID argument value.
			SecretID string
		}
		// DeletePipelines holds details about calls to the DeletePipelines method.
		DeletePipelines []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// PipelineIDs is the pipelineIDs argument value.
			PipelineIDs []string
		}
		// DeleteProcessingRule holds details about calls to the DeleteProcessingRule method.
		DeleteProcessingRule []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProcessingRuleID is the processingRuleID argument value.
			ProcessingRuleID string
		}
		// DeleteResourceProfile holds details about calls to the DeleteResourceProfile method.
		DeleteResourceProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ResourceProfileID is the resourceProfileID argument value.
			ResourceProfileID string
		}
		// DeleteToken holds details about calls to the DeleteToken method.
		DeleteToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TokenID is the tokenID argument value.
			TokenID string
		}
		// Environments holds details about calls to the Environments method.
		Environments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Params is the params argument value.
			Params cloud.EnvironmentsParams
		}
		// IngestCheck holds details about calls to the IngestCheck method.
		IngestCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CheckID is the checkID argument value.
			CheckID string
		}
		// IngestChecks holds details about calls to the IngestChecks method.
		IngestChecks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CoreInstanceID is the coreInstanceID argument value.
			CoreInstanceID string
			// Params is the params argument value.
			Params cloud.IngestChecksParams
		}
		// Members holds details about calls to the Members method.
		Members []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Params is the params argument value.
			Params cloud.MembersParams
		}
		// Pipeline holds details about calls to the Pipeline method.
		Pipeline []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.PipelineParams
		}
		// PipelineCheck holds details about calls to the PipelineCheck method.
		PipelineCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CheckID is the checkID argument value.
			CheckID string
		}
		// PipelineChecks holds details about calls to the PipelineChecks method.
		PipelineChecks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.PipelineChecksParams
		}
		// PipelineClusterObjects holds details about calls to the PipelineClusterObjects method.
		PipelineClusterObjects []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.PipelineClusterObjectsParams
		}
		// PipelineConfigHistory holds details about calls to the PipelineConfigHistory method.
		PipelineConfigHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.PipelineConfigHistoryParams
		}
		// PipelineFile holds details about calls to the PipelineFile method.
		PipelineFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileID is the fileID argument value.
			FileID string
		}
		// PipelineFiles holds details about calls to the PipelineFiles method.
		PipelineFiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.PipelineFilesParams
		}
		// PipelineMetrics holds details about calls to the PipelineMetrics method.
		PipelineMetrics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// PipelineMetricsByPlugin holds details about calls to the PipelineMetricsByPlugin method.
		PipelineMetricsByPlugin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// PipelineMetricsOverTimeByPlugin holds details about calls to the PipelineMetricsOverTimeByPlugin method.
		PipelineMetricsOverTimeByPlugin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// PipelineMetricsV1 holds details about calls to the PipelineMetricsV1 method.
		PipelineMetricsV1 []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// PipelineOverTimeMetrics holds details about calls to the PipelineOverTimeMetrics method.
		PipelineOverTimeMetrics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// PipelinePort holds details about calls to the PipelinePort method.
		PipelinePort []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PortID is the portID argument value.
			PortID string
		}
		// PipelinePorts holds details about calls to the PipelinePorts method.
		PipelinePorts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.PipelinePortsParams
		}
		// PipelineSecret holds details about calls to the PipelineSecret method.
		PipelineSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SecretID is the secretID argument value.
			SecretID string
		}
		// PipelineSecrets holds details about calls to the PipelineSecrets method.
		PipelineSecrets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.PipelineSecretsParams
		}
		// PipelineStatusHistory holds details about calls to the PipelineStatusHistory method.
		PipelineStatusHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.PipelineStatusHistoryParams
		}
		// Pipelines holds details about calls to the Pipelines method.
		Pipelines []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Params is the params argument value.
			Params cloud.PipelinesParams
		}
		// PipelinesMetricsV1 holds details about calls to the PipelinesMetricsV1 method.
		PipelinesMetricsV1 []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Params is the params argument value.
			Params cloud.PipelinesMetricsParams
		}
		// PreviewProcessingRule holds details about calls to the PreviewProcessingRule method.
		PreviewProcessingRule []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In cloud.PreviewProcessingRule
		}
		// ProcessingRule holds details about calls to the ProcessingRule method.
		ProcessingRule []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProcessingRuleID is the processingRuleID argument value.
			ProcessingRuleID string
		}
		// ProcessingRules holds details about calls to the ProcessingRules method.
		ProcessingRules []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params cloud.ProcessingRulesParams
		}
		// Project holds details about calls to the Project method.
		Project []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
		}
		// ProjectMetricsV1 holds details about calls to the ProjectMetricsV1 method.
		ProjectMetricsV1 []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Params is the params argument value.
			Params cloud.MetricsParams
		}
		// ProjectPipelines holds details about calls to the ProjectPipelines method.
		ProjectPipelines []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Params is the params argument value.
			Params cloud.PipelinesParams
		}
		// Projects holds details about calls to the Projects method.
		Projects []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params cloud.ProjectsParams
		}
		// RegisterAgent holds details about calls to the RegisterAgent method.
		RegisterAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Payload is the payload argument value.
			Payload cloud.RegisterAgent
		}
		// ResourceProfile holds details about calls to the ResourceProfile method.
		ResourceProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ResourceProfileID is the resourceProfileID argument value.
			ResourceProfileID string
		}
		// ResourceProfiles holds details about calls to the ResourceProfiles method.
		ResourceProfiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Params is the params argument value.
			Params cloud.ResourceProfilesParams
		}
		// SendVerificationEmail holds details about calls to the SendVerificationEmail method.
		SendVerificationEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SetAgentToken holds details about calls to the SetAgentToken method.
		SetAgentToken []struct {
			// S is the s argument value.
			S string
		}
		// SetCoreInstanceToken holds details about calls to the SetCoreInstanceToken method.
		SetCoreInstanceToken []struct {
			// S is the s argument value.
			S string
		}
		// SetProjectToken holds details about calls to the SetProjectToken method.
		SetProjectToken []struct {
			// S is the s argument value.
			S string
		}
		// SetUserAgent holds details about calls to the SetUserAgent method.
		SetUserAgent []struct {
			// S is the s argument value.
			S string
		}
		// TerminateActiveTraceSession holds details about calls to the TerminateActiveTraceSession method.
		TerminateActiveTraceSession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
		}
		// Token holds details about calls to the Token method.
		Token []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TokenID is the tokenID argument value.
			TokenID string
		}
		// Tokens holds details about calls to the Tokens method.
		Tokens []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Params is the params argument value.
			Params cloud.TokensParams
		}
		// TraceRecords holds details about calls to the TraceRecords method.
		TraceRecords []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SessionID is the sessionID argument value.
			SessionID string
			// Params is the params argument value.
			Params cloud.TraceRecordsParams
		}
		// TraceSession holds details about calls to the TraceSession method.
		TraceSession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SessionID is the sessionID argument value.
			SessionID string
		}
		// TraceSessions holds details about calls to the TraceSessions method.
		TraceSessions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Params is the params argument value.
			Params cloud.TraceSessionsParams
		}
		// UpdateAgent holds details about calls to the UpdateAgent method.
		UpdateAgent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentID is the agentID argument value.
			AgentID string
			// Payload is the payload argument value.
			Payload cloud.UpdateAgent
		}
		// UpdateClusterObject holds details about calls to the UpdateClusterObject method.
		UpdateClusterObject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CheckID is the checkID argument value.
			CheckID string
			// Opts is the opts argument value.
			Opts cloud.UpdateClusterObject
		}
		// UpdateConfigSection holds details about calls to the UpdateConfigSection method.
		UpdateConfigSection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConfigSectionID is the configSectionID argument value.
			ConfigSectionID string
			// In is the in argument value.
			In cloud.UpdateConfigSection
		}
		// UpdateConfigSectionSet holds details about calls to the UpdateConfigSectionSet method.
		UpdateConfigSectionSet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// ConfigSectionIDs is the configSectionIDs argument value.
			ConfigSectionIDs []string
		}
		// UpdateCoreInstance holds details about calls to the UpdateCoreInstance method.
		UpdateCoreInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Payload is the payload argument value.
			Payload cloud.UpdateCoreInstance
		}
		// UpdateCoreInstanceCheck holds details about calls to the UpdateCoreInstanceCheck method.
		UpdateCoreInstanceCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CheckID is the checkID argument value.
			CheckID string
			// Opts is the opts argument value.
			Opts cloud.UpdateCoreInstanceCheck
		}
		// UpdateEnvironment holds details about calls to the UpdateEnvironment method.
		UpdateEnvironment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EnvironmentID is the environmentID argument value.
			EnvironmentID string
			// Payload is the payload argument value.
			Payload cloud.UpdateEnvironment
		}
		// UpdateIngestCheck holds details about calls to the UpdateIngestCheck method.
		UpdateIngestCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CheckID is the checkID argument value.
			CheckID string
			// Opts is the opts argument value.
			Opts cloud.UpdateIngestCheck
		}
		// UpdatePipeline holds details about calls to the UpdatePipeline method.
		UpdatePipeline []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Opts is the opts argument value.
			Opts cloud.UpdatePipeline
		}
		// UpdatePipelineCheck holds details about calls to the UpdatePipelineCheck method.
		UpdatePipelineCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CheckID is the checkID argument value.
			CheckID string
			// Opts is the opts argument value.
			Opts cloud.UpdatePipelineCheck
		}
		// UpdatePipelineClusterObjects holds details about calls to the UpdatePipelineClusterObjects method.
		UpdatePipelineClusterObjects []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PipelineID is the pipelineID argument value.
			PipelineID string
			// Opts is the opts argument value.
			Opts cloud.UpdatePipelineClusterObjects
		}
		// UpdatePipelineFile holds details about calls to the UpdatePipelineFile method.
		UpdatePipelineFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileID is the fileID argument value.
			FileID string
			// Opts is the opts argument value.
			Opts cloud.UpdatePipelineFile
		}
		// UpdatePipelinePort holds details about calls to the UpdatePipelinePort method.
		UpdatePipelinePort []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PortID is the portID argument value.
			PortID string
			// Opts is the opts argument value.
			Opts cloud.UpdatePipelinePort
		}
		// UpdatePipelineSecret holds details about calls to the UpdatePipelineSecret method.
		UpdatePipelineSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SecretID is the secretID argument value.
			SecretID string
			// Opts is the opts argument value.
			Opts cloud.UpdatePipelineSecret
		}
		// UpdateProcessingRule holds details about calls to the UpdateProcessingRule method.
		UpdateProcessingRule []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In cloud.UpdateProcessingRule
		}
		// UpdateProject holds details about calls to the UpdateProject method.
		UpdateProject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID string
			// Opts is the opts argument value.
			Opts cloud.UpdateProject
		}
		// UpdateResourceProfile holds details about calls to the UpdateResourceProfile method.
		UpdateResourceProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ResourceProfileID is the resourceProfileID argument value.
			ResourceProfileID string
			// Opts is the opts argument value.
			Opts cloud.UpdateResourceProfile
		}
		// UpdateToken holds details about calls to the UpdateToken method.
		UpdateToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TokenID is the tokenID argument value.
			TokenID string
			// Opts is the opts argument value.
			Opts cloud.UpdateToken
		}
		// UpdateTraceSession holds details about calls to the UpdateTraceSession method.
		UpdateTraceSession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SessionID is the sessionID argument value.
			SessionID string
			// In is the in argument value.
			In cloud.UpdateTraceSession
		}
		// ValidateConfig holds details about calls to the ValidateConfig method.
		ValidateConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AgentType is the agentType argument value.
			AgentType cloud.AgentType
			// Payload is the payload argument value.
			Payload cloud.ValidatingConfig
		}
		// ValidateConfigV2 holds details about calls to the ValidateConfigV2 method.
		ValidateConfigV2 []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Payload is the payload argument value.
			Payload cloud.ValidatingConfig
		}
	}
	lockAcceptInvitation                    sync.RWMutex
	lockActiveTraceSession                  sync.RWMutex
	lockAgent                               sync.RWMutex
	lockAgentConfigHistory                  sync.RWMutex
	lockAgentMetrics                        sync.RWMutex
	lockAgentMetricsByPlugin                sync.RWMutex
	lockAgentMetricsOverTimeByPlugin        sync.RWMutex
	lockAgentMetricsV1                      sync.RWMutex
	lockAgentOverTimeMetrics                sync.RWMutex
	lockAgents                              sync.RWMutex
	lockClusterObject                       sync.RWMutex
	lockClusterObjects                      sync.RWMutex
	lockConfigSection                       sync.RWMutex
	lockConfigSections                      sync.RWMutex
	lockCoreInstance                        sync.RWMutex
	lockCoreInstanceCheck                   sync.RWMutex
	lockCoreInstanceChecks                  sync.RWMutex
	lockCoreInstanceMetrics                 sync.RWMutex
	lockCoreInstanceMetricsByPlugin         sync.RWMutex
	lockCoreInstanceMetricsOverTimeByPlugin sync.RWMutex
	lockCoreInstanceMetricsV1               sync.RWMutex
	lockCoreInstanceOverTimeMetrics         sync.RWMutex
	lockCoreInstancePing                    sync.RWMutex
	lockCoreInstances                       sync.RWMutex
	lockCreateClusterObject                 sync.RWMutex
	lockCreateConfigSection                 sync.RWMutex
	lockCreateCoreInstance                  sync.RWMutex
	lockCreateCoreInstanceCheck             sync.RWMutex
	lockCreateEnvironment                   sync.RWMutex
	lockCreateIngestCheck                   sync.RWMutex
	lockCreateInvitation                    sync.RWMutex
	lockCreatePipeline                      sync.RWMutex
	lockCreatePipelineCheck                 sync.RWMutex
	lockCreatePipelineFile                  sync.RWMutex
	lockCreatePipelinePort                  sync.RWMutex
	lockCreatePipelineSecret                sync.RWMutex
	lockCreateProcessingRule                sync.RWMutex
	lockCreateProject                       sync.RWMutex
	lockCreateResourceProfile               sync.RWMutex
	lockCreateToken                         sync.RWMutex
	lockCreateTraceRecord                   sync.RWMutex
	lockCreateTraceSession                  sync.RWMutex
	lockDeleteAgent                         sync.RWMutex
	lockDeleteAgents                        sync.RWMutex
	lockDeleteClusterObject                 sync.RWMutex
	lockDeleteConfigSection                 sync.RWMutex
	lockDeleteCoreInstance                  sync.RWMutex
	lockDeleteCoreInstanceCheck             sync.RWMutex
	lockDeleteCoreInstances                 sync.RWMutex
	lockDeleteEnvironment                   sync.RWMutex
	lockDeleteIngestCheck                   sync.RWMutex
	lockDeletePipeline                      sync.RWMutex
	lockDeletePipelineCheck                 sync.RWMutex
	lockDeletePipelineClusterObjects        sync.RWMutex
	lockDeletePipelineFile                  sync.RWMutex
	lockDeletePipelinePort                  sync.RWMutex
	lockDeletePipelineSecret                sync.RWMutex
	lockDeletePipelines                     sync.RWMutex
	lockDeleteProcessingRule                sync.RWMutex
	lockDeleteResourceProfile               sync.RWMutex
	lockDeleteToken                         sync.RWMutex
	lockEnvironments                        sync.RWMutex
	lockIngestCheck                         sync.RWMutex
	lockIngestChecks                        sync.RWMutex
	lockMembers                             sync.RWMutex
	lockPipeline                            sync.RWMutex
	lockPipelineCheck                       sync.RWMutex
	lockPipelineChecks                      sync.RWMutex
	lockPipelineClusterObjects              sync.RWMutex
	lockPipelineConfigHistory               sync.RWMutex
	lockPipelineFile                        sync.RWMutex
	lockPipelineFiles                       sync.RWMutex
	lockPipelineMetrics                     sync.RWMutex
	lockPipelineMetricsByPlugin             sync.RWMutex
	lockPipelineMetricsOverTimeByPlugin     sync.RWMutex
	lockPipelineMetricsV1                   sync.RWMutex
	lockPipelineOverTimeMetrics             sync.RWMutex
	lockPipelinePort                        sync.RWMutex
	lockPipelinePorts                       sync.RWMutex
	lockPipelineSecret                      sync.RWMutex
	lockPipelineSecrets                     sync.RWMutex
	lockPipelineStatusHistory               sync.RWMutex
	lockPipelines                           sync.RWMutex
	lockPipelinesMetricsV1                  sync.RWMutex
	lockPreviewProcessingRule               sync.RWMutex
	lockProcessingRule                      sync.RWMutex
	lockProcessingRules                     sync.RWMutex
	lockProject                             sync.RWMutex
	lockProjectMetricsV1                    sync.RWMutex
	lockProjectPipelines                    sync.RWMutex
	lockProjects                            sync.RWMutex
	lockRegisterAgent                       sync.RWMutex
	lockResourceProfile                     sync.RWMutex
	lockResourceProfiles                    sync.RWMutex
	lockSendVerificationEmail               sync.RWMutex
	lockSetAgentToken                       sync.RWMutex
	lockSetCoreInstanceToken                sync.RWMutex
	lockSetProjectToken                     sync.RWMutex
	lockSetUserAgent                        sync.RWMutex
	lockTerminateActiveTraceSession         sync.RWMutex
	lockToken                               sync.RWMutex
	lockTokens                              sync.RWMutex
	lockTraceRecords                        sync.RWMutex
	lockTraceSession                        sync.RWMutex
	lockTraceSessions                       sync.RWMutex
	lockUpdateAgent                         sync.RWMutex
	lockUpdateClusterObject                 sync.RWMutex
	lockUpdateConfigSection                 sync.RWMutex
	lockUpdateConfigSectionSet              sync.RWMutex
	lockUpdateCoreInstance                  sync.RWMutex
	lockUpdateCoreInstanceCheck             sync.RWMutex
	lockUpdateEnvironment                   sync.RWMutex
	lockUpdateIngestCheck                   sync.RWMutex
	lockUpdatePipeline                      sync.RWMutex
	lockUpdatePipelineCheck                 sync.RWMutex
	lockUpdatePipelineClusterObjects        sync.RWMutex
	lockUpdatePipelineFile                  sync.RWMutex
	lockUpdatePipelinePort                  sync.RWMutex
	lockUpdatePipelineSecret                sync.RWMutex
	lockUpdateProcessingRule                sync.RWMutex
	lockUpdateProject                       sync.RWMutex
	lockUpdateResourceProfile               sync.RWMutex
	lockUpdateToken                         sync.RWMutex
	lockUpdateTraceSession                  sync.RWMutex
	lockValidateConfig                      sync.RWMutex
	lockValidateConfigV2                    sync.RWMutex
}

// AcceptInvitation calls AcceptInvitationFunc.
func (mock *ClientMock) AcceptInvitation(ctx context.Context, payload cloud.AcceptInvitation) error {
	callInfo := struct {
		Ctx     context.Context
		Payload cloud.AcceptInvitation
	}{
		Ctx:     ctx,
		Payload: payload,
	}
	mock.lockAcceptInvitation.Lock()
	mock.calls.AcceptInvitation = append(mock.calls.AcceptInvitation, callInfo)
	mock.lockAcceptInvitation.Unlock()
	if mock.AcceptInvitationFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.AcceptInvitationFunc(ctx, payload)
}

// AcceptInvitationCalls gets all the calls that were made to AcceptInvitation.
// Check the length with:
//
//	len(mockedClient.AcceptInvitationCalls())
func (mock *ClientMock) AcceptInvitationCalls() []struct {
	Ctx     context.Context
	Payload cloud.AcceptInvitation
} {
	var calls []struct {
		Ctx     context.Context
		Payload cloud.AcceptInvitation
	}
	mock.lockAcceptInvitation.RLock()
	calls = mock.calls.AcceptInvitation
	mock.lockAcceptInvitation.RUnlock()
	return calls
}

// ActiveTraceSession calls ActiveTraceSessionFunc.
func (mock *ClientMock) ActiveTraceSession(ctx context.Context, pipelineID string) (cloud.TraceSession, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
	}
	mock.lockActiveTraceSession.Lock()
	mock.calls.ActiveTraceSession = append(mock.calls.ActiveTraceSession, callInfo)
	mock.lockActiveTraceSession.Unlock()
	if mock.ActiveTraceSessionFunc == nil {
		var (
			traceSessionOut cloud.TraceSession
			errOut          error
		)
		return traceSessionOut, errOut
	}
	return mock.ActiveTraceSessionFunc(ctx, pipelineID)
}

// ActiveTraceSessionCalls gets all the calls that were made to ActiveTraceSession.
// Check the length with:
//
//	len(mockedClient.ActiveTraceSessionCalls())
func (mock *ClientMock) ActiveTraceSessionCalls() []struct {
	Ctx        context.Context
	PipelineID string
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
	}
	mock.lockActiveTraceSession.RLock()
	calls = mock.calls.ActiveTraceSession
	mock.lockActiveTraceSession.RUnlock()
	return calls
}

// Agent calls AgentFunc.
func (mock *ClientMock) Agent(ctx context.Context, agentID string) (cloud.Agent, error) {
	callInfo := struct {
		Ctx     context.Context
		AgentID string
	}{
		Ctx:     ctx,
		AgentID: agentID,
	}
	mock.lockAgent.Lock()
	mock.calls.Agent = append(mock.calls.Agent, callInfo)
	mock.lockAgent.Unlock()
	if mock.AgentFunc == nil {
		var (
			agentOut cloud.Agent
			errOut   error
		)
		return agentOut, errOut
	}
	return mock.AgentFunc(ctx, agentID)
}

// AgentCalls gets all the calls that were made to Agent.
// Check the length with:
//
//	len(mockedClient.AgentCalls())
func (mock *ClientMock) AgentCalls() []struct {
	Ctx     context.Context
	AgentID string
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
	}
	mock.lockAgent.RLock()
	calls = mock.calls.Agent
	mock.lockAgent.RUnlock()
	return calls
}

// AgentConfigHistory calls AgentConfigHistoryFunc.
func (mock *ClientMock) AgentConfigHistory(ctx context.Context, agentID string, params cloud.AgentConfigHistoryParams) (cloud.AgentConfigHistory, error) {
	callInfo := struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.AgentConfigHistoryParams
	}{
		Ctx:     ctx,
		AgentID: agentID,
		Params:  params,
	}
	mock.lockAgentConfigHistory.Lock()
	mock.calls.AgentConfigHistory = append(mock.calls.AgentConfigHistory, callInfo)
	mock.lockAgentConfigHistory.Unlock()
	if mock.AgentConfigHistoryFunc == nil {
		var (
			agentConfigHistoryOut cloud.AgentConfigHistory
			errOut                error
		)
		return agentConfigHistoryOut, errOut
	}
	return mock.AgentConfigHistoryFunc(ctx, agentID, params)
}

// AgentConfigHistoryCalls gets all the calls that were made to AgentConfigHistory.
// Check the length with:
//
//	len(mockedClient.AgentConfigHistoryCalls())
func (mock *ClientMock) AgentConfigHistoryCalls() []struct {
	Ctx     context.Context
	AgentID string
	Params  cloud.AgentConfigHistoryParams
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.AgentConfigHistoryParams
	}
	mock.lockAgentConfigHistory.RLock()
	calls = mock.calls.AgentConfigHistory
	mock.lockAgentConfigHistory.RUnlock()
	return calls
}

// AgentMetrics calls AgentMetricsFunc.
func (mock *ClientMock) AgentMetrics(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.MetricsSummary, error) {
	callInfo := struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.MetricsParams
	}{
		Ctx:     ctx,
		AgentID: agentID,
		Params:  params,
	}
	mock.lockAgentMetrics.Lock()
	mock.calls.AgentMetrics = append(mock.calls.AgentMetrics, callInfo)
	mock.lockAgentMetrics.Unlock()
	if mock.AgentMetricsFunc == nil {
		var (
			metricsSummaryOut cloud.MetricsSummary
			errOut            error
		)
		return metricsSummaryOut, errOut
	}
	return mock.AgentMetricsFunc(ctx, agentID, params)
}

// AgentMetricsCalls gets all the calls that were made to AgentMetrics.
// Check the length with:
//
//	len(mockedClient.AgentMetricsCalls())
func (mock *ClientMock) AgentMetricsCalls() []struct {
	Ctx     context.Context
	AgentID string
	Params  cloud.MetricsParams
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.MetricsParams
	}
	mock.lockAgentMetrics.RLock()
	calls = mock.calls.AgentMetrics
	mock.lockAgentMetrics.RUnlock()
	return calls
}

// AgentMetricsByPlugin calls AgentMetricsByPluginFunc.
func (mock *ClientMock) AgentMetricsByPlugin(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.MetricsSummaryPlugin, error) {
	callInfo := struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.MetricsParams
	}{
		Ctx:     ctx,
		AgentID: agentID,
		Params:  params,
	}
	mock.lockAgentMetricsByPlugin.Lock()
	mock.calls.AgentMetricsByPlugin = append(mock.calls.AgentMetricsByPlugin, callInfo)
	mock.lockAgentMetricsByPlugin.Unlock()
	if mock.AgentMetricsByPluginFunc == nil {
		var (
			metricsSummaryPluginOut cloud.MetricsSummaryPlugin
			errOut                  error
		)
		return metricsSummaryPluginOut, errOut
	}
	return mock.AgentMetricsByPluginFunc(ctx, agentID, params)
}

// AgentMetricsByPluginCalls gets all the calls that were made to AgentMetricsByPlugin.
// Check the length with:
//
//	len(mockedClient.AgentMetricsByPluginCalls())
func (mock *ClientMock) AgentMetricsByPluginCalls() []struct {
	Ctx     context.Context
	AgentID string
	Params  cloud.MetricsParams
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.MetricsParams
	}
	mock.lockAgentMetricsByPlugin.RLock()
	calls = mock.calls.AgentMetricsByPlugin
	mock.lockAgentMetricsByPlugin.RUnlock()
	return calls
}

// AgentMetricsOverTimeByPlugin calls AgentMetricsOverTimeByPluginFunc.
func (mock *ClientMock) AgentMetricsOverTimeByPlugin(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.MetricsOverTimeByPlugin, error) {
	callInfo := struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.MetricsParams
	}{
		Ctx:     ctx,
		AgentID: agentID,
		Params:  params,
	}
	mock.lockAgentMetricsOverTimeByPlugin.Lock()
	mock.calls.AgentMetricsOverTimeByPlugin = append(mock.calls.AgentMetricsOverTimeByPlugin, callInfo)
	mock.lockAgentMetricsOverTimeByPlugin.Unlock()
	if mock.AgentMetricsOverTimeByPluginFunc == nil {
		var (
			metricsOverTimeByPluginOut cloud.MetricsOverTimeByPlugin
			errOut                     error
		)
		return metricsOverTimeByPluginOut, errOut
	}
	return mock.AgentMetricsOverTimeByPluginFunc(ctx, agentID, params)
}

// AgentMetricsOverTimeByPluginCalls gets all the calls that were made to AgentMetricsOverTimeByPlugin.
// Check the length with:
//
//	len(mockedClient.AgentMetricsOverTimeByPluginCalls())
func (mock *ClientMock) AgentMetricsOverTimeByPluginCalls() []struct {
	Ctx     context.Context
	AgentID string
	Params  cloud.MetricsParams
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.MetricsParams
	}
	mock.lockAgentMetricsOverTimeByPlugin.RLock()
	calls = mock.calls.AgentMetricsOverTimeByPlugin
	mock.lockAgentMetricsOverTimeByPlugin.RUnlock()
	return calls
}

// AgentMetricsV1 calls AgentMetricsV1Func.
func (mock *ClientMock) AgentMetricsV1(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.AgentMetrics, error) {
	callInfo := struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.MetricsParams
	}{
		Ctx:     ctx,
		AgentID: agentID,
		Params:  params,
	}
	mock.lockAgentMetricsV1.Lock()
	mock.calls.AgentMetricsV1 = append(mock.calls.AgentMetricsV1, callInfo)
	mock.lockAgentMetricsV1.Unlock()
	if mock.AgentMetricsV1Func == nil {
		var (
			agentMetricsOut cloud.AgentMetrics
			errOut          error
		)
		return agentMetricsOut, errOut
	}
	return mock.AgentMetricsV1Func(ctx, agentID, params)
}

// AgentMetricsV1Calls gets all the calls that were made to AgentMetricsV1.
// Check the length with:
//
//	len(mockedClient.AgentMetricsV1Calls())
func (mock *ClientMock) AgentMetricsV1Calls() []struct {
	Ctx     context.Context
	AgentID string
	Params  cloud.MetricsParams
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.MetricsParams
	}
	mock.lockAgentMetricsV1.RLock()
	calls = mock.calls.AgentMetricsV1
	mock.lockAgentMetricsV1.RUnlock()
	return calls
}

// AgentOverTimeMetrics calls AgentOverTimeMetricsFunc.
func (mock *ClientMock) AgentOverTimeMetrics(ctx context.Context, agentID string, params cloud.MetricsParams) (cloud.MetricsOverTime, error) {
	callInfo := struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.MetricsParams
	}{
		Ctx:     ctx,
		AgentID: agentID,
		Params:  params,
	}
	mock.lockAgentOverTimeMetrics.Lock()
	mock.calls.AgentOverTimeMetrics = append(mock.calls.AgentOverTimeMetrics, callInfo)
	mock.lockAgentOverTimeMetrics.Unlock()
	if mock.AgentOverTimeMetricsFunc == nil {
		var (
			metricsOverTimeOut cloud.MetricsOverTime
			errOut             error
		)
		return metricsOverTimeOut, errOut
	}
	return mock.AgentOverTimeMetricsFunc(ctx, agentID, params)
}

// AgentOverTimeMetricsCalls gets all the calls that were made to AgentOverTimeMetrics.
// Check the length with:
//
//	len(mockedClient.AgentOverTimeMetricsCalls())
func (mock *ClientMock) AgentOverTimeMetricsCalls() []struct {
	Ctx     context.Context
	AgentID string
	Params  cloud.MetricsParams
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
		Params  cloud.MetricsParams
	}
	mock.lockAgentOverTimeMetrics.RLock()
	calls = mock.calls.AgentOverTimeMetrics
	mock.lockAgentOverTimeMetrics.RUnlock()
	return calls
}

// Agents calls AgentsFunc.
func (mock *ClientMock) Agents(ctx context.Context, projectID string, params cloud.AgentsParams) (cloud.Agents, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.AgentsParams
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Params:    params,
	}
	mock.lockAgents.Lock()
	mock.calls.Agents = append(mock.calls.Agents, callInfo)
	mock.lockAgents.Unlock()
	if mock.AgentsFunc == nil {
		var (
			agentsOut cloud.Agents
			errOut    error
		)
		return agentsOut, errOut
	}
	return mock.AgentsFunc(ctx, projectID, params)
}

// AgentsCalls gets all the calls that were made to Agents.
// Check the length with:
//
//	len(mockedClient.AgentsCalls())
func (mock *ClientMock) AgentsCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Params    cloud.AgentsParams
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.AgentsParams
	}
	mock.lockAgents.RLock()
	calls = mock.calls.Agents
	mock.lockAgents.RUnlock()
	return calls
}

// ClusterObject calls ClusterObjectFunc.
func (mock *ClientMock) ClusterObject(ctx context.Context, checkID string) (cloud.ClusterObject, error) {
	callInfo := struct {
		Ctx     context.Context
		CheckID string
	}{
		Ctx:     ctx,
		CheckID: checkID,
	}
	mock.lockClusterObject.Lock()
	mock.calls.ClusterObject = append(mock.calls.ClusterObject, callInfo)
	mock.lockClusterObject.Unlock()
	if mock.ClusterObjectFunc == nil {
		var (
			clusterObjectOut cloud.ClusterObject
			errOut           error
		)
		return clusterObjectOut, errOut
	}
	return mock.ClusterObjectFunc(ctx, checkID)
}

// ClusterObjectCalls gets all the calls that were made to ClusterObject.
// Check the length with:
//
//	len(mockedClient.ClusterObjectCalls())
func (mock *ClientMock) ClusterObjectCalls() []struct {
	Ctx     context.Context
	CheckID string
} {
	var calls []struct {
		Ctx     context.Context
		CheckID string
	}
	mock.lockClusterObject.RLock()
	calls = mock.calls.ClusterObject
	mock.lockClusterObject.RUnlock()
	return calls
}

// ClusterObjects calls ClusterObjectsFunc.
func (mock *ClientMock) ClusterObjects(ctx context.Context, coreInstanceID string, params cloud.ClusterObjectParams) (cloud.ClusterObjects, error) {
	callInfo := struct {
		Ctx            context.Context
		CoreInstanceID string
		Params         cloud.ClusterObjectParams
	}{
		Ctx:            ctx,
		CoreInstanceID: coreInstanceID,
		Params:         params,
	}
	mock.lockClusterObjects.Lock()
	mock.calls.ClusterObjects = append(mock.calls.ClusterObjects, callInfo)
	mock.lockClusterObjects.Unlock()
	if mock.ClusterObjectsFunc == nil {
		var (
			clusterObjectsOut cloud.ClusterObjects
			errOut            error
		)
		return clusterObjectsOut, errOut
	}
	return mock.ClusterObjectsFunc(ctx, coreInstanceID, params)
}

// ClusterObjectsCalls gets all the calls that were made to ClusterObjects.
// Check the length with:
//
//	len(mockedClient.ClusterObjectsCalls())
func (mock *ClientMock) ClusterObjectsCalls() []struct {
	Ctx            context.Context
	CoreInstanceID string
	Params         cloud.ClusterObjectParams
} {
	var calls []struct {
		Ctx            context.Context
		CoreInstanceID string
		Params         cloud.ClusterObjectParams
	}
	mock.lockClusterObjects.RLock()
	calls = mock.calls.ClusterObjects
	mock.lockClusterObjects.RUnlock()
	return calls
}

// ConfigSection calls ConfigSectionFunc.
func (mock *ClientMock) ConfigSection(ctx context.Context, configSectionID string) (cloud.ConfigSection, error) {
	callInfo := struct {
		Ctx             context.Context
		ConfigSectionID string
	}{
		Ctx:             ctx,
		ConfigSectionID: configSectionID,
	}
	mock.lockConfigSection.Lock()
	mock.calls.ConfigSection = append(mock.calls.ConfigSection, callInfo)
	mock.lockConfigSection.Unlock()
	if mock.ConfigSectionFunc == nil {
		var (
			configSectionOut cloud.ConfigSection
			errOut           error
		)
		return configSectionOut, errOut
	}
	return mock.ConfigSectionFunc(ctx, configSectionID)
}

// ConfigSectionCalls gets all the calls that were made to ConfigSection.
// Check the length with:
//
//	len(mockedClient.ConfigSectionCalls())
func (mock *ClientMock) ConfigSectionCalls() []struct {
	Ctx             context.Context
	ConfigSectionID string
} {
	var calls []struct {
		Ctx             context.Context
		ConfigSectionID string
	}
	mock.lockConfigSection.RLock()
	calls = mock.calls.ConfigSection
	mock.lockConfigSection.RUnlock()
	return calls
}

// ConfigSections calls ConfigSectionsFunc.
func (mock *ClientMock) ConfigSections(ctx context.Context, projectID string, params cloud.ConfigSectionsParams) (cloud.ConfigSections, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.ConfigSectionsParams
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Params:    params,
	}
	mock.lockConfigSections.Lock()
	mock.calls.ConfigSections = append(mock.calls.ConfigSections, callInfo)
	mock.lockConfigSections.Unlock()
	if mock.ConfigSectionsFunc == nil {
		var (
			configSectionsOut cloud.ConfigSections
			errOut            error
		)
		return configSectionsOut, errOut
	}
	return mock.ConfigSectionsFunc(ctx, projectID, params)
}

// ConfigSectionsCalls gets all the calls that were made to ConfigSections.
// Check the length with:
//
//	len(mockedClient.ConfigSectionsCalls())
func (mock *ClientMock) ConfigSectionsCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Params    cloud.ConfigSectionsParams
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.ConfigSectionsParams
	}
	mock.lockConfigSections.RLock()
	calls = mock.calls.ConfigSections
	mock.lockConfigSections.RUnlock()
	return calls
}

// CoreInstance calls CoreInstanceFunc.
func (mock *ClientMock) CoreInstance(ctx context.Context, instanceID string) (cloud.CoreInstance, error) {
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
	}
	mock.lockCoreInstance.Lock()
	mock.calls.CoreInstance = append(mock.calls.CoreInstance, callInfo)
	mock.lockCoreInstance.Unlock()
	if mock.CoreInstanceFunc == nil {
		var (
			coreInstanceOut cloud.CoreInstance
			errOut          error
		)
		return coreInstanceOut, errOut
	}
	return mock.CoreInstanceFunc(ctx, instanceID)
}

// CoreInstanceCalls gets all the calls that were made to CoreInstance.
// Check the length with:
//
//	len(mockedClient.CoreInstanceCalls())
func (mock *ClientMock) CoreInstanceCalls() []struct {
	Ctx        context.Context
	InstanceID string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
	}
	mock.lockCoreInstance.RLock()
	calls = mock.calls.CoreInstance
	mock.lockCoreInstance.RUnlock()
	return calls
}

// CoreInstanceCheck calls CoreInstanceCheckFunc.
func (mock *ClientMock) CoreInstanceCheck(ctx context.Context, checkID string) (cloud.CoreInstanceCheck, error) {
	callInfo := struct {
		Ctx     context.Context
		CheckID string
	}{
		Ctx:     ctx,
		CheckID: checkID,
	}
	mock.lockCoreInstanceCheck.Lock()
	mock.calls.CoreInstanceCheck = append(mock.calls.CoreInstanceCheck, callInfo)
	mock.lockCoreInstanceCheck.Unlock()
	if mock.CoreInstanceCheckFunc == nil {
		var (
			coreInstanceCheckOut cloud.CoreInstanceCheck
			errOut               error
		)
		return coreInstanceCheckOut, errOut
	}
	return mock.CoreInstanceCheckFunc(ctx, checkID)
}

// CoreInstanceCheckCalls gets all the calls that were made to CoreInstanceCheck.
// Check the length with:
//
//	len(mockedClient.CoreInstanceCheckCalls())
func (mock *ClientMock) CoreInstanceCheckCalls() []struct {
	Ctx     context.Context
	CheckID string
} {
	var calls []struct {
		Ctx     context.Context
		CheckID string
	}
	mock.lockCoreInstanceCheck.RLock()
	calls = mock.calls.CoreInstanceCheck
	mock.lockCoreInstanceCheck.RUnlock()
	return calls
}

// CoreInstanceChecks calls CoreInstanceChecksFunc.
func (mock *ClientMock) CoreInstanceChecks(ctx context.Context, coreInstanceID string, params cloud.CoreInstanceChecksParams) (cloud.CoreInstanceChecks, error) {
	callInfo := struct {
		Ctx            context.Context
		CoreInstanceID string
		Params         cloud.CoreInstanceChecksParams
	}{
		Ctx:            ctx,
		CoreInstanceID: coreInstanceID,
		Params:         params,
	}
	mock.lockCoreInstanceChecks.Lock()
	mock.calls.CoreInstanceChecks = append(mock.calls.CoreInstanceChecks, callInfo)
	mock.lockCoreInstanceChecks.Unlock()
	if mock.CoreInstanceChecksFunc == nil {
		var (
			coreInstanceChecksOut cloud.CoreInstanceChecks
			errOut                error
		)
		return coreInstanceChecksOut, errOut
	}
	return mock.CoreInstanceChecksFunc(ctx, coreInstanceID, params)
}

// CoreInstanceChecksCalls gets all the calls that were made to CoreInstanceChecks.
// Check the length with:
//
//	len(mockedClient.CoreInstanceChecksCalls())
func (mock *ClientMock) CoreInstanceChecksCalls() []struct {
	Ctx            context.Context
	CoreInstanceID string
	Params         cloud.CoreInstanceChecksParams
} {
	var calls []struct {
		Ctx            context.Context
		CoreInstanceID string
		Params         cloud.CoreInstanceChecksParams
	}
	mock.lockCoreInstanceChecks.RLock()
	calls = mock.calls.CoreInstanceChecks
	mock.lockCoreInstanceChecks.RUnlock()
	return calls
}

// CoreInstanceMetrics calls CoreInstanceMetricsFunc.
func (mock *ClientMock) CoreInstanceMetrics(ctx context.Context, coreInstanceID string, params cloud.MetricsParams) (cloud.MetricsSummary, error) {
	callInfo := struct {
		Ctx            context.Context
		CoreInstanceID string
		Params         cloud.MetricsParams
	}{
		Ctx:            ctx,
		CoreInstanceID: coreInstanceID,
		Params:         params,
	}
	mock.lockCoreInstanceMetrics.Lock()
	mock.calls.CoreInstanceMetrics = append(mock.calls.CoreInstanceMetrics, callInfo)
	mock.lockCoreInstanceMetrics.Unlock()
	if mock.CoreInstanceMetricsFunc == nil {
		var (
			metricsSummaryOut cloud.MetricsSummary
			errOut            error
		)
		return metricsSummaryOut, errOut
	}
	return mock.CoreInstanceMetricsFunc(ctx, coreInstanceID, params)
}

// CoreInstanceMetricsCalls gets all the calls that were made to CoreInstanceMetrics.
// Check the length with:
//
//	len(mockedClient.CoreInstanceMetricsCalls())
func (mock *ClientMock) CoreInstanceMetricsCalls() []struct {
	Ctx            context.Context
	CoreInstanceID string
	Params         cloud.MetricsParams
} {
	var calls []struct {
		Ctx            context.Context
		CoreInstanceID string
		Params         cloud.MetricsParams
	}
	mock.lockCoreInstanceMetrics.RLock()
	calls = mock.calls.CoreInstanceMetrics
	mock.lockCoreInstanceMetrics.RUnlock()
	return calls
}

// CoreInstanceMetricsByPlugin calls CoreInstanceMetricsByPluginFunc.
func (mock *ClientMock) CoreInstanceMetricsByPlugin(ctx context.Context, coreInstanceID string, params cloud.MetricsParams) (cloud.MetricsSummaryPlugin, error) {
	callInfo := struct {
		Ctx            context.Context
		CoreInstanceID string
		Params         cloud.MetricsParams
	}{
		Ctx:            ctx,
		CoreInstanceID: coreInstanceID,
		Params:         params,
	}
	mock.lockCoreInstanceMetricsByPlugin.Lock()
	mock.calls.CoreInstanceMetricsByPlugin = append(mock.calls.CoreInstanceMetricsByPlugin, callInfo)
	mock.lockCoreInstanceMetricsByPlugin.Unlock()
	if mock.CoreInstanceMetricsByPluginFunc == nil {
		var (
			metricsSummaryPluginOut cloud.MetricsSummaryPlugin
			errOut                  error
		)
		return metricsSummaryPluginOut, errOut
	}
	return mock.CoreInstanceMetricsByPluginFunc(ctx, coreInstanceID, params)
}

// CoreInstanceMetricsByPluginCalls gets all the calls that were made to CoreInstanceMetricsByPlugin.
// Check the length with:
//
//	len(mockedClient.CoreInstanceMetricsByPluginCalls())
func (mock *ClientMock) CoreInstanceMetricsByPluginCalls() []struct {
	Ctx            context.Context
	CoreInstanceID string
	Params         cloud.MetricsParams
} {
	var calls []struct {
		Ctx            context.Context
		CoreInstanceID string
		Params         cloud.MetricsParams
	}
	mock.lockCoreInstanceMetricsByPlugin.RLock()
	calls = mock.calls.CoreInstanceMetricsByPlugin
	mock.lockCoreInstanceMetricsByPlugin.RUnlock()
	return calls
}

// CoreInstanceMetricsOverTimeByPlugin calls CoreInstanceMetricsOverTimeByPluginFunc.
func (mock *ClientMock) CoreInstanceMetricsOverTimeByPlugin(ctx context.Context, coreInstanceID string, params cloud.MetricsParams) (cloud.MetricsOverTimeByPlugin, error) {
	callInfo := struct {
		Ctx            context.Context
		CoreInstanceID string
		Params         cloud.MetricsParams
	}{
		Ctx:            ctx,
		CoreInstanceID: coreInstanceID,
		Params:         params,
	}
	mock.lockCoreInstanceMetricsOverTimeByPlugin.Lock()
	mock.calls.CoreInstanceMetricsOverTimeByPlugin = append(mock.calls.CoreInstanceMetricsOverTimeByPlugin, callInfo)
	mock.lockCoreInstanceMetricsOverTimeByPlugin.Unlock()
	if mock.CoreInstanceMetricsOverTimeByPluginFunc == nil {
		var (
			metricsOverTimeByPluginOut cloud.MetricsOverTimeByPlugin
			errOut                     error
		)
		return metricsOverTimeByPluginOut, errOut
	}
	return mock.CoreInstanceMetricsOverTimeByPluginFunc(ctx, coreInstanceID, params)
}

// CoreInstanceMetricsOverTimeByPluginCalls gets all the calls that were made to CoreInstanceMetricsOverTimeByPlugin.
// Check the length with:
//
//	len(mockedClient.CoreInstanceMetricsOverTimeByPluginCalls())
func (mock *ClientMock) CoreInstanceMetricsOverTimeByPluginCalls() []struct {
	Ctx            context.Context
	CoreInstanceID string
	Params         cloud.MetricsParams
} {
	var calls []struct {
		Ctx            context.Context
		CoreInstanceID string
		Params         cloud.MetricsParams
	}
	mock.lockCoreInstanceMetricsOverTimeByPlugin.RLock()
	calls = mock.calls.CoreInstanceMetricsOverTimeByPlugin
	mock.lockCoreInstanceMetricsOverTimeByPlugin.RUnlock()
	return calls
}

// CoreInstanceMetricsV1 calls CoreInstanceMetricsV1Func.
func (mock *ClientMock) CoreInstanceMetricsV1(ctx context.Context, instanceID string, params cloud.MetricsParams) (cloud.CoreInstanceMetricsV1, error) {
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		Params     cloud.MetricsParams
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		Params:     params,
	}
	mock.lockCoreInstanceMetricsV1.Lock()
	mock.calls.CoreInstanceMetricsV1 = append(mock.calls.CoreInstanceMetricsV1, callInfo)
	mock.lockCoreInstanceMetricsV1.Unlock()
	if mock.CoreInstanceMetricsV1Func == nil {
		var (
			coreInstanceMetricsV1Out cloud.CoreInstanceMetricsV1
			errOut                   error
		)
		return coreInstanceMetricsV1Out, errOut
	}
	return mock.CoreInstanceMetricsV1Func(ctx, instanceID, params)
}

// CoreInstanceMetricsV1Calls gets all the calls that were made to CoreInstanceMetricsV1.
// Check the length with:
//
//	len(mockedClient.CoreInstanceMetricsV1Calls())
func (mock *ClientMock) CoreInstanceMetricsV1Calls() []struct {
	Ctx        context.Context
	InstanceID string
	Params     cloud.MetricsParams
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		Params     cloud.MetricsParams
	}
	mock.lockCoreInstanceMetricsV1.RLock()
	calls = mock.calls.CoreInstanceMetricsV1
	mock.lockCoreInstanceMetricsV1.RUnlock()
	return calls
}

// CoreInstanceOverTimeMetrics calls CoreInstanceOverTimeMetricsFunc.
func (mock *ClientMock) CoreInstanceOverTimeMetrics(ctx context.Context, coreInstanceID string, params cloud.MetricsParams) (cloud.MetricsOverTime, error) {
	callInfo := struct {
		Ctx            context.Context
		CoreInstanceID string
		Params         cloud.MetricsParams
	}{
		Ctx:            ctx,
		CoreInstanceID: coreInstanceID,
		Params:         params,
	}
	mock.lockCoreInstanceOverTimeMetrics.Lock()
	mock.calls.CoreInstanceOverTimeMetrics = append(mock.calls.CoreInstanceOverTimeMetrics, callInfo)
	mock.lockCoreInstanceOverTimeMetrics.Unlock()
	if mock.CoreInstanceOverTimeMetricsFunc == nil {
		var (
			metricsOverTimeOut cloud.MetricsOverTime
			errOut             error
		)
		return metricsOverTimeOut, errOut
	}
	return mock.CoreInstanceOverTimeMetricsFunc(ctx, coreInstanceID, params)
}

// CoreInstanceOverTimeMetricsCalls gets all the calls that were made to CoreInstanceOverTimeMetrics.
// Check the length with:
//
//	len(mockedClient.CoreInstanceOverTimeMetricsCalls())
func (mock *ClientMock) CoreInstanceOverTimeMetricsCalls() []struct {
	Ctx            context.Context
	CoreInstanceID string
	Params         cloud.MetricsParams
} {
	var calls []struct {
		Ctx            context.Context
		CoreInstanceID string
		Params         cloud.MetricsParams
	}
	mock.lockCoreInstanceOverTimeMetrics.RLock()
	calls = mock.calls.CoreInstanceOverTimeMetrics
	mock.lockCoreInstanceOverTimeMetrics.RUnlock()
	return calls
}

// CoreInstancePing calls CoreInstancePingFunc.
func (mock *ClientMock) CoreInstancePing(ctx context.Context, instanceID string) (cloud.CoreInstancePingResponse, error) {
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
	}
	mock.lockCoreInstancePing.Lock()
	mock.calls.CoreInstancePing = append(mock.calls.CoreInstancePing, callInfo)
	mock.lockCoreInstancePing.Unlock()
	if mock.CoreInstancePingFunc == nil {
		var (
			coreInstancePingResponseOut cloud.CoreInstancePingResponse
			errOut                      error
		)
		return coreInstancePingResponseOut, errOut
	}
	return mock.CoreInstancePingFunc(ctx, instanceID)
}

// CoreInstancePingCalls gets all the calls that were made to CoreInstancePing.
// Check the length with:
//
//	len(mockedClient.CoreInstancePingCalls())
func (mock *ClientMock) CoreInstancePingCalls() []struct {
	Ctx        context.Context
	InstanceID string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
	}
	mock.lockCoreInstancePing.RLock()
	calls = mock.calls.CoreInstancePing
	mock.lockCoreInstancePing.RUnlock()
	return calls
}

// CoreInstances calls CoreInstancesFunc.
func (mock *ClientMock) CoreInstances(ctx context.Context, projectID string, params cloud.CoreInstancesParams) (cloud.CoreInstances, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.CoreInstancesParams
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Params:    params,
	}
	mock.lockCoreInstances.Lock()
	mock.calls.CoreInstances = append(mock.calls.CoreInstances, callInfo)
	mock.lockCoreInstances.Unlock()
	if mock.CoreInstancesFunc == nil {
		var (
			coreInstancesOut cloud.CoreInstances
			errOut           error
		)
		return coreInstancesOut, errOut
	}
	return mock.CoreInstancesFunc(ctx, projectID, params)
}

// CoreInstancesCalls gets all the calls that were made to CoreInstances.
// Check the length with:
//
//	len(mockedClient.CoreInstancesCalls())
func (mock *ClientMock) CoreInstancesCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Params    cloud.CoreInstancesParams
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.CoreInstancesParams
	}
	mock.lockCoreInstances.RLock()
	calls = mock.calls.CoreInstances
	mock.lockCoreInstances.RUnlock()
	return calls
}

// CreateClusterObject calls CreateClusterObjectFunc.
func (mock *ClientMock) CreateClusterObject(ctx context.Context, coreInstanceID string, payload cloud.CreateClusterObject) (cloud.CreatedClusterObject, error) {
	callInfo := struct {
		Ctx            context.Context
		CoreInstanceID string
		Payload        cloud.CreateClusterObject
	}{
		Ctx:            ctx,
		CoreInstanceID: coreInstanceID,
		Payload:        payload,
	}
	mock.lockCreateClusterObject.Lock()
	mock.calls.CreateClusterObject = append(mock.calls.CreateClusterObject, callInfo)
	mock.lockCreateClusterObject.Unlock()
	if mock.CreateClusterObjectFunc == nil {
		var (
			createdClusterObjectOut cloud.CreatedClusterObject
			errOut                  error
		)
		return createdClusterObjectOut, errOut
	}
	return mock.CreateClusterObjectFunc(ctx, coreInstanceID, payload)
}

// CreateClusterObjectCalls gets all the calls that were made to CreateClusterObject.
// Check the length with:
//
//	len(mockedClient.CreateClusterObjectCalls())
func (mock *ClientMock) CreateClusterObjectCalls() []struct {
	Ctx            context.Context
	CoreInstanceID string
	Payload        cloud.CreateClusterObject
} {
	var calls []struct {
		Ctx            context.Context
		CoreInstanceID string
		Payload        cloud.CreateClusterObject
	}
	mock.lockCreateClusterObject.RLock()
	calls = mock.calls.CreateClusterObject
	mock.lockCreateClusterObject.RUnlock()
	return calls
}

// CreateConfigSection calls CreateConfigSectionFunc.
func (mock *ClientMock) CreateConfigSection(ctx context.Context, projectID string, in cloud.CreateConfigSection) (cloud.CreatedConfigSection, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		In        cloud.CreateConfigSection
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		In:        in,
	}
	mock.lockCreateConfigSection.Lock()
	mock.calls.CreateConfigSection = append(mock.calls.CreateConfigSection, callInfo)
	mock.lockCreateConfigSection.Unlock()
	if mock.CreateConfigSectionFunc == nil {
		var (
			createdConfigSectionOut cloud.CreatedConfigSection
			errOut                  error
		)
		return createdConfigSectionOut, errOut
	}
	return mock.CreateConfigSectionFunc(ctx, projectID, in)
}

// CreateConfigSectionCalls gets all the calls that were made to CreateConfigSection.
// Check the length with:
//
//	len(mockedClient.CreateConfigSectionCalls())
func (mock *ClientMock) CreateConfigSectionCalls() []struct {
	Ctx       context.Context
	ProjectID string
	In        cloud.CreateConfigSection
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		In        cloud.CreateConfigSection
	}
	mock.lockCreateConfigSection.RLock()
	calls = mock.calls.CreateConfigSection
	mock.lockCreateConfigSection.RUnlock()
	return calls
}

// CreateCoreInstance calls CreateCoreInstanceFunc.
func (mock *ClientMock) CreateCoreInstance(ctx context.Context, payload cloud.CreateCoreInstance) (cloud.CreatedCoreInstance, error) {
	callInfo := struct {
		Ctx     context.Context
		Payload cloud.CreateCoreInstance
	}{
		Ctx:     ctx,
		Payload: payload,
	}
	mock.lockCreateCoreInstance.Lock()
	mock.calls.CreateCoreInstance = append(mock.calls.CreateCoreInstance, callInfo)
	mock.lockCreateCoreInstance.Unlock()
	if mock.CreateCoreInstanceFunc == nil {
		var (
			createdCoreInstanceOut cloud.CreatedCoreInstance
			errOut                 error
		)
		return createdCoreInstanceOut, errOut
	}
	return mock.CreateCoreInstanceFunc(ctx, payload)
}

// CreateCoreInstanceCalls gets all the calls that were made to CreateCoreInstance.
// Check the length with:
//
//	len(mockedClient.CreateCoreInstanceCalls())
func (mock *ClientMock) CreateCoreInstanceCalls() []struct {
	Ctx     context.Context
	Payload cloud.CreateCoreInstance
} {
	var calls []struct {
		Ctx     context.Context
		Payload cloud.CreateCoreInstance
	}
	mock.lockCreateCoreInstance.RLock()
	calls = mock.calls.CreateCoreInstance
	mock.lockCreateCoreInstance.RUnlock()
	return calls
}

// CreateCoreInstanceCheck calls CreateCoreInstanceCheckFunc.
func (mock *ClientMock) CreateCoreInstanceCheck(ctx context.Context, coreInstanceID string, payload cloud.CreateCoreInstanceCheck) (cloud.CreatedCoreInstanceCheck, error) {
	callInfo := struct {
		Ctx            context.Context
		CoreInstanceID string
		Payload        cloud.CreateCoreInstanceCheck
	}{
		Ctx:            ctx,
		CoreInstanceID: coreInstanceID,
		Payload:        payload,
	}
	mock.lockCreateCoreInstanceCheck.Lock()
	mock.calls.CreateCoreInstanceCheck = append(mock.calls.CreateCoreInstanceCheck, callInfo)
	mock.lockCreateCoreInstanceCheck.Unlock()
	if mock.CreateCoreInstanceCheckFunc == nil {
		var (
			createdCoreInstanceCheckOut cloud.CreatedCoreInstanceCheck
			errOut                      error
		)
		return createdCoreInstanceCheckOut, errOut
	}
	return mock.CreateCoreInstanceCheckFunc(ctx, coreInstanceID, payload)
}

// CreateCoreInstanceCheckCalls gets all the calls that were made to CreateCoreInstanceCheck.
// Check the length with:
//
//	len(mockedClient.CreateCoreInstanceCheckCalls())
func (mock *ClientMock) CreateCoreInstanceCheckCalls() []struct {
	Ctx            context.Context
	CoreInstanceID string
	Payload        cloud.CreateCoreInstanceCheck
} {
	var calls []struct {
		Ctx            context.Context
		CoreInstanceID string
		Payload        cloud.CreateCoreInstanceCheck
	}
	mock.lockCreateCoreInstanceCheck.RLock()
	calls = mock.calls.CreateCoreInstanceCheck
	mock.lockCreateCoreInstanceCheck.RUnlock()
	return calls
}

// CreateEnvironment calls CreateEnvironmentFunc.
func (mock *ClientMock) CreateEnvironment(ctx context.Context, projectID string, payload cloud.CreateEnvironment) (cloud.CreatedEnvironment, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Payload   cloud.CreateEnvironment
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Payload:   payload,
	}
	mock.lockCreateEnvironment.Lock()
	mock.calls.CreateEnvironment = append(mock.calls.CreateEnvironment, callInfo)
	mock.lockCreateEnvironment.Unlock()
	if mock.CreateEnvironmentFunc == nil {
		var (
			createdEnvironmentOut cloud.CreatedEnvironment
			errOut                error
		)
		return createdEnvironmentOut, errOut
	}
	return mock.CreateEnvironmentFunc(ctx, projectID, payload)
}

// CreateEnvironmentCalls gets all the calls that were made to CreateEnvironment.
// Check the length with:
//
//	len(mockedClient.CreateEnvironmentCalls())
func (mock *ClientMock) CreateEnvironmentCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Payload   cloud.CreateEnvironment
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Payload   cloud.CreateEnvironment
	}
	mock.lockCreateEnvironment.RLock()
	calls = mock.calls.CreateEnvironment
	mock.lockCreateEnvironment.RUnlock()
	return calls
}

// CreateIngestCheck calls CreateIngestCheckFunc.
func (mock *ClientMock) CreateIngestCheck(ctx context.Context, coreInstanceID string, payload cloud.CreateIngestCheck) (cloud.CreatedIngestCheck, error) {
	callInfo := struct {
		Ctx            context.Context
		CoreInstanceID string
		Payload        cloud.CreateIngestCheck
	}{
		Ctx:            ctx,
		CoreInstanceID: coreInstanceID,
		Payload:        payload,
	}
	mock.lockCreateIngestCheck.Lock()
	mock.calls.CreateIngestCheck = append(mock.calls.CreateIngestCheck, callInfo)
	mock.lockCreateIngestCheck.Unlock()
	if mock.CreateIngestCheckFunc == nil {
		var (
			createdIngestCheckOut cloud.CreatedIngestCheck
			errOut                error
		)
		return createdIngestCheckOut, errOut
	}
	return mock.CreateIngestCheckFunc(ctx, coreInstanceID, payload)
}

// CreateIngestCheckCalls gets all the calls that were made to CreateIngestCheck.
// Check the length with:
//
//	len(mockedClient.CreateIngestCheckCalls())
func (mock *ClientMock) CreateIngestCheckCalls() []struct {
	Ctx            context.Context
	CoreInstanceID string
	Payload        cloud.CreateIngestCheck
} {
	var calls []struct {
		Ctx            context.Context
		CoreInstanceID string
		Payload        cloud.CreateIngestCheck
	}
	mock.lockCreateIngestCheck.RLock()
	calls = mock.calls.CreateIngestCheck
	mock.lockCreateIngestCheck.RUnlock()
	return calls
}

// CreateInvitation calls CreateInvitationFunc.
func (mock *ClientMock) CreateInvitation(ctx context.Context, projectID string, payload cloud.CreateInvitation) error {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Payload   cloud.CreateInvitation
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Payload:   payload,
	}
	mock.lockCreateInvitation.Lock()
	mock.calls.CreateInvitation = append(mock.calls.CreateInvitation, callInfo)
	mock.lockCreateInvitation.Unlock()
	if mock.CreateInvitationFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CreateInvitationFunc(ctx, projectID, payload)
}

// CreateInvitationCalls gets all the calls that were made to CreateInvitation.
// Check the length with:
//
//	len(mockedClient.CreateInvitationCalls())
func (mock *ClientMock) CreateInvitationCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Payload   cloud.CreateInvitation
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Payload   cloud.CreateInvitation
	}
	mock.lockCreateInvitation.RLock()
	calls = mock.calls.CreateInvitation
	mock.lockCreateInvitation.RUnlock()
	return calls
}

// CreatePipeline calls CreatePipelineFunc.
func (mock *ClientMock) CreatePipeline(ctx context.Context, instanceID string, payload cloud.CreatePipeline) (cloud.CreatedPipeline, error) {
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		Payload    cloud.CreatePipeline
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		Payload:    payload,
	}
	mock.lockCreatePipeline.Lock()
	mock.calls.CreatePipeline = append(mock.calls.CreatePipeline, callInfo)
	mock.lockCreatePipeline.Unlock()
	if mock.CreatePipelineFunc == nil {
		var (
			createdPipelineOut cloud.CreatedPipeline
			errOut             error
		)
		return createdPipelineOut, errOut
	}
	return mock.CreatePipelineFunc(ctx, instanceID, payload)
}

// CreatePipelineCalls gets all the calls that were made to CreatePipeline.
// Check the length with:
//
//	len(mockedClient.CreatePipelineCalls())
func (mock *ClientMock) CreatePipelineCalls() []struct {
	Ctx        context.Context
	InstanceID string
	Payload    cloud.CreatePipeline
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		Payload    cloud.CreatePipeline
	}
	mock.lockCreatePipeline.RLock()
	calls = mock.calls.CreatePipeline
	mock.lockCreatePipeline.RUnlock()
	return calls
}

// CreatePipelineCheck calls CreatePipelineCheckFunc.
func (mock *ClientMock) CreatePipelineCheck(ctx context.Context, pipelineID string, payload cloud.CreatePipelineCheck) (cloud.CreatedPipelineCheck, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Payload    cloud.CreatePipelineCheck
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Payload:    payload,
	}
	mock.lockCreatePipelineCheck.Lock()
	mock.calls.CreatePipelineCheck = append(mock.calls.CreatePipelineCheck, callInfo)
	mock.lockCreatePipelineCheck.Unlock()
	if mock.CreatePipelineCheckFunc == nil {
		var (
			createdPipelineCheckOut cloud.CreatedPipelineCheck
			errOut                  error
		)
		return createdPipelineCheckOut, errOut
	}
	return mock.CreatePipelineCheckFunc(ctx, pipelineID, payload)
}

// CreatePipelineCheckCalls gets all the calls that were made to CreatePipelineCheck.
// Check the length with:
//
//	len(mockedClient.CreatePipelineCheckCalls())
func (mock *ClientMock) CreatePipelineCheckCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Payload    cloud.CreatePipelineCheck
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Payload    cloud.CreatePipelineCheck
	}
	mock.lockCreatePipelineCheck.RLock()
	calls = mock.calls.CreatePipelineCheck
	mock.lockCreatePipelineCheck.RUnlock()
	return calls
}

// CreatePipelineFile calls CreatePipelineFileFunc.
func (mock *ClientMock) CreatePipelineFile(ctx context.Context, pipelineID string, payload cloud.CreatePipelineFile) (cloud.CreatedPipelineFile, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Payload    cloud.CreatePipelineFile
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Payload:    payload,
	}
	mock.lockCreatePipelineFile.Lock()
	mock.calls.CreatePipelineFile = append(mock.calls.CreatePipelineFile, callInfo)
	mock.lockCreatePipelineFile.Unlock()
	if mock.CreatePipelineFileFunc == nil {
		var (
			createdPipelineFileOut cloud.CreatedPipelineFile
			errOut                 error
		)
		return createdPipelineFileOut, errOut
	}
	return mock.CreatePipelineFileFunc(ctx, pipelineID, payload)
}

// CreatePipelineFileCalls gets all the calls that were made to CreatePipelineFile.
// Check the length with:
//
//	len(mockedClient.CreatePipelineFileCalls())
func (mock *ClientMock) CreatePipelineFileCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Payload    cloud.CreatePipelineFile
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Payload    cloud.CreatePipelineFile
	}
	mock.lockCreatePipelineFile.RLock()
	calls = mock.calls.CreatePipelineFile
	mock.lockCreatePipelineFile.RUnlock()
	return calls
}

// CreatePipelinePort calls CreatePipelinePortFunc.
func (mock *ClientMock) CreatePipelinePort(ctx context.Context, pipelineID string, payload cloud.CreatePipelinePort) (cloud.CreatedPipelinePort, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Payload    cloud.CreatePipelinePort
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Payload:    payload,
	}
	mock.lockCreatePipelinePort.Lock()
	mock.calls.CreatePipelinePort = append(mock.calls.CreatePipelinePort, callInfo)
	mock.lockCreatePipelinePort.Unlock()
	if mock.CreatePipelinePortFunc == nil {
		var (
			createdPipelinePortOut cloud.CreatedPipelinePort
			errOut                 error
		)
		return createdPipelinePortOut, errOut
	}
	return mock.CreatePipelinePortFunc(ctx, pipelineID, payload)
}

// CreatePipelinePortCalls gets all the calls that were made to CreatePipelinePort.
// Check the length with:
//
//	len(mockedClient.CreatePipelinePortCalls())
func (mock *ClientMock) CreatePipelinePortCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Payload    cloud.CreatePipelinePort
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Payload    cloud.CreatePipelinePort
	}
	mock.lockCreatePipelinePort.RLock()
	calls = mock.calls.CreatePipelinePort
	mock.lockCreatePipelinePort.RUnlock()
	return calls
}

// CreatePipelineSecret calls CreatePipelineSecretFunc.
func (mock *ClientMock) CreatePipelineSecret(ctx context.Context, pipelineID string, payload cloud.CreatePipelineSecret) (cloud.CreatedPipelineSecret, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Payload    cloud.CreatePipelineSecret
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Payload:    payload,
	}
	mock.lockCreatePipelineSecret.Lock()
	mock.calls.CreatePipelineSecret = append(mock.calls.CreatePipelineSecret, callInfo)
	mock.lockCreatePipelineSecret.Unlock()
	if mock.CreatePipelineSecretFunc == nil {
		var (
			createdPipelineSecretOut cloud.CreatedPipelineSecret
			errOut                   error
		)
		return createdPipelineSecretOut, errOut
	}
	return mock.CreatePipelineSecretFunc(ctx, pipelineID, payload)
}

// CreatePipelineSecretCalls gets all the calls that were made to CreatePipelineSecret.
// Check the length with:
//
//	len(mockedClient.CreatePipelineSecretCalls())
func (mock *ClientMock) CreatePipelineSecretCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Payload    cloud.CreatePipelineSecret
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Payload    cloud.CreatePipelineSecret
	}
	mock.lockCreatePipelineSecret.RLock()
	calls = mock.calls.CreatePipelineSecret
	mock.lockCreatePipelineSecret.RUnlock()
	return calls
}

// CreateProcessingRule calls CreateProcessingRuleFunc.
func (mock *ClientMock) CreateProcessingRule(ctx context.Context, in cloud.CreateProcessingRule) (cloud.CreatedProcessingRule, error) {
	callInfo := struct {
		Ctx context.Context
		In  cloud.CreateProcessingRule
	}{
		Ctx: ctx,
		In:  in,
	}
	mock.lockCreateProcessingRule.Lock()
	mock.calls.CreateProcessingRule = append(mock.calls.CreateProcessingRule, callInfo)
	mock.lockCreateProcessingRule.Unlock()
	if mock.CreateProcessingRuleFunc == nil {
		var (
			createdProcessingRuleOut cloud.CreatedProcessingRule
			errOut                   error
		)
		return createdProcessingRuleOut, errOut
	}
	return mock.CreateProcessingRuleFunc(ctx, in)
}

// CreateProcessingRuleCalls gets all the calls that were made to CreateProcessingRule.
// Check the length with:
//
//	len(mockedClient.CreateProcessingRuleCalls())
func (mock *ClientMock) CreateProcessingRuleCalls() []struct {
	Ctx context.Context
	In  cloud.CreateProcessingRule
} {
	var calls []struct {
		Ctx context.Context
		In  cloud.CreateProcessingRule
	}
	mock.lockCreateProcessingRule.RLock()
	calls = mock.calls.CreateProcessingRule
	mock.lockCreateProcessingRule.RUnlock()
	return calls
}

// CreateProject calls CreateProjectFunc.
func (mock *ClientMock) CreateProject(ctx context.Context, payload cloud.CreateProject) (cloud.CreatedProject, error) {
	callInfo := struct {
		Ctx     context.Context
		Payload cloud.CreateProject
	}{
		Ctx:     ctx,
		Payload: payload,
	}
	mock.lockCreateProject.Lock()
	mock.calls.CreateProject = append(mock.calls.CreateProject, callInfo)
	mock.lockCreateProject.Unlock()
	if mock.CreateProjectFunc == nil {
		var (
			createdProjectOut cloud.CreatedProject
			errOut            error
		)
		return createdProjectOut, errOut
	}
	return mock.CreateProjectFunc(ctx, payload)
}

// CreateProjectCalls gets all the calls that were made to CreateProject.
// Check the length with:
//
//	len(mockedClient.CreateProjectCalls())
func (mock *ClientMock) CreateProjectCalls() []struct {
	Ctx     context.Context
	Payload cloud.CreateProject
} {
	var calls []struct {
		Ctx     context.Context
		Payload cloud.CreateProject
	}
	mock.lockCreateProject.RLock()
	calls = mock.calls.CreateProject
	mock.lockCreateProject.RUnlock()
	return calls
}

// CreateResourceProfile calls CreateResourceProfileFunc.
func (mock *ClientMock) CreateResourceProfile(ctx context.Context, instanceID string, payload cloud.CreateResourceProfile) (cloud.CreatedResourceProfile, error) {
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		Payload    cloud.CreateResourceProfile
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		Payload:    payload,
	}
	mock.lockCreateResourceProfile.Lock()
	mock.calls.CreateResourceProfile = append(mock.calls.CreateResourceProfile, callInfo)
	mock.lockCreateResourceProfile.Unlock()
	if mock.CreateResourceProfileFunc == nil {
		var (
			createdResourceProfileOut cloud.CreatedResourceProfile
			errOut                    error
		)
		return createdResourceProfileOut, errOut
	}
	return mock.CreateResourceProfileFunc(ctx, instanceID, payload)
}

// CreateResourceProfileCalls gets all the calls that were made to CreateResourceProfile.
// Check the length with:
//
//	len(mockedClient.CreateResourceProfileCalls())
func (mock *ClientMock) CreateResourceProfileCalls() []struct {
	Ctx        context.Context
	InstanceID string
	Payload    cloud.CreateResourceProfile
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		Payload    cloud.CreateResourceProfile
	}
	mock.lockCreateResourceProfile.RLock()
	calls = mock.calls.CreateResourceProfile
	mock.lockCreateResourceProfile.RUnlock()
	return calls
}

// CreateToken calls CreateTokenFunc.
func (mock *ClientMock) CreateToken(ctx context.Context, projectID string, payload cloud.CreateToken) (cloud.Token, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Payload   cloud.CreateToken
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Payload:   payload,
	}
	mock.lockCreateToken.Lock()
	mock.calls.CreateToken = append(mock.calls.CreateToken, callInfo)
	mock.lockCreateToken.Unlock()
	if mock.CreateTokenFunc == nil {
		var (
			tokenOut cloud.Token
			errOut   error
		)
		return tokenOut, errOut
	}
	return mock.CreateTokenFunc(ctx, projectID, payload)
}

// CreateTokenCalls gets all the calls that were made to CreateToken.
// Check the length with:
//
//	len(mockedClient.CreateTokenCalls())
func (mock *ClientMock) CreateTokenCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Payload   cloud.CreateToken
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Payload   cloud.CreateToken
	}
	mock.lockCreateToken.RLock()
	calls = mock.calls.CreateToken
	mock.lockCreateToken.RUnlock()
	return calls
}

// CreateTraceRecord calls CreateTraceRecordFunc.
func (mock *ClientMock) CreateTraceRecord(ctx context.Context, pipelineID string, in cloud.CreateTraceRecord) (cloud.CreatedTraceRecord, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		In         cloud.CreateTraceRecord
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		In:         in,
	}
	mock.lockCreateTraceRecord.Lock()
	mock.calls.CreateTraceRecord = append(mock.calls.CreateTraceRecord, callInfo)
	mock.lockCreateTraceRecord.Unlock()
	if mock.CreateTraceRecordFunc == nil {
		var (
			createdTraceRecordOut cloud.CreatedTraceRecord
			errOut                error
		)
		return createdTraceRecordOut, errOut
	}
	return mock.CreateTraceRecordFunc(ctx, pipelineID, in)
}

// CreateTraceRecordCalls gets all the calls that were made to CreateTraceRecord.
// Check the length with:
//
//	len(mockedClient.CreateTraceRecordCalls())
func (mock *ClientMock) CreateTraceRecordCalls() []struct {
	Ctx        context.Context
	PipelineID string
	In         cloud.CreateTraceRecord
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		In         cloud.CreateTraceRecord
	}
	mock.lockCreateTraceRecord.RLock()
	calls = mock.calls.CreateTraceRecord
	mock.lockCreateTraceRecord.RUnlock()
	return calls
}

// CreateTraceSession calls CreateTraceSessionFunc.
func (mock *ClientMock) CreateTraceSession(ctx context.Context, pipelineID string, in cloud.CreateTraceSession) (cloud.CreatedTraceSession, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		In         cloud.CreateTraceSession
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		In:         in,
	}
	mock.lockCreateTraceSession.Lock()
	mock.calls.CreateTraceSession = append(mock.calls.CreateTraceSession, callInfo)
	mock.lockCreateTraceSession.Unlock()
	if mock.CreateTraceSessionFunc == nil {
		var (
			createdTraceSessionOut cloud.CreatedTraceSession
			errOut                 error
		)
		return createdTraceSessionOut, errOut
	}
	return mock.CreateTraceSessionFunc(ctx, pipelineID, in)
}

// CreateTraceSessionCalls gets all the calls that were made to CreateTraceSession.
// Check the length with:
//
//	len(mockedClient.CreateTraceSessionCalls())
func (mock *ClientMock) CreateTraceSessionCalls() []struct {
	Ctx        context.Context
	PipelineID string
	In         cloud.CreateTraceSession
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		In         cloud.CreateTraceSession
	}
	mock.lockCreateTraceSession.RLock()
	calls = mock.calls.CreateTraceSession
	mock.lockCreateTraceSession.RUnlock()
	return calls
}

// DeleteAgent calls DeleteAgentFunc.
func (mock *ClientMock) DeleteAgent(ctx context.Context, agentID string) error {
	callInfo := struct {
		Ctx     context.Context
		AgentID string
	}{
		Ctx:     ctx,
		AgentID: agentID,
	}
	mock.lockDeleteAgent.Lock()
	mock.calls.DeleteAgent = append(mock.calls.DeleteAgent, callInfo)
	mock.lockDeleteAgent.Unlock()
	if mock.DeleteAgentFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteAgentFunc(ctx, agentID)
}

// DeleteAgentCalls gets all the calls that were made to DeleteAgent.
// Check the length with:
//
//	len(mockedClient.DeleteAgentCalls())
func (mock *ClientMock) DeleteAgentCalls() []struct {
	Ctx     context.Context
	AgentID string
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
	}
	mock.lockDeleteAgent.RLock()
	calls = mock.calls.DeleteAgent
	mock.lockDeleteAgent.RUnlock()
	return calls
}

// DeleteAgents calls DeleteAgentsFunc.
func (mock *ClientMock) DeleteAgents(ctx context.Context, projectID string, agentIDs ...string) error {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		AgentIDs  []string
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		AgentIDs:  agentIDs,
	}
	mock.lockDeleteAgents.Lock()
	mock.calls.DeleteAgents = append(mock.calls.DeleteAgents, callInfo)
	mock.lockDeleteAgents.Unlock()
	if mock.DeleteAgentsFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteAgentsFunc(ctx, projectID, agentIDs...)
}

// DeleteAgentsCalls gets all the calls that were made to DeleteAgents.
// Check the length with:
//
//	len(mockedClient.DeleteAgentsCalls())
func (mock *ClientMock) DeleteAgentsCalls() []struct {
	Ctx       context.Context
	ProjectID string
	AgentIDs  []string
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		AgentIDs  []string
	}
	mock.lockDeleteAgents.RLock()
	calls = mock.calls.DeleteAgents
	mock.lockDeleteAgents.RUnlock()
	return calls
}

// DeleteClusterObject calls DeleteClusterObjectFunc.
func (mock *ClientMock) DeleteClusterObject(ctx context.Context, checkID string) error {
	callInfo := struct {
		Ctx     context.Context
		CheckID string
	}{
		Ctx:     ctx,
		CheckID: checkID,
	}
	mock.lockDeleteClusterObject.Lock()
	mock.calls.DeleteClusterObject = append(mock.calls.DeleteClusterObject, callInfo)
	mock.lockDeleteClusterObject.Unlock()
	if mock.DeleteClusterObjectFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteClusterObjectFunc(ctx, checkID)
}

// DeleteClusterObjectCalls gets all the calls that were made to DeleteClusterObject.
// Check the length with:
//
//	len(mockedClient.DeleteClusterObjectCalls())
func (mock *ClientMock) DeleteClusterObjectCalls() []struct {
	Ctx     context.Context
	CheckID string
} {
	var calls []struct {
		Ctx     context.Context
		CheckID string
	}
	mock.lockDeleteClusterObject.RLock()
	calls = mock.calls.DeleteClusterObject
	mock.lockDeleteClusterObject.RUnlock()
	return calls
}

// DeleteConfigSection calls DeleteConfigSectionFunc.
func (mock *ClientMock) DeleteConfigSection(ctx context.Context, configSectionID string) error {
	callInfo := struct {
		Ctx             context.Context
		ConfigSectionID string
	}{
		Ctx:             ctx,
		ConfigSectionID: configSectionID,
	}
	mock.lockDeleteConfigSection.Lock()
	mock.calls.DeleteConfigSection = append(mock.calls.DeleteConfigSection, callInfo)
	mock.lockDeleteConfigSection.Unlock()
	if mock.DeleteConfigSectionFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteConfigSectionFunc(ctx, configSectionID)
}

// DeleteConfigSectionCalls gets all the calls that were made to DeleteConfigSection.
// Check the length with:
//
//	len(mockedClient.DeleteConfigSectionCalls())
func (mock *ClientMock) DeleteConfigSectionCalls() []struct {
	Ctx             context.Context
	ConfigSectionID string
} {
	var calls []struct {
		Ctx             context.Context
		ConfigSectionID string
	}
	mock.lockDeleteConfigSection.RLock()
	calls = mock.calls.DeleteConfigSection
	mock.lockDeleteConfigSection.RUnlock()
	return calls
}

// DeleteCoreInstance calls DeleteCoreInstanceFunc.
func (mock *ClientMock) DeleteCoreInstance(ctx context.Context, instanceID string) error {
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
	}
	mock.lockDeleteCoreInstance.Lock()
	mock.calls.DeleteCoreInstance = append(mock.calls.DeleteCoreInstance, callInfo)
	mock.lockDeleteCoreInstance.Unlock()
	if mock.DeleteCoreInstanceFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteCoreInstanceFunc(ctx, instanceID)
}

// DeleteCoreInstanceCalls gets all the calls that were made to DeleteCoreInstance.
// Check the length with:
//
//	len(mockedClient.DeleteCoreInstanceCalls())
func (mock *ClientMock) DeleteCoreInstanceCalls() []struct {
	Ctx        context.Context
	InstanceID string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
	}
	mock.lockDeleteCoreInstance.RLock()
	calls = mock.calls.DeleteCoreInstance
	mock.lockDeleteCoreInstance.RUnlock()
	return calls
}

// DeleteCoreInstanceCheck calls DeleteCoreInstanceCheckFunc.
func (mock *ClientMock) DeleteCoreInstanceCheck(ctx context.Context, checkID string) error {
	callInfo := struct {
		Ctx     context.Context
		CheckID string
	}{
		Ctx:     ctx,
		CheckID: checkID,
	}
	mock.lockDeleteCoreInstanceCheck.Lock()
	mock.calls.DeleteCoreInstanceCheck = append(mock.calls.DeleteCoreInstanceCheck, callInfo)
	mock.lockDeleteCoreInstanceCheck.Unlock()
	if mock.DeleteCoreInstanceCheckFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteCoreInstanceCheckFunc(ctx, checkID)
}

// DeleteCoreInstanceCheckCalls gets all the calls that were made to DeleteCoreInstanceCheck.
// Check the length with:
//
//	len(mockedClient.DeleteCoreInstanceCheckCalls())
func (mock *ClientMock) DeleteCoreInstanceCheckCalls() []struct {
	Ctx     context.Context
	CheckID string
} {
	var calls []struct {
		Ctx     context.Context
		CheckID string
	}
	mock.lockDeleteCoreInstanceCheck.RLock()
	calls = mock.calls.DeleteCoreInstanceCheck
	mock.lockDeleteCoreInstanceCheck.RUnlock()
	return calls
}

// DeleteCoreInstances calls DeleteCoreInstancesFunc.
func (mock *ClientMock) DeleteCoreInstances(ctx context.Context, projectID string, instanceIDs ...string) error {
	callInfo := struct {
		Ctx         context.Context
		ProjectID   string
		InstanceIDs []string
	}{
		Ctx:         ctx,
		ProjectID:   projectID,
		InstanceIDs: instanceIDs,
	}
	mock.lockDeleteCoreInstances.Lock()
	mock.calls.DeleteCoreInstances = append(mock.calls.DeleteCoreInstances, callInfo)
	mock.lockDeleteCoreInstances.Unlock()
	if mock.DeleteCoreInstancesFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteCoreInstancesFunc(ctx, projectID, instanceIDs...)
}

// DeleteCoreInstancesCalls gets all the calls that were made to DeleteCoreInstances.
// Check the length with:
//
//	len(mockedClient.DeleteCoreInstancesCalls())
func (mock *ClientMock) DeleteCoreInstancesCalls() []struct {
	Ctx         context.Context
	ProjectID   string
	InstanceIDs []string
} {
	var calls []struct {
		Ctx         context.Context
		ProjectID   string
		InstanceIDs []string
	}
	mock.lockDeleteCoreInstances.RLock()
	calls = mock.calls.DeleteCoreInstances
	mock.lockDeleteCoreInstances.RUnlock()
	return calls
}

// DeleteEnvironment calls DeleteEnvironmentFunc.
func (mock *ClientMock) DeleteEnvironment(ctx context.Context, environmentID string) error {
	callInfo := struct {
		Ctx           context.Context
		EnvironmentID string
	}{
		Ctx:           ctx,
		EnvironmentID: environmentID,
	}
	mock.lockDeleteEnvironment.Lock()
	mock.calls.DeleteEnvironment = append(mock.calls.DeleteEnvironment, callInfo)
	mock.lockDeleteEnvironment.Unlock()
	if mock.DeleteEnvironmentFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteEnvironmentFunc(ctx, environmentID)
}

// DeleteEnvironmentCalls gets all the calls that were made to DeleteEnvironment.
// Check the length with:
//
//	len(mockedClient.DeleteEnvironmentCalls())
func (mock *ClientMock) DeleteEnvironmentCalls() []struct {
	Ctx           context.Context
	EnvironmentID string
} {
	var calls []struct {
		Ctx           context.Context
		EnvironmentID string
	}
	mock.lockDeleteEnvironment.RLock()
	calls = mock.calls.DeleteEnvironment
	mock.lockDeleteEnvironment.RUnlock()
	return calls
}

// DeleteIngestCheck calls DeleteIngestCheckFunc.
func (mock *ClientMock) DeleteIngestCheck(ctx context.Context, checkID string) error {
	callInfo := struct {
		Ctx     context.Context
		CheckID string
	}{
		Ctx:     ctx,
		CheckID: checkID,
	}
	mock.lockDeleteIngestCheck.Lock()
	mock.calls.DeleteIngestCheck = append(mock.calls.DeleteIngestCheck, callInfo)
	mock.lockDeleteIngestCheck.Unlock()
	if mock.DeleteIngestCheckFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteIngestCheckFunc(ctx, checkID)
}

// DeleteIngestCheckCalls gets all the calls that were made to DeleteIngestCheck.
// Check the length with:
//
//	len(mockedClient.DeleteIngestCheckCalls())
func (mock *ClientMock) DeleteIngestCheckCalls() []struct {
	Ctx     context.Context
	CheckID string
} {
	var calls []struct {
		Ctx     context.Context
		CheckID string
	}
	mock.lockDeleteIngestCheck.RLock()
	calls = mock.calls.DeleteIngestCheck
	mock.lockDeleteIngestCheck.RUnlock()
	return calls
}

// DeletePipeline calls DeletePipelineFunc.
func (mock *ClientMock) DeletePipeline(ctx context.Context, pipelineID string) error {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
	}
	mock.lockDeletePipeline.Lock()
	mock.calls.DeletePipeline = append(mock.calls.DeletePipeline, callInfo)
	mock.lockDeletePipeline.Unlock()
	if mock.DeletePipelineFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePipelineFunc(ctx, pipelineID)
}

// DeletePipelineCalls gets all the calls that were made to DeletePipeline.
// Check the length with:
//
//	len(mockedClient.DeletePipelineCalls())
func (mock *ClientMock) DeletePipelineCalls() []struct {
	Ctx        context.Context
	PipelineID string
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
	}
	mock.lockDeletePipeline.RLock()
	calls = mock.calls.DeletePipeline
	mock.lockDeletePipeline.RUnlock()
	return calls
}

// DeletePipelineCheck calls DeletePipelineCheckFunc.
func (mock *ClientMock) DeletePipelineCheck(ctx context.Context, checkID string) error {
	callInfo := struct {
		Ctx     context.Context
		CheckID string
	}{
		Ctx:     ctx,
		CheckID: checkID,
	}
	mock.lockDeletePipelineCheck.Lock()
	mock.calls.DeletePipelineCheck = append(mock.calls.DeletePipelineCheck, callInfo)
	mock.lockDeletePipelineCheck.Unlock()
	if mock.DeletePipelineCheckFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePipelineCheckFunc(ctx, checkID)
}

// DeletePipelineCheckCalls gets all the calls that were made to DeletePipelineCheck.
// Check the length with:
//
//	len(mockedClient.DeletePipelineCheckCalls())
func (mock *ClientMock) DeletePipelineCheckCalls() []struct {
	Ctx     context.Context
	CheckID string
} {
	var calls []struct {
		Ctx     context.Context
		CheckID string
	}
	mock.lockDeletePipelineCheck.RLock()
	calls = mock.calls.DeletePipelineCheck
	mock.lockDeletePipelineCheck.RUnlock()
	return calls
}

// DeletePipelineClusterObjects calls DeletePipelineClusterObjectsFunc.
func (mock *ClientMock) DeletePipelineClusterObjects(ctx context.Context, pipelineID string, clusterObjectIDs ...string) error {
	callInfo := struct {
		Ctx              context.Context
		PipelineID       string
		ClusterObjectIDs []string
	}{
		Ctx:              ctx,
		PipelineID:       pipelineID,
		ClusterObjectIDs: clusterObjectIDs,
	}
	mock.lockDeletePipelineClusterObjects.Lock()
	mock.calls.DeletePipelineClusterObjects = append(mock.calls.DeletePipelineClusterObjects, callInfo)
	mock.lockDeletePipelineClusterObjects.Unlock()
	if mock.DeletePipelineClusterObjectsFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePipelineClusterObjectsFunc(ctx, pipelineID, clusterObjectIDs...)
}

// DeletePipelineClusterObjectsCalls gets all the calls that were made to DeletePipelineClusterObjects.
// Check the length with:
//
//	len(mockedClient.DeletePipelineClusterObjectsCalls())
func (mock *ClientMock) DeletePipelineClusterObjectsCalls() []struct {
	Ctx              context.Context
	PipelineID       string
	ClusterObjectIDs []string
} {
	var calls []struct {
		Ctx              context.Context
		PipelineID       string
		ClusterObjectIDs []string
	}
	mock.lockDeletePipelineClusterObjects.RLock()
	calls = mock.calls.DeletePipelineClusterObjects
	mock.lockDeletePipelineClusterObjects.RUnlock()
	return calls
}

// DeletePipelineFile calls DeletePipelineFileFunc.
func (mock *ClientMock) DeletePipelineFile(ctx context.Context, fileID string) error {
	callInfo := struct {
		Ctx    context.Context
		FileID string
	}{
		Ctx:    ctx,
		FileID: fileID,
	}
	mock.lockDeletePipelineFile.Lock()
	mock.calls.DeletePipelineFile = append(mock.calls.DeletePipelineFile, callInfo)
	mock.lockDeletePipelineFile.Unlock()
	if mock.DeletePipelineFileFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePipelineFileFunc(ctx, fileID)
}

// DeletePipelineFileCalls gets all the calls that were made to DeletePipelineFile.
// Check the length with:
//
//	len(mockedClient.DeletePipelineFileCalls())
func (mock *ClientMock) DeletePipelineFileCalls() []struct {
	Ctx    context.Context
	FileID string
} {
	var calls []struct {
		Ctx    context.Context
		FileID string
	}
	mock.lockDeletePipelineFile.RLock()
	calls = mock.calls.DeletePipelineFile
	mock.lockDeletePipelineFile.RUnlock()
	return calls
}

// DeletePipelinePort calls DeletePipelinePortFunc.
func (mock *ClientMock) DeletePipelinePort(ctx context.Context, portID string) error {
	callInfo := struct {
		Ctx    context.Context
		PortID string
	}{
		Ctx:    ctx,
		PortID: portID,
	}
	mock.lockDeletePipelinePort.Lock()
	mock.calls.DeletePipelinePort = append(mock.calls.DeletePipelinePort, callInfo)
	mock.lockDeletePipelinePort.Unlock()
	if mock.DeletePipelinePortFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePipelinePortFunc(ctx, portID)
}

// DeletePipelinePortCalls gets all the calls that were made to DeletePipelinePort.
// Check the length with:
//
//	len(mockedClient.DeletePipelinePortCalls())
func (mock *ClientMock) DeletePipelinePortCalls() []struct {
	Ctx    context.Context
	PortID string
} {
	var calls []struct {
		Ctx    context.Context
		PortID string
	}
	mock.lockDeletePipelinePort.RLock()
	calls = mock.calls.DeletePipelinePort
	mock.lockDeletePipelinePort.RUnlock()
	return calls
}

// DeletePipelineSecret calls DeletePipelineSecretFunc.
func (mock *ClientMock) DeletePipelineSecret(ctx context.Context, secretID string) error {
	callInfo := struct {
		Ctx      context.Context
		SecretID string
	}{
		Ctx:      ctx,
		SecretID: secretID,
	}
	mock.lockDeletePipelineSecret.Lock()
	mock.calls.DeletePipelineSecret = append(mock.calls.DeletePipelineSecret, callInfo)
	mock.lockDeletePipelineSecret.Unlock()
	if mock.DeletePipelineSecretFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePipelineSecretFunc(ctx, secretID)
}

// DeletePipelineSecretCalls gets all the calls that were made to DeletePipelineSecret.
// Check the length with:
//
//	len(mockedClient.DeletePipelineSecretCalls())
func (mock *ClientMock) DeletePipelineSecretCalls() []struct {
	Ctx      context.Context
	SecretID string
} {
	var calls []struct {
		Ctx      context.Context
		SecretID string
	}
	mock.lockDeletePipelineSecret.RLock()
	calls = mock.calls.DeletePipelineSecret
	mock.lockDeletePipelineSecret.RUnlock()
	return calls
}

// DeletePipelines calls DeletePipelinesFunc.
func (mock *ClientMock) DeletePipelines(ctx context.Context, instanceID string, pipelineIDs ...string) error {
	callInfo := struct {
		Ctx         context.Context
		InstanceID  string
		PipelineIDs []string
	}{
		Ctx:         ctx,
		InstanceID:  instanceID,
		PipelineIDs: pipelineIDs,
	}
	mock.lockDeletePipelines.Lock()
	mock.calls.DeletePipelines = append(mock.calls.DeletePipelines, callInfo)
	mock.lockDeletePipelines.Unlock()
	if mock.DeletePipelinesFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePipelinesFunc(ctx, instanceID, pipelineIDs...)
}

// DeletePipelinesCalls gets all the calls that were made to DeletePipelines.
// Check the length with:
//
//	len(mockedClient.DeletePipelinesCalls())
func (mock *ClientMock) DeletePipelinesCalls() []struct {
	Ctx         context.Context
	InstanceID  string
	PipelineIDs []string
} {
	var calls []struct {
		Ctx         context.Context
		InstanceID  string
		PipelineIDs []string
	}
	mock.lockDeletePipelines.RLock()
	calls = mock.calls.DeletePipelines
	mock.lockDeletePipelines.RUnlock()
	return calls
}

// DeleteProcessingRule calls DeleteProcessingRuleFunc.
func (mock *ClientMock) DeleteProcessingRule(ctx context.Context, processingRuleID string) error {
	callInfo := struct {
		Ctx              context.Context
		ProcessingRuleID string
	}{
		Ctx:              ctx,
		ProcessingRuleID: processingRuleID,
	}
	mock.lockDeleteProcessingRule.Lock()
	mock.calls.DeleteProcessingRule = append(mock.calls.DeleteProcessingRule, callInfo)
	mock.lockDeleteProcessingRule.Unlock()
	if mock.DeleteProcessingRuleFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteProcessingRuleFunc(ctx, processingRuleID)
}

// DeleteProcessingRuleCalls gets all the calls that were made to DeleteProcessingRule.
// Check the length with:
//
//	len(mockedClient.DeleteProcessingRuleCalls())
func (mock *ClientMock) DeleteProcessingRuleCalls() []struct {
	Ctx              context.Context
	ProcessingRuleID string
} {
	var calls []struct {
		Ctx              context.Context
		ProcessingRuleID string
	}
	mock.lockDeleteProcessingRule.RLock()
	calls = mock.calls.DeleteProcessingRule
	mock.lockDeleteProcessingRule.RUnlock()
	return calls
}

// DeleteResourceProfile calls DeleteResourceProfileFunc.
func (mock *ClientMock) DeleteResourceProfile(ctx context.Context, resourceProfileID string) error {
	callInfo := struct {
		Ctx               context.Context
		ResourceProfileID string
	}{
		Ctx:               ctx,
		ResourceProfileID: resourceProfileID,
	}
	mock.lockDeleteResourceProfile.Lock()
	mock.calls.DeleteResourceProfile = append(mock.calls.DeleteResourceProfile, callInfo)
	mock.lockDeleteResourceProfile.Unlock()
	if mock.DeleteResourceProfileFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteResourceProfileFunc(ctx, resourceProfileID)
}

// DeleteResourceProfileCalls gets all the calls that were made to DeleteResourceProfile.
// Check the length with:
//
//	len(mockedClient.DeleteResourceProfileCalls())
func (mock *ClientMock) DeleteResourceProfileCalls() []struct {
	Ctx               context.Context
	ResourceProfileID string
} {
	var calls []struct {
		Ctx               context.Context
		ResourceProfileID string
	}
	mock.lockDeleteResourceProfile.RLock()
	calls = mock.calls.DeleteResourceProfile
	mock.lockDeleteResourceProfile.RUnlock()
	return calls
}

// DeleteToken calls DeleteTokenFunc.
func (mock *ClientMock) DeleteToken(ctx context.Context, tokenID string) error {
	callInfo := struct {
		Ctx     context.Context
		TokenID string
	}{
		Ctx:     ctx,
		TokenID: tokenID,
	}
	mock.lockDeleteToken.Lock()
	mock.calls.DeleteToken = append(mock.calls.DeleteToken, callInfo)
	mock.lockDeleteToken.Unlock()
	if mock.DeleteTokenFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteTokenFunc(ctx, tokenID)
}

// DeleteTokenCalls gets all the calls that were made to DeleteToken.
// Check the length with:
//
//	len(mockedClient.DeleteTokenCalls())
func (mock *ClientMock) DeleteTokenCalls() []struct {
	Ctx     context.Context
	TokenID string
} {
	var calls []struct {
		Ctx     context.Context
		TokenID string
	}
	mock.lockDeleteToken.RLock()
	calls = mock.calls.DeleteToken
	mock.lockDeleteToken.RUnlock()
	return calls
}

// Environments calls EnvironmentsFunc.
func (mock *ClientMock) Environments(ctx context.Context, projectID string, params cloud.EnvironmentsParams) (cloud.Environments, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.EnvironmentsParams
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Params:    params,
	}
	mock.lockEnvironments.Lock()
	mock.calls.Environments = append(mock.calls.Environments, callInfo)
	mock.lockEnvironments.Unlock()
	if mock.EnvironmentsFunc == nil {
		var (
			environmentsOut cloud.Environments
			errOut          error
		)
		return environmentsOut, errOut
	}
	return mock.EnvironmentsFunc(ctx, projectID, params)
}

// EnvironmentsCalls gets all the calls that were made to Environments.
// Check the length with:
//
//	len(mockedClient.EnvironmentsCalls())
func (mock *ClientMock) EnvironmentsCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Params    cloud.EnvironmentsParams
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.EnvironmentsParams
	}
	mock.lockEnvironments.RLock()
	calls = mock.calls.Environments
	mock.lockEnvironments.RUnlock()
	return calls
}

// IngestCheck calls IngestCheckFunc.
func (mock *ClientMock) IngestCheck(ctx context.Context, checkID string) (cloud.IngestCheck, error) {
	callInfo := struct {
		Ctx     context.Context
		CheckID string
	}{
		Ctx:     ctx,
		CheckID: checkID,
	}
	mock.lockIngestCheck.Lock()
	mock.calls.IngestCheck = append(mock.calls.IngestCheck, callInfo)
	mock.lockIngestCheck.Unlock()
	if mock.IngestCheckFunc == nil {
		var (
			ingestCheckOut cloud.IngestCheck
			errOut         error
		)
		return ingestCheckOut, errOut
	}
	return mock.IngestCheckFunc(ctx, checkID)
}

// IngestCheckCalls gets all the calls that were made to IngestCheck.
// Check the length with:
//
//	len(mockedClient.IngestCheckCalls())
func (mock *ClientMock) IngestCheckCalls() []struct {
	Ctx     context.Context
	CheckID string
} {
	var calls []struct {
		Ctx     context.Context
		CheckID string
	}
	mock.lockIngestCheck.RLock()
	calls = mock.calls.IngestCheck
	mock.lockIngestCheck.RUnlock()
	return calls
}

// IngestChecks calls IngestChecksFunc.
func (mock *ClientMock) IngestChecks(ctx context.Context, coreInstanceID string, params cloud.IngestChecksParams) (cloud.IngestChecks, error) {
	callInfo := struct {
		Ctx            context.Context
		CoreInstanceID string
		Params         cloud.IngestChecksParams
	}{
		Ctx:            ctx,
		CoreInstanceID: coreInstanceID,
		Params:         params,
	}
	mock.lockIngestChecks.Lock()
	mock.calls.IngestChecks = append(mock.calls.IngestChecks, callInfo)
	mock.lockIngestChecks.Unlock()
	if mock.IngestChecksFunc == nil {
		var (
			ingestChecksOut cloud.IngestChecks
			errOut          error
		)
		return ingestChecksOut, errOut
	}
	return mock.IngestChecksFunc(ctx, coreInstanceID, params)
}

// IngestChecksCalls gets all the calls that were made to IngestChecks.
// Check the length with:
//
//	len(mockedClient.IngestChecksCalls())
func (mock *ClientMock) IngestChecksCalls() []struct {
	Ctx            context.Context
	CoreInstanceID string
	Params         cloud.IngestChecksParams
} {
	var calls []struct {
		Ctx            context.Context
		CoreInstanceID string
		Params         cloud.IngestChecksParams
	}
	mock.lockIngestChecks.RLock()
	calls = mock.calls.IngestChecks
	mock.lockIngestChecks.RUnlock()
	return calls
}

// Members calls MembersFunc.
func (mock *ClientMock) Members(ctx context.Context, projectID string, params cloud.MembersParams) (cloud.Memberships, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.MembersParams
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Params:    params,
	}
	mock.lockMembers.Lock()
	mock.calls.Members = append(mock.calls.Members, callInfo)
	mock.lockMembers.Unlock()
	if mock.MembersFunc == nil {
		var (
			membershipsOut cloud.Memberships
			errOut         error
		)
		return membershipsOut, errOut
	}
	return mock.MembersFunc(ctx, projectID, params)
}

// MembersCalls gets all the calls that were made to Members.
// Check the length with:
//
//	len(mockedClient.MembersCalls())
func (mock *ClientMock) MembersCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Params    cloud.MembersParams
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.MembersParams
	}
	mock.lockMembers.RLock()
	calls = mock.calls.Members
	mock.lockMembers.RUnlock()
	return calls
}

// Pipeline calls PipelineFunc.
func (mock *ClientMock) Pipeline(ctx context.Context, pipelineID string, params cloud.PipelineParams) (cloud.Pipeline, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipeline.Lock()
	mock.calls.Pipeline = append(mock.calls.Pipeline, callInfo)
	mock.lockPipeline.Unlock()
	if mock.PipelineFunc == nil {
		var (
			pipelineOut cloud.Pipeline
			errOut      error
		)
		return pipelineOut, errOut
	}
	return mock.PipelineFunc(ctx, pipelineID, params)
}

// PipelineCalls gets all the calls that were made to Pipeline.
// Check the length with:
//
//	len(mockedClient.PipelineCalls())
func (mock *ClientMock) PipelineCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.PipelineParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineParams
	}
	mock.lockPipeline.RLock()
	calls = mock.calls.Pipeline
	mock.lockPipeline.RUnlock()
	return calls
}

// PipelineCheck calls PipelineCheckFunc.
func (mock *ClientMock) PipelineCheck(ctx context.Context, checkID string) (cloud.PipelineCheck, error) {
	callInfo := struct {
		Ctx     context.Context
		CheckID string
	}{
		Ctx:     ctx,
		CheckID: checkID,
	}
	mock.lockPipelineCheck.Lock()
	mock.calls.PipelineCheck = append(mock.calls.PipelineCheck, callInfo)
	mock.lockPipelineCheck.Unlock()
	if mock.PipelineCheckFunc == nil {
		var (
			pipelineCheckOut cloud.PipelineCheck
			errOut           error
		)
		return pipelineCheckOut, errOut
	}
	return mock.PipelineCheckFunc(ctx, checkID)
}

// PipelineCheckCalls gets all the calls that were made to PipelineCheck.
// Check the length with:
//
//	len(mockedClient.PipelineCheckCalls())
func (mock *ClientMock) PipelineCheckCalls() []struct {
	Ctx     context.Context
	CheckID string
} {
	var calls []struct {
		Ctx     context.Context
		CheckID string
	}
	mock.lockPipelineCheck.RLock()
	calls = mock.calls.PipelineCheck
	mock.lockPipelineCheck.RUnlock()
	return calls
}

// PipelineChecks calls PipelineChecksFunc.
func (mock *ClientMock) PipelineChecks(ctx context.Context, pipelineID string, params cloud.PipelineChecksParams) (cloud.PipelineChecks, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineChecksParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineChecks.Lock()
	mock.calls.PipelineChecks = append(mock.calls.PipelineChecks, callInfo)
	mock.lockPipelineChecks.Unlock()
	if mock.PipelineChecksFunc == nil {
		var (
			pipelineChecksOut cloud.PipelineChecks
			errOut            error
		)
		return pipelineChecksOut, errOut
	}
	return mock.PipelineChecksFunc(ctx, pipelineID, params)
}

// PipelineChecksCalls gets all the calls that were made to PipelineChecks.
// Check the length with:
//
//	len(mockedClient.PipelineChecksCalls())
func (mock *ClientMock) PipelineChecksCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.PipelineChecksParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineChecksParams
	}
	mock.lockPipelineChecks.RLock()
	calls = mock.calls.PipelineChecks
	mock.lockPipelineChecks.RUnlock()
	return calls
}

// PipelineClusterObjects calls PipelineClusterObjectsFunc.
func (mock *ClientMock) PipelineClusterObjects(ctx context.Context, pipelineID string, params cloud.PipelineClusterObjectsParams) (cloud.ClusterObjects, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineClusterObjectsParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineClusterObjects.Lock()
	mock.calls.PipelineClusterObjects = append(mock.calls.PipelineClusterObjects, callInfo)
	mock.lockPipelineClusterObjects.Unlock()
	if mock.PipelineClusterObjectsFunc == nil {
		var (
			clusterObjectsOut cloud.ClusterObjects
			errOut            error
		)
		return clusterObjectsOut, errOut
	}
	return mock.PipelineClusterObjectsFunc(ctx, pipelineID, params)
}

// PipelineClusterObjectsCalls gets all the calls that were made to PipelineClusterObjects.
// Check the length with:
//
//	len(mockedClient.PipelineClusterObjectsCalls())
func (mock *ClientMock) PipelineClusterObjectsCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.PipelineClusterObjectsParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineClusterObjectsParams
	}
	mock.lockPipelineClusterObjects.RLock()
	calls = mock.calls.PipelineClusterObjects
	mock.lockPipelineClusterObjects.RUnlock()
	return calls
}

// PipelineConfigHistory calls PipelineConfigHistoryFunc.
func (mock *ClientMock) PipelineConfigHistory(ctx context.Context, pipelineID string, params cloud.PipelineConfigHistoryParams) (cloud.PipelineConfigHistory, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineConfigHistoryParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineConfigHistory.Lock()
	mock.calls.PipelineConfigHistory = append(mock.calls.PipelineConfigHistory, callInfo)
	mock.lockPipelineConfigHistory.Unlock()
	if mock.PipelineConfigHistoryFunc == nil {
		var (
			pipelineConfigHistoryOut cloud.PipelineConfigHistory
			errOut                   error
		)
		return pipelineConfigHistoryOut, errOut
	}
	return mock.PipelineConfigHistoryFunc(ctx, pipelineID, params)
}

// PipelineConfigHistoryCalls gets all the calls that were made to PipelineConfigHistory.
// Check the length with:
//
//	len(mockedClient.PipelineConfigHistoryCalls())
func (mock *ClientMock) PipelineConfigHistoryCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.PipelineConfigHistoryParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineConfigHistoryParams
	}
	mock.lockPipelineConfigHistory.RLock()
	calls = mock.calls.PipelineConfigHistory
	mock.lockPipelineConfigHistory.RUnlock()
	return calls
}

// PipelineFile calls PipelineFileFunc.
func (mock *ClientMock) PipelineFile(ctx context.Context, fileID string) (cloud.PipelineFile, error) {
	callInfo := struct {
		Ctx    context.Context
		FileID string
	}{
		Ctx:    ctx,
		FileID: fileID,
	}
	mock.lockPipelineFile.Lock()
	mock.calls.PipelineFile = append(mock.calls.PipelineFile, callInfo)
	mock.lockPipelineFile.Unlock()
	if mock.PipelineFileFunc == nil {
		var (
			pipelineFileOut cloud.PipelineFile
			errOut          error
		)
		return pipelineFileOut, errOut
	}
	return mock.PipelineFileFunc(ctx, fileID)
}

// PipelineFileCalls gets all the calls that were made to PipelineFile.
// Check the length with:
//
//	len(mockedClient.PipelineFileCalls())
func (mock *ClientMock) PipelineFileCalls() []struct {
	Ctx    context.Context
	FileID string
} {
	var calls []struct {
		Ctx    context.Context
		FileID string
	}
	mock.lockPipelineFile.RLock()
	calls = mock.calls.PipelineFile
	mock.lockPipelineFile.RUnlock()
	return calls
}

// PipelineFiles calls PipelineFilesFunc.
func (mock *ClientMock) PipelineFiles(ctx context.Context, pipelineID string, params cloud.PipelineFilesParams) (cloud.PipelineFiles, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineFilesParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineFiles.Lock()
	mock.calls.PipelineFiles = append(mock.calls.PipelineFiles, callInfo)
	mock.lockPipelineFiles.Unlock()
	if mock.PipelineFilesFunc == nil {
		var (
			pipelineFilesOut cloud.PipelineFiles
			errOut           error
		)
		return pipelineFilesOut, errOut
	}
	return mock.PipelineFilesFunc(ctx, pipelineID, params)
}

// PipelineFilesCalls gets all the calls that were made to PipelineFiles.
// Check the length with:
//
//	len(mockedClient.PipelineFilesCalls())
func (mock *ClientMock) PipelineFilesCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.PipelineFilesParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineFilesParams
	}
	mock.lockPipelineFiles.RLock()
	calls = mock.calls.PipelineFiles
	mock.lockPipelineFiles.RUnlock()
	return calls
}

// PipelineMetrics calls PipelineMetricsFunc.
func (mock *ClientMock) PipelineMetrics(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.MetricsSummary, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.MetricsParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineMetrics.Lock()
	mock.calls.PipelineMetrics = append(mock.calls.PipelineMetrics, callInfo)
	mock.lockPipelineMetrics.Unlock()
	if mock.PipelineMetricsFunc == nil {
		var (
			metricsSummaryOut cloud.MetricsSummary
			errOut            error
		)
		return metricsSummaryOut, errOut
	}
	return mock.PipelineMetricsFunc(ctx, pipelineID, params)
}

// PipelineMetricsCalls gets all the calls that were made to PipelineMetrics.
// Check the length with:
//
//	len(mockedClient.PipelineMetricsCalls())
func (mock *ClientMock) PipelineMetricsCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.MetricsParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.MetricsParams
	}
	mock.lockPipelineMetrics.RLock()
	calls = mock.calls.PipelineMetrics
	mock.lockPipelineMetrics.RUnlock()
	return calls
}

// PipelineMetricsByPlugin calls PipelineMetricsByPluginFunc.
func (mock *ClientMock) PipelineMetricsByPlugin(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.MetricsSummaryPlugin, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.MetricsParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineMetricsByPlugin.Lock()
	mock.calls.PipelineMetricsByPlugin = append(mock.calls.PipelineMetricsByPlugin, callInfo)
	mock.lockPipelineMetricsByPlugin.Unlock()
	if mock.PipelineMetricsByPluginFunc == nil {
		var (
			metricsSummaryPluginOut cloud.MetricsSummaryPlugin
			errOut                  error
		)
		return metricsSummaryPluginOut, errOut
	}
	return mock.PipelineMetricsByPluginFunc(ctx, pipelineID, params)
}

// PipelineMetricsByPluginCalls gets all the calls that were made to PipelineMetricsByPlugin.
// Check the length with:
//
//	len(mockedClient.PipelineMetricsByPluginCalls())
func (mock *ClientMock) PipelineMetricsByPluginCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.MetricsParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.MetricsParams
	}
	mock.lockPipelineMetricsByPlugin.RLock()
	calls = mock.calls.PipelineMetricsByPlugin
	mock.lockPipelineMetricsByPlugin.RUnlock()
	return calls
}

// PipelineMetricsOverTimeByPlugin calls PipelineMetricsOverTimeByPluginFunc.
func (mock *ClientMock) PipelineMetricsOverTimeByPlugin(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.MetricsOverTimeByPlugin, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.MetricsParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineMetricsOverTimeByPlugin.Lock()
	mock.calls.PipelineMetricsOverTimeByPlugin = append(mock.calls.PipelineMetricsOverTimeByPlugin, callInfo)
	mock.lockPipelineMetricsOverTimeByPlugin.Unlock()
	if mock.PipelineMetricsOverTimeByPluginFunc == nil {
		var (
			metricsOverTimeByPluginOut cloud.MetricsOverTimeByPlugin
			errOut                     error
		)
		return metricsOverTimeByPluginOut, errOut
	}
	return mock.PipelineMetricsOverTimeByPluginFunc(ctx, pipelineID, params)
}

// PipelineMetricsOverTimeByPluginCalls gets all the calls that were made to PipelineMetricsOverTimeByPlugin.
// Check the length with:
//
//	len(mockedClient.PipelineMetricsOverTimeByPluginCalls())
func (mock *ClientMock) PipelineMetricsOverTimeByPluginCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.MetricsParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.MetricsParams
	}
	mock.lockPipelineMetricsOverTimeByPlugin.RLock()
	calls = mock.calls.PipelineMetricsOverTimeByPlugin
	mock.lockPipelineMetricsOverTimeByPlugin.RUnlock()
	return calls
}

// PipelineMetricsV1 calls PipelineMetricsV1Func.
func (mock *ClientMock) PipelineMetricsV1(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.AgentMetrics, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.MetricsParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineMetricsV1.Lock()
	mock.calls.PipelineMetricsV1 = append(mock.calls.PipelineMetricsV1, callInfo)
	mock.lockPipelineMetricsV1.Unlock()
	if mock.PipelineMetricsV1Func == nil {
		var (
			agentMetricsOut cloud.AgentMetrics
			errOut          error
		)
		return agentMetricsOut, errOut
	}
	return mock.PipelineMetricsV1Func(ctx, pipelineID, params)
}

// PipelineMetricsV1Calls gets all the calls that were made to PipelineMetricsV1.
// Check the length with:
//
//	len(mockedClient.PipelineMetricsV1Calls())
func (mock *ClientMock) PipelineMetricsV1Calls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.MetricsParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.MetricsParams
	}
	mock.lockPipelineMetricsV1.RLock()
	calls = mock.calls.PipelineMetricsV1
	mock.lockPipelineMetricsV1.RUnlock()
	return calls
}

// PipelineOverTimeMetrics calls PipelineOverTimeMetricsFunc.
func (mock *ClientMock) PipelineOverTimeMetrics(ctx context.Context, pipelineID string, params cloud.MetricsParams) (cloud.MetricsOverTime, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.MetricsParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineOverTimeMetrics.Lock()
	mock.calls.PipelineOverTimeMetrics = append(mock.calls.PipelineOverTimeMetrics, callInfo)
	mock.lockPipelineOverTimeMetrics.Unlock()
	if mock.PipelineOverTimeMetricsFunc == nil {
		var (
			metricsOverTimeOut cloud.MetricsOverTime
			errOut             error
		)
		return metricsOverTimeOut, errOut
	}
	return mock.PipelineOverTimeMetricsFunc(ctx, pipelineID, params)
}

// PipelineOverTimeMetricsCalls gets all the calls that were made to PipelineOverTimeMetrics.
// Check the length with:
//
//	len(mockedClient.PipelineOverTimeMetricsCalls())
func (mock *ClientMock) PipelineOverTimeMetricsCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.MetricsParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.MetricsParams
	}
	mock.lockPipelineOverTimeMetrics.RLock()
	calls = mock.calls.PipelineOverTimeMetrics
	mock.lockPipelineOverTimeMetrics.RUnlock()
	return calls
}

// PipelinePort calls PipelinePortFunc.
func (mock *ClientMock) PipelinePort(ctx context.Context, portID string) (cloud.PipelinePort, error) {
	callInfo := struct {
		Ctx    context.Context
		PortID string
	}{
		Ctx:    ctx,
		PortID: portID,
	}
	mock.lockPipelinePort.Lock()
	mock.calls.PipelinePort = append(mock.calls.PipelinePort, callInfo)
	mock.lockPipelinePort.Unlock()
	if mock.PipelinePortFunc == nil {
		var (
			pipelinePortOut cloud.PipelinePort
			errOut          error
		)
		return pipelinePortOut, errOut
	}
	return mock.PipelinePortFunc(ctx, portID)
}

// PipelinePortCalls gets all the calls that were made to PipelinePort.
// Check the length with:
//
//	len(mockedClient.PipelinePortCalls())
func (mock *ClientMock) PipelinePortCalls() []struct {
	Ctx    context.Context
	PortID string
} {
	var calls []struct {
		Ctx    context.Context
		PortID string
	}
	mock.lockPipelinePort.RLock()
	calls = mock.calls.PipelinePort
	mock.lockPipelinePort.RUnlock()
	return calls
}

// PipelinePorts calls PipelinePortsFunc.
func (mock *ClientMock) PipelinePorts(ctx context.Context, pipelineID string, params cloud.PipelinePortsParams) (cloud.PipelinePorts, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelinePortsParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelinePorts.Lock()
	mock.calls.PipelinePorts = append(mock.calls.PipelinePorts, callInfo)
	mock.lockPipelinePorts.Unlock()
	if mock.PipelinePortsFunc == nil {
		var (
			pipelinePortsOut cloud.PipelinePorts
			errOut           error
		)
		return pipelinePortsOut, errOut
	}
	return mock.PipelinePortsFunc(ctx, pipelineID, params)
}

// PipelinePortsCalls gets all the calls that were made to PipelinePorts.
// Check the length with:
//
//	len(mockedClient.PipelinePortsCalls())
func (mock *ClientMock) PipelinePortsCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.PipelinePortsParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelinePortsParams
	}
	mock.lockPipelinePorts.RLock()
	calls = mock.calls.PipelinePorts
	mock.lockPipelinePorts.RUnlock()
	return calls
}

// PipelineSecret calls PipelineSecretFunc.
func (mock *ClientMock) PipelineSecret(ctx context.Context, secretID string) (cloud.PipelineSecret, error) {
	callInfo := struct {
		Ctx      context.Context
		SecretID string
	}{
		Ctx:      ctx,
		SecretID: secretID,
	}
	mock.lockPipelineSecret.Lock()
	mock.calls.PipelineSecret = append(mock.calls.PipelineSecret, callInfo)
	mock.lockPipelineSecret.Unlock()
	if mock.PipelineSecretFunc == nil {
		var (
			pipelineSecretOut cloud.PipelineSecret
			errOut            error
		)
		return pipelineSecretOut, errOut
	}
	return mock.PipelineSecretFunc(ctx, secretID)
}

// PipelineSecretCalls gets all the calls that were made to PipelineSecret.
// Check the length with:
//
//	len(mockedClient.PipelineSecretCalls())
func (mock *ClientMock) PipelineSecretCalls() []struct {
	Ctx      context.Context
	SecretID string
} {
	var calls []struct {
		Ctx      context.Context
		SecretID string
	}
	mock.lockPipelineSecret.RLock()
	calls = mock.calls.PipelineSecret
	mock.lockPipelineSecret.RUnlock()
	return calls
}

// PipelineSecrets calls PipelineSecretsFunc.
func (mock *ClientMock) PipelineSecrets(ctx context.Context, pipelineID string, params cloud.PipelineSecretsParams) (cloud.PipelineSecrets, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineSecretsParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineSecrets.Lock()
	mock.calls.PipelineSecrets = append(mock.calls.PipelineSecrets, callInfo)
	mock.lockPipelineSecrets.Unlock()
	if mock.PipelineSecretsFunc == nil {
		var (
			pipelineSecretsOut cloud.PipelineSecrets
			errOut             error
		)
		return pipelineSecretsOut, errOut
	}
	return mock.PipelineSecretsFunc(ctx, pipelineID, params)
}

// PipelineSecretsCalls gets all the calls that were made to PipelineSecrets.
// Check the length with:
//
//	len(mockedClient.PipelineSecretsCalls())
func (mock *ClientMock) PipelineSecretsCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.PipelineSecretsParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineSecretsParams
	}
	mock.lockPipelineSecrets.RLock()
	calls = mock.calls.PipelineSecrets
	mock.lockPipelineSecrets.RUnlock()
	return calls
}

// PipelineStatusHistory calls PipelineStatusHistoryFunc.
func (mock *ClientMock) PipelineStatusHistory(ctx context.Context, pipelineID string, params cloud.PipelineStatusHistoryParams) (cloud.PipelineStatusHistory, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineStatusHistoryParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockPipelineStatusHistory.Lock()
	mock.calls.PipelineStatusHistory = append(mock.calls.PipelineStatusHistory, callInfo)
	mock.lockPipelineStatusHistory.Unlock()
	if mock.PipelineStatusHistoryFunc == nil {
		var (
			pipelineStatusHistoryOut cloud.PipelineStatusHistory
			errOut                   error
		)
		return pipelineStatusHistoryOut, errOut
	}
	return mock.PipelineStatusHistoryFunc(ctx, pipelineID, params)
}

// PipelineStatusHistoryCalls gets all the calls that were made to PipelineStatusHistory.
// Check the length with:
//
//	len(mockedClient.PipelineStatusHistoryCalls())
func (mock *ClientMock) PipelineStatusHistoryCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.PipelineStatusHistoryParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.PipelineStatusHistoryParams
	}
	mock.lockPipelineStatusHistory.RLock()
	calls = mock.calls.PipelineStatusHistory
	mock.lockPipelineStatusHistory.RUnlock()
	return calls
}

// Pipelines calls PipelinesFunc.
func (mock *ClientMock) Pipelines(ctx context.Context, instanceID string, params cloud.PipelinesParams) (cloud.Pipelines, error) {
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		Params     cloud.PipelinesParams
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		Params:     params,
	}
	mock.lockPipelines.Lock()
	mock.calls.Pipelines = append(mock.calls.Pipelines, callInfo)
	mock.lockPipelines.Unlock()
	if mock.PipelinesFunc == nil {
		var (
			pipelinesOut cloud.Pipelines
			errOut       error
		)
		return pipelinesOut, errOut
	}
	return mock.PipelinesFunc(ctx, instanceID, params)
}

// PipelinesCalls gets all the calls that were made to Pipelines.
// Check the length with:
//
//	len(mockedClient.PipelinesCalls())
func (mock *ClientMock) PipelinesCalls() []struct {
	Ctx        context.Context
	InstanceID string
	Params     cloud.PipelinesParams
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		Params     cloud.PipelinesParams
	}
	mock.lockPipelines.RLock()
	calls = mock.calls.Pipelines
	mock.lockPipelines.RUnlock()
	return calls
}

// PipelinesMetricsV1 calls PipelinesMetricsV1Func.
func (mock *ClientMock) PipelinesMetricsV1(ctx context.Context, instanceID string, params cloud.PipelinesMetricsParams) (cloud.PipelinesMetrics, error) {
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		Params     cloud.PipelinesMetricsParams
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		Params:     params,
	}
	mock.lockPipelinesMetricsV1.Lock()
	mock.calls.PipelinesMetricsV1 = append(mock.calls.PipelinesMetricsV1, callInfo)
	mock.lockPipelinesMetricsV1.Unlock()
	if mock.PipelinesMetricsV1Func == nil {
		var (
			pipelinesMetricsOut cloud.PipelinesMetrics
			errOut              error
		)
		return pipelinesMetricsOut, errOut
	}
	return mock.PipelinesMetricsV1Func(ctx, instanceID, params)
}

// PipelinesMetricsV1Calls gets all the calls that were made to PipelinesMetricsV1.
// Check the length with:
//
//	len(mockedClient.PipelinesMetricsV1Calls())
func (mock *ClientMock) PipelinesMetricsV1Calls() []struct {
	Ctx        context.Context
	InstanceID string
	Params     cloud.PipelinesMetricsParams
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		Params     cloud.PipelinesMetricsParams
	}
	mock.lockPipelinesMetricsV1.RLock()
	calls = mock.calls.PipelinesMetricsV1
	mock.lockPipelinesMetricsV1.RUnlock()
	return calls
}

// PreviewProcessingRule calls PreviewProcessingRuleFunc.
func (mock *ClientMock) PreviewProcessingRule(ctx context.Context, in cloud.PreviewProcessingRule) ([]cloud.FluentBitLog, error) {
	callInfo := struct {
		Ctx context.Context
		In  cloud.PreviewProcessingRule
	}{
		Ctx: ctx,
		In:  in,
	}
	mock.lockPreviewProcessingRule.Lock()
	mock.calls.PreviewProcessingRule = append(mock.calls.PreviewProcessingRule, callInfo)
	mock.lockPreviewProcessingRule.Unlock()
	if mock.PreviewProcessingRuleFunc == nil {
		var (
			fluentBitLogsOut []cloud.FluentBitLog
			errOut           error
		)
		return fluentBitLogsOut, errOut
	}
	return mock.PreviewProcessingRuleFunc(ctx, in)
}

// PreviewProcessingRuleCalls gets all the calls that were made to PreviewProcessingRule.
// Check the length with:
//
//	len(mockedClient.PreviewProcessingRuleCalls())
func (mock *ClientMock) PreviewProcessingRuleCalls() []struct {
	Ctx context.Context
	In  cloud.PreviewProcessingRule
} {
	var calls []struct {
		Ctx context.Context
		In  cloud.PreviewProcessingRule
	}
	mock.lockPreviewProcessingRule.RLock()
	calls = mock.calls.PreviewProcessingRule
	mock.lockPreviewProcessingRule.RUnlock()
	return calls
}

// ProcessingRule calls ProcessingRuleFunc.
func (mock *ClientMock) ProcessingRule(ctx context.Context, processingRuleID string) (cloud.ProcessingRule, error) {
	callInfo := struct {
		Ctx              context.Context
		ProcessingRuleID string
	}{
		Ctx:              ctx,
		ProcessingRuleID: processingRuleID,
	}
	mock.lockProcessingRule.Lock()
	mock.calls.ProcessingRule = append(mock.calls.ProcessingRule, callInfo)
	mock.lockProcessingRule.Unlock()
	if mock.ProcessingRuleFunc == nil {
		var (
			processingRuleOut cloud.ProcessingRule
			errOut            error
		)
		return processingRuleOut, errOut
	}
	return mock.ProcessingRuleFunc(ctx, processingRuleID)
}

// ProcessingRuleCalls gets all the calls that were made to ProcessingRule.
// Check the length with:
//
//	len(mockedClient.ProcessingRuleCalls())
func (mock *ClientMock) ProcessingRuleCalls() []struct {
	Ctx              context.Context
	ProcessingRuleID string
} {
	var calls []struct {
		Ctx              context.Context
		ProcessingRuleID string
	}
	mock.lockProcessingRule.RLock()
	calls = mock.calls.ProcessingRule
	mock.lockProcessingRule.RUnlock()
	return calls
}

// ProcessingRules calls ProcessingRulesFunc.
func (mock *ClientMock) ProcessingRules(ctx context.Context, params cloud.ProcessingRulesParams) (cloud.ProcessingRules, error) {
	callInfo := struct {
		Ctx    context.Context
		Params cloud.ProcessingRulesParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockProcessingRules.Lock()
	mock.calls.ProcessingRules = append(mock.calls.ProcessingRules, callInfo)
	mock.lockProcessingRules.Unlock()
	if mock.ProcessingRulesFunc == nil {
		var (
			processingRulesOut cloud.ProcessingRules
			errOut             error
		)
		return processingRulesOut, errOut
	}
	return mock.ProcessingRulesFunc(ctx, params)
}

// ProcessingRulesCalls gets all the calls that were made to ProcessingRules.
// Check the length with:
//
//	len(mockedClient.ProcessingRulesCalls())
func (mock *ClientMock) ProcessingRulesCalls() []struct {
	Ctx    context.Context
	Params cloud.ProcessingRulesParams
} {
	var calls []struct {
		Ctx    context.Context
		Params cloud.ProcessingRulesParams
	}
	mock.lockProcessingRules.RLock()
	calls = mock.calls.ProcessingRules
	mock.lockProcessingRules.RUnlock()
	return calls
}

// Project calls ProjectFunc.
func (mock *ClientMock) Project(ctx context.Context, projectID string) (cloud.Project, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
	}{
		Ctx:       ctx,
		ProjectID: projectID,
	}
	mock.lockProject.Lock()
	mock.calls.Project = append(mock.calls.Project, callInfo)
	mock.lockProject.Unlock()
	if mock.ProjectFunc == nil {
		var (
			projectOut cloud.Project
			errOut     error
		)
		return projectOut, errOut
	}
	return mock.ProjectFunc(ctx, projectID)
}

// ProjectCalls gets all the calls that were made to Project.
// Check the length with:
//
//	len(mockedClient.ProjectCalls())
func (mock *ClientMock) ProjectCalls() []struct {
	Ctx       context.Context
	ProjectID string
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
	}
	mock.lockProject.RLock()
	calls = mock.calls.Project
	mock.lockProject.RUnlock()
	return calls
}

// ProjectMetricsV1 calls ProjectMetricsV1Func.
func (mock *ClientMock) ProjectMetricsV1(ctx context.Context, projectID string, params cloud.MetricsParams) (cloud.ProjectMetrics, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.MetricsParams
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Params:    params,
	}
	mock.lockProjectMetricsV1.Lock()
	mock.calls.ProjectMetricsV1 = append(mock.calls.ProjectMetricsV1, callInfo)
	mock.lockProjectMetricsV1.Unlock()
	if mock.ProjectMetricsV1Func == nil {
		var (
			projectMetricsOut cloud.ProjectMetrics
			errOut            error
		)
		return projectMetricsOut, errOut
	}
	return mock.ProjectMetricsV1Func(ctx, projectID, params)
}

// ProjectMetricsV1Calls gets all the calls that were made to ProjectMetricsV1.
// Check the length with:
//
//	len(mockedClient.ProjectMetricsV1Calls())
func (mock *ClientMock) ProjectMetricsV1Calls() []struct {
	Ctx       context.Context
	ProjectID string
	Params    cloud.MetricsParams
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.MetricsParams
	}
	mock.lockProjectMetricsV1.RLock()
	calls = mock.calls.ProjectMetricsV1
	mock.lockProjectMetricsV1.RUnlock()
	return calls
}

// ProjectPipelines calls ProjectPipelinesFunc.
func (mock *ClientMock) ProjectPipelines(ctx context.Context, projectID string, params cloud.PipelinesParams) (cloud.Pipelines, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.PipelinesParams
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Params:    params,
	}
	mock.lockProjectPipelines.Lock()
	mock.calls.ProjectPipelines = append(mock.calls.ProjectPipelines, callInfo)
	mock.lockProjectPipelines.Unlock()
	if mock.ProjectPipelinesFunc == nil {
		var (
			pipelinesOut cloud.Pipelines
			errOut       error
		)
		return pipelinesOut, errOut
	}
	return mock.ProjectPipelinesFunc(ctx, projectID, params)
}

// ProjectPipelinesCalls gets all the calls that were made to ProjectPipelines.
// Check the length with:
//
//	len(mockedClient.ProjectPipelinesCalls())
func (mock *ClientMock) ProjectPipelinesCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Params    cloud.PipelinesParams
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.PipelinesParams
	}
	mock.lockProjectPipelines.RLock()
	calls = mock.calls.ProjectPipelines
	mock.lockProjectPipelines.RUnlock()
	return calls
}

// Projects calls ProjectsFunc.
func (mock *ClientMock) Projects(ctx context.Context, params cloud.ProjectsParams) (cloud.Projects, error) {
	callInfo := struct {
		Ctx    context.Context
		Params cloud.ProjectsParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockProjects.Lock()
	mock.calls.Projects = append(mock.calls.Projects, callInfo)
	mock.lockProjects.Unlock()
	if mock.ProjectsFunc == nil {
		var (
			projectsOut cloud.Projects
			errOut      error
		)
		return projectsOut, errOut
	}
	return mock.ProjectsFunc(ctx, params)
}

// ProjectsCalls gets all the calls that were made to Projects.
// Check the length with:
//
//	len(mockedClient.ProjectsCalls())
func (mock *ClientMock) ProjectsCalls() []struct {
	Ctx    context.Context
	Params cloud.ProjectsParams
} {
	var calls []struct {
		Ctx    context.Context
		Params cloud.ProjectsParams
	}
	mock.lockProjects.RLock()
	calls = mock.calls.Projects
	mock.lockProjects.RUnlock()
	return calls
}

// RegisterAgent calls RegisterAgentFunc.
func (mock *ClientMock) RegisterAgent(ctx context.Context, payload cloud.RegisterAgent) (cloud.RegisteredAgent, error) {
	callInfo := struct {
		Ctx     context.Context
		Payload cloud.RegisterAgent
	}{
		Ctx:     ctx,
		Payload: payload,
	}
	mock.lockRegisterAgent.Lock()
	mock.calls.RegisterAgent = append(mock.calls.RegisterAgent, callInfo)
	mock.lockRegisterAgent.Unlock()
	if mock.RegisterAgentFunc == nil {
		var (
			registeredAgentOut cloud.RegisteredAgent
			errOut             error
		)
		return registeredAgentOut, errOut
	}
	return mock.RegisterAgentFunc(ctx, payload)
}

// RegisterAgentCalls gets all the calls that were made to RegisterAgent.
// Check the length with:
//
//	len(mockedClient.RegisterAgentCalls())
func (mock *ClientMock) RegisterAgentCalls() []struct {
	Ctx     context.Context
	Payload cloud.RegisterAgent
} {
	var calls []struct {
		Ctx     context.Context
		Payload cloud.RegisterAgent
	}
	mock.lockRegisterAgent.RLock()
	calls = mock.calls.RegisterAgent
	mock.lockRegisterAgent.RUnlock()
	return calls
}

// ResourceProfile calls ResourceProfileFunc.
func (mock *ClientMock) ResourceProfile(ctx context.Context, resourceProfileID string) (cloud.ResourceProfile, error) {
	callInfo := struct {
		Ctx               context.Context
		ResourceProfileID string
	}{
		Ctx:               ctx,
		ResourceProfileID: resourceProfileID,
	}
	mock.lockResourceProfile.Lock()
	mock.calls.ResourceProfile = append(mock.calls.ResourceProfile, callInfo)
	mock.lockResourceProfile.Unlock()
	if mock.ResourceProfileFunc == nil {
		var (
			resourceProfileOut cloud.ResourceProfile
			errOut             error
		)
		return resourceProfileOut, errOut
	}
	return mock.ResourceProfileFunc(ctx, resourceProfileID)
}

// ResourceProfileCalls gets all the calls that were made to ResourceProfile.
// Check the length with:
//
//	len(mockedClient.ResourceProfileCalls())
func (mock *ClientMock) ResourceProfileCalls() []struct {
	Ctx               context.Context
	ResourceProfileID string
} {
	var calls []struct {
		Ctx               context.Context
		ResourceProfileID string
	}
	mock.lockResourceProfile.RLock()
	calls = mock.calls.ResourceProfile
	mock.lockResourceProfile.RUnlock()
	return calls
}

// ResourceProfiles calls ResourceProfilesFunc.
func (mock *ClientMock) ResourceProfiles(ctx context.Context, instanceID string, params cloud.ResourceProfilesParams) (cloud.ResourceProfiles, error) {
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		Params     cloud.ResourceProfilesParams
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		Params:     params,
	}
	mock.lockResourceProfiles.Lock()
	mock.calls.ResourceProfiles = append(mock.calls.ResourceProfiles, callInfo)
	mock.lockResourceProfiles.Unlock()
	if mock.ResourceProfilesFunc == nil {
		var (
			resourceProfilesOut cloud.ResourceProfiles
			errOut              error
		)
		return resourceProfilesOut, errOut
	}
	return mock.ResourceProfilesFunc(ctx, instanceID, params)
}

// ResourceProfilesCalls gets all the calls that were made to ResourceProfiles.
// Check the length with:
//
//	len(mockedClient.ResourceProfilesCalls())
func (mock *ClientMock) ResourceProfilesCalls() []struct {
	Ctx        context.Context
	InstanceID string
	Params     cloud.ResourceProfilesParams
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		Params     cloud.ResourceProfilesParams
	}
	mock.lockResourceProfiles.RLock()
	calls = mock.calls.ResourceProfiles
	mock.lockResourceProfiles.RUnlock()
	return calls
}

// SendVerificationEmail calls SendVerificationEmailFunc.
func (mock *ClientMock) SendVerificationEmail(ctx context.Context) error {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockSendVerificationEmail.Lock()
	mock.calls.SendVerificationEmail = append(mock.calls.SendVerificationEmail, callInfo)
	mock.lockSendVerificationEmail.Unlock()
	if mock.SendVerificationEmailFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.SendVerificationEmailFunc(ctx)
}

// SendVerificationEmailCalls gets all the calls that were made to SendVerificationEmail.
// Check the length with:
//
//	len(mockedClient.SendVerificationEmailCalls())
func (mock *ClientMock) SendVerificationEmailCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockSendVerificationEmail.RLock()
	calls = mock.calls.SendVerificationEmail
	mock.lockSendVerificationEmail.RUnlock()
	return calls
}

// SetAgentToken calls SetAgentTokenFunc.
func (mock *ClientMock) SetAgentToken(s string) {
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockSetAgentToken.Lock()
	mock.calls.SetAgentToken = append(mock.calls.SetAgentToken, callInfo)
	mock.lockSetAgentToken.Unlock()
	if mock.SetAgentTokenFunc == nil {
		return
	}
	mock.SetAgentTokenFunc(s)
}

// SetAgentTokenCalls gets all the calls that were made to SetAgentToken.
// Check the length with:
//
//	len(mockedClient.SetAgentTokenCalls())
func (mock *ClientMock) SetAgentTokenCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockSetAgentToken.RLock()
	calls = mock.calls.SetAgentToken
	mock.lockSetAgentToken.RUnlock()
	return calls
}

// SetCoreInstanceToken calls SetCoreInstanceTokenFunc.
func (mock *ClientMock) SetCoreInstanceToken(s string) {
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockSetCoreInstanceToken.Lock()
	mock.calls.SetCoreInstanceToken = append(mock.calls.SetCoreInstanceToken, callInfo)
	mock.lockSetCoreInstanceToken.Unlock()
	if mock.SetCoreInstanceTokenFunc == nil {
		return
	}
	mock.SetCoreInstanceTokenFunc(s)
}

// SetCoreInstanceTokenCalls gets all the calls that were made to SetCoreInstanceToken.
// Check the length with:
//
//	len(mockedClient.SetCoreInstanceTokenCalls())
func (mock *ClientMock) SetCoreInstanceTokenCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockSetCoreInstanceToken.RLock()
	calls = mock.calls.SetCoreInstanceToken
	mock.lockSetCoreInstanceToken.RUnlock()
	return calls
}

// SetProjectToken calls SetProjectTokenFunc.
func (mock *ClientMock) SetProjectToken(s string) {
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockSetProjectToken.Lock()
	mock.calls.SetProjectToken = append(mock.calls.SetProjectToken, callInfo)
	mock.lockSetProjectToken.Unlock()
	if mock.SetProjectTokenFunc == nil {
		return
	}
	mock.SetProjectTokenFunc(s)
}

// SetProjectTokenCalls gets all the calls that were made to SetProjectToken.
// Check the length with:
//
//	len(mockedClient.SetProjectTokenCalls())
func (mock *ClientMock) SetProjectTokenCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockSetProjectToken.RLock()
	calls = mock.calls.SetProjectToken
	mock.lockSetProjectToken.RUnlock()
	return calls
}

// SetUserAgent calls SetUserAgentFunc.
func (mock *ClientMock) SetUserAgent(s string) {
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockSetUserAgent.Lock()
	mock.calls.SetUserAgent = append(mock.calls.SetUserAgent, callInfo)
	mock.lockSetUserAgent.Unlock()
	if mock.SetUserAgentFunc == nil {
		return
	}
	mock.SetUserAgentFunc(s)
}

// SetUserAgentCalls gets all the calls that were made to SetUserAgent.
// Check the length with:
//
//	len(mockedClient.SetUserAgentCalls())
func (mock *ClientMock) SetUserAgentCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockSetUserAgent.RLock()
	calls = mock.calls.SetUserAgent
	mock.lockSetUserAgent.RUnlock()
	return calls
}

// TerminateActiveTraceSession calls TerminateActiveTraceSessionFunc.
func (mock *ClientMock) TerminateActiveTraceSession(ctx context.Context, pipelineID string) (cloud.TerminatedTraceSession, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
	}
	mock.lockTerminateActiveTraceSession.Lock()
	mock.calls.TerminateActiveTraceSession = append(mock.calls.TerminateActiveTraceSession, callInfo)
	mock.lockTerminateActiveTraceSession.Unlock()
	if mock.TerminateActiveTraceSessionFunc == nil {
		var (
			terminatedTraceSessionOut cloud.TerminatedTraceSession
			errOut                    error
		)
		return terminatedTraceSessionOut, errOut
	}
	return mock.TerminateActiveTraceSessionFunc(ctx, pipelineID)
}

// TerminateActiveTraceSessionCalls gets all the calls that were made to TerminateActiveTraceSession.
// Check the length with:
//
//	len(mockedClient.TerminateActiveTraceSessionCalls())
func (mock *ClientMock) TerminateActiveTraceSessionCalls() []struct {
	Ctx        context.Context
	PipelineID string
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
	}
	mock.lockTerminateActiveTraceSession.RLock()
	calls = mock.calls.TerminateActiveTraceSession
	mock.lockTerminateActiveTraceSession.RUnlock()
	return calls
}

// Token calls TokenFunc.
func (mock *ClientMock) Token(ctx context.Context, tokenID string) (cloud.Token, error) {
	callInfo := struct {
		Ctx     context.Context
		TokenID string
	}{
		Ctx:     ctx,
		TokenID: tokenID,
	}
	mock.lockToken.Lock()
	mock.calls.Token = append(mock.calls.Token, callInfo)
	mock.lockToken.Unlock()
	if mock.TokenFunc == nil {
		var (
			tokenOut cloud.Token
			errOut   error
		)
		return tokenOut, errOut
	}
	return mock.TokenFunc(ctx, tokenID)
}

// TokenCalls gets all the calls that were made to Token.
// Check the length with:
//
//	len(mockedClient.TokenCalls())
func (mock *ClientMock) TokenCalls() []struct {
	Ctx     context.Context
	TokenID string
} {
	var calls []struct {
		Ctx     context.Context
		TokenID string
	}
	mock.lockToken.RLock()
	calls = mock.calls.Token
	mock.lockToken.RUnlock()
	return calls
}

// Tokens calls TokensFunc.
func (mock *ClientMock) Tokens(ctx context.Context, projectID string, params cloud.TokensParams) (cloud.Tokens, error) {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.TokensParams
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Params:    params,
	}
	mock.lockTokens.Lock()
	mock.calls.Tokens = append(mock.calls.Tokens, callInfo)
	mock.lockTokens.Unlock()
	if mock.TokensFunc == nil {
		var (
			tokensOut cloud.Tokens
			errOut    error
		)
		return tokensOut, errOut
	}
	return mock.TokensFunc(ctx, projectID, params)
}

// TokensCalls gets all the calls that were made to Tokens.
// Check the length with:
//
//	len(mockedClient.TokensCalls())
func (mock *ClientMock) TokensCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Params    cloud.TokensParams
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Params    cloud.TokensParams
	}
	mock.lockTokens.RLock()
	calls = mock.calls.Tokens
	mock.lockTokens.RUnlock()
	return calls
}

// TraceRecords calls TraceRecordsFunc.
func (mock *ClientMock) TraceRecords(ctx context.Context, sessionID string, params cloud.TraceRecordsParams) (cloud.TraceRecords, error) {
	callInfo := struct {
		Ctx       context.Context
		SessionID string
		Params    cloud.TraceRecordsParams
	}{
		Ctx:       ctx,
		SessionID: sessionID,
		Params:    params,
	}
	mock.lockTraceRecords.Lock()
	mock.calls.TraceRecords = append(mock.calls.TraceRecords, callInfo)
	mock.lockTraceRecords.Unlock()
	if mock.TraceRecordsFunc == nil {
		var (
			traceRecordsOut cloud.TraceRecords
			errOut          error
		)
		return traceRecordsOut, errOut
	}
	return mock.TraceRecordsFunc(ctx, sessionID, params)
}

// TraceRecordsCalls gets all the calls that were made to TraceRecords.
// Check the length with:
//
//	len(mockedClient.TraceRecordsCalls())
func (mock *ClientMock) TraceRecordsCalls() []struct {
	Ctx       context.Context
	SessionID string
	Params    cloud.TraceRecordsParams
} {
	var calls []struct {
		Ctx       context.Context
		SessionID string
		Params    cloud.TraceRecordsParams
	}
	mock.lockTraceRecords.RLock()
	calls = mock.calls.TraceRecords
	mock.lockTraceRecords.RUnlock()
	return calls
}

// TraceSession calls TraceSessionFunc.
func (mock *ClientMock) TraceSession(ctx context.Context, sessionID string) (cloud.TraceSession, error) {
	callInfo := struct {
		Ctx       context.Context
		SessionID string
	}{
		Ctx:       ctx,
		SessionID: sessionID,
	}
	mock.lockTraceSession.Lock()
	mock.calls.TraceSession = append(mock.calls.TraceSession, callInfo)
	mock.lockTraceSession.Unlock()
	if mock.TraceSessionFunc == nil {
		var (
			traceSessionOut cloud.TraceSession
			errOut          error
		)
		return traceSessionOut, errOut
	}
	return mock.TraceSessionFunc(ctx, sessionID)
}

// TraceSessionCalls gets all the calls that were made to TraceSession.
// Check the length with:
//
//	len(mockedClient.TraceSessionCalls())
func (mock *ClientMock) TraceSessionCalls() []struct {
	Ctx       context.Context
	SessionID string
} {
	var calls []struct {
		Ctx       context.Context
		SessionID string
	}
	mock.lockTraceSession.RLock()
	calls = mock.calls.TraceSession
	mock.lockTraceSession.RUnlock()
	return calls
}

// TraceSessions calls TraceSessionsFunc.
func (mock *ClientMock) TraceSessions(ctx context.Context, pipelineID string, params cloud.TraceSessionsParams) (cloud.TraceSessions, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.TraceSessionsParams
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Params:     params,
	}
	mock.lockTraceSessions.Lock()
	mock.calls.TraceSessions = append(mock.calls.TraceSessions, callInfo)
	mock.lockTraceSessions.Unlock()
	if mock.TraceSessionsFunc == nil {
		var (
			traceSessionsOut cloud.TraceSessions
			errOut           error
		)
		return traceSessionsOut, errOut
	}
	return mock.TraceSessionsFunc(ctx, pipelineID, params)
}

// TraceSessionsCalls gets all the calls that were made to TraceSessions.
// Check the length with:
//
//	len(mockedClient.TraceSessionsCalls())
func (mock *ClientMock) TraceSessionsCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Params     cloud.TraceSessionsParams
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Params     cloud.TraceSessionsParams
	}
	mock.lockTraceSessions.RLock()
	calls = mock.calls.TraceSessions
	mock.lockTraceSessions.RUnlock()
	return calls
}

// UpdateAgent calls UpdateAgentFunc.
func (mock *ClientMock) UpdateAgent(ctx context.Context, agentID string, payload cloud.UpdateAgent) error {
	callInfo := struct {
		Ctx     context.Context
		AgentID string
		Payload cloud.UpdateAgent
	}{
		Ctx:     ctx,
		AgentID: agentID,
		Payload: payload,
	}
	mock.lockUpdateAgent.Lock()
	mock.calls.UpdateAgent = append(mock.calls.UpdateAgent, callInfo)
	mock.lockUpdateAgent.Unlock()
	if mock.UpdateAgentFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateAgentFunc(ctx, agentID, payload)
}

// UpdateAgentCalls gets all the calls that were made to UpdateAgent.
// Check the length with:
//
//	len(mockedClient.UpdateAgentCalls())
func (mock *ClientMock) UpdateAgentCalls() []struct {
	Ctx     context.Context
	AgentID string
	Payload cloud.UpdateAgent
} {
	var calls []struct {
		Ctx     context.Context
		AgentID string
		Payload cloud.UpdateAgent
	}
	mock.lockUpdateAgent.RLock()
	calls = mock.calls.UpdateAgent
	mock.lockUpdateAgent.RUnlock()
	return calls
}

// UpdateClusterObject calls UpdateClusterObjectFunc.
func (mock *ClientMock) UpdateClusterObject(ctx context.Context, checkID string, opts cloud.UpdateClusterObject) error {
	callInfo := struct {
		Ctx     context.Context
		CheckID string
		Opts    cloud.UpdateClusterObject
	}{
		Ctx:     ctx,
		CheckID: checkID,
		Opts:    opts,
	}
	mock.lockUpdateClusterObject.Lock()
	mock.calls.UpdateClusterObject = append(mock.calls.UpdateClusterObject, callInfo)
	mock.lockUpdateClusterObject.Unlock()
	if mock.UpdateClusterObjectFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateClusterObjectFunc(ctx, checkID, opts)
}

// UpdateClusterObjectCalls gets all the calls that were made to UpdateClusterObject.
// Check the length with:
//
//	len(mockedClient.UpdateClusterObjectCalls())
func (mock *ClientMock) UpdateClusterObjectCalls() []struct {
	Ctx     context.Context
	CheckID string
	Opts    cloud.UpdateClusterObject
} {
	var calls []struct {
		Ctx     context.Context
		CheckID string
		Opts    cloud.UpdateClusterObject
	}
	mock.lockUpdateClusterObject.RLock()
	calls = mock.calls.UpdateClusterObject
	mock.lockUpdateClusterObject.RUnlock()
	return calls
}

// UpdateConfigSection calls UpdateConfigSectionFunc.
func (mock *ClientMock) UpdateConfigSection(ctx context.Context, configSectionID string, in cloud.UpdateConfigSection) (cloud.UpdatedConfigSection, error) {
	callInfo := struct {
		Ctx             context.Context
		ConfigSectionID string
		In              cloud.UpdateConfigSection
	}{
		Ctx:             ctx,
		ConfigSectionID: configSectionID,
		In:              in,
	}
	mock.lockUpdateConfigSection.Lock()
	mock.calls.UpdateConfigSection = append(mock.calls.UpdateConfigSection, callInfo)
	mock.lockUpdateConfigSection.Unlock()
	if mock.UpdateConfigSectionFunc == nil {
		var (
			updatedConfigSectionOut cloud.UpdatedConfigSection
			errOut                  error
		)
		return updatedConfigSectionOut, errOut
	}
	return mock.UpdateConfigSectionFunc(ctx, configSectionID, in)
}

// UpdateConfigSectionCalls gets all the calls that were made to UpdateConfigSection.
// Check the length with:
//
//	len(mockedClient.UpdateConfigSectionCalls())
func (mock *ClientMock) UpdateConfigSectionCalls() []struct {
	Ctx             context.Context
	ConfigSectionID string
	In              cloud.UpdateConfigSection
} {
	var calls []struct {
		Ctx             context.Context
		ConfigSectionID string
		In              cloud.UpdateConfigSection
	}
	mock.lockUpdateConfigSection.RLock()
	calls = mock.calls.UpdateConfigSection
	mock.lockUpdateConfigSection.RUnlock()
	return calls
}

// UpdateConfigSectionSet calls UpdateConfigSectionSetFunc.
func (mock *ClientMock) UpdateConfigSectionSet(ctx context.Context, pipelineID string, configSectionIDs ...string) error {
	callInfo := struct {
		Ctx              context.Context
		PipelineID       string
		ConfigSectionIDs []string
	}{
		Ctx:              ctx,
		PipelineID:       pipelineID,
		ConfigSectionIDs: configSectionIDs,
	}
	mock.lockUpdateConfigSectionSet.Lock()
	mock.calls.UpdateConfigSectionSet = append(mock.calls.UpdateConfigSectionSet, callInfo)
	mock.lockUpdateConfigSectionSet.Unlock()
	if mock.UpdateConfigSectionSetFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateConfigSectionSetFunc(ctx, pipelineID, configSectionIDs...)
}

// UpdateConfigSectionSetCalls gets all the calls that were made to UpdateConfigSectionSet.
// Check the length with:
//
//	len(mockedClient.UpdateConfigSectionSetCalls())
func (mock *ClientMock) UpdateConfigSectionSetCalls() []struct {
	Ctx              context.Context
	PipelineID       string
	ConfigSectionIDs []string
} {
	var calls []struct {
		Ctx              context.Context
		PipelineID       string
		ConfigSectionIDs []string
	}
	mock.lockUpdateConfigSectionSet.RLock()
	calls = mock.calls.UpdateConfigSectionSet
	mock.lockUpdateConfigSectionSet.RUnlock()
	return calls
}

// UpdateCoreInstance calls UpdateCoreInstanceFunc.
func (mock *ClientMock) UpdateCoreInstance(ctx context.Context, instanceID string, payload cloud.UpdateCoreInstance) error {
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		Payload    cloud.UpdateCoreInstance
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		Payload:    payload,
	}
	mock.lockUpdateCoreInstance.Lock()
	mock.calls.UpdateCoreInstance = append(mock.calls.UpdateCoreInstance, callInfo)
	mock.lockUpdateCoreInstance.Unlock()
	if mock.UpdateCoreInstanceFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateCoreInstanceFunc(ctx, instanceID, payload)
}

// UpdateCoreInstanceCalls gets all the calls that were made to UpdateCoreInstance.
// Check the length with:
//
//	len(mockedClient.UpdateCoreInstanceCalls())
func (mock *ClientMock) UpdateCoreInstanceCalls() []struct {
	Ctx        context.Context
	InstanceID string
	Payload    cloud.UpdateCoreInstance
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		Payload    cloud.UpdateCoreInstance
	}
	mock.lockUpdateCoreInstance.RLock()
	calls = mock.calls.UpdateCoreInstance
	mock.lockUpdateCoreInstance.RUnlock()
	return calls
}

// UpdateCoreInstanceCheck calls UpdateCoreInstanceCheckFunc.
func (mock *ClientMock) UpdateCoreInstanceCheck(ctx context.Context, checkID string, opts cloud.UpdateCoreInstanceCheck) error {
	callInfo := struct {
		Ctx     context.Context
		CheckID string
		Opts    cloud.UpdateCoreInstanceCheck
	}{
		Ctx:     ctx,
		CheckID: checkID,
		Opts:    opts,
	}
	mock.lockUpdateCoreInstanceCheck.Lock()
	mock.calls.UpdateCoreInstanceCheck = append(mock.calls.UpdateCoreInstanceCheck, callInfo)
	mock.lockUpdateCoreInstanceCheck.Unlock()
	if mock.UpdateCoreInstanceCheckFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateCoreInstanceCheckFunc(ctx, checkID, opts)
}

// UpdateCoreInstanceCheckCalls gets all the calls that were made to UpdateCoreInstanceCheck.
// Check the length with:
//
//	len(mockedClient.UpdateCoreInstanceCheckCalls())
func (mock *ClientMock) UpdateCoreInstanceCheckCalls() []struct {
	Ctx     context.Context
	CheckID string
	Opts    cloud.UpdateCoreInstanceCheck
} {
	var calls []struct {
		Ctx     context.Context
		CheckID string
		Opts    cloud.UpdateCoreInstanceCheck
	}
	mock.lockUpdateCoreInstanceCheck.RLock()
	calls = mock.calls.UpdateCoreInstanceCheck
	mock.lockUpdateCoreInstanceCheck.RUnlock()
	return calls
}

// UpdateEnvironment calls UpdateEnvironmentFunc.
func (mock *ClientMock) UpdateEnvironment(ctx context.Context, environmentID string, payload cloud.UpdateEnvironment) error {
	callInfo := struct {
		Ctx           context.Context
		EnvironmentID string
		Payload       cloud.UpdateEnvironment
	}{
		Ctx:           ctx,
		EnvironmentID: environmentID,
		Payload:       payload,
	}
	mock.lockUpdateEnvironment.Lock()
	mock.calls.UpdateEnvironment = append(mock.calls.UpdateEnvironment, callInfo)
	mock.lockUpdateEnvironment.Unlock()
	if mock.UpdateEnvironmentFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateEnvironmentFunc(ctx, environmentID, payload)
}

// UpdateEnvironmentCalls gets all the calls that were made to UpdateEnvironment.
// Check the length with:
//
//	len(mockedClient.UpdateEnvironmentCalls())
func (mock *ClientMock) UpdateEnvironmentCalls() []struct {
	Ctx           context.Context
	EnvironmentID string
	Payload       cloud.UpdateEnvironment
} {
	var calls []struct {
		Ctx           context.Context
		EnvironmentID string
		Payload       cloud.UpdateEnvironment
	}
	mock.lockUpdateEnvironment.RLock()
	calls = mock.calls.UpdateEnvironment
	mock.lockUpdateEnvironment.RUnlock()
	return calls
}

// UpdateIngestCheck calls UpdateIngestCheckFunc.
func (mock *ClientMock) UpdateIngestCheck(ctx context.Context, checkID string, opts cloud.UpdateIngestCheck) error {
	callInfo := struct {
		Ctx     context.Context
		CheckID string
		Opts    cloud.UpdateIngestCheck
	}{
		Ctx:     ctx,
		CheckID: checkID,
		Opts:    opts,
	}
	mock.lockUpdateIngestCheck.Lock()
	mock.calls.UpdateIngestCheck = append(mock.calls.UpdateIngestCheck, callInfo)
	mock.lockUpdateIngestCheck.Unlock()
	if mock.UpdateIngestCheckFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateIngestCheckFunc(ctx, checkID, opts)
}

// UpdateIngestCheckCalls gets all the calls that were made to UpdateIngestCheck.
// Check the length with:
//
//	len(mockedClient.UpdateIngestCheckCalls())
func (mock *ClientMock) UpdateIngestCheckCalls() []struct {
	Ctx     context.Context
	CheckID string
	Opts    cloud.UpdateIngestCheck
} {
	var calls []struct {
		Ctx     context.Context
		CheckID string
		Opts    cloud.UpdateIngestCheck
	}
	mock.lockUpdateIngestCheck.RLock()
	calls = mock.calls.UpdateIngestCheck
	mock.lockUpdateIngestCheck.RUnlock()
	return calls
}

// UpdatePipeline calls UpdatePipelineFunc.
func (mock *ClientMock) UpdatePipeline(ctx context.Context, pipelineID string, opts cloud.UpdatePipeline) (cloud.UpdatedPipeline, error) {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Opts       cloud.UpdatePipeline
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Opts:       opts,
	}
	mock.lockUpdatePipeline.Lock()
	mock.calls.UpdatePipeline = append(mock.calls.UpdatePipeline, callInfo)
	mock.lockUpdatePipeline.Unlock()
	if mock.UpdatePipelineFunc == nil {
		var (
			updatedPipelineOut cloud.UpdatedPipeline
			errOut             error
		)
		return updatedPipelineOut, errOut
	}
	return mock.UpdatePipelineFunc(ctx, pipelineID, opts)
}

// UpdatePipelineCalls gets all the calls that were made to UpdatePipeline.
// Check the length with:
//
//	len(mockedClient.UpdatePipelineCalls())
func (mock *ClientMock) UpdatePipelineCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Opts       cloud.UpdatePipeline
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Opts       cloud.UpdatePipeline
	}
	mock.lockUpdatePipeline.RLock()
	calls = mock.calls.UpdatePipeline
	mock.lockUpdatePipeline.RUnlock()
	return calls
}

// UpdatePipelineCheck calls UpdatePipelineCheckFunc.
func (mock *ClientMock) UpdatePipelineCheck(ctx context.Context, checkID string, opts cloud.UpdatePipelineCheck) error {
	callInfo := struct {
		Ctx     context.Context
		CheckID string
		Opts    cloud.UpdatePipelineCheck
	}{
		Ctx:     ctx,
		CheckID: checkID,
		Opts:    opts,
	}
	mock.lockUpdatePipelineCheck.Lock()
	mock.calls.UpdatePipelineCheck = append(mock.calls.UpdatePipelineCheck, callInfo)
	mock.lockUpdatePipelineCheck.Unlock()
	if mock.UpdatePipelineCheckFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdatePipelineCheckFunc(ctx, checkID, opts)
}

// UpdatePipelineCheckCalls gets all the calls that were made to UpdatePipelineCheck.
// Check the length with:
//
//	len(mockedClient.UpdatePipelineCheckCalls())
func (mock *ClientMock) UpdatePipelineCheckCalls() []struct {
	Ctx     context.Context
	CheckID string
	Opts    cloud.UpdatePipelineCheck
} {
	var calls []struct {
		Ctx     context.Context
		CheckID string
		Opts    cloud.UpdatePipelineCheck
	}
	mock.lockUpdatePipelineCheck.RLock()
	calls = mock.calls.UpdatePipelineCheck
	mock.lockUpdatePipelineCheck.RUnlock()
	return calls
}

// UpdatePipelineClusterObjects calls UpdatePipelineClusterObjectsFunc.
func (mock *ClientMock) UpdatePipelineClusterObjects(ctx context.Context, pipelineID string, opts cloud.UpdatePipelineClusterObjects) error {
	callInfo := struct {
		Ctx        context.Context
		PipelineID string
		Opts       cloud.UpdatePipelineClusterObjects
	}{
		Ctx:        ctx,
		PipelineID: pipelineID,
		Opts:       opts,
	}
	mock.lockUpdatePipelineClusterObjects.Lock()
	mock.calls.UpdatePipelineClusterObjects = append(mock.calls.UpdatePipelineClusterObjects, callInfo)
	mock.lockUpdatePipelineClusterObjects.Unlock()
	if mock.UpdatePipelineClusterObjectsFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdatePipelineClusterObjectsFunc(ctx, pipelineID, opts)
}

// UpdatePipelineClusterObjectsCalls gets all the calls that were made to UpdatePipelineClusterObjects.
// Check the length with:
//
//	len(mockedClient.UpdatePipelineClusterObjectsCalls())
func (mock *ClientMock) UpdatePipelineClusterObjectsCalls() []struct {
	Ctx        context.Context
	PipelineID string
	Opts       cloud.UpdatePipelineClusterObjects
} {
	var calls []struct {
		Ctx        context.Context
		PipelineID string
		Opts       cloud.UpdatePipelineClusterObjects
	}
	mock.lockUpdatePipelineClusterObjects.RLock()
	calls = mock.calls.UpdatePipelineClusterObjects
	mock.lockUpdatePipelineClusterObjects.RUnlock()
	return calls
}

// UpdatePipelineFile calls UpdatePipelineFileFunc.
func (mock *ClientMock) UpdatePipelineFile(ctx context.Context, fileID string, opts cloud.UpdatePipelineFile) error {
	callInfo := struct {
		Ctx    context.Context
		FileID string
		Opts   cloud.UpdatePipelineFile
	}{
		Ctx:    ctx,
		FileID: fileID,
		Opts:   opts,
	}
	mock.lockUpdatePipelineFile.Lock()
	mock.calls.UpdatePipelineFile = append(mock.calls.UpdatePipelineFile, callInfo)
	mock.lockUpdatePipelineFile.Unlock()
	if mock.UpdatePipelineFileFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdatePipelineFileFunc(ctx, fileID, opts)
}

// UpdatePipelineFileCalls gets all the calls that were made to UpdatePipelineFile.
// Check the length with:
//
//	len(mockedClient.UpdatePipelineFileCalls())
func (mock *ClientMock) UpdatePipelineFileCalls() []struct {
	Ctx    context.Context
	FileID string
	Opts   cloud.UpdatePipelineFile
} {
	var calls []struct {
		Ctx    context.Context
		FileID string
		Opts   cloud.UpdatePipelineFile
	}
	mock.lockUpdatePipelineFile.RLock()
	calls = mock.calls.UpdatePipelineFile
	mock.lockUpdatePipelineFile.RUnlock()
	return calls
}

// UpdatePipelinePort calls UpdatePipelinePortFunc.
func (mock *ClientMock) UpdatePipelinePort(ctx context.Context, portID string, opts cloud.UpdatePipelinePort) error {
	callInfo := struct {
		Ctx    context.Context
		PortID string
		Opts   cloud.UpdatePipelinePort
	}{
		Ctx:    ctx,
		PortID: portID,
		Opts:   opts,
	}
	mock.lockUpdatePipelinePort.Lock()
	mock.calls.UpdatePipelinePort = append(mock.calls.UpdatePipelinePort, callInfo)
	mock.lockUpdatePipelinePort.Unlock()
	if mock.UpdatePipelinePortFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdatePipelinePortFunc(ctx, portID, opts)
}

// UpdatePipelinePortCalls gets all the calls that were made to UpdatePipelinePort.
// Check the length with:
//
//	len(mockedClient.UpdatePipelinePortCalls())
func (mock *ClientMock) UpdatePipelinePortCalls() []struct {
	Ctx    context.Context
	PortID string
	Opts   cloud.UpdatePipelinePort
} {
	var calls []struct {
		Ctx    context.Context
		PortID string
		Opts   cloud.UpdatePipelinePort
	}
	mock.lockUpdatePipelinePort.RLock()
	calls = mock.calls.UpdatePipelinePort
	mock.lockUpdatePipelinePort.RUnlock()
	return calls
}

// UpdatePipelineSecret calls UpdatePipelineSecretFunc.
func (mock *ClientMock) UpdatePipelineSecret(ctx context.Context, secretID string, opts cloud.UpdatePipelineSecret) error {
	callInfo := struct {
		Ctx      context.Context
		SecretID string
		Opts     cloud.UpdatePipelineSecret
	}{
		Ctx:      ctx,
		SecretID: secretID,
		Opts:     opts,
	}
	mock.lockUpdatePipelineSecret.Lock()
	mock.calls.UpdatePipelineSecret = append(mock.calls.UpdatePipelineSecret, callInfo)
	mock.lockUpdatePipelineSecret.Unlock()
	if mock.UpdatePipelineSecretFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdatePipelineSecretFunc(ctx, secretID, opts)
}

// UpdatePipelineSecretCalls gets all the calls that were made to UpdatePipelineSecret.
// Check the length with:
//
//	len(mockedClient.UpdatePipelineSecretCalls())
func (mock *ClientMock) UpdatePipelineSecretCalls() []struct {
	Ctx      context.Context
	SecretID string
	Opts     cloud.UpdatePipelineSecret
} {
	var calls []struct {
		Ctx      context.Context
		SecretID string
		Opts     cloud.UpdatePipelineSecret
	}
	mock.lockUpdatePipelineSecret.RLock()
	calls = mock.calls.UpdatePipelineSecret
	mock.lockUpdatePipelineSecret.RUnlock()
	return calls
}

// UpdateProcessingRule calls UpdateProcessingRuleFunc.
func (mock *ClientMock) UpdateProcessingRule(ctx context.Context, in cloud.UpdateProcessingRule) (cloud.UpdatedProcessingRule, error) {
	callInfo := struct {
		Ctx context.Context
		In  cloud.UpdateProcessingRule
	}{
		Ctx: ctx,
		In:  in,
	}
	mock.lockUpdateProcessingRule.Lock()
	mock.calls.UpdateProcessingRule = append(mock.calls.UpdateProcessingRule, callInfo)
	mock.lockUpdateProcessingRule.Unlock()
	if mock.UpdateProcessingRuleFunc == nil {
		var (
			updatedProcessingRuleOut cloud.UpdatedProcessingRule
			errOut                   error
		)
		return updatedProcessingRuleOut, errOut
	}
	return mock.UpdateProcessingRuleFunc(ctx, in)
}

// UpdateProcessingRuleCalls gets all the calls that were made to UpdateProcessingRule.
// Check the length with:
//
//	len(mockedClient.UpdateProcessingRuleCalls())
func (mock *ClientMock) UpdateProcessingRuleCalls() []struct {
	Ctx context.Context
	In  cloud.UpdateProcessingRule
} {
	var calls []struct {
		Ctx context.Context
		In  cloud.UpdateProcessingRule
	}
	mock.lockUpdateProcessingRule.RLock()
	calls = mock.calls.UpdateProcessingRule
	mock.lockUpdateProcessingRule.RUnlock()
	return calls
}

// UpdateProject calls UpdateProjectFunc.
func (mock *ClientMock) UpdateProject(ctx context.Context, projectID string, opts cloud.UpdateProject) error {
	callInfo := struct {
		Ctx       context.Context
		ProjectID string
		Opts      cloud.UpdateProject
	}{
		Ctx:       ctx,
		ProjectID: projectID,
		Opts:      opts,
	}
	mock.lockUpdateProject.Lock()
	mock.calls.UpdateProject = append(mock.calls.UpdateProject, callInfo)
	mock.lockUpdateProject.Unlock()
	if mock.UpdateProjectFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateProjectFunc(ctx, projectID, opts)
}

// UpdateProjectCalls gets all the calls that were made to UpdateProject.
// Check the length with:
//
//	len(mockedClient.UpdateProjectCalls())
func (mock *ClientMock) UpdateProjectCalls() []struct {
	Ctx       context.Context
	ProjectID string
	Opts      cloud.UpdateProject
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID string
		Opts      cloud.UpdateProject
	}
	mock.lockUpdateProject.RLock()
	calls = mock.calls.UpdateProject
	mock.lockUpdateProject.RUnlock()
	return calls
}

// UpdateResourceProfile calls UpdateResourceProfileFunc.
func (mock *ClientMock) UpdateResourceProfile(ctx context.Context, resourceProfileID string, opts cloud.UpdateResourceProfile) error {
	callInfo := struct {
		Ctx               context.Context
		ResourceProfileID string
		Opts              cloud.UpdateResourceProfile
	}{
		Ctx:               ctx,
		ResourceProfileID: resourceProfileID,
		Opts:              opts,
	}
	mock.lockUpdateResourceProfile.Lock()
	mock.calls.UpdateResourceProfile = append(mock.calls.UpdateResourceProfile, callInfo)
	mock.lockUpdateResourceProfile.Unlock()
	if mock.UpdateResourceProfileFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateResourceProfileFunc(ctx, resourceProfileID, opts)
}

// UpdateResourceProfileCalls gets all the calls that were made to UpdateResourceProfile.
// Check the length with:
//
//	len(mockedClient.UpdateResourceProfileCalls())
func (mock *ClientMock) UpdateResourceProfileCalls() []struct {
	Ctx               context.Context
	ResourceProfileID string
	Opts              cloud.UpdateResourceProfile
} {
	var calls []struct {
		Ctx               context.Context
		ResourceProfileID string
		Opts              cloud.UpdateResourceProfile
	}
	mock.lockUpdateResourceProfile.RLock()
	calls = mock.calls.UpdateResourceProfile
	mock.lockUpdateResourceProfile.RUnlock()
	return calls
}

// UpdateToken calls UpdateTokenFunc.
func (mock *ClientMock) UpdateToken(ctx context.Context, tokenID string, opts cloud.UpdateToken) error {
	callInfo := struct {
		Ctx     context.Context
		TokenID string
		Opts    cloud.UpdateToken
	}{
		Ctx:     ctx,
		TokenID: tokenID,
		Opts:    opts,
	}
	mock.lockUpdateToken.Lock()
	mock.calls.UpdateToken = append(mock.calls.UpdateToken, callInfo)
	mock.lockUpdateToken.Unlock()
	if mock.UpdateTokenFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateTokenFunc(ctx, tokenID, opts)
}

// UpdateTokenCalls gets all the calls that were made to UpdateToken.
// Check the length with:
//
//	len(mockedClient.UpdateTokenCalls())
func (mock *ClientMock) UpdateTokenCalls() []struct {
	Ctx     context.Context
	TokenID string
	Opts    cloud.UpdateToken
} {
	var calls []struct {
		Ctx     context.Context
		TokenID string
		Opts    cloud.UpdateToken
	}
	mock.lockUpdateToken.RLock()
	calls = mock.calls.UpdateToken
	mock.lockUpdateToken.RUnlock()
	return calls
}

// UpdateTraceSession calls UpdateTraceSessionFunc.
func (mock *ClientMock) UpdateTraceSession(ctx context.Context, sessionID string, in cloud.UpdateTraceSession) (cloud.UpdatedTraceSession, error) {
	callInfo := struct {
		Ctx       context.Context
		SessionID string
		In        cloud.UpdateTraceSession
	}{
		Ctx:       ctx,
		SessionID: sessionID,
		In:        in,
	}
	mock.lockUpdateTraceSession.Lock()
	mock.calls.UpdateTraceSession = append(mock.calls.UpdateTraceSession, callInfo)
	mock.lockUpdateTraceSession.Unlock()
	if mock.UpdateTraceSessionFunc == nil {
		var (
			updatedTraceSessionOut cloud.UpdatedTraceSession
			errOut                 error
		)
		return updatedTraceSessionOut, errOut
	}
	return mock.UpdateTraceSessionFunc(ctx, sessionID, in)
}

// UpdateTraceSessionCalls gets all the calls that were made to UpdateTraceSession.
// Check the length with:
//
//	len(mockedClient.UpdateTraceSessionCalls())
func (mock *ClientMock) UpdateTraceSessionCalls() []struct {
	Ctx       context.Context
	SessionID string
	In        cloud.UpdateTraceSession
} {
	var calls []struct {
		Ctx       context.Context
		SessionID string
		In        cloud.UpdateTraceSession
	}
	mock.lockUpdateTraceSession.RLock()
	calls = mock.calls.UpdateTraceSession
	mock.lockUpdateTraceSession.RUnlock()
	return calls
}

// ValidateConfig calls ValidateConfigFunc.
func (mock *ClientMock) ValidateConfig(ctx context.Context, agentType cloud.AgentType, payload cloud.ValidatingConfig) (cloud.ValidatedConfig, error) {
	callInfo := struct {
		Ctx       context.Context
		AgentType cloud.AgentType
		Payload   cloud.ValidatingConfig
	}{
		Ctx:       ctx,
		AgentType: agentType,
		Payload:   payload,
	}
	mock.lockValidateConfig.Lock()
	mock.calls.ValidateConfig = append(mock.calls.ValidateConfig, callInfo)
	mock.lockValidateConfig.Unlock()
	if mock.ValidateConfigFunc == nil {
		var (
			validatedConfigOut cloud.ValidatedConfig
			errOut             error
		)
		return validatedConfigOut, errOut
	}
	return mock.ValidateConfigFunc(ctx, agentType, payload)
}

// ValidateConfigCalls gets all the calls that were made to ValidateConfig.
// Check the length with:
//
//	len(mockedClient.ValidateConfigCalls())
func (mock *ClientMock) ValidateConfigCalls() []struct {
	Ctx       context.Context
	AgentType cloud.AgentType
	Payload   cloud.ValidatingConfig
} {
	var calls []struct {
		Ctx       context.Context
		AgentType cloud.AgentType
		Payload   cloud.ValidatingConfig
	}
	mock.lockValidateConfig.RLock()
	calls = mock.calls.ValidateConfig
	mock.lockValidateConfig.RUnlock()
	return calls
}

// ValidateConfigV2 calls ValidateConfigV2Func.
func (mock *ClientMock) ValidateConfigV2(ctx context.Context, payload cloud.ValidatingConfig) (cloud.ValidatedConfigV2, error) {
	callInfo := struct {
		Ctx     context.Context
		Payload cloud.ValidatingConfig
	}{
		Ctx:     ctx,
		Payload: payload,
	}
	mock.lockValidateConfigV2.Lock()
	mock.calls.ValidateConfigV2 = append(mock.calls.ValidateConfigV2, callInfo)
	mock.lockValidateConfigV2.Unlock()
	if mock.ValidateConfigV2Func == nil {
		var (
			validatedConfigV2Out cloud.ValidatedConfigV2
			errOut               error
		)
		return validatedConfigV2Out, errOut
	}
	return mock.ValidateConfigV2Func(ctx, payload)
}

// ValidateConfigV2Calls gets all the calls that were made to ValidateConfigV2.
// Check the length with:
//
//	len(mockedClient.ValidateConfigV2Calls())
func (mock *ClientMock) ValidateConfigV2Calls() []struct {
	Ctx     context.Context
	Payload cloud.ValidatingConfig
} {
	var calls []struct {
		Ctx     context.Context
		Payload cloud.ValidatingConfig
	}
	mock.lockValidateConfigV2.RLock()
	calls = mock.calls.ValidateConfigV2
	mock.lockValidateConfigV2.RUnlock()
	return calls
}
