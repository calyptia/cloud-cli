// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cmd

import (
	"context"
	"net/url"
	"sync"

	"github.com/calyptia/api/types"
	fluentbitconfig "github.com/calyptia/go-fluentbit-config/v2"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked Client
//		mockedClient := &ClientMock{
//			AWSCustomerRedirectFunc: func(contextMoqParam context.Context, s string) (*url.URL, error) {
//				panic("mock out the AWSCustomerRedirect method")
//			},
//			AcceptInvitationFunc: func(contextMoqParam context.Context, acceptInvitation types.AcceptInvitation) error {
//				panic("mock out the AcceptInvitation method")
//			},
//			ActiveTraceSessionFunc: func(contextMoqParam context.Context, s string) (types.TraceSession, error) {
//				panic("mock out the ActiveTraceSession method")
//			},
//			AddAgentMetricsV1Func: func(contextMoqParam context.Context, s string, metrics []types.Metric) (types.MetricsOverTimeByPlugin, error) {
//				panic("mock out the AddAgentMetricsV1 method")
//			},
//			AgentFunc: func(contextMoqParam context.Context, s string) (types.Agent, error) {
//				panic("mock out the Agent method")
//			},
//			AgentConfigHistoryFunc: func(contextMoqParam context.Context, s string, agentConfigHistoryParams types.AgentConfigHistoryParams) (types.AgentConfigHistory, error) {
//				panic("mock out the AgentConfigHistory method")
//			},
//			AgentErrorsFunc: func(contextMoqParam context.Context, listAgentErrors types.ListAgentErrors) (types.AgentErrors, error) {
//				panic("mock out the AgentErrors method")
//			},
//			AgentMetricsFunc: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummary, error) {
//				panic("mock out the AgentMetrics method")
//			},
//			AgentMetricsByPluginFunc: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummaryPlugin, error) {
//				panic("mock out the AgentMetricsByPlugin method")
//			},
//			AgentMetricsOverTimeByPluginFunc: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTimeByPlugin, error) {
//				panic("mock out the AgentMetricsOverTimeByPlugin method")
//			},
//			AgentMetricsV1Func: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.AgentMetrics, error) {
//				panic("mock out the AgentMetricsV1 method")
//			},
//			AgentOverTimeMetricsFunc: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTime, error) {
//				panic("mock out the AgentOverTimeMetrics method")
//			},
//			AgentsFunc: func(contextMoqParam context.Context, s string, agentsParams types.AgentsParams) (types.Agents, error) {
//				panic("mock out the Agents method")
//			},
//			AllCoreInstanceFilesFunc: func(contextMoqParam context.Context, s string) ([]types.CoreInstanceFile, error) {
//				panic("mock out the AllCoreInstanceFiles method")
//			},
//			AllCoreInstanceSecretsFunc: func(contextMoqParam context.Context, s string) ([]types.CoreInstanceSecret, error) {
//				panic("mock out the AllCoreInstanceSecrets method")
//			},
//			ClusterObjectFunc: func(contextMoqParam context.Context, s string) (types.ClusterObject, error) {
//				panic("mock out the ClusterObject method")
//			},
//			ClusterObjectRegexFunc: func(contextMoqParam context.Context, s string) (types.ClusterObjectRegex, error) {
//				panic("mock out the ClusterObjectRegex method")
//			},
//			ClusterObjectRegexesFunc: func(contextMoqParam context.Context, listClusterObjectRegexes types.ListClusterObjectRegexes) (types.ClusterObjectRegexes, error) {
//				panic("mock out the ClusterObjectRegexes method")
//			},
//			ClusterObjectsFunc: func(contextMoqParam context.Context, s string, clusterObjectParams types.ClusterObjectParams) (types.ClusterObjects, error) {
//				panic("mock out the ClusterObjects method")
//			},
//			ConfigSectionFunc: func(contextMoqParam context.Context, s string) (types.ConfigSection, error) {
//				panic("mock out the ConfigSection method")
//			},
//			ConfigSectionsFunc: func(contextMoqParam context.Context, s string, configSectionsParams types.ConfigSectionsParams) (types.ConfigSections, error) {
//				panic("mock out the ConfigSections method")
//			},
//			CoreInstanceFunc: func(contextMoqParam context.Context, s string) (types.CoreInstance, error) {
//				panic("mock out the CoreInstance method")
//			},
//			CoreInstanceCheckFunc: func(contextMoqParam context.Context, s string) (types.CoreInstanceCheck, error) {
//				panic("mock out the CoreInstanceCheck method")
//			},
//			CoreInstanceChecksFunc: func(contextMoqParam context.Context, s string, coreInstanceChecksParams types.CoreInstanceChecksParams) (types.CoreInstanceChecks, error) {
//				panic("mock out the CoreInstanceChecks method")
//			},
//			CoreInstanceFilesFunc: func(contextMoqParam context.Context, listCoreInstanceFiles types.ListCoreInstanceFiles) (types.CoreInstanceFiles, error) {
//				panic("mock out the CoreInstanceFiles method")
//			},
//			CoreInstanceMetricsFunc: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummary, error) {
//				panic("mock out the CoreInstanceMetrics method")
//			},
//			CoreInstanceMetricsByPluginFunc: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummaryPlugin, error) {
//				panic("mock out the CoreInstanceMetricsByPlugin method")
//			},
//			CoreInstanceMetricsOverTimeByPluginFunc: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTimeByPlugin, error) {
//				panic("mock out the CoreInstanceMetricsOverTimeByPlugin method")
//			},
//			CoreInstanceMetricsV1Func: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.CoreInstanceMetricsV1, error) {
//				panic("mock out the CoreInstanceMetricsV1 method")
//			},
//			CoreInstanceOverTimeMetricsFunc: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTime, error) {
//				panic("mock out the CoreInstanceOverTimeMetrics method")
//			},
//			CoreInstancePingFunc: func(contextMoqParam context.Context, s string) (types.CoreInstancePingResponse, error) {
//				panic("mock out the CoreInstancePing method")
//			},
//			CoreInstanceSecretsFunc: func(contextMoqParam context.Context, listCoreInstanceSecrets types.ListCoreInstanceSecrets) (types.CoreInstanceSecrets, error) {
//				panic("mock out the CoreInstanceSecrets method")
//			},
//			CoreInstancesFunc: func(contextMoqParam context.Context, s string, coreInstancesParams types.CoreInstancesParams) (types.CoreInstances, error) {
//				panic("mock out the CoreInstances method")
//			},
//			CreateAWSContractFromTokenFunc: func(contextMoqParam context.Context, createAWSContractFromToken types.CreateAWSContractFromToken) error {
//				panic("mock out the CreateAWSContractFromToken method")
//			},
//			CreateAgentErrorFunc: func(contextMoqParam context.Context, createAgentError types.CreateAgentError) (types.Created, error) {
//				panic("mock out the CreateAgentError method")
//			},
//			CreateClusterObjectFunc: func(contextMoqParam context.Context, s string, createClusterObject types.CreateClusterObject) (types.Created, error) {
//				panic("mock out the CreateClusterObject method")
//			},
//			CreateClusterObjectRegexFunc: func(contextMoqParam context.Context, createClusterObjectRegex types.CreateClusterObjectRegex) (types.Created, error) {
//				panic("mock out the CreateClusterObjectRegex method")
//			},
//			CreateConfigSectionFunc: func(contextMoqParam context.Context, s string, createConfigSection types.CreateConfigSection) (types.Created, error) {
//				panic("mock out the CreateConfigSection method")
//			},
//			CreateCoreInstanceFunc: func(contextMoqParam context.Context, createCoreInstance types.CreateCoreInstance) (types.CreatedCoreInstance, error) {
//				panic("mock out the CreateCoreInstance method")
//			},
//			CreateCoreInstanceCheckFunc: func(contextMoqParam context.Context, s string, check types.Check) (types.Created, error) {
//				panic("mock out the CreateCoreInstanceCheck method")
//			},
//			CreateCoreInstanceFileFunc: func(contextMoqParam context.Context, createCoreInstanceFile types.CreateCoreInstanceFile) (types.Created, error) {
//				panic("mock out the CreateCoreInstanceFile method")
//			},
//			CreateCoreInstanceSecretFunc: func(contextMoqParam context.Context, createCoreInstanceSecret types.CreateCoreInstanceSecret) (types.Created, error) {
//				panic("mock out the CreateCoreInstanceSecret method")
//			},
//			CreateEnvironmentFunc: func(contextMoqParam context.Context, s string, createEnvironment types.CreateEnvironment) (types.CreatedEnvironment, error) {
//				panic("mock out the CreateEnvironment method")
//			},
//			CreateFleetFunc: func(contextMoqParam context.Context, createFleet types.CreateFleet) (types.Created, error) {
//				panic("mock out the CreateFleet method")
//			},
//			CreateIngestCheckFunc: func(contextMoqParam context.Context, s string, createIngestCheck types.CreateIngestCheck) (types.Created, error) {
//				panic("mock out the CreateIngestCheck method")
//			},
//			CreateInvitationFunc: func(contextMoqParam context.Context, s string, createInvitation types.CreateInvitation) error {
//				panic("mock out the CreateInvitation method")
//			},
//			CreatePipelineFunc: func(contextMoqParam context.Context, s string, createPipeline types.CreatePipeline) (types.CreatedPipeline, error) {
//				panic("mock out the CreatePipeline method")
//			},
//			CreatePipelineCheckFunc: func(contextMoqParam context.Context, s string, createPipelineCheck types.CreatePipelineCheck) (types.Created, error) {
//				panic("mock out the CreatePipelineCheck method")
//			},
//			CreatePipelineFileFunc: func(contextMoqParam context.Context, s string, createPipelineFile types.CreatePipelineFile) (types.Created, error) {
//				panic("mock out the CreatePipelineFile method")
//			},
//			CreatePipelinePortFunc: func(contextMoqParam context.Context, s string, createPipelinePort types.CreatePipelinePort) (types.CreatedPipelinePort, error) {
//				panic("mock out the CreatePipelinePort method")
//			},
//			CreatePipelineSecretFunc: func(contextMoqParam context.Context, s string, createPipelineSecret types.CreatePipelineSecret) (types.Created, error) {
//				panic("mock out the CreatePipelineSecret method")
//			},
//			CreateProcessingRuleFunc: func(contextMoqParam context.Context, createProcessingRule types.CreateProcessingRule) (types.CreatedProcessingRule, error) {
//				panic("mock out the CreateProcessingRule method")
//			},
//			CreateProcessingRuleTemplateFunc: func(contextMoqParam context.Context, createProcessingRuleTemplate types.CreateProcessingRuleTemplate) (types.Created, error) {
//				panic("mock out the CreateProcessingRuleTemplate method")
//			},
//			CreateProjectFunc: func(contextMoqParam context.Context, createProject types.CreateProject) (types.CreatedProject, error) {
//				panic("mock out the CreateProject method")
//			},
//			CreateResourceProfileFunc: func(contextMoqParam context.Context, s string, createResourceProfile types.CreateResourceProfile) (types.Created, error) {
//				panic("mock out the CreateResourceProfile method")
//			},
//			CreateTokenFunc: func(contextMoqParam context.Context, s string, createToken types.CreateToken) (types.Token, error) {
//				panic("mock out the CreateToken method")
//			},
//			CreateTraceRecordFunc: func(contextMoqParam context.Context, s string, createTraceRecord types.CreateTraceRecord) (types.CreatedTraceRecord, error) {
//				panic("mock out the CreateTraceRecord method")
//			},
//			CreateTraceSessionFunc: func(contextMoqParam context.Context, s string, createTraceSession types.CreateTraceSession) (types.Created, error) {
//				panic("mock out the CreateTraceSession method")
//			},
//			DeleteAgentFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeleteAgent method")
//			},
//			DeleteAgentsFunc: func(contextMoqParam context.Context, s string, strings ...string) error {
//				panic("mock out the DeleteAgents method")
//			},
//			DeleteClusterObjectFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeleteClusterObject method")
//			},
//			DeleteClusterObjectRegexFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeleteClusterObjectRegex method")
//			},
//			DeleteConfigSectionFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeleteConfigSection method")
//			},
//			DeleteCoreInstanceFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeleteCoreInstance method")
//			},
//			DeleteCoreInstanceCheckFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeleteCoreInstanceCheck method")
//			},
//			DeleteCoreInstanceFileFunc: func(contextMoqParam context.Context, s string) (types.Deleted, error) {
//				panic("mock out the DeleteCoreInstanceFile method")
//			},
//			DeleteCoreInstanceSecretFunc: func(contextMoqParam context.Context, s string) (types.Deleted, error) {
//				panic("mock out the DeleteCoreInstanceSecret method")
//			},
//			DeleteCoreInstancesFunc: func(contextMoqParam context.Context, s string, strings ...string) error {
//				panic("mock out the DeleteCoreInstances method")
//			},
//			DeleteEnvironmentFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeleteEnvironment method")
//			},
//			DeleteFleetFunc: func(contextMoqParam context.Context, s string) (types.Deleted, error) {
//				panic("mock out the DeleteFleet method")
//			},
//			DeleteIngestCheckFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeleteIngestCheck method")
//			},
//			DeletePipelineFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeletePipeline method")
//			},
//			DeletePipelineCheckFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeletePipelineCheck method")
//			},
//			DeletePipelineClusterObjectsFunc: func(contextMoqParam context.Context, s string, strings ...string) error {
//				panic("mock out the DeletePipelineClusterObjects method")
//			},
//			DeletePipelineFileFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeletePipelineFile method")
//			},
//			DeletePipelinePortFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeletePipelinePort method")
//			},
//			DeletePipelineSecretFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeletePipelineSecret method")
//			},
//			DeletePipelinesFunc: func(contextMoqParam context.Context, s string, strings ...string) error {
//				panic("mock out the DeletePipelines method")
//			},
//			DeleteProcessingRuleFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeleteProcessingRule method")
//			},
//			DeleteProcessingRuleTemplateFunc: func(contextMoqParam context.Context, s string) (types.Deleted, error) {
//				panic("mock out the DeleteProcessingRuleTemplate method")
//			},
//			DeleteResourceProfileFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeleteResourceProfile method")
//			},
//			DeleteTokenFunc: func(contextMoqParam context.Context, s string) error {
//				panic("mock out the DeleteToken method")
//			},
//			DismissAgentErrorFunc: func(contextMoqParam context.Context, dismissAgentError types.DismissAgentError) (types.DismissedAgentError, error) {
//				panic("mock out the DismissAgentError method")
//			},
//			EnvironmentsFunc: func(contextMoqParam context.Context, s string, environmentsParams types.EnvironmentsParams) (types.Environments, error) {
//				panic("mock out the Environments method")
//			},
//			FleetFunc: func(contextMoqParam context.Context, fleetParams types.FleetParams) (types.Fleet, error) {
//				panic("mock out the Fleet method")
//			},
//			FleetConfigFunc: func(contextMoqParam context.Context, s string, fleetConfigParams types.FleetConfigParams) (*fluentbitconfig.Config, error) {
//				panic("mock out the FleetConfig method")
//			},
//			FleetsFunc: func(contextMoqParam context.Context, fleetsParams types.FleetsParams) (types.Fleets, error) {
//				panic("mock out the Fleets method")
//			},
//			HealthFunc: func(contextMoqParam context.Context) (types.Health, error) {
//				panic("mock out the Health method")
//			},
//			IngestCheckFunc: func(contextMoqParam context.Context, s string) (types.IngestCheck, error) {
//				panic("mock out the IngestCheck method")
//			},
//			IngestChecksFunc: func(contextMoqParam context.Context, s string, ingestChecksParams types.IngestChecksParams) (types.IngestChecks, error) {
//				panic("mock out the IngestChecks method")
//			},
//			MembersFunc: func(contextMoqParam context.Context, s string, membersParams types.MembersParams) (types.Memberships, error) {
//				panic("mock out the Members method")
//			},
//			PipelineFunc: func(contextMoqParam context.Context, s string, pipelineParams types.PipelineParams) (types.Pipeline, error) {
//				panic("mock out the Pipeline method")
//			},
//			PipelineCheckFunc: func(contextMoqParam context.Context, s string) (types.PipelineCheck, error) {
//				panic("mock out the PipelineCheck method")
//			},
//			PipelineChecksFunc: func(contextMoqParam context.Context, s string, pipelineChecksParams types.PipelineChecksParams) (types.PipelineChecks, error) {
//				panic("mock out the PipelineChecks method")
//			},
//			PipelineClusterObjectsFunc: func(contextMoqParam context.Context, s string, pipelineClusterObjectsParams types.PipelineClusterObjectsParams) (types.ClusterObjects, error) {
//				panic("mock out the PipelineClusterObjects method")
//			},
//			PipelineConfigHistoryFunc: func(contextMoqParam context.Context, s string, pipelineConfigHistoryParams types.PipelineConfigHistoryParams) (types.PipelineConfigHistory, error) {
//				panic("mock out the PipelineConfigHistory method")
//			},
//			PipelineFileFunc: func(contextMoqParam context.Context, s string) (types.PipelineFile, error) {
//				panic("mock out the PipelineFile method")
//			},
//			PipelineFilesFunc: func(contextMoqParam context.Context, s string, pipelineFilesParams types.PipelineFilesParams) (types.PipelineFiles, error) {
//				panic("mock out the PipelineFiles method")
//			},
//			PipelineMetadataFunc: func(contextMoqParam context.Context, s string, strings ...string) (types.PipelineMetadata, error) {
//				panic("mock out the PipelineMetadata method")
//			},
//			PipelineMetricsFunc: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummary, error) {
//				panic("mock out the PipelineMetrics method")
//			},
//			PipelineMetricsByPluginFunc: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummaryPlugin, error) {
//				panic("mock out the PipelineMetricsByPlugin method")
//			},
//			PipelineMetricsOverTimeByPluginFunc: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTimeByPlugin, error) {
//				panic("mock out the PipelineMetricsOverTimeByPlugin method")
//			},
//			PipelineMetricsV1Func: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.AgentMetrics, error) {
//				panic("mock out the PipelineMetricsV1 method")
//			},
//			PipelineOverTimeMetricsFunc: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTime, error) {
//				panic("mock out the PipelineOverTimeMetrics method")
//			},
//			PipelinePortFunc: func(contextMoqParam context.Context, s string) (types.PipelinePort, error) {
//				panic("mock out the PipelinePort method")
//			},
//			PipelinePortsFunc: func(contextMoqParam context.Context, s string, pipelinePortsParams types.PipelinePortsParams) (types.PipelinePorts, error) {
//				panic("mock out the PipelinePorts method")
//			},
//			PipelineSecretFunc: func(contextMoqParam context.Context, s string) (types.PipelineSecret, error) {
//				panic("mock out the PipelineSecret method")
//			},
//			PipelineSecretsFunc: func(contextMoqParam context.Context, s string, pipelineSecretsParams types.PipelineSecretsParams) (types.PipelineSecrets, error) {
//				panic("mock out the PipelineSecrets method")
//			},
//			PipelineStatusHistoryFunc: func(contextMoqParam context.Context, s string, pipelineStatusHistoryParams types.PipelineStatusHistoryParams) (types.PipelineStatusHistory, error) {
//				panic("mock out the PipelineStatusHistory method")
//			},
//			PipelinesFunc: func(contextMoqParam context.Context, pipelinesParams types.PipelinesParams) (types.Pipelines, error) {
//				panic("mock out the Pipelines method")
//			},
//			PipelinesMetricsV1Func: func(contextMoqParam context.Context, s string, pipelinesMetricsParams types.PipelinesMetricsParams) (types.PipelinesMetrics, error) {
//				panic("mock out the PipelinesMetricsV1 method")
//			},
//			PreviewProcessingRuleFunc: func(contextMoqParam context.Context, previewProcessingRule types.PreviewProcessingRule) ([]types.FluentBitLog, error) {
//				panic("mock out the PreviewProcessingRule method")
//			},
//			ProcessingRuleFunc: func(contextMoqParam context.Context, s string) (types.ProcessingRule, error) {
//				panic("mock out the ProcessingRule method")
//			},
//			ProcessingRuleTemplatesFunc: func(contextMoqParam context.Context, listProcessingRuleTemplates types.ListProcessingRuleTemplates) (types.ProcessingRuleTemplates, error) {
//				panic("mock out the ProcessingRuleTemplates method")
//			},
//			ProcessingRulesFunc: func(contextMoqParam context.Context, processingRulesParams types.ProcessingRulesParams) (types.ProcessingRules, error) {
//				panic("mock out the ProcessingRules method")
//			},
//			ProjectFunc: func(contextMoqParam context.Context, s string) (types.Project, error) {
//				panic("mock out the Project method")
//			},
//			ProjectMetricsV1Func: func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.ProjectMetrics, error) {
//				panic("mock out the ProjectMetricsV1 method")
//			},
//			ProjectsFunc: func(contextMoqParam context.Context, projectsParams types.ProjectsParams) (types.Projects, error) {
//				panic("mock out the Projects method")
//			},
//			PushAWSMarketplaceSubscriptionNotificationFunc: func(contextMoqParam context.Context, aWSMarketplaceSubscriptionNotification types.AWSMarketplaceSubscriptionNotification) error {
//				panic("mock out the PushAWSMarketplaceSubscriptionNotification method")
//			},
//			RegisterAgentFunc: func(contextMoqParam context.Context, registerAgent types.RegisterAgent) (types.RegisteredAgent, error) {
//				panic("mock out the RegisterAgent method")
//			},
//			ResourceProfileFunc: func(contextMoqParam context.Context, s string) (types.ResourceProfile, error) {
//				panic("mock out the ResourceProfile method")
//			},
//			ResourceProfilesFunc: func(contextMoqParam context.Context, s string, resourceProfilesParams types.ResourceProfilesParams) (types.ResourceProfiles, error) {
//				panic("mock out the ResourceProfiles method")
//			},
//			SearchFunc: func(contextMoqParam context.Context, searchQuery types.SearchQuery) ([]types.SearchResult, error) {
//				panic("mock out the Search method")
//			},
//			SendVerificationEmailFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the SendVerificationEmail method")
//			},
//			SetAgentTokenFunc: func(s string)  {
//				panic("mock out the SetAgentToken method")
//			},
//			SetCoreInstanceTokenFunc: func(s string)  {
//				panic("mock out the SetCoreInstanceToken method")
//			},
//			SetProjectTokenFunc: func(s string)  {
//				panic("mock out the SetProjectToken method")
//			},
//			SetUserAgentFunc: func(s string)  {
//				panic("mock out the SetUserAgent method")
//			},
//			TerminateActiveTraceSessionFunc: func(contextMoqParam context.Context, s string) (types.TerminatedTraceSession, error) {
//				panic("mock out the TerminateActiveTraceSession method")
//			},
//			TokenFunc: func(contextMoqParam context.Context, s string) (types.Token, error) {
//				panic("mock out the Token method")
//			},
//			TokensFunc: func(contextMoqParam context.Context, s string, tokensParams types.TokensParams) (types.Tokens, error) {
//				panic("mock out the Tokens method")
//			},
//			TraceRecordsFunc: func(contextMoqParam context.Context, s string, traceRecordsParams types.TraceRecordsParams) (types.TraceRecords, error) {
//				panic("mock out the TraceRecords method")
//			},
//			TraceSessionFunc: func(contextMoqParam context.Context, s string) (types.TraceSession, error) {
//				panic("mock out the TraceSession method")
//			},
//			TraceSessionsFunc: func(contextMoqParam context.Context, s string, traceSessionsParams types.TraceSessionsParams) (types.TraceSessions, error) {
//				panic("mock out the TraceSessions method")
//			},
//			UpdateAgentFunc: func(contextMoqParam context.Context, s string, updateAgent types.UpdateAgent) error {
//				panic("mock out the UpdateAgent method")
//			},
//			UpdateClusterObjectFunc: func(contextMoqParam context.Context, s string, updateClusterObject types.UpdateClusterObject) error {
//				panic("mock out the UpdateClusterObject method")
//			},
//			UpdateClusterObjectRegexFunc: func(contextMoqParam context.Context, updateClusterObjectRegex types.UpdateClusterObjectRegex) (types.Updated, error) {
//				panic("mock out the UpdateClusterObjectRegex method")
//			},
//			UpdateConfigSectionFunc: func(contextMoqParam context.Context, s string, updateConfigSection types.UpdateConfigSection) (types.Updated, error) {
//				panic("mock out the UpdateConfigSection method")
//			},
//			UpdateConfigSectionSetFunc: func(contextMoqParam context.Context, s string, strings ...string) error {
//				panic("mock out the UpdateConfigSectionSet method")
//			},
//			UpdateCoreInstanceFunc: func(contextMoqParam context.Context, s string, updateCoreInstance types.UpdateCoreInstance) error {
//				panic("mock out the UpdateCoreInstance method")
//			},
//			UpdateCoreInstanceCheckFunc: func(contextMoqParam context.Context, s string, updateCoreInstanceCheck types.UpdateCoreInstanceCheck) error {
//				panic("mock out the UpdateCoreInstanceCheck method")
//			},
//			UpdateCoreInstanceFileFunc: func(contextMoqParam context.Context, updateCoreInstanceFile types.UpdateCoreInstanceFile) (types.Updated, error) {
//				panic("mock out the UpdateCoreInstanceFile method")
//			},
//			UpdateCoreInstanceSecretFunc: func(contextMoqParam context.Context, updateCoreInstanceSecret types.UpdateCoreInstanceSecret) (types.Updated, error) {
//				panic("mock out the UpdateCoreInstanceSecret method")
//			},
//			UpdateEnvironmentFunc: func(contextMoqParam context.Context, s string, updateEnvironment types.UpdateEnvironment) error {
//				panic("mock out the UpdateEnvironment method")
//			},
//			UpdateFleetFunc: func(contextMoqParam context.Context, updateFleet types.UpdateFleet) (types.Updated, error) {
//				panic("mock out the UpdateFleet method")
//			},
//			UpdateIngestCheckFunc: func(contextMoqParam context.Context, s string, updateIngestCheck types.UpdateIngestCheck) error {
//				panic("mock out the UpdateIngestCheck method")
//			},
//			UpdateMemberFunc: func(contextMoqParam context.Context, updateMember types.UpdateMember) error {
//				panic("mock out the UpdateMember method")
//			},
//			UpdatePipelineFunc: func(contextMoqParam context.Context, s string, updatePipeline types.UpdatePipeline) (types.UpdatedPipeline, error) {
//				panic("mock out the UpdatePipeline method")
//			},
//			UpdatePipelineCheckFunc: func(contextMoqParam context.Context, s string, updatePipelineCheck types.UpdatePipelineCheck) error {
//				panic("mock out the UpdatePipelineCheck method")
//			},
//			UpdatePipelineClusterObjectsFunc: func(contextMoqParam context.Context, s string, updatePipelineClusterObjects types.UpdatePipelineClusterObjects) error {
//				panic("mock out the UpdatePipelineClusterObjects method")
//			},
//			UpdatePipelineFileFunc: func(contextMoqParam context.Context, s string, updatePipelineFile types.UpdatePipelineFile) error {
//				panic("mock out the UpdatePipelineFile method")
//			},
//			UpdatePipelineMetadataFunc: func(contextMoqParam context.Context, s string, updatePipelineMetadata types.UpdatePipelineMetadata) error {
//				panic("mock out the UpdatePipelineMetadata method")
//			},
//			UpdatePipelinePortFunc: func(contextMoqParam context.Context, s string, updatePipelinePort types.UpdatePipelinePort) error {
//				panic("mock out the UpdatePipelinePort method")
//			},
//			UpdatePipelineSecretFunc: func(contextMoqParam context.Context, s string, updatePipelineSecret types.UpdatePipelineSecret) error {
//				panic("mock out the UpdatePipelineSecret method")
//			},
//			UpdateProcessingRuleFunc: func(contextMoqParam context.Context, updateProcessingRule types.UpdateProcessingRule) (types.Updated, error) {
//				panic("mock out the UpdateProcessingRule method")
//			},
//			UpdateProcessingRuleTemplateFunc: func(contextMoqParam context.Context, updateProcessingRuleTemplate types.UpdateProcessingRuleTemplate) (types.Updated, error) {
//				panic("mock out the UpdateProcessingRuleTemplate method")
//			},
//			UpdateProjectFunc: func(contextMoqParam context.Context, s string, updateProject types.UpdateProject) error {
//				panic("mock out the UpdateProject method")
//			},
//			UpdateResourceProfileFunc: func(contextMoqParam context.Context, s string, updateResourceProfile types.UpdateResourceProfile) error {
//				panic("mock out the UpdateResourceProfile method")
//			},
//			UpdateTokenFunc: func(contextMoqParam context.Context, updateToken types.UpdateToken) error {
//				panic("mock out the UpdateToken method")
//			},
//			UpdateTraceSessionFunc: func(contextMoqParam context.Context, s string, updateTraceSession types.UpdateTraceSession) (types.Updated, error) {
//				panic("mock out the UpdateTraceSession method")
//			},
//			ValidateConfigFunc: func(contextMoqParam context.Context, agentType types.AgentType, validatingConfig types.ValidatingConfig) (types.ValidatedConfig, error) {
//				panic("mock out the ValidateConfig method")
//			},
//			ValidateConfigV2Func: func(contextMoqParam context.Context, validatingConfig types.ValidatingConfig) (types.ValidatedConfigV2, error) {
//				panic("mock out the ValidateConfigV2 method")
//			},
//		}
//
//		// use mockedClient in code that requires Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// AWSCustomerRedirectFunc mocks the AWSCustomerRedirect method.
	AWSCustomerRedirectFunc func(contextMoqParam context.Context, s string) (*url.URL, error)

	// AcceptInvitationFunc mocks the AcceptInvitation method.
	AcceptInvitationFunc func(contextMoqParam context.Context, acceptInvitation types.AcceptInvitation) error

	// ActiveTraceSessionFunc mocks the ActiveTraceSession method.
	ActiveTraceSessionFunc func(contextMoqParam context.Context, s string) (types.TraceSession, error)

	// AddAgentMetricsV1Func mocks the AddAgentMetricsV1 method.
	AddAgentMetricsV1Func func(contextMoqParam context.Context, s string, metrics []types.Metric) (types.MetricsOverTimeByPlugin, error)

	// AgentFunc mocks the Agent method.
	AgentFunc func(contextMoqParam context.Context, s string) (types.Agent, error)

	// AgentConfigHistoryFunc mocks the AgentConfigHistory method.
	AgentConfigHistoryFunc func(contextMoqParam context.Context, s string, agentConfigHistoryParams types.AgentConfigHistoryParams) (types.AgentConfigHistory, error)

	// AgentErrorsFunc mocks the AgentErrors method.
	AgentErrorsFunc func(contextMoqParam context.Context, listAgentErrors types.ListAgentErrors) (types.AgentErrors, error)

	// AgentMetricsFunc mocks the AgentMetrics method.
	AgentMetricsFunc func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummary, error)

	// AgentMetricsByPluginFunc mocks the AgentMetricsByPlugin method.
	AgentMetricsByPluginFunc func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummaryPlugin, error)

	// AgentMetricsOverTimeByPluginFunc mocks the AgentMetricsOverTimeByPlugin method.
	AgentMetricsOverTimeByPluginFunc func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTimeByPlugin, error)

	// AgentMetricsV1Func mocks the AgentMetricsV1 method.
	AgentMetricsV1Func func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.AgentMetrics, error)

	// AgentOverTimeMetricsFunc mocks the AgentOverTimeMetrics method.
	AgentOverTimeMetricsFunc func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTime, error)

	// AgentsFunc mocks the Agents method.
	AgentsFunc func(contextMoqParam context.Context, s string, agentsParams types.AgentsParams) (types.Agents, error)

	// AllCoreInstanceFilesFunc mocks the AllCoreInstanceFiles method.
	AllCoreInstanceFilesFunc func(contextMoqParam context.Context, s string) ([]types.CoreInstanceFile, error)

	// AllCoreInstanceSecretsFunc mocks the AllCoreInstanceSecrets method.
	AllCoreInstanceSecretsFunc func(contextMoqParam context.Context, s string) ([]types.CoreInstanceSecret, error)

	// ClusterObjectFunc mocks the ClusterObject method.
	ClusterObjectFunc func(contextMoqParam context.Context, s string) (types.ClusterObject, error)

	// ClusterObjectRegexFunc mocks the ClusterObjectRegex method.
	ClusterObjectRegexFunc func(contextMoqParam context.Context, s string) (types.ClusterObjectRegex, error)

	// ClusterObjectRegexesFunc mocks the ClusterObjectRegexes method.
	ClusterObjectRegexesFunc func(contextMoqParam context.Context, listClusterObjectRegexes types.ListClusterObjectRegexes) (types.ClusterObjectRegexes, error)

	// ClusterObjectsFunc mocks the ClusterObjects method.
	ClusterObjectsFunc func(contextMoqParam context.Context, s string, clusterObjectParams types.ClusterObjectParams) (types.ClusterObjects, error)

	// ConfigSectionFunc mocks the ConfigSection method.
	ConfigSectionFunc func(contextMoqParam context.Context, s string) (types.ConfigSection, error)

	// ConfigSectionsFunc mocks the ConfigSections method.
	ConfigSectionsFunc func(contextMoqParam context.Context, s string, configSectionsParams types.ConfigSectionsParams) (types.ConfigSections, error)

	// CoreInstanceFunc mocks the CoreInstance method.
	CoreInstanceFunc func(contextMoqParam context.Context, s string) (types.CoreInstance, error)

	// CoreInstanceCheckFunc mocks the CoreInstanceCheck method.
	CoreInstanceCheckFunc func(contextMoqParam context.Context, s string) (types.CoreInstanceCheck, error)

	// CoreInstanceChecksFunc mocks the CoreInstanceChecks method.
	CoreInstanceChecksFunc func(contextMoqParam context.Context, s string, coreInstanceChecksParams types.CoreInstanceChecksParams) (types.CoreInstanceChecks, error)

	// CoreInstanceFilesFunc mocks the CoreInstanceFiles method.
	CoreInstanceFilesFunc func(contextMoqParam context.Context, listCoreInstanceFiles types.ListCoreInstanceFiles) (types.CoreInstanceFiles, error)

	// CoreInstanceMetricsFunc mocks the CoreInstanceMetrics method.
	CoreInstanceMetricsFunc func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummary, error)

	// CoreInstanceMetricsByPluginFunc mocks the CoreInstanceMetricsByPlugin method.
	CoreInstanceMetricsByPluginFunc func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummaryPlugin, error)

	// CoreInstanceMetricsOverTimeByPluginFunc mocks the CoreInstanceMetricsOverTimeByPlugin method.
	CoreInstanceMetricsOverTimeByPluginFunc func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTimeByPlugin, error)

	// CoreInstanceMetricsV1Func mocks the CoreInstanceMetricsV1 method.
	CoreInstanceMetricsV1Func func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.CoreInstanceMetricsV1, error)

	// CoreInstanceOverTimeMetricsFunc mocks the CoreInstanceOverTimeMetrics method.
	CoreInstanceOverTimeMetricsFunc func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTime, error)

	// CoreInstancePingFunc mocks the CoreInstancePing method.
	CoreInstancePingFunc func(contextMoqParam context.Context, s string) (types.CoreInstancePingResponse, error)

	// CoreInstanceSecretsFunc mocks the CoreInstanceSecrets method.
	CoreInstanceSecretsFunc func(contextMoqParam context.Context, listCoreInstanceSecrets types.ListCoreInstanceSecrets) (types.CoreInstanceSecrets, error)

	// CoreInstancesFunc mocks the CoreInstances method.
	CoreInstancesFunc func(contextMoqParam context.Context, s string, coreInstancesParams types.CoreInstancesParams) (types.CoreInstances, error)

	// CreateAWSContractFromTokenFunc mocks the CreateAWSContractFromToken method.
	CreateAWSContractFromTokenFunc func(contextMoqParam context.Context, createAWSContractFromToken types.CreateAWSContractFromToken) error

	// CreateAgentErrorFunc mocks the CreateAgentError method.
	CreateAgentErrorFunc func(contextMoqParam context.Context, createAgentError types.CreateAgentError) (types.Created, error)

	// CreateClusterObjectFunc mocks the CreateClusterObject method.
	CreateClusterObjectFunc func(contextMoqParam context.Context, s string, createClusterObject types.CreateClusterObject) (types.Created, error)

	// CreateClusterObjectRegexFunc mocks the CreateClusterObjectRegex method.
	CreateClusterObjectRegexFunc func(contextMoqParam context.Context, createClusterObjectRegex types.CreateClusterObjectRegex) (types.Created, error)

	// CreateConfigSectionFunc mocks the CreateConfigSection method.
	CreateConfigSectionFunc func(contextMoqParam context.Context, s string, createConfigSection types.CreateConfigSection) (types.Created, error)

	// CreateCoreInstanceFunc mocks the CreateCoreInstance method.
	CreateCoreInstanceFunc func(contextMoqParam context.Context, createCoreInstance types.CreateCoreInstance) (types.CreatedCoreInstance, error)

	// CreateCoreInstanceCheckFunc mocks the CreateCoreInstanceCheck method.
	CreateCoreInstanceCheckFunc func(contextMoqParam context.Context, s string, check types.Check) (types.Created, error)

	// CreateCoreInstanceFileFunc mocks the CreateCoreInstanceFile method.
	CreateCoreInstanceFileFunc func(contextMoqParam context.Context, createCoreInstanceFile types.CreateCoreInstanceFile) (types.Created, error)

	// CreateCoreInstanceSecretFunc mocks the CreateCoreInstanceSecret method.
	CreateCoreInstanceSecretFunc func(contextMoqParam context.Context, createCoreInstanceSecret types.CreateCoreInstanceSecret) (types.Created, error)

	// CreateEnvironmentFunc mocks the CreateEnvironment method.
	CreateEnvironmentFunc func(contextMoqParam context.Context, s string, createEnvironment types.CreateEnvironment) (types.CreatedEnvironment, error)

	// CreateFleetFunc mocks the CreateFleet method.
	CreateFleetFunc func(contextMoqParam context.Context, createFleet types.CreateFleet) (types.Created, error)

	// CreateIngestCheckFunc mocks the CreateIngestCheck method.
	CreateIngestCheckFunc func(contextMoqParam context.Context, s string, createIngestCheck types.CreateIngestCheck) (types.Created, error)

	// CreateInvitationFunc mocks the CreateInvitation method.
	CreateInvitationFunc func(contextMoqParam context.Context, s string, createInvitation types.CreateInvitation) error

	// CreatePipelineFunc mocks the CreatePipeline method.
	CreatePipelineFunc func(contextMoqParam context.Context, s string, createPipeline types.CreatePipeline) (types.CreatedPipeline, error)

	// CreatePipelineCheckFunc mocks the CreatePipelineCheck method.
	CreatePipelineCheckFunc func(contextMoqParam context.Context, s string, createPipelineCheck types.CreatePipelineCheck) (types.Created, error)

	// CreatePipelineFileFunc mocks the CreatePipelineFile method.
	CreatePipelineFileFunc func(contextMoqParam context.Context, s string, createPipelineFile types.CreatePipelineFile) (types.Created, error)

	// CreatePipelinePortFunc mocks the CreatePipelinePort method.
	CreatePipelinePortFunc func(contextMoqParam context.Context, s string, createPipelinePort types.CreatePipelinePort) (types.CreatedPipelinePort, error)

	// CreatePipelineSecretFunc mocks the CreatePipelineSecret method.
	CreatePipelineSecretFunc func(contextMoqParam context.Context, s string, createPipelineSecret types.CreatePipelineSecret) (types.Created, error)

	// CreateProcessingRuleFunc mocks the CreateProcessingRule method.
	CreateProcessingRuleFunc func(contextMoqParam context.Context, createProcessingRule types.CreateProcessingRule) (types.CreatedProcessingRule, error)

	// CreateProcessingRuleTemplateFunc mocks the CreateProcessingRuleTemplate method.
	CreateProcessingRuleTemplateFunc func(contextMoqParam context.Context, createProcessingRuleTemplate types.CreateProcessingRuleTemplate) (types.Created, error)

	// CreateProjectFunc mocks the CreateProject method.
	CreateProjectFunc func(contextMoqParam context.Context, createProject types.CreateProject) (types.CreatedProject, error)

	// CreateResourceProfileFunc mocks the CreateResourceProfile method.
	CreateResourceProfileFunc func(contextMoqParam context.Context, s string, createResourceProfile types.CreateResourceProfile) (types.Created, error)

	// CreateTokenFunc mocks the CreateToken method.
	CreateTokenFunc func(contextMoqParam context.Context, s string, createToken types.CreateToken) (types.Token, error)

	// CreateTraceRecordFunc mocks the CreateTraceRecord method.
	CreateTraceRecordFunc func(contextMoqParam context.Context, s string, createTraceRecord types.CreateTraceRecord) (types.CreatedTraceRecord, error)

	// CreateTraceSessionFunc mocks the CreateTraceSession method.
	CreateTraceSessionFunc func(contextMoqParam context.Context, s string, createTraceSession types.CreateTraceSession) (types.Created, error)

	// DeleteAgentFunc mocks the DeleteAgent method.
	DeleteAgentFunc func(contextMoqParam context.Context, s string) error

	// DeleteAgentsFunc mocks the DeleteAgents method.
	DeleteAgentsFunc func(contextMoqParam context.Context, s string, strings ...string) error

	// DeleteClusterObjectFunc mocks the DeleteClusterObject method.
	DeleteClusterObjectFunc func(contextMoqParam context.Context, s string) error

	// DeleteClusterObjectRegexFunc mocks the DeleteClusterObjectRegex method.
	DeleteClusterObjectRegexFunc func(contextMoqParam context.Context, s string) error

	// DeleteConfigSectionFunc mocks the DeleteConfigSection method.
	DeleteConfigSectionFunc func(contextMoqParam context.Context, s string) error

	// DeleteCoreInstanceFunc mocks the DeleteCoreInstance method.
	DeleteCoreInstanceFunc func(contextMoqParam context.Context, s string) error

	// DeleteCoreInstanceCheckFunc mocks the DeleteCoreInstanceCheck method.
	DeleteCoreInstanceCheckFunc func(contextMoqParam context.Context, s string) error

	// DeleteCoreInstanceFileFunc mocks the DeleteCoreInstanceFile method.
	DeleteCoreInstanceFileFunc func(contextMoqParam context.Context, s string) (types.Deleted, error)

	// DeleteCoreInstanceSecretFunc mocks the DeleteCoreInstanceSecret method.
	DeleteCoreInstanceSecretFunc func(contextMoqParam context.Context, s string) (types.Deleted, error)

	// DeleteCoreInstancesFunc mocks the DeleteCoreInstances method.
	DeleteCoreInstancesFunc func(contextMoqParam context.Context, s string, strings ...string) error

	// DeleteEnvironmentFunc mocks the DeleteEnvironment method.
	DeleteEnvironmentFunc func(contextMoqParam context.Context, s string) error

	// DeleteFleetFunc mocks the DeleteFleet method.
	DeleteFleetFunc func(contextMoqParam context.Context, s string) (types.Deleted, error)

	// DeleteIngestCheckFunc mocks the DeleteIngestCheck method.
	DeleteIngestCheckFunc func(contextMoqParam context.Context, s string) error

	// DeletePipelineFunc mocks the DeletePipeline method.
	DeletePipelineFunc func(contextMoqParam context.Context, s string) error

	// DeletePipelineCheckFunc mocks the DeletePipelineCheck method.
	DeletePipelineCheckFunc func(contextMoqParam context.Context, s string) error

	// DeletePipelineClusterObjectsFunc mocks the DeletePipelineClusterObjects method.
	DeletePipelineClusterObjectsFunc func(contextMoqParam context.Context, s string, strings ...string) error

	// DeletePipelineFileFunc mocks the DeletePipelineFile method.
	DeletePipelineFileFunc func(contextMoqParam context.Context, s string) error

	// DeletePipelinePortFunc mocks the DeletePipelinePort method.
	DeletePipelinePortFunc func(contextMoqParam context.Context, s string) error

	// DeletePipelineSecretFunc mocks the DeletePipelineSecret method.
	DeletePipelineSecretFunc func(contextMoqParam context.Context, s string) error

	// DeletePipelinesFunc mocks the DeletePipelines method.
	DeletePipelinesFunc func(contextMoqParam context.Context, s string, strings ...string) error

	// DeleteProcessingRuleFunc mocks the DeleteProcessingRule method.
	DeleteProcessingRuleFunc func(contextMoqParam context.Context, s string) error

	// DeleteProcessingRuleTemplateFunc mocks the DeleteProcessingRuleTemplate method.
	DeleteProcessingRuleTemplateFunc func(contextMoqParam context.Context, s string) (types.Deleted, error)

	// DeleteResourceProfileFunc mocks the DeleteResourceProfile method.
	DeleteResourceProfileFunc func(contextMoqParam context.Context, s string) error

	// DeleteTokenFunc mocks the DeleteToken method.
	DeleteTokenFunc func(contextMoqParam context.Context, s string) error

	// DismissAgentErrorFunc mocks the DismissAgentError method.
	DismissAgentErrorFunc func(contextMoqParam context.Context, dismissAgentError types.DismissAgentError) (types.DismissedAgentError, error)

	// EnvironmentsFunc mocks the Environments method.
	EnvironmentsFunc func(contextMoqParam context.Context, s string, environmentsParams types.EnvironmentsParams) (types.Environments, error)

	// FleetFunc mocks the Fleet method.
	FleetFunc func(contextMoqParam context.Context, fleetParams types.FleetParams) (types.Fleet, error)

	// FleetConfigFunc mocks the FleetConfig method.
	FleetConfigFunc func(contextMoqParam context.Context, s string, fleetConfigParams types.FleetConfigParams) (*fluentbitconfig.Config, error)

	// FleetsFunc mocks the Fleets method.
	FleetsFunc func(contextMoqParam context.Context, fleetsParams types.FleetsParams) (types.Fleets, error)

	// HealthFunc mocks the Health method.
	HealthFunc func(contextMoqParam context.Context) (types.Health, error)

	// IngestCheckFunc mocks the IngestCheck method.
	IngestCheckFunc func(contextMoqParam context.Context, s string) (types.IngestCheck, error)

	// IngestChecksFunc mocks the IngestChecks method.
	IngestChecksFunc func(contextMoqParam context.Context, s string, ingestChecksParams types.IngestChecksParams) (types.IngestChecks, error)

	// MembersFunc mocks the Members method.
	MembersFunc func(contextMoqParam context.Context, s string, membersParams types.MembersParams) (types.Memberships, error)

	// PipelineFunc mocks the Pipeline method.
	PipelineFunc func(contextMoqParam context.Context, s string, pipelineParams types.PipelineParams) (types.Pipeline, error)

	// PipelineCheckFunc mocks the PipelineCheck method.
	PipelineCheckFunc func(contextMoqParam context.Context, s string) (types.PipelineCheck, error)

	// PipelineChecksFunc mocks the PipelineChecks method.
	PipelineChecksFunc func(contextMoqParam context.Context, s string, pipelineChecksParams types.PipelineChecksParams) (types.PipelineChecks, error)

	// PipelineClusterObjectsFunc mocks the PipelineClusterObjects method.
	PipelineClusterObjectsFunc func(contextMoqParam context.Context, s string, pipelineClusterObjectsParams types.PipelineClusterObjectsParams) (types.ClusterObjects, error)

	// PipelineConfigHistoryFunc mocks the PipelineConfigHistory method.
	PipelineConfigHistoryFunc func(contextMoqParam context.Context, s string, pipelineConfigHistoryParams types.PipelineConfigHistoryParams) (types.PipelineConfigHistory, error)

	// PipelineFileFunc mocks the PipelineFile method.
	PipelineFileFunc func(contextMoqParam context.Context, s string) (types.PipelineFile, error)

	// PipelineFilesFunc mocks the PipelineFiles method.
	PipelineFilesFunc func(contextMoqParam context.Context, s string, pipelineFilesParams types.PipelineFilesParams) (types.PipelineFiles, error)

	// PipelineMetadataFunc mocks the PipelineMetadata method.
	PipelineMetadataFunc func(contextMoqParam context.Context, s string, strings ...string) (types.PipelineMetadata, error)

	// PipelineMetricsFunc mocks the PipelineMetrics method.
	PipelineMetricsFunc func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummary, error)

	// PipelineMetricsByPluginFunc mocks the PipelineMetricsByPlugin method.
	PipelineMetricsByPluginFunc func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummaryPlugin, error)

	// PipelineMetricsOverTimeByPluginFunc mocks the PipelineMetricsOverTimeByPlugin method.
	PipelineMetricsOverTimeByPluginFunc func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTimeByPlugin, error)

	// PipelineMetricsV1Func mocks the PipelineMetricsV1 method.
	PipelineMetricsV1Func func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.AgentMetrics, error)

	// PipelineOverTimeMetricsFunc mocks the PipelineOverTimeMetrics method.
	PipelineOverTimeMetricsFunc func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTime, error)

	// PipelinePortFunc mocks the PipelinePort method.
	PipelinePortFunc func(contextMoqParam context.Context, s string) (types.PipelinePort, error)

	// PipelinePortsFunc mocks the PipelinePorts method.
	PipelinePortsFunc func(contextMoqParam context.Context, s string, pipelinePortsParams types.PipelinePortsParams) (types.PipelinePorts, error)

	// PipelineSecretFunc mocks the PipelineSecret method.
	PipelineSecretFunc func(contextMoqParam context.Context, s string) (types.PipelineSecret, error)

	// PipelineSecretsFunc mocks the PipelineSecrets method.
	PipelineSecretsFunc func(contextMoqParam context.Context, s string, pipelineSecretsParams types.PipelineSecretsParams) (types.PipelineSecrets, error)

	// PipelineStatusHistoryFunc mocks the PipelineStatusHistory method.
	PipelineStatusHistoryFunc func(contextMoqParam context.Context, s string, pipelineStatusHistoryParams types.PipelineStatusHistoryParams) (types.PipelineStatusHistory, error)

	// PipelinesFunc mocks the Pipelines method.
	PipelinesFunc func(contextMoqParam context.Context, pipelinesParams types.PipelinesParams) (types.Pipelines, error)

	// PipelinesMetricsV1Func mocks the PipelinesMetricsV1 method.
	PipelinesMetricsV1Func func(contextMoqParam context.Context, s string, pipelinesMetricsParams types.PipelinesMetricsParams) (types.PipelinesMetrics, error)

	// PreviewProcessingRuleFunc mocks the PreviewProcessingRule method.
	PreviewProcessingRuleFunc func(contextMoqParam context.Context, previewProcessingRule types.PreviewProcessingRule) ([]types.FluentBitLog, error)

	// ProcessingRuleFunc mocks the ProcessingRule method.
	ProcessingRuleFunc func(contextMoqParam context.Context, s string) (types.ProcessingRule, error)

	// ProcessingRuleTemplatesFunc mocks the ProcessingRuleTemplates method.
	ProcessingRuleTemplatesFunc func(contextMoqParam context.Context, listProcessingRuleTemplates types.ListProcessingRuleTemplates) (types.ProcessingRuleTemplates, error)

	// ProcessingRulesFunc mocks the ProcessingRules method.
	ProcessingRulesFunc func(contextMoqParam context.Context, processingRulesParams types.ProcessingRulesParams) (types.ProcessingRules, error)

	// ProjectFunc mocks the Project method.
	ProjectFunc func(contextMoqParam context.Context, s string) (types.Project, error)

	// ProjectMetricsV1Func mocks the ProjectMetricsV1 method.
	ProjectMetricsV1Func func(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.ProjectMetrics, error)

	// ProjectsFunc mocks the Projects method.
	ProjectsFunc func(contextMoqParam context.Context, projectsParams types.ProjectsParams) (types.Projects, error)

	// PushAWSMarketplaceSubscriptionNotificationFunc mocks the PushAWSMarketplaceSubscriptionNotification method.
	PushAWSMarketplaceSubscriptionNotificationFunc func(contextMoqParam context.Context, aWSMarketplaceSubscriptionNotification types.AWSMarketplaceSubscriptionNotification) error

	// RegisterAgentFunc mocks the RegisterAgent method.
	RegisterAgentFunc func(contextMoqParam context.Context, registerAgent types.RegisterAgent) (types.RegisteredAgent, error)

	// ResourceProfileFunc mocks the ResourceProfile method.
	ResourceProfileFunc func(contextMoqParam context.Context, s string) (types.ResourceProfile, error)

	// ResourceProfilesFunc mocks the ResourceProfiles method.
	ResourceProfilesFunc func(contextMoqParam context.Context, s string, resourceProfilesParams types.ResourceProfilesParams) (types.ResourceProfiles, error)

	// SearchFunc mocks the Search method.
	SearchFunc func(contextMoqParam context.Context, searchQuery types.SearchQuery) ([]types.SearchResult, error)

	// SendVerificationEmailFunc mocks the SendVerificationEmail method.
	SendVerificationEmailFunc func(contextMoqParam context.Context) error

	// SetAgentTokenFunc mocks the SetAgentToken method.
	SetAgentTokenFunc func(s string)

	// SetCoreInstanceTokenFunc mocks the SetCoreInstanceToken method.
	SetCoreInstanceTokenFunc func(s string)

	// SetProjectTokenFunc mocks the SetProjectToken method.
	SetProjectTokenFunc func(s string)

	// SetUserAgentFunc mocks the SetUserAgent method.
	SetUserAgentFunc func(s string)

	// TerminateActiveTraceSessionFunc mocks the TerminateActiveTraceSession method.
	TerminateActiveTraceSessionFunc func(contextMoqParam context.Context, s string) (types.TerminatedTraceSession, error)

	// TokenFunc mocks the Token method.
	TokenFunc func(contextMoqParam context.Context, s string) (types.Token, error)

	// TokensFunc mocks the Tokens method.
	TokensFunc func(contextMoqParam context.Context, s string, tokensParams types.TokensParams) (types.Tokens, error)

	// TraceRecordsFunc mocks the TraceRecords method.
	TraceRecordsFunc func(contextMoqParam context.Context, s string, traceRecordsParams types.TraceRecordsParams) (types.TraceRecords, error)

	// TraceSessionFunc mocks the TraceSession method.
	TraceSessionFunc func(contextMoqParam context.Context, s string) (types.TraceSession, error)

	// TraceSessionsFunc mocks the TraceSessions method.
	TraceSessionsFunc func(contextMoqParam context.Context, s string, traceSessionsParams types.TraceSessionsParams) (types.TraceSessions, error)

	// UpdateAgentFunc mocks the UpdateAgent method.
	UpdateAgentFunc func(contextMoqParam context.Context, s string, updateAgent types.UpdateAgent) error

	// UpdateClusterObjectFunc mocks the UpdateClusterObject method.
	UpdateClusterObjectFunc func(contextMoqParam context.Context, s string, updateClusterObject types.UpdateClusterObject) error

	// UpdateClusterObjectRegexFunc mocks the UpdateClusterObjectRegex method.
	UpdateClusterObjectRegexFunc func(contextMoqParam context.Context, updateClusterObjectRegex types.UpdateClusterObjectRegex) (types.Updated, error)

	// UpdateConfigSectionFunc mocks the UpdateConfigSection method.
	UpdateConfigSectionFunc func(contextMoqParam context.Context, s string, updateConfigSection types.UpdateConfigSection) (types.Updated, error)

	// UpdateConfigSectionSetFunc mocks the UpdateConfigSectionSet method.
	UpdateConfigSectionSetFunc func(contextMoqParam context.Context, s string, strings ...string) error

	// UpdateCoreInstanceFunc mocks the UpdateCoreInstance method.
	UpdateCoreInstanceFunc func(contextMoqParam context.Context, s string, updateCoreInstance types.UpdateCoreInstance) error

	// UpdateCoreInstanceCheckFunc mocks the UpdateCoreInstanceCheck method.
	UpdateCoreInstanceCheckFunc func(contextMoqParam context.Context, s string, updateCoreInstanceCheck types.UpdateCoreInstanceCheck) error

	// UpdateCoreInstanceFileFunc mocks the UpdateCoreInstanceFile method.
	UpdateCoreInstanceFileFunc func(contextMoqParam context.Context, updateCoreInstanceFile types.UpdateCoreInstanceFile) (types.Updated, error)

	// UpdateCoreInstanceSecretFunc mocks the UpdateCoreInstanceSecret method.
	UpdateCoreInstanceSecretFunc func(contextMoqParam context.Context, updateCoreInstanceSecret types.UpdateCoreInstanceSecret) (types.Updated, error)

	// UpdateEnvironmentFunc mocks the UpdateEnvironment method.
	UpdateEnvironmentFunc func(contextMoqParam context.Context, s string, updateEnvironment types.UpdateEnvironment) error

	// UpdateFleetFunc mocks the UpdateFleet method.
	UpdateFleetFunc func(contextMoqParam context.Context, updateFleet types.UpdateFleet) (types.Updated, error)

	// UpdateIngestCheckFunc mocks the UpdateIngestCheck method.
	UpdateIngestCheckFunc func(contextMoqParam context.Context, s string, updateIngestCheck types.UpdateIngestCheck) error

	// UpdateMemberFunc mocks the UpdateMember method.
	UpdateMemberFunc func(contextMoqParam context.Context, updateMember types.UpdateMember) error

	// UpdatePipelineFunc mocks the UpdatePipeline method.
	UpdatePipelineFunc func(contextMoqParam context.Context, s string, updatePipeline types.UpdatePipeline) (types.UpdatedPipeline, error)

	// UpdatePipelineCheckFunc mocks the UpdatePipelineCheck method.
	UpdatePipelineCheckFunc func(contextMoqParam context.Context, s string, updatePipelineCheck types.UpdatePipelineCheck) error

	// UpdatePipelineClusterObjectsFunc mocks the UpdatePipelineClusterObjects method.
	UpdatePipelineClusterObjectsFunc func(contextMoqParam context.Context, s string, updatePipelineClusterObjects types.UpdatePipelineClusterObjects) error

	// UpdatePipelineFileFunc mocks the UpdatePipelineFile method.
	UpdatePipelineFileFunc func(contextMoqParam context.Context, s string, updatePipelineFile types.UpdatePipelineFile) error

	// UpdatePipelineMetadataFunc mocks the UpdatePipelineMetadata method.
	UpdatePipelineMetadataFunc func(contextMoqParam context.Context, s string, updatePipelineMetadata types.UpdatePipelineMetadata) error

	// UpdatePipelinePortFunc mocks the UpdatePipelinePort method.
	UpdatePipelinePortFunc func(contextMoqParam context.Context, s string, updatePipelinePort types.UpdatePipelinePort) error

	// UpdatePipelineSecretFunc mocks the UpdatePipelineSecret method.
	UpdatePipelineSecretFunc func(contextMoqParam context.Context, s string, updatePipelineSecret types.UpdatePipelineSecret) error

	// UpdateProcessingRuleFunc mocks the UpdateProcessingRule method.
	UpdateProcessingRuleFunc func(contextMoqParam context.Context, updateProcessingRule types.UpdateProcessingRule) (types.Updated, error)

	// UpdateProcessingRuleTemplateFunc mocks the UpdateProcessingRuleTemplate method.
	UpdateProcessingRuleTemplateFunc func(contextMoqParam context.Context, updateProcessingRuleTemplate types.UpdateProcessingRuleTemplate) (types.Updated, error)

	// UpdateProjectFunc mocks the UpdateProject method.
	UpdateProjectFunc func(contextMoqParam context.Context, s string, updateProject types.UpdateProject) error

	// UpdateResourceProfileFunc mocks the UpdateResourceProfile method.
	UpdateResourceProfileFunc func(contextMoqParam context.Context, s string, updateResourceProfile types.UpdateResourceProfile) error

	// UpdateTokenFunc mocks the UpdateToken method.
	UpdateTokenFunc func(contextMoqParam context.Context, updateToken types.UpdateToken) error

	// UpdateTraceSessionFunc mocks the UpdateTraceSession method.
	UpdateTraceSessionFunc func(contextMoqParam context.Context, s string, updateTraceSession types.UpdateTraceSession) (types.Updated, error)

	// ValidateConfigFunc mocks the ValidateConfig method.
	ValidateConfigFunc func(contextMoqParam context.Context, agentType types.AgentType, validatingConfig types.ValidatingConfig) (types.ValidatedConfig, error)

	// ValidateConfigV2Func mocks the ValidateConfigV2 method.
	ValidateConfigV2Func func(contextMoqParam context.Context, validatingConfig types.ValidatingConfig) (types.ValidatedConfigV2, error)

	// calls tracks calls to the methods.
	calls struct {
		// AWSCustomerRedirect holds details about calls to the AWSCustomerRedirect method.
		AWSCustomerRedirect []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// AcceptInvitation holds details about calls to the AcceptInvitation method.
		AcceptInvitation []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AcceptInvitation is the acceptInvitation argument value.
			AcceptInvitation types.AcceptInvitation
		}
		// ActiveTraceSession holds details about calls to the ActiveTraceSession method.
		ActiveTraceSession []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// AddAgentMetricsV1 holds details about calls to the AddAgentMetricsV1 method.
		AddAgentMetricsV1 []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// Metrics is the metrics argument value.
			Metrics []types.Metric
		}
		// Agent holds details about calls to the Agent method.
		Agent []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// AgentConfigHistory holds details about calls to the AgentConfigHistory method.
		AgentConfigHistory []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// AgentConfigHistoryParams is the agentConfigHistoryParams argument value.
			AgentConfigHistoryParams types.AgentConfigHistoryParams
		}
		// AgentErrors holds details about calls to the AgentErrors method.
		AgentErrors []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListAgentErrors is the listAgentErrors argument value.
			ListAgentErrors types.ListAgentErrors
		}
		// AgentMetrics holds details about calls to the AgentMetrics method.
		AgentMetrics []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// AgentMetricsByPlugin holds details about calls to the AgentMetricsByPlugin method.
		AgentMetricsByPlugin []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// AgentMetricsOverTimeByPlugin holds details about calls to the AgentMetricsOverTimeByPlugin method.
		AgentMetricsOverTimeByPlugin []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// AgentMetricsV1 holds details about calls to the AgentMetricsV1 method.
		AgentMetricsV1 []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// AgentOverTimeMetrics holds details about calls to the AgentOverTimeMetrics method.
		AgentOverTimeMetrics []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// Agents holds details about calls to the Agents method.
		Agents []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// AgentsParams is the agentsParams argument value.
			AgentsParams types.AgentsParams
		}
		// AllCoreInstanceFiles holds details about calls to the AllCoreInstanceFiles method.
		AllCoreInstanceFiles []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// AllCoreInstanceSecrets holds details about calls to the AllCoreInstanceSecrets method.
		AllCoreInstanceSecrets []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// ClusterObject holds details about calls to the ClusterObject method.
		ClusterObject []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// ClusterObjectRegex holds details about calls to the ClusterObjectRegex method.
		ClusterObjectRegex []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// ClusterObjectRegexes holds details about calls to the ClusterObjectRegexes method.
		ClusterObjectRegexes []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListClusterObjectRegexes is the listClusterObjectRegexes argument value.
			ListClusterObjectRegexes types.ListClusterObjectRegexes
		}
		// ClusterObjects holds details about calls to the ClusterObjects method.
		ClusterObjects []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// ClusterObjectParams is the clusterObjectParams argument value.
			ClusterObjectParams types.ClusterObjectParams
		}
		// ConfigSection holds details about calls to the ConfigSection method.
		ConfigSection []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// ConfigSections holds details about calls to the ConfigSections method.
		ConfigSections []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// ConfigSectionsParams is the configSectionsParams argument value.
			ConfigSectionsParams types.ConfigSectionsParams
		}
		// CoreInstance holds details about calls to the CoreInstance method.
		CoreInstance []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// CoreInstanceCheck holds details about calls to the CoreInstanceCheck method.
		CoreInstanceCheck []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// CoreInstanceChecks holds details about calls to the CoreInstanceChecks method.
		CoreInstanceChecks []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CoreInstanceChecksParams is the coreInstanceChecksParams argument value.
			CoreInstanceChecksParams types.CoreInstanceChecksParams
		}
		// CoreInstanceFiles holds details about calls to the CoreInstanceFiles method.
		CoreInstanceFiles []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListCoreInstanceFiles is the listCoreInstanceFiles argument value.
			ListCoreInstanceFiles types.ListCoreInstanceFiles
		}
		// CoreInstanceMetrics holds details about calls to the CoreInstanceMetrics method.
		CoreInstanceMetrics []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// CoreInstanceMetricsByPlugin holds details about calls to the CoreInstanceMetricsByPlugin method.
		CoreInstanceMetricsByPlugin []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// CoreInstanceMetricsOverTimeByPlugin holds details about calls to the CoreInstanceMetricsOverTimeByPlugin method.
		CoreInstanceMetricsOverTimeByPlugin []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// CoreInstanceMetricsV1 holds details about calls to the CoreInstanceMetricsV1 method.
		CoreInstanceMetricsV1 []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// CoreInstanceOverTimeMetrics holds details about calls to the CoreInstanceOverTimeMetrics method.
		CoreInstanceOverTimeMetrics []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// CoreInstancePing holds details about calls to the CoreInstancePing method.
		CoreInstancePing []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// CoreInstanceSecrets holds details about calls to the CoreInstanceSecrets method.
		CoreInstanceSecrets []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListCoreInstanceSecrets is the listCoreInstanceSecrets argument value.
			ListCoreInstanceSecrets types.ListCoreInstanceSecrets
		}
		// CoreInstances holds details about calls to the CoreInstances method.
		CoreInstances []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CoreInstancesParams is the coreInstancesParams argument value.
			CoreInstancesParams types.CoreInstancesParams
		}
		// CreateAWSContractFromToken holds details about calls to the CreateAWSContractFromToken method.
		CreateAWSContractFromToken []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateAWSContractFromToken is the createAWSContractFromToken argument value.
			CreateAWSContractFromToken types.CreateAWSContractFromToken
		}
		// CreateAgentError holds details about calls to the CreateAgentError method.
		CreateAgentError []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateAgentError is the createAgentError argument value.
			CreateAgentError types.CreateAgentError
		}
		// CreateClusterObject holds details about calls to the CreateClusterObject method.
		CreateClusterObject []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CreateClusterObject is the createClusterObject argument value.
			CreateClusterObject types.CreateClusterObject
		}
		// CreateClusterObjectRegex holds details about calls to the CreateClusterObjectRegex method.
		CreateClusterObjectRegex []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateClusterObjectRegex is the createClusterObjectRegex argument value.
			CreateClusterObjectRegex types.CreateClusterObjectRegex
		}
		// CreateConfigSection holds details about calls to the CreateConfigSection method.
		CreateConfigSection []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CreateConfigSection is the createConfigSection argument value.
			CreateConfigSection types.CreateConfigSection
		}
		// CreateCoreInstance holds details about calls to the CreateCoreInstance method.
		CreateCoreInstance []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateCoreInstance is the createCoreInstance argument value.
			CreateCoreInstance types.CreateCoreInstance
		}
		// CreateCoreInstanceCheck holds details about calls to the CreateCoreInstanceCheck method.
		CreateCoreInstanceCheck []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// Check is the check argument value.
			Check types.Check
		}
		// CreateCoreInstanceFile holds details about calls to the CreateCoreInstanceFile method.
		CreateCoreInstanceFile []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateCoreInstanceFile is the createCoreInstanceFile argument value.
			CreateCoreInstanceFile types.CreateCoreInstanceFile
		}
		// CreateCoreInstanceSecret holds details about calls to the CreateCoreInstanceSecret method.
		CreateCoreInstanceSecret []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateCoreInstanceSecret is the createCoreInstanceSecret argument value.
			CreateCoreInstanceSecret types.CreateCoreInstanceSecret
		}
		// CreateEnvironment holds details about calls to the CreateEnvironment method.
		CreateEnvironment []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CreateEnvironment is the createEnvironment argument value.
			CreateEnvironment types.CreateEnvironment
		}
		// CreateFleet holds details about calls to the CreateFleet method.
		CreateFleet []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateFleet is the createFleet argument value.
			CreateFleet types.CreateFleet
		}
		// CreateIngestCheck holds details about calls to the CreateIngestCheck method.
		CreateIngestCheck []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CreateIngestCheck is the createIngestCheck argument value.
			CreateIngestCheck types.CreateIngestCheck
		}
		// CreateInvitation holds details about calls to the CreateInvitation method.
		CreateInvitation []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CreateInvitation is the createInvitation argument value.
			CreateInvitation types.CreateInvitation
		}
		// CreatePipeline holds details about calls to the CreatePipeline method.
		CreatePipeline []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CreatePipeline is the createPipeline argument value.
			CreatePipeline types.CreatePipeline
		}
		// CreatePipelineCheck holds details about calls to the CreatePipelineCheck method.
		CreatePipelineCheck []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CreatePipelineCheck is the createPipelineCheck argument value.
			CreatePipelineCheck types.CreatePipelineCheck
		}
		// CreatePipelineFile holds details about calls to the CreatePipelineFile method.
		CreatePipelineFile []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CreatePipelineFile is the createPipelineFile argument value.
			CreatePipelineFile types.CreatePipelineFile
		}
		// CreatePipelinePort holds details about calls to the CreatePipelinePort method.
		CreatePipelinePort []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CreatePipelinePort is the createPipelinePort argument value.
			CreatePipelinePort types.CreatePipelinePort
		}
		// CreatePipelineSecret holds details about calls to the CreatePipelineSecret method.
		CreatePipelineSecret []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CreatePipelineSecret is the createPipelineSecret argument value.
			CreatePipelineSecret types.CreatePipelineSecret
		}
		// CreateProcessingRule holds details about calls to the CreateProcessingRule method.
		CreateProcessingRule []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateProcessingRule is the createProcessingRule argument value.
			CreateProcessingRule types.CreateProcessingRule
		}
		// CreateProcessingRuleTemplate holds details about calls to the CreateProcessingRuleTemplate method.
		CreateProcessingRuleTemplate []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateProcessingRuleTemplate is the createProcessingRuleTemplate argument value.
			CreateProcessingRuleTemplate types.CreateProcessingRuleTemplate
		}
		// CreateProject holds details about calls to the CreateProject method.
		CreateProject []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateProject is the createProject argument value.
			CreateProject types.CreateProject
		}
		// CreateResourceProfile holds details about calls to the CreateResourceProfile method.
		CreateResourceProfile []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CreateResourceProfile is the createResourceProfile argument value.
			CreateResourceProfile types.CreateResourceProfile
		}
		// CreateToken holds details about calls to the CreateToken method.
		CreateToken []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CreateToken is the createToken argument value.
			CreateToken types.CreateToken
		}
		// CreateTraceRecord holds details about calls to the CreateTraceRecord method.
		CreateTraceRecord []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CreateTraceRecord is the createTraceRecord argument value.
			CreateTraceRecord types.CreateTraceRecord
		}
		// CreateTraceSession holds details about calls to the CreateTraceSession method.
		CreateTraceSession []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// CreateTraceSession is the createTraceSession argument value.
			CreateTraceSession types.CreateTraceSession
		}
		// DeleteAgent holds details about calls to the DeleteAgent method.
		DeleteAgent []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeleteAgents holds details about calls to the DeleteAgents method.
		DeleteAgents []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// Strings is the strings argument value.
			Strings []string
		}
		// DeleteClusterObject holds details about calls to the DeleteClusterObject method.
		DeleteClusterObject []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeleteClusterObjectRegex holds details about calls to the DeleteClusterObjectRegex method.
		DeleteClusterObjectRegex []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeleteConfigSection holds details about calls to the DeleteConfigSection method.
		DeleteConfigSection []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeleteCoreInstance holds details about calls to the DeleteCoreInstance method.
		DeleteCoreInstance []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeleteCoreInstanceCheck holds details about calls to the DeleteCoreInstanceCheck method.
		DeleteCoreInstanceCheck []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeleteCoreInstanceFile holds details about calls to the DeleteCoreInstanceFile method.
		DeleteCoreInstanceFile []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeleteCoreInstanceSecret holds details about calls to the DeleteCoreInstanceSecret method.
		DeleteCoreInstanceSecret []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeleteCoreInstances holds details about calls to the DeleteCoreInstances method.
		DeleteCoreInstances []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// Strings is the strings argument value.
			Strings []string
		}
		// DeleteEnvironment holds details about calls to the DeleteEnvironment method.
		DeleteEnvironment []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeleteFleet holds details about calls to the DeleteFleet method.
		DeleteFleet []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeleteIngestCheck holds details about calls to the DeleteIngestCheck method.
		DeleteIngestCheck []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeletePipeline holds details about calls to the DeletePipeline method.
		DeletePipeline []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeletePipelineCheck holds details about calls to the DeletePipelineCheck method.
		DeletePipelineCheck []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeletePipelineClusterObjects holds details about calls to the DeletePipelineClusterObjects method.
		DeletePipelineClusterObjects []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// Strings is the strings argument value.
			Strings []string
		}
		// DeletePipelineFile holds details about calls to the DeletePipelineFile method.
		DeletePipelineFile []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeletePipelinePort holds details about calls to the DeletePipelinePort method.
		DeletePipelinePort []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeletePipelineSecret holds details about calls to the DeletePipelineSecret method.
		DeletePipelineSecret []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeletePipelines holds details about calls to the DeletePipelines method.
		DeletePipelines []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// Strings is the strings argument value.
			Strings []string
		}
		// DeleteProcessingRule holds details about calls to the DeleteProcessingRule method.
		DeleteProcessingRule []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeleteProcessingRuleTemplate holds details about calls to the DeleteProcessingRuleTemplate method.
		DeleteProcessingRuleTemplate []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeleteResourceProfile holds details about calls to the DeleteResourceProfile method.
		DeleteResourceProfile []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DeleteToken holds details about calls to the DeleteToken method.
		DeleteToken []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// DismissAgentError holds details about calls to the DismissAgentError method.
		DismissAgentError []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DismissAgentError is the dismissAgentError argument value.
			DismissAgentError types.DismissAgentError
		}
		// Environments holds details about calls to the Environments method.
		Environments []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// EnvironmentsParams is the environmentsParams argument value.
			EnvironmentsParams types.EnvironmentsParams
		}
		// Fleet holds details about calls to the Fleet method.
		Fleet []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// FleetParams is the fleetParams argument value.
			FleetParams types.FleetParams
		}
		// FleetConfig holds details about calls to the FleetConfig method.
		FleetConfig []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// FleetConfigParams is the fleetConfigParams argument value.
			FleetConfigParams types.FleetConfigParams
		}
		// Fleets holds details about calls to the Fleets method.
		Fleets []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// FleetsParams is the fleetsParams argument value.
			FleetsParams types.FleetsParams
		}
		// Health holds details about calls to the Health method.
		Health []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// IngestCheck holds details about calls to the IngestCheck method.
		IngestCheck []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// IngestChecks holds details about calls to the IngestChecks method.
		IngestChecks []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// IngestChecksParams is the ingestChecksParams argument value.
			IngestChecksParams types.IngestChecksParams
		}
		// Members holds details about calls to the Members method.
		Members []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MembersParams is the membersParams argument value.
			MembersParams types.MembersParams
		}
		// Pipeline holds details about calls to the Pipeline method.
		Pipeline []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// PipelineParams is the pipelineParams argument value.
			PipelineParams types.PipelineParams
		}
		// PipelineCheck holds details about calls to the PipelineCheck method.
		PipelineCheck []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// PipelineChecks holds details about calls to the PipelineChecks method.
		PipelineChecks []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// PipelineChecksParams is the pipelineChecksParams argument value.
			PipelineChecksParams types.PipelineChecksParams
		}
		// PipelineClusterObjects holds details about calls to the PipelineClusterObjects method.
		PipelineClusterObjects []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// PipelineClusterObjectsParams is the pipelineClusterObjectsParams argument value.
			PipelineClusterObjectsParams types.PipelineClusterObjectsParams
		}
		// PipelineConfigHistory holds details about calls to the PipelineConfigHistory method.
		PipelineConfigHistory []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// PipelineConfigHistoryParams is the pipelineConfigHistoryParams argument value.
			PipelineConfigHistoryParams types.PipelineConfigHistoryParams
		}
		// PipelineFile holds details about calls to the PipelineFile method.
		PipelineFile []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// PipelineFiles holds details about calls to the PipelineFiles method.
		PipelineFiles []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// PipelineFilesParams is the pipelineFilesParams argument value.
			PipelineFilesParams types.PipelineFilesParams
		}
		// PipelineMetadata holds details about calls to the PipelineMetadata method.
		PipelineMetadata []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// Strings is the strings argument value.
			Strings []string
		}
		// PipelineMetrics holds details about calls to the PipelineMetrics method.
		PipelineMetrics []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// PipelineMetricsByPlugin holds details about calls to the PipelineMetricsByPlugin method.
		PipelineMetricsByPlugin []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// PipelineMetricsOverTimeByPlugin holds details about calls to the PipelineMetricsOverTimeByPlugin method.
		PipelineMetricsOverTimeByPlugin []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// PipelineMetricsV1 holds details about calls to the PipelineMetricsV1 method.
		PipelineMetricsV1 []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// PipelineOverTimeMetrics holds details about calls to the PipelineOverTimeMetrics method.
		PipelineOverTimeMetrics []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// PipelinePort holds details about calls to the PipelinePort method.
		PipelinePort []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// PipelinePorts holds details about calls to the PipelinePorts method.
		PipelinePorts []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// PipelinePortsParams is the pipelinePortsParams argument value.
			PipelinePortsParams types.PipelinePortsParams
		}
		// PipelineSecret holds details about calls to the PipelineSecret method.
		PipelineSecret []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// PipelineSecrets holds details about calls to the PipelineSecrets method.
		PipelineSecrets []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// PipelineSecretsParams is the pipelineSecretsParams argument value.
			PipelineSecretsParams types.PipelineSecretsParams
		}
		// PipelineStatusHistory holds details about calls to the PipelineStatusHistory method.
		PipelineStatusHistory []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// PipelineStatusHistoryParams is the pipelineStatusHistoryParams argument value.
			PipelineStatusHistoryParams types.PipelineStatusHistoryParams
		}
		// Pipelines holds details about calls to the Pipelines method.
		Pipelines []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PipelinesParams is the pipelinesParams argument value.
			PipelinesParams types.PipelinesParams
		}
		// PipelinesMetricsV1 holds details about calls to the PipelinesMetricsV1 method.
		PipelinesMetricsV1 []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// PipelinesMetricsParams is the pipelinesMetricsParams argument value.
			PipelinesMetricsParams types.PipelinesMetricsParams
		}
		// PreviewProcessingRule holds details about calls to the PreviewProcessingRule method.
		PreviewProcessingRule []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PreviewProcessingRule is the previewProcessingRule argument value.
			PreviewProcessingRule types.PreviewProcessingRule
		}
		// ProcessingRule holds details about calls to the ProcessingRule method.
		ProcessingRule []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// ProcessingRuleTemplates holds details about calls to the ProcessingRuleTemplates method.
		ProcessingRuleTemplates []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListProcessingRuleTemplates is the listProcessingRuleTemplates argument value.
			ListProcessingRuleTemplates types.ListProcessingRuleTemplates
		}
		// ProcessingRules holds details about calls to the ProcessingRules method.
		ProcessingRules []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ProcessingRulesParams is the processingRulesParams argument value.
			ProcessingRulesParams types.ProcessingRulesParams
		}
		// Project holds details about calls to the Project method.
		Project []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// ProjectMetricsV1 holds details about calls to the ProjectMetricsV1 method.
		ProjectMetricsV1 []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// MetricsParams is the metricsParams argument value.
			MetricsParams types.MetricsParams
		}
		// Projects holds details about calls to the Projects method.
		Projects []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ProjectsParams is the projectsParams argument value.
			ProjectsParams types.ProjectsParams
		}
		// PushAWSMarketplaceSubscriptionNotification holds details about calls to the PushAWSMarketplaceSubscriptionNotification method.
		PushAWSMarketplaceSubscriptionNotification []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AWSMarketplaceSubscriptionNotification is the aWSMarketplaceSubscriptionNotification argument value.
			AWSMarketplaceSubscriptionNotification types.AWSMarketplaceSubscriptionNotification
		}
		// RegisterAgent holds details about calls to the RegisterAgent method.
		RegisterAgent []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RegisterAgent is the registerAgent argument value.
			RegisterAgent types.RegisterAgent
		}
		// ResourceProfile holds details about calls to the ResourceProfile method.
		ResourceProfile []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// ResourceProfiles holds details about calls to the ResourceProfiles method.
		ResourceProfiles []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// ResourceProfilesParams is the resourceProfilesParams argument value.
			ResourceProfilesParams types.ResourceProfilesParams
		}
		// Search holds details about calls to the Search method.
		Search []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SearchQuery is the searchQuery argument value.
			SearchQuery types.SearchQuery
		}
		// SendVerificationEmail holds details about calls to the SendVerificationEmail method.
		SendVerificationEmail []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// SetAgentToken holds details about calls to the SetAgentToken method.
		SetAgentToken []struct {
			// S is the s argument value.
			S string
		}
		// SetCoreInstanceToken holds details about calls to the SetCoreInstanceToken method.
		SetCoreInstanceToken []struct {
			// S is the s argument value.
			S string
		}
		// SetProjectToken holds details about calls to the SetProjectToken method.
		SetProjectToken []struct {
			// S is the s argument value.
			S string
		}
		// SetUserAgent holds details about calls to the SetUserAgent method.
		SetUserAgent []struct {
			// S is the s argument value.
			S string
		}
		// TerminateActiveTraceSession holds details about calls to the TerminateActiveTraceSession method.
		TerminateActiveTraceSession []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// Token holds details about calls to the Token method.
		Token []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// Tokens holds details about calls to the Tokens method.
		Tokens []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// TokensParams is the tokensParams argument value.
			TokensParams types.TokensParams
		}
		// TraceRecords holds details about calls to the TraceRecords method.
		TraceRecords []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// TraceRecordsParams is the traceRecordsParams argument value.
			TraceRecordsParams types.TraceRecordsParams
		}
		// TraceSession holds details about calls to the TraceSession method.
		TraceSession []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// TraceSessions holds details about calls to the TraceSessions method.
		TraceSessions []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// TraceSessionsParams is the traceSessionsParams argument value.
			TraceSessionsParams types.TraceSessionsParams
		}
		// UpdateAgent holds details about calls to the UpdateAgent method.
		UpdateAgent []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdateAgent is the updateAgent argument value.
			UpdateAgent types.UpdateAgent
		}
		// UpdateClusterObject holds details about calls to the UpdateClusterObject method.
		UpdateClusterObject []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdateClusterObject is the updateClusterObject argument value.
			UpdateClusterObject types.UpdateClusterObject
		}
		// UpdateClusterObjectRegex holds details about calls to the UpdateClusterObjectRegex method.
		UpdateClusterObjectRegex []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateClusterObjectRegex is the updateClusterObjectRegex argument value.
			UpdateClusterObjectRegex types.UpdateClusterObjectRegex
		}
		// UpdateConfigSection holds details about calls to the UpdateConfigSection method.
		UpdateConfigSection []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdateConfigSection is the updateConfigSection argument value.
			UpdateConfigSection types.UpdateConfigSection
		}
		// UpdateConfigSectionSet holds details about calls to the UpdateConfigSectionSet method.
		UpdateConfigSectionSet []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// Strings is the strings argument value.
			Strings []string
		}
		// UpdateCoreInstance holds details about calls to the UpdateCoreInstance method.
		UpdateCoreInstance []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdateCoreInstance is the updateCoreInstance argument value.
			UpdateCoreInstance types.UpdateCoreInstance
		}
		// UpdateCoreInstanceCheck holds details about calls to the UpdateCoreInstanceCheck method.
		UpdateCoreInstanceCheck []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdateCoreInstanceCheck is the updateCoreInstanceCheck argument value.
			UpdateCoreInstanceCheck types.UpdateCoreInstanceCheck
		}
		// UpdateCoreInstanceFile holds details about calls to the UpdateCoreInstanceFile method.
		UpdateCoreInstanceFile []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateCoreInstanceFile is the updateCoreInstanceFile argument value.
			UpdateCoreInstanceFile types.UpdateCoreInstanceFile
		}
		// UpdateCoreInstanceSecret holds details about calls to the UpdateCoreInstanceSecret method.
		UpdateCoreInstanceSecret []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateCoreInstanceSecret is the updateCoreInstanceSecret argument value.
			UpdateCoreInstanceSecret types.UpdateCoreInstanceSecret
		}
		// UpdateEnvironment holds details about calls to the UpdateEnvironment method.
		UpdateEnvironment []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdateEnvironment is the updateEnvironment argument value.
			UpdateEnvironment types.UpdateEnvironment
		}
		// UpdateFleet holds details about calls to the UpdateFleet method.
		UpdateFleet []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateFleet is the updateFleet argument value.
			UpdateFleet types.UpdateFleet
		}
		// UpdateIngestCheck holds details about calls to the UpdateIngestCheck method.
		UpdateIngestCheck []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdateIngestCheck is the updateIngestCheck argument value.
			UpdateIngestCheck types.UpdateIngestCheck
		}
		// UpdateMember holds details about calls to the UpdateMember method.
		UpdateMember []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateMember is the updateMember argument value.
			UpdateMember types.UpdateMember
		}
		// UpdatePipeline holds details about calls to the UpdatePipeline method.
		UpdatePipeline []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdatePipeline is the updatePipeline argument value.
			UpdatePipeline types.UpdatePipeline
		}
		// UpdatePipelineCheck holds details about calls to the UpdatePipelineCheck method.
		UpdatePipelineCheck []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdatePipelineCheck is the updatePipelineCheck argument value.
			UpdatePipelineCheck types.UpdatePipelineCheck
		}
		// UpdatePipelineClusterObjects holds details about calls to the UpdatePipelineClusterObjects method.
		UpdatePipelineClusterObjects []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdatePipelineClusterObjects is the updatePipelineClusterObjects argument value.
			UpdatePipelineClusterObjects types.UpdatePipelineClusterObjects
		}
		// UpdatePipelineFile holds details about calls to the UpdatePipelineFile method.
		UpdatePipelineFile []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdatePipelineFile is the updatePipelineFile argument value.
			UpdatePipelineFile types.UpdatePipelineFile
		}
		// UpdatePipelineMetadata holds details about calls to the UpdatePipelineMetadata method.
		UpdatePipelineMetadata []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdatePipelineMetadata is the updatePipelineMetadata argument value.
			UpdatePipelineMetadata types.UpdatePipelineMetadata
		}
		// UpdatePipelinePort holds details about calls to the UpdatePipelinePort method.
		UpdatePipelinePort []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdatePipelinePort is the updatePipelinePort argument value.
			UpdatePipelinePort types.UpdatePipelinePort
		}
		// UpdatePipelineSecret holds details about calls to the UpdatePipelineSecret method.
		UpdatePipelineSecret []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdatePipelineSecret is the updatePipelineSecret argument value.
			UpdatePipelineSecret types.UpdatePipelineSecret
		}
		// UpdateProcessingRule holds details about calls to the UpdateProcessingRule method.
		UpdateProcessingRule []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateProcessingRule is the updateProcessingRule argument value.
			UpdateProcessingRule types.UpdateProcessingRule
		}
		// UpdateProcessingRuleTemplate holds details about calls to the UpdateProcessingRuleTemplate method.
		UpdateProcessingRuleTemplate []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateProcessingRuleTemplate is the updateProcessingRuleTemplate argument value.
			UpdateProcessingRuleTemplate types.UpdateProcessingRuleTemplate
		}
		// UpdateProject holds details about calls to the UpdateProject method.
		UpdateProject []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdateProject is the updateProject argument value.
			UpdateProject types.UpdateProject
		}
		// UpdateResourceProfile holds details about calls to the UpdateResourceProfile method.
		UpdateResourceProfile []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdateResourceProfile is the updateResourceProfile argument value.
			UpdateResourceProfile types.UpdateResourceProfile
		}
		// UpdateToken holds details about calls to the UpdateToken method.
		UpdateToken []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateToken is the updateToken argument value.
			UpdateToken types.UpdateToken
		}
		// UpdateTraceSession holds details about calls to the UpdateTraceSession method.
		UpdateTraceSession []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// UpdateTraceSession is the updateTraceSession argument value.
			UpdateTraceSession types.UpdateTraceSession
		}
		// ValidateConfig holds details about calls to the ValidateConfig method.
		ValidateConfig []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AgentType is the agentType argument value.
			AgentType types.AgentType
			// ValidatingConfig is the validatingConfig argument value.
			ValidatingConfig types.ValidatingConfig
		}
		// ValidateConfigV2 holds details about calls to the ValidateConfigV2 method.
		ValidateConfigV2 []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ValidatingConfig is the validatingConfig argument value.
			ValidatingConfig types.ValidatingConfig
		}
	}
	lockAWSCustomerRedirect                        sync.RWMutex
	lockAcceptInvitation                           sync.RWMutex
	lockActiveTraceSession                         sync.RWMutex
	lockAddAgentMetricsV1                          sync.RWMutex
	lockAgent                                      sync.RWMutex
	lockAgentConfigHistory                         sync.RWMutex
	lockAgentErrors                                sync.RWMutex
	lockAgentMetrics                               sync.RWMutex
	lockAgentMetricsByPlugin                       sync.RWMutex
	lockAgentMetricsOverTimeByPlugin               sync.RWMutex
	lockAgentMetricsV1                             sync.RWMutex
	lockAgentOverTimeMetrics                       sync.RWMutex
	lockAgents                                     sync.RWMutex
	lockAllCoreInstanceFiles                       sync.RWMutex
	lockAllCoreInstanceSecrets                     sync.RWMutex
	lockClusterObject                              sync.RWMutex
	lockClusterObjectRegex                         sync.RWMutex
	lockClusterObjectRegexes                       sync.RWMutex
	lockClusterObjects                             sync.RWMutex
	lockConfigSection                              sync.RWMutex
	lockConfigSections                             sync.RWMutex
	lockCoreInstance                               sync.RWMutex
	lockCoreInstanceCheck                          sync.RWMutex
	lockCoreInstanceChecks                         sync.RWMutex
	lockCoreInstanceFiles                          sync.RWMutex
	lockCoreInstanceMetrics                        sync.RWMutex
	lockCoreInstanceMetricsByPlugin                sync.RWMutex
	lockCoreInstanceMetricsOverTimeByPlugin        sync.RWMutex
	lockCoreInstanceMetricsV1                      sync.RWMutex
	lockCoreInstanceOverTimeMetrics                sync.RWMutex
	lockCoreInstancePing                           sync.RWMutex
	lockCoreInstanceSecrets                        sync.RWMutex
	lockCoreInstances                              sync.RWMutex
	lockCreateAWSContractFromToken                 sync.RWMutex
	lockCreateAgentError                           sync.RWMutex
	lockCreateClusterObject                        sync.RWMutex
	lockCreateClusterObjectRegex                   sync.RWMutex
	lockCreateConfigSection                        sync.RWMutex
	lockCreateCoreInstance                         sync.RWMutex
	lockCreateCoreInstanceCheck                    sync.RWMutex
	lockCreateCoreInstanceFile                     sync.RWMutex
	lockCreateCoreInstanceSecret                   sync.RWMutex
	lockCreateEnvironment                          sync.RWMutex
	lockCreateFleet                                sync.RWMutex
	lockCreateIngestCheck                          sync.RWMutex
	lockCreateInvitation                           sync.RWMutex
	lockCreatePipeline                             sync.RWMutex
	lockCreatePipelineCheck                        sync.RWMutex
	lockCreatePipelineFile                         sync.RWMutex
	lockCreatePipelinePort                         sync.RWMutex
	lockCreatePipelineSecret                       sync.RWMutex
	lockCreateProcessingRule                       sync.RWMutex
	lockCreateProcessingRuleTemplate               sync.RWMutex
	lockCreateProject                              sync.RWMutex
	lockCreateResourceProfile                      sync.RWMutex
	lockCreateToken                                sync.RWMutex
	lockCreateTraceRecord                          sync.RWMutex
	lockCreateTraceSession                         sync.RWMutex
	lockDeleteAgent                                sync.RWMutex
	lockDeleteAgents                               sync.RWMutex
	lockDeleteClusterObject                        sync.RWMutex
	lockDeleteClusterObjectRegex                   sync.RWMutex
	lockDeleteConfigSection                        sync.RWMutex
	lockDeleteCoreInstance                         sync.RWMutex
	lockDeleteCoreInstanceCheck                    sync.RWMutex
	lockDeleteCoreInstanceFile                     sync.RWMutex
	lockDeleteCoreInstanceSecret                   sync.RWMutex
	lockDeleteCoreInstances                        sync.RWMutex
	lockDeleteEnvironment                          sync.RWMutex
	lockDeleteFleet                                sync.RWMutex
	lockDeleteIngestCheck                          sync.RWMutex
	lockDeletePipeline                             sync.RWMutex
	lockDeletePipelineCheck                        sync.RWMutex
	lockDeletePipelineClusterObjects               sync.RWMutex
	lockDeletePipelineFile                         sync.RWMutex
	lockDeletePipelinePort                         sync.RWMutex
	lockDeletePipelineSecret                       sync.RWMutex
	lockDeletePipelines                            sync.RWMutex
	lockDeleteProcessingRule                       sync.RWMutex
	lockDeleteProcessingRuleTemplate               sync.RWMutex
	lockDeleteResourceProfile                      sync.RWMutex
	lockDeleteToken                                sync.RWMutex
	lockDismissAgentError                          sync.RWMutex
	lockEnvironments                               sync.RWMutex
	lockFleet                                      sync.RWMutex
	lockFleetConfig                                sync.RWMutex
	lockFleets                                     sync.RWMutex
	lockHealth                                     sync.RWMutex
	lockIngestCheck                                sync.RWMutex
	lockIngestChecks                               sync.RWMutex
	lockMembers                                    sync.RWMutex
	lockPipeline                                   sync.RWMutex
	lockPipelineCheck                              sync.RWMutex
	lockPipelineChecks                             sync.RWMutex
	lockPipelineClusterObjects                     sync.RWMutex
	lockPipelineConfigHistory                      sync.RWMutex
	lockPipelineFile                               sync.RWMutex
	lockPipelineFiles                              sync.RWMutex
	lockPipelineMetadata                           sync.RWMutex
	lockPipelineMetrics                            sync.RWMutex
	lockPipelineMetricsByPlugin                    sync.RWMutex
	lockPipelineMetricsOverTimeByPlugin            sync.RWMutex
	lockPipelineMetricsV1                          sync.RWMutex
	lockPipelineOverTimeMetrics                    sync.RWMutex
	lockPipelinePort                               sync.RWMutex
	lockPipelinePorts                              sync.RWMutex
	lockPipelineSecret                             sync.RWMutex
	lockPipelineSecrets                            sync.RWMutex
	lockPipelineStatusHistory                      sync.RWMutex
	lockPipelines                                  sync.RWMutex
	lockPipelinesMetricsV1                         sync.RWMutex
	lockPreviewProcessingRule                      sync.RWMutex
	lockProcessingRule                             sync.RWMutex
	lockProcessingRuleTemplates                    sync.RWMutex
	lockProcessingRules                            sync.RWMutex
	lockProject                                    sync.RWMutex
	lockProjectMetricsV1                           sync.RWMutex
	lockProjects                                   sync.RWMutex
	lockPushAWSMarketplaceSubscriptionNotification sync.RWMutex
	lockRegisterAgent                              sync.RWMutex
	lockResourceProfile                            sync.RWMutex
	lockResourceProfiles                           sync.RWMutex
	lockSearch                                     sync.RWMutex
	lockSendVerificationEmail                      sync.RWMutex
	lockSetAgentToken                              sync.RWMutex
	lockSetCoreInstanceToken                       sync.RWMutex
	lockSetProjectToken                            sync.RWMutex
	lockSetUserAgent                               sync.RWMutex
	lockTerminateActiveTraceSession                sync.RWMutex
	lockToken                                      sync.RWMutex
	lockTokens                                     sync.RWMutex
	lockTraceRecords                               sync.RWMutex
	lockTraceSession                               sync.RWMutex
	lockTraceSessions                              sync.RWMutex
	lockUpdateAgent                                sync.RWMutex
	lockUpdateClusterObject                        sync.RWMutex
	lockUpdateClusterObjectRegex                   sync.RWMutex
	lockUpdateConfigSection                        sync.RWMutex
	lockUpdateConfigSectionSet                     sync.RWMutex
	lockUpdateCoreInstance                         sync.RWMutex
	lockUpdateCoreInstanceCheck                    sync.RWMutex
	lockUpdateCoreInstanceFile                     sync.RWMutex
	lockUpdateCoreInstanceSecret                   sync.RWMutex
	lockUpdateEnvironment                          sync.RWMutex
	lockUpdateFleet                                sync.RWMutex
	lockUpdateIngestCheck                          sync.RWMutex
	lockUpdateMember                               sync.RWMutex
	lockUpdatePipeline                             sync.RWMutex
	lockUpdatePipelineCheck                        sync.RWMutex
	lockUpdatePipelineClusterObjects               sync.RWMutex
	lockUpdatePipelineFile                         sync.RWMutex
	lockUpdatePipelineMetadata                     sync.RWMutex
	lockUpdatePipelinePort                         sync.RWMutex
	lockUpdatePipelineSecret                       sync.RWMutex
	lockUpdateProcessingRule                       sync.RWMutex
	lockUpdateProcessingRuleTemplate               sync.RWMutex
	lockUpdateProject                              sync.RWMutex
	lockUpdateResourceProfile                      sync.RWMutex
	lockUpdateToken                                sync.RWMutex
	lockUpdateTraceSession                         sync.RWMutex
	lockValidateConfig                             sync.RWMutex
	lockValidateConfigV2                           sync.RWMutex
}

// AWSCustomerRedirect calls AWSCustomerRedirectFunc.
func (mock *ClientMock) AWSCustomerRedirect(contextMoqParam context.Context, s string) (*url.URL, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockAWSCustomerRedirect.Lock()
	mock.calls.AWSCustomerRedirect = append(mock.calls.AWSCustomerRedirect, callInfo)
	mock.lockAWSCustomerRedirect.Unlock()
	if mock.AWSCustomerRedirectFunc == nil {
		var (
			uRLOut *url.URL
			errOut error
		)
		return uRLOut, errOut
	}
	return mock.AWSCustomerRedirectFunc(contextMoqParam, s)
}

// AWSCustomerRedirectCalls gets all the calls that were made to AWSCustomerRedirect.
// Check the length with:
//
//	len(mockedClient.AWSCustomerRedirectCalls())
func (mock *ClientMock) AWSCustomerRedirectCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockAWSCustomerRedirect.RLock()
	calls = mock.calls.AWSCustomerRedirect
	mock.lockAWSCustomerRedirect.RUnlock()
	return calls
}

// AcceptInvitation calls AcceptInvitationFunc.
func (mock *ClientMock) AcceptInvitation(contextMoqParam context.Context, acceptInvitation types.AcceptInvitation) error {
	callInfo := struct {
		ContextMoqParam  context.Context
		AcceptInvitation types.AcceptInvitation
	}{
		ContextMoqParam:  contextMoqParam,
		AcceptInvitation: acceptInvitation,
	}
	mock.lockAcceptInvitation.Lock()
	mock.calls.AcceptInvitation = append(mock.calls.AcceptInvitation, callInfo)
	mock.lockAcceptInvitation.Unlock()
	if mock.AcceptInvitationFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.AcceptInvitationFunc(contextMoqParam, acceptInvitation)
}

// AcceptInvitationCalls gets all the calls that were made to AcceptInvitation.
// Check the length with:
//
//	len(mockedClient.AcceptInvitationCalls())
func (mock *ClientMock) AcceptInvitationCalls() []struct {
	ContextMoqParam  context.Context
	AcceptInvitation types.AcceptInvitation
} {
	var calls []struct {
		ContextMoqParam  context.Context
		AcceptInvitation types.AcceptInvitation
	}
	mock.lockAcceptInvitation.RLock()
	calls = mock.calls.AcceptInvitation
	mock.lockAcceptInvitation.RUnlock()
	return calls
}

// ActiveTraceSession calls ActiveTraceSessionFunc.
func (mock *ClientMock) ActiveTraceSession(contextMoqParam context.Context, s string) (types.TraceSession, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockActiveTraceSession.Lock()
	mock.calls.ActiveTraceSession = append(mock.calls.ActiveTraceSession, callInfo)
	mock.lockActiveTraceSession.Unlock()
	if mock.ActiveTraceSessionFunc == nil {
		var (
			traceSessionOut types.TraceSession
			errOut          error
		)
		return traceSessionOut, errOut
	}
	return mock.ActiveTraceSessionFunc(contextMoqParam, s)
}

// ActiveTraceSessionCalls gets all the calls that were made to ActiveTraceSession.
// Check the length with:
//
//	len(mockedClient.ActiveTraceSessionCalls())
func (mock *ClientMock) ActiveTraceSessionCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockActiveTraceSession.RLock()
	calls = mock.calls.ActiveTraceSession
	mock.lockActiveTraceSession.RUnlock()
	return calls
}

// AddAgentMetricsV1 calls AddAgentMetricsV1Func.
func (mock *ClientMock) AddAgentMetricsV1(contextMoqParam context.Context, s string, metrics []types.Metric) (types.MetricsOverTimeByPlugin, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		Metrics         []types.Metric
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		Metrics:         metrics,
	}
	mock.lockAddAgentMetricsV1.Lock()
	mock.calls.AddAgentMetricsV1 = append(mock.calls.AddAgentMetricsV1, callInfo)
	mock.lockAddAgentMetricsV1.Unlock()
	if mock.AddAgentMetricsV1Func == nil {
		var (
			metricsOverTimeByPluginOut types.MetricsOverTimeByPlugin
			errOut                     error
		)
		return metricsOverTimeByPluginOut, errOut
	}
	return mock.AddAgentMetricsV1Func(contextMoqParam, s, metrics)
}

// AddAgentMetricsV1Calls gets all the calls that were made to AddAgentMetricsV1.
// Check the length with:
//
//	len(mockedClient.AddAgentMetricsV1Calls())
func (mock *ClientMock) AddAgentMetricsV1Calls() []struct {
	ContextMoqParam context.Context
	S               string
	Metrics         []types.Metric
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		Metrics         []types.Metric
	}
	mock.lockAddAgentMetricsV1.RLock()
	calls = mock.calls.AddAgentMetricsV1
	mock.lockAddAgentMetricsV1.RUnlock()
	return calls
}

// Agent calls AgentFunc.
func (mock *ClientMock) Agent(contextMoqParam context.Context, s string) (types.Agent, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockAgent.Lock()
	mock.calls.Agent = append(mock.calls.Agent, callInfo)
	mock.lockAgent.Unlock()
	if mock.AgentFunc == nil {
		var (
			agentOut types.Agent
			errOut   error
		)
		return agentOut, errOut
	}
	return mock.AgentFunc(contextMoqParam, s)
}

// AgentCalls gets all the calls that were made to Agent.
// Check the length with:
//
//	len(mockedClient.AgentCalls())
func (mock *ClientMock) AgentCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockAgent.RLock()
	calls = mock.calls.Agent
	mock.lockAgent.RUnlock()
	return calls
}

// AgentConfigHistory calls AgentConfigHistoryFunc.
func (mock *ClientMock) AgentConfigHistory(contextMoqParam context.Context, s string, agentConfigHistoryParams types.AgentConfigHistoryParams) (types.AgentConfigHistory, error) {
	callInfo := struct {
		ContextMoqParam          context.Context
		S                        string
		AgentConfigHistoryParams types.AgentConfigHistoryParams
	}{
		ContextMoqParam:          contextMoqParam,
		S:                        s,
		AgentConfigHistoryParams: agentConfigHistoryParams,
	}
	mock.lockAgentConfigHistory.Lock()
	mock.calls.AgentConfigHistory = append(mock.calls.AgentConfigHistory, callInfo)
	mock.lockAgentConfigHistory.Unlock()
	if mock.AgentConfigHistoryFunc == nil {
		var (
			agentConfigHistoryOut types.AgentConfigHistory
			errOut                error
		)
		return agentConfigHistoryOut, errOut
	}
	return mock.AgentConfigHistoryFunc(contextMoqParam, s, agentConfigHistoryParams)
}

// AgentConfigHistoryCalls gets all the calls that were made to AgentConfigHistory.
// Check the length with:
//
//	len(mockedClient.AgentConfigHistoryCalls())
func (mock *ClientMock) AgentConfigHistoryCalls() []struct {
	ContextMoqParam          context.Context
	S                        string
	AgentConfigHistoryParams types.AgentConfigHistoryParams
} {
	var calls []struct {
		ContextMoqParam          context.Context
		S                        string
		AgentConfigHistoryParams types.AgentConfigHistoryParams
	}
	mock.lockAgentConfigHistory.RLock()
	calls = mock.calls.AgentConfigHistory
	mock.lockAgentConfigHistory.RUnlock()
	return calls
}

// AgentErrors calls AgentErrorsFunc.
func (mock *ClientMock) AgentErrors(contextMoqParam context.Context, listAgentErrors types.ListAgentErrors) (types.AgentErrors, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		ListAgentErrors types.ListAgentErrors
	}{
		ContextMoqParam: contextMoqParam,
		ListAgentErrors: listAgentErrors,
	}
	mock.lockAgentErrors.Lock()
	mock.calls.AgentErrors = append(mock.calls.AgentErrors, callInfo)
	mock.lockAgentErrors.Unlock()
	if mock.AgentErrorsFunc == nil {
		var (
			agentErrorsOut types.AgentErrors
			errOut         error
		)
		return agentErrorsOut, errOut
	}
	return mock.AgentErrorsFunc(contextMoqParam, listAgentErrors)
}

// AgentErrorsCalls gets all the calls that were made to AgentErrors.
// Check the length with:
//
//	len(mockedClient.AgentErrorsCalls())
func (mock *ClientMock) AgentErrorsCalls() []struct {
	ContextMoqParam context.Context
	ListAgentErrors types.ListAgentErrors
} {
	var calls []struct {
		ContextMoqParam context.Context
		ListAgentErrors types.ListAgentErrors
	}
	mock.lockAgentErrors.RLock()
	calls = mock.calls.AgentErrors
	mock.lockAgentErrors.RUnlock()
	return calls
}

// AgentMetrics calls AgentMetricsFunc.
func (mock *ClientMock) AgentMetrics(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummary, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockAgentMetrics.Lock()
	mock.calls.AgentMetrics = append(mock.calls.AgentMetrics, callInfo)
	mock.lockAgentMetrics.Unlock()
	if mock.AgentMetricsFunc == nil {
		var (
			metricsSummaryOut types.MetricsSummary
			errOut            error
		)
		return metricsSummaryOut, errOut
	}
	return mock.AgentMetricsFunc(contextMoqParam, s, metricsParams)
}

// AgentMetricsCalls gets all the calls that were made to AgentMetrics.
// Check the length with:
//
//	len(mockedClient.AgentMetricsCalls())
func (mock *ClientMock) AgentMetricsCalls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockAgentMetrics.RLock()
	calls = mock.calls.AgentMetrics
	mock.lockAgentMetrics.RUnlock()
	return calls
}

// AgentMetricsByPlugin calls AgentMetricsByPluginFunc.
func (mock *ClientMock) AgentMetricsByPlugin(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummaryPlugin, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockAgentMetricsByPlugin.Lock()
	mock.calls.AgentMetricsByPlugin = append(mock.calls.AgentMetricsByPlugin, callInfo)
	mock.lockAgentMetricsByPlugin.Unlock()
	if mock.AgentMetricsByPluginFunc == nil {
		var (
			metricsSummaryPluginOut types.MetricsSummaryPlugin
			errOut                  error
		)
		return metricsSummaryPluginOut, errOut
	}
	return mock.AgentMetricsByPluginFunc(contextMoqParam, s, metricsParams)
}

// AgentMetricsByPluginCalls gets all the calls that were made to AgentMetricsByPlugin.
// Check the length with:
//
//	len(mockedClient.AgentMetricsByPluginCalls())
func (mock *ClientMock) AgentMetricsByPluginCalls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockAgentMetricsByPlugin.RLock()
	calls = mock.calls.AgentMetricsByPlugin
	mock.lockAgentMetricsByPlugin.RUnlock()
	return calls
}

// AgentMetricsOverTimeByPlugin calls AgentMetricsOverTimeByPluginFunc.
func (mock *ClientMock) AgentMetricsOverTimeByPlugin(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTimeByPlugin, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockAgentMetricsOverTimeByPlugin.Lock()
	mock.calls.AgentMetricsOverTimeByPlugin = append(mock.calls.AgentMetricsOverTimeByPlugin, callInfo)
	mock.lockAgentMetricsOverTimeByPlugin.Unlock()
	if mock.AgentMetricsOverTimeByPluginFunc == nil {
		var (
			metricsOverTimeByPluginOut types.MetricsOverTimeByPlugin
			errOut                     error
		)
		return metricsOverTimeByPluginOut, errOut
	}
	return mock.AgentMetricsOverTimeByPluginFunc(contextMoqParam, s, metricsParams)
}

// AgentMetricsOverTimeByPluginCalls gets all the calls that were made to AgentMetricsOverTimeByPlugin.
// Check the length with:
//
//	len(mockedClient.AgentMetricsOverTimeByPluginCalls())
func (mock *ClientMock) AgentMetricsOverTimeByPluginCalls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockAgentMetricsOverTimeByPlugin.RLock()
	calls = mock.calls.AgentMetricsOverTimeByPlugin
	mock.lockAgentMetricsOverTimeByPlugin.RUnlock()
	return calls
}

// AgentMetricsV1 calls AgentMetricsV1Func.
func (mock *ClientMock) AgentMetricsV1(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.AgentMetrics, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockAgentMetricsV1.Lock()
	mock.calls.AgentMetricsV1 = append(mock.calls.AgentMetricsV1, callInfo)
	mock.lockAgentMetricsV1.Unlock()
	if mock.AgentMetricsV1Func == nil {
		var (
			agentMetricsOut types.AgentMetrics
			errOut          error
		)
		return agentMetricsOut, errOut
	}
	return mock.AgentMetricsV1Func(contextMoqParam, s, metricsParams)
}

// AgentMetricsV1Calls gets all the calls that were made to AgentMetricsV1.
// Check the length with:
//
//	len(mockedClient.AgentMetricsV1Calls())
func (mock *ClientMock) AgentMetricsV1Calls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockAgentMetricsV1.RLock()
	calls = mock.calls.AgentMetricsV1
	mock.lockAgentMetricsV1.RUnlock()
	return calls
}

// AgentOverTimeMetrics calls AgentOverTimeMetricsFunc.
func (mock *ClientMock) AgentOverTimeMetrics(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTime, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockAgentOverTimeMetrics.Lock()
	mock.calls.AgentOverTimeMetrics = append(mock.calls.AgentOverTimeMetrics, callInfo)
	mock.lockAgentOverTimeMetrics.Unlock()
	if mock.AgentOverTimeMetricsFunc == nil {
		var (
			metricsOverTimeOut types.MetricsOverTime
			errOut             error
		)
		return metricsOverTimeOut, errOut
	}
	return mock.AgentOverTimeMetricsFunc(contextMoqParam, s, metricsParams)
}

// AgentOverTimeMetricsCalls gets all the calls that were made to AgentOverTimeMetrics.
// Check the length with:
//
//	len(mockedClient.AgentOverTimeMetricsCalls())
func (mock *ClientMock) AgentOverTimeMetricsCalls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockAgentOverTimeMetrics.RLock()
	calls = mock.calls.AgentOverTimeMetrics
	mock.lockAgentOverTimeMetrics.RUnlock()
	return calls
}

// Agents calls AgentsFunc.
func (mock *ClientMock) Agents(contextMoqParam context.Context, s string, agentsParams types.AgentsParams) (types.Agents, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		AgentsParams    types.AgentsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		AgentsParams:    agentsParams,
	}
	mock.lockAgents.Lock()
	mock.calls.Agents = append(mock.calls.Agents, callInfo)
	mock.lockAgents.Unlock()
	if mock.AgentsFunc == nil {
		var (
			agentsOut types.Agents
			errOut    error
		)
		return agentsOut, errOut
	}
	return mock.AgentsFunc(contextMoqParam, s, agentsParams)
}

// AgentsCalls gets all the calls that were made to Agents.
// Check the length with:
//
//	len(mockedClient.AgentsCalls())
func (mock *ClientMock) AgentsCalls() []struct {
	ContextMoqParam context.Context
	S               string
	AgentsParams    types.AgentsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		AgentsParams    types.AgentsParams
	}
	mock.lockAgents.RLock()
	calls = mock.calls.Agents
	mock.lockAgents.RUnlock()
	return calls
}

// AllCoreInstanceFiles calls AllCoreInstanceFilesFunc.
func (mock *ClientMock) AllCoreInstanceFiles(contextMoqParam context.Context, s string) ([]types.CoreInstanceFile, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockAllCoreInstanceFiles.Lock()
	mock.calls.AllCoreInstanceFiles = append(mock.calls.AllCoreInstanceFiles, callInfo)
	mock.lockAllCoreInstanceFiles.Unlock()
	if mock.AllCoreInstanceFilesFunc == nil {
		var (
			coreInstanceFilesOut []types.CoreInstanceFile
			errOut               error
		)
		return coreInstanceFilesOut, errOut
	}
	return mock.AllCoreInstanceFilesFunc(contextMoqParam, s)
}

// AllCoreInstanceFilesCalls gets all the calls that were made to AllCoreInstanceFiles.
// Check the length with:
//
//	len(mockedClient.AllCoreInstanceFilesCalls())
func (mock *ClientMock) AllCoreInstanceFilesCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockAllCoreInstanceFiles.RLock()
	calls = mock.calls.AllCoreInstanceFiles
	mock.lockAllCoreInstanceFiles.RUnlock()
	return calls
}

// AllCoreInstanceSecrets calls AllCoreInstanceSecretsFunc.
func (mock *ClientMock) AllCoreInstanceSecrets(contextMoqParam context.Context, s string) ([]types.CoreInstanceSecret, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockAllCoreInstanceSecrets.Lock()
	mock.calls.AllCoreInstanceSecrets = append(mock.calls.AllCoreInstanceSecrets, callInfo)
	mock.lockAllCoreInstanceSecrets.Unlock()
	if mock.AllCoreInstanceSecretsFunc == nil {
		var (
			coreInstanceSecretsOut []types.CoreInstanceSecret
			errOut                 error
		)
		return coreInstanceSecretsOut, errOut
	}
	return mock.AllCoreInstanceSecretsFunc(contextMoqParam, s)
}

// AllCoreInstanceSecretsCalls gets all the calls that were made to AllCoreInstanceSecrets.
// Check the length with:
//
//	len(mockedClient.AllCoreInstanceSecretsCalls())
func (mock *ClientMock) AllCoreInstanceSecretsCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockAllCoreInstanceSecrets.RLock()
	calls = mock.calls.AllCoreInstanceSecrets
	mock.lockAllCoreInstanceSecrets.RUnlock()
	return calls
}

// ClusterObject calls ClusterObjectFunc.
func (mock *ClientMock) ClusterObject(contextMoqParam context.Context, s string) (types.ClusterObject, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockClusterObject.Lock()
	mock.calls.ClusterObject = append(mock.calls.ClusterObject, callInfo)
	mock.lockClusterObject.Unlock()
	if mock.ClusterObjectFunc == nil {
		var (
			clusterObjectOut types.ClusterObject
			errOut           error
		)
		return clusterObjectOut, errOut
	}
	return mock.ClusterObjectFunc(contextMoqParam, s)
}

// ClusterObjectCalls gets all the calls that were made to ClusterObject.
// Check the length with:
//
//	len(mockedClient.ClusterObjectCalls())
func (mock *ClientMock) ClusterObjectCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockClusterObject.RLock()
	calls = mock.calls.ClusterObject
	mock.lockClusterObject.RUnlock()
	return calls
}

// ClusterObjectRegex calls ClusterObjectRegexFunc.
func (mock *ClientMock) ClusterObjectRegex(contextMoqParam context.Context, s string) (types.ClusterObjectRegex, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockClusterObjectRegex.Lock()
	mock.calls.ClusterObjectRegex = append(mock.calls.ClusterObjectRegex, callInfo)
	mock.lockClusterObjectRegex.Unlock()
	if mock.ClusterObjectRegexFunc == nil {
		var (
			clusterObjectRegexOut types.ClusterObjectRegex
			errOut                error
		)
		return clusterObjectRegexOut, errOut
	}
	return mock.ClusterObjectRegexFunc(contextMoqParam, s)
}

// ClusterObjectRegexCalls gets all the calls that were made to ClusterObjectRegex.
// Check the length with:
//
//	len(mockedClient.ClusterObjectRegexCalls())
func (mock *ClientMock) ClusterObjectRegexCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockClusterObjectRegex.RLock()
	calls = mock.calls.ClusterObjectRegex
	mock.lockClusterObjectRegex.RUnlock()
	return calls
}

// ClusterObjectRegexes calls ClusterObjectRegexesFunc.
func (mock *ClientMock) ClusterObjectRegexes(contextMoqParam context.Context, listClusterObjectRegexes types.ListClusterObjectRegexes) (types.ClusterObjectRegexes, error) {
	callInfo := struct {
		ContextMoqParam          context.Context
		ListClusterObjectRegexes types.ListClusterObjectRegexes
	}{
		ContextMoqParam:          contextMoqParam,
		ListClusterObjectRegexes: listClusterObjectRegexes,
	}
	mock.lockClusterObjectRegexes.Lock()
	mock.calls.ClusterObjectRegexes = append(mock.calls.ClusterObjectRegexes, callInfo)
	mock.lockClusterObjectRegexes.Unlock()
	if mock.ClusterObjectRegexesFunc == nil {
		var (
			clusterObjectRegexesOut types.ClusterObjectRegexes
			errOut                  error
		)
		return clusterObjectRegexesOut, errOut
	}
	return mock.ClusterObjectRegexesFunc(contextMoqParam, listClusterObjectRegexes)
}

// ClusterObjectRegexesCalls gets all the calls that were made to ClusterObjectRegexes.
// Check the length with:
//
//	len(mockedClient.ClusterObjectRegexesCalls())
func (mock *ClientMock) ClusterObjectRegexesCalls() []struct {
	ContextMoqParam          context.Context
	ListClusterObjectRegexes types.ListClusterObjectRegexes
} {
	var calls []struct {
		ContextMoqParam          context.Context
		ListClusterObjectRegexes types.ListClusterObjectRegexes
	}
	mock.lockClusterObjectRegexes.RLock()
	calls = mock.calls.ClusterObjectRegexes
	mock.lockClusterObjectRegexes.RUnlock()
	return calls
}

// ClusterObjects calls ClusterObjectsFunc.
func (mock *ClientMock) ClusterObjects(contextMoqParam context.Context, s string, clusterObjectParams types.ClusterObjectParams) (types.ClusterObjects, error) {
	callInfo := struct {
		ContextMoqParam     context.Context
		S                   string
		ClusterObjectParams types.ClusterObjectParams
	}{
		ContextMoqParam:     contextMoqParam,
		S:                   s,
		ClusterObjectParams: clusterObjectParams,
	}
	mock.lockClusterObjects.Lock()
	mock.calls.ClusterObjects = append(mock.calls.ClusterObjects, callInfo)
	mock.lockClusterObjects.Unlock()
	if mock.ClusterObjectsFunc == nil {
		var (
			clusterObjectsOut types.ClusterObjects
			errOut            error
		)
		return clusterObjectsOut, errOut
	}
	return mock.ClusterObjectsFunc(contextMoqParam, s, clusterObjectParams)
}

// ClusterObjectsCalls gets all the calls that were made to ClusterObjects.
// Check the length with:
//
//	len(mockedClient.ClusterObjectsCalls())
func (mock *ClientMock) ClusterObjectsCalls() []struct {
	ContextMoqParam     context.Context
	S                   string
	ClusterObjectParams types.ClusterObjectParams
} {
	var calls []struct {
		ContextMoqParam     context.Context
		S                   string
		ClusterObjectParams types.ClusterObjectParams
	}
	mock.lockClusterObjects.RLock()
	calls = mock.calls.ClusterObjects
	mock.lockClusterObjects.RUnlock()
	return calls
}

// ConfigSection calls ConfigSectionFunc.
func (mock *ClientMock) ConfigSection(contextMoqParam context.Context, s string) (types.ConfigSection, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockConfigSection.Lock()
	mock.calls.ConfigSection = append(mock.calls.ConfigSection, callInfo)
	mock.lockConfigSection.Unlock()
	if mock.ConfigSectionFunc == nil {
		var (
			configSectionOut types.ConfigSection
			errOut           error
		)
		return configSectionOut, errOut
	}
	return mock.ConfigSectionFunc(contextMoqParam, s)
}

// ConfigSectionCalls gets all the calls that were made to ConfigSection.
// Check the length with:
//
//	len(mockedClient.ConfigSectionCalls())
func (mock *ClientMock) ConfigSectionCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockConfigSection.RLock()
	calls = mock.calls.ConfigSection
	mock.lockConfigSection.RUnlock()
	return calls
}

// ConfigSections calls ConfigSectionsFunc.
func (mock *ClientMock) ConfigSections(contextMoqParam context.Context, s string, configSectionsParams types.ConfigSectionsParams) (types.ConfigSections, error) {
	callInfo := struct {
		ContextMoqParam      context.Context
		S                    string
		ConfigSectionsParams types.ConfigSectionsParams
	}{
		ContextMoqParam:      contextMoqParam,
		S:                    s,
		ConfigSectionsParams: configSectionsParams,
	}
	mock.lockConfigSections.Lock()
	mock.calls.ConfigSections = append(mock.calls.ConfigSections, callInfo)
	mock.lockConfigSections.Unlock()
	if mock.ConfigSectionsFunc == nil {
		var (
			configSectionsOut types.ConfigSections
			errOut            error
		)
		return configSectionsOut, errOut
	}
	return mock.ConfigSectionsFunc(contextMoqParam, s, configSectionsParams)
}

// ConfigSectionsCalls gets all the calls that were made to ConfigSections.
// Check the length with:
//
//	len(mockedClient.ConfigSectionsCalls())
func (mock *ClientMock) ConfigSectionsCalls() []struct {
	ContextMoqParam      context.Context
	S                    string
	ConfigSectionsParams types.ConfigSectionsParams
} {
	var calls []struct {
		ContextMoqParam      context.Context
		S                    string
		ConfigSectionsParams types.ConfigSectionsParams
	}
	mock.lockConfigSections.RLock()
	calls = mock.calls.ConfigSections
	mock.lockConfigSections.RUnlock()
	return calls
}

// CoreInstance calls CoreInstanceFunc.
func (mock *ClientMock) CoreInstance(contextMoqParam context.Context, s string) (types.CoreInstance, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockCoreInstance.Lock()
	mock.calls.CoreInstance = append(mock.calls.CoreInstance, callInfo)
	mock.lockCoreInstance.Unlock()
	if mock.CoreInstanceFunc == nil {
		var (
			coreInstanceOut types.CoreInstance
			errOut          error
		)
		return coreInstanceOut, errOut
	}
	return mock.CoreInstanceFunc(contextMoqParam, s)
}

// CoreInstanceCalls gets all the calls that were made to CoreInstance.
// Check the length with:
//
//	len(mockedClient.CoreInstanceCalls())
func (mock *ClientMock) CoreInstanceCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockCoreInstance.RLock()
	calls = mock.calls.CoreInstance
	mock.lockCoreInstance.RUnlock()
	return calls
}

// CoreInstanceCheck calls CoreInstanceCheckFunc.
func (mock *ClientMock) CoreInstanceCheck(contextMoqParam context.Context, s string) (types.CoreInstanceCheck, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockCoreInstanceCheck.Lock()
	mock.calls.CoreInstanceCheck = append(mock.calls.CoreInstanceCheck, callInfo)
	mock.lockCoreInstanceCheck.Unlock()
	if mock.CoreInstanceCheckFunc == nil {
		var (
			coreInstanceCheckOut types.CoreInstanceCheck
			errOut               error
		)
		return coreInstanceCheckOut, errOut
	}
	return mock.CoreInstanceCheckFunc(contextMoqParam, s)
}

// CoreInstanceCheckCalls gets all the calls that were made to CoreInstanceCheck.
// Check the length with:
//
//	len(mockedClient.CoreInstanceCheckCalls())
func (mock *ClientMock) CoreInstanceCheckCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockCoreInstanceCheck.RLock()
	calls = mock.calls.CoreInstanceCheck
	mock.lockCoreInstanceCheck.RUnlock()
	return calls
}

// CoreInstanceChecks calls CoreInstanceChecksFunc.
func (mock *ClientMock) CoreInstanceChecks(contextMoqParam context.Context, s string, coreInstanceChecksParams types.CoreInstanceChecksParams) (types.CoreInstanceChecks, error) {
	callInfo := struct {
		ContextMoqParam          context.Context
		S                        string
		CoreInstanceChecksParams types.CoreInstanceChecksParams
	}{
		ContextMoqParam:          contextMoqParam,
		S:                        s,
		CoreInstanceChecksParams: coreInstanceChecksParams,
	}
	mock.lockCoreInstanceChecks.Lock()
	mock.calls.CoreInstanceChecks = append(mock.calls.CoreInstanceChecks, callInfo)
	mock.lockCoreInstanceChecks.Unlock()
	if mock.CoreInstanceChecksFunc == nil {
		var (
			coreInstanceChecksOut types.CoreInstanceChecks
			errOut                error
		)
		return coreInstanceChecksOut, errOut
	}
	return mock.CoreInstanceChecksFunc(contextMoqParam, s, coreInstanceChecksParams)
}

// CoreInstanceChecksCalls gets all the calls that were made to CoreInstanceChecks.
// Check the length with:
//
//	len(mockedClient.CoreInstanceChecksCalls())
func (mock *ClientMock) CoreInstanceChecksCalls() []struct {
	ContextMoqParam          context.Context
	S                        string
	CoreInstanceChecksParams types.CoreInstanceChecksParams
} {
	var calls []struct {
		ContextMoqParam          context.Context
		S                        string
		CoreInstanceChecksParams types.CoreInstanceChecksParams
	}
	mock.lockCoreInstanceChecks.RLock()
	calls = mock.calls.CoreInstanceChecks
	mock.lockCoreInstanceChecks.RUnlock()
	return calls
}

// CoreInstanceFiles calls CoreInstanceFilesFunc.
func (mock *ClientMock) CoreInstanceFiles(contextMoqParam context.Context, listCoreInstanceFiles types.ListCoreInstanceFiles) (types.CoreInstanceFiles, error) {
	callInfo := struct {
		ContextMoqParam       context.Context
		ListCoreInstanceFiles types.ListCoreInstanceFiles
	}{
		ContextMoqParam:       contextMoqParam,
		ListCoreInstanceFiles: listCoreInstanceFiles,
	}
	mock.lockCoreInstanceFiles.Lock()
	mock.calls.CoreInstanceFiles = append(mock.calls.CoreInstanceFiles, callInfo)
	mock.lockCoreInstanceFiles.Unlock()
	if mock.CoreInstanceFilesFunc == nil {
		var (
			coreInstanceFilesOut types.CoreInstanceFiles
			errOut               error
		)
		return coreInstanceFilesOut, errOut
	}
	return mock.CoreInstanceFilesFunc(contextMoqParam, listCoreInstanceFiles)
}

// CoreInstanceFilesCalls gets all the calls that were made to CoreInstanceFiles.
// Check the length with:
//
//	len(mockedClient.CoreInstanceFilesCalls())
func (mock *ClientMock) CoreInstanceFilesCalls() []struct {
	ContextMoqParam       context.Context
	ListCoreInstanceFiles types.ListCoreInstanceFiles
} {
	var calls []struct {
		ContextMoqParam       context.Context
		ListCoreInstanceFiles types.ListCoreInstanceFiles
	}
	mock.lockCoreInstanceFiles.RLock()
	calls = mock.calls.CoreInstanceFiles
	mock.lockCoreInstanceFiles.RUnlock()
	return calls
}

// CoreInstanceMetrics calls CoreInstanceMetricsFunc.
func (mock *ClientMock) CoreInstanceMetrics(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummary, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockCoreInstanceMetrics.Lock()
	mock.calls.CoreInstanceMetrics = append(mock.calls.CoreInstanceMetrics, callInfo)
	mock.lockCoreInstanceMetrics.Unlock()
	if mock.CoreInstanceMetricsFunc == nil {
		var (
			metricsSummaryOut types.MetricsSummary
			errOut            error
		)
		return metricsSummaryOut, errOut
	}
	return mock.CoreInstanceMetricsFunc(contextMoqParam, s, metricsParams)
}

// CoreInstanceMetricsCalls gets all the calls that were made to CoreInstanceMetrics.
// Check the length with:
//
//	len(mockedClient.CoreInstanceMetricsCalls())
func (mock *ClientMock) CoreInstanceMetricsCalls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockCoreInstanceMetrics.RLock()
	calls = mock.calls.CoreInstanceMetrics
	mock.lockCoreInstanceMetrics.RUnlock()
	return calls
}

// CoreInstanceMetricsByPlugin calls CoreInstanceMetricsByPluginFunc.
func (mock *ClientMock) CoreInstanceMetricsByPlugin(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummaryPlugin, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockCoreInstanceMetricsByPlugin.Lock()
	mock.calls.CoreInstanceMetricsByPlugin = append(mock.calls.CoreInstanceMetricsByPlugin, callInfo)
	mock.lockCoreInstanceMetricsByPlugin.Unlock()
	if mock.CoreInstanceMetricsByPluginFunc == nil {
		var (
			metricsSummaryPluginOut types.MetricsSummaryPlugin
			errOut                  error
		)
		return metricsSummaryPluginOut, errOut
	}
	return mock.CoreInstanceMetricsByPluginFunc(contextMoqParam, s, metricsParams)
}

// CoreInstanceMetricsByPluginCalls gets all the calls that were made to CoreInstanceMetricsByPlugin.
// Check the length with:
//
//	len(mockedClient.CoreInstanceMetricsByPluginCalls())
func (mock *ClientMock) CoreInstanceMetricsByPluginCalls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockCoreInstanceMetricsByPlugin.RLock()
	calls = mock.calls.CoreInstanceMetricsByPlugin
	mock.lockCoreInstanceMetricsByPlugin.RUnlock()
	return calls
}

// CoreInstanceMetricsOverTimeByPlugin calls CoreInstanceMetricsOverTimeByPluginFunc.
func (mock *ClientMock) CoreInstanceMetricsOverTimeByPlugin(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTimeByPlugin, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockCoreInstanceMetricsOverTimeByPlugin.Lock()
	mock.calls.CoreInstanceMetricsOverTimeByPlugin = append(mock.calls.CoreInstanceMetricsOverTimeByPlugin, callInfo)
	mock.lockCoreInstanceMetricsOverTimeByPlugin.Unlock()
	if mock.CoreInstanceMetricsOverTimeByPluginFunc == nil {
		var (
			metricsOverTimeByPluginOut types.MetricsOverTimeByPlugin
			errOut                     error
		)
		return metricsOverTimeByPluginOut, errOut
	}
	return mock.CoreInstanceMetricsOverTimeByPluginFunc(contextMoqParam, s, metricsParams)
}

// CoreInstanceMetricsOverTimeByPluginCalls gets all the calls that were made to CoreInstanceMetricsOverTimeByPlugin.
// Check the length with:
//
//	len(mockedClient.CoreInstanceMetricsOverTimeByPluginCalls())
func (mock *ClientMock) CoreInstanceMetricsOverTimeByPluginCalls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockCoreInstanceMetricsOverTimeByPlugin.RLock()
	calls = mock.calls.CoreInstanceMetricsOverTimeByPlugin
	mock.lockCoreInstanceMetricsOverTimeByPlugin.RUnlock()
	return calls
}

// CoreInstanceMetricsV1 calls CoreInstanceMetricsV1Func.
func (mock *ClientMock) CoreInstanceMetricsV1(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.CoreInstanceMetricsV1, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockCoreInstanceMetricsV1.Lock()
	mock.calls.CoreInstanceMetricsV1 = append(mock.calls.CoreInstanceMetricsV1, callInfo)
	mock.lockCoreInstanceMetricsV1.Unlock()
	if mock.CoreInstanceMetricsV1Func == nil {
		var (
			coreInstanceMetricsV1Out types.CoreInstanceMetricsV1
			errOut                   error
		)
		return coreInstanceMetricsV1Out, errOut
	}
	return mock.CoreInstanceMetricsV1Func(contextMoqParam, s, metricsParams)
}

// CoreInstanceMetricsV1Calls gets all the calls that were made to CoreInstanceMetricsV1.
// Check the length with:
//
//	len(mockedClient.CoreInstanceMetricsV1Calls())
func (mock *ClientMock) CoreInstanceMetricsV1Calls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockCoreInstanceMetricsV1.RLock()
	calls = mock.calls.CoreInstanceMetricsV1
	mock.lockCoreInstanceMetricsV1.RUnlock()
	return calls
}

// CoreInstanceOverTimeMetrics calls CoreInstanceOverTimeMetricsFunc.
func (mock *ClientMock) CoreInstanceOverTimeMetrics(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTime, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockCoreInstanceOverTimeMetrics.Lock()
	mock.calls.CoreInstanceOverTimeMetrics = append(mock.calls.CoreInstanceOverTimeMetrics, callInfo)
	mock.lockCoreInstanceOverTimeMetrics.Unlock()
	if mock.CoreInstanceOverTimeMetricsFunc == nil {
		var (
			metricsOverTimeOut types.MetricsOverTime
			errOut             error
		)
		return metricsOverTimeOut, errOut
	}
	return mock.CoreInstanceOverTimeMetricsFunc(contextMoqParam, s, metricsParams)
}

// CoreInstanceOverTimeMetricsCalls gets all the calls that were made to CoreInstanceOverTimeMetrics.
// Check the length with:
//
//	len(mockedClient.CoreInstanceOverTimeMetricsCalls())
func (mock *ClientMock) CoreInstanceOverTimeMetricsCalls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockCoreInstanceOverTimeMetrics.RLock()
	calls = mock.calls.CoreInstanceOverTimeMetrics
	mock.lockCoreInstanceOverTimeMetrics.RUnlock()
	return calls
}

// CoreInstancePing calls CoreInstancePingFunc.
func (mock *ClientMock) CoreInstancePing(contextMoqParam context.Context, s string) (types.CoreInstancePingResponse, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockCoreInstancePing.Lock()
	mock.calls.CoreInstancePing = append(mock.calls.CoreInstancePing, callInfo)
	mock.lockCoreInstancePing.Unlock()
	if mock.CoreInstancePingFunc == nil {
		var (
			coreInstancePingResponseOut types.CoreInstancePingResponse
			errOut                      error
		)
		return coreInstancePingResponseOut, errOut
	}
	return mock.CoreInstancePingFunc(contextMoqParam, s)
}

// CoreInstancePingCalls gets all the calls that were made to CoreInstancePing.
// Check the length with:
//
//	len(mockedClient.CoreInstancePingCalls())
func (mock *ClientMock) CoreInstancePingCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockCoreInstancePing.RLock()
	calls = mock.calls.CoreInstancePing
	mock.lockCoreInstancePing.RUnlock()
	return calls
}

// CoreInstanceSecrets calls CoreInstanceSecretsFunc.
func (mock *ClientMock) CoreInstanceSecrets(contextMoqParam context.Context, listCoreInstanceSecrets types.ListCoreInstanceSecrets) (types.CoreInstanceSecrets, error) {
	callInfo := struct {
		ContextMoqParam         context.Context
		ListCoreInstanceSecrets types.ListCoreInstanceSecrets
	}{
		ContextMoqParam:         contextMoqParam,
		ListCoreInstanceSecrets: listCoreInstanceSecrets,
	}
	mock.lockCoreInstanceSecrets.Lock()
	mock.calls.CoreInstanceSecrets = append(mock.calls.CoreInstanceSecrets, callInfo)
	mock.lockCoreInstanceSecrets.Unlock()
	if mock.CoreInstanceSecretsFunc == nil {
		var (
			coreInstanceSecretsOut types.CoreInstanceSecrets
			errOut                 error
		)
		return coreInstanceSecretsOut, errOut
	}
	return mock.CoreInstanceSecretsFunc(contextMoqParam, listCoreInstanceSecrets)
}

// CoreInstanceSecretsCalls gets all the calls that were made to CoreInstanceSecrets.
// Check the length with:
//
//	len(mockedClient.CoreInstanceSecretsCalls())
func (mock *ClientMock) CoreInstanceSecretsCalls() []struct {
	ContextMoqParam         context.Context
	ListCoreInstanceSecrets types.ListCoreInstanceSecrets
} {
	var calls []struct {
		ContextMoqParam         context.Context
		ListCoreInstanceSecrets types.ListCoreInstanceSecrets
	}
	mock.lockCoreInstanceSecrets.RLock()
	calls = mock.calls.CoreInstanceSecrets
	mock.lockCoreInstanceSecrets.RUnlock()
	return calls
}

// CoreInstances calls CoreInstancesFunc.
func (mock *ClientMock) CoreInstances(contextMoqParam context.Context, s string, coreInstancesParams types.CoreInstancesParams) (types.CoreInstances, error) {
	callInfo := struct {
		ContextMoqParam     context.Context
		S                   string
		CoreInstancesParams types.CoreInstancesParams
	}{
		ContextMoqParam:     contextMoqParam,
		S:                   s,
		CoreInstancesParams: coreInstancesParams,
	}
	mock.lockCoreInstances.Lock()
	mock.calls.CoreInstances = append(mock.calls.CoreInstances, callInfo)
	mock.lockCoreInstances.Unlock()
	if mock.CoreInstancesFunc == nil {
		var (
			coreInstancesOut types.CoreInstances
			errOut           error
		)
		return coreInstancesOut, errOut
	}
	return mock.CoreInstancesFunc(contextMoqParam, s, coreInstancesParams)
}

// CoreInstancesCalls gets all the calls that were made to CoreInstances.
// Check the length with:
//
//	len(mockedClient.CoreInstancesCalls())
func (mock *ClientMock) CoreInstancesCalls() []struct {
	ContextMoqParam     context.Context
	S                   string
	CoreInstancesParams types.CoreInstancesParams
} {
	var calls []struct {
		ContextMoqParam     context.Context
		S                   string
		CoreInstancesParams types.CoreInstancesParams
	}
	mock.lockCoreInstances.RLock()
	calls = mock.calls.CoreInstances
	mock.lockCoreInstances.RUnlock()
	return calls
}

// CreateAWSContractFromToken calls CreateAWSContractFromTokenFunc.
func (mock *ClientMock) CreateAWSContractFromToken(contextMoqParam context.Context, createAWSContractFromToken types.CreateAWSContractFromToken) error {
	callInfo := struct {
		ContextMoqParam            context.Context
		CreateAWSContractFromToken types.CreateAWSContractFromToken
	}{
		ContextMoqParam:            contextMoqParam,
		CreateAWSContractFromToken: createAWSContractFromToken,
	}
	mock.lockCreateAWSContractFromToken.Lock()
	mock.calls.CreateAWSContractFromToken = append(mock.calls.CreateAWSContractFromToken, callInfo)
	mock.lockCreateAWSContractFromToken.Unlock()
	if mock.CreateAWSContractFromTokenFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CreateAWSContractFromTokenFunc(contextMoqParam, createAWSContractFromToken)
}

// CreateAWSContractFromTokenCalls gets all the calls that were made to CreateAWSContractFromToken.
// Check the length with:
//
//	len(mockedClient.CreateAWSContractFromTokenCalls())
func (mock *ClientMock) CreateAWSContractFromTokenCalls() []struct {
	ContextMoqParam            context.Context
	CreateAWSContractFromToken types.CreateAWSContractFromToken
} {
	var calls []struct {
		ContextMoqParam            context.Context
		CreateAWSContractFromToken types.CreateAWSContractFromToken
	}
	mock.lockCreateAWSContractFromToken.RLock()
	calls = mock.calls.CreateAWSContractFromToken
	mock.lockCreateAWSContractFromToken.RUnlock()
	return calls
}

// CreateAgentError calls CreateAgentErrorFunc.
func (mock *ClientMock) CreateAgentError(contextMoqParam context.Context, createAgentError types.CreateAgentError) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam  context.Context
		CreateAgentError types.CreateAgentError
	}{
		ContextMoqParam:  contextMoqParam,
		CreateAgentError: createAgentError,
	}
	mock.lockCreateAgentError.Lock()
	mock.calls.CreateAgentError = append(mock.calls.CreateAgentError, callInfo)
	mock.lockCreateAgentError.Unlock()
	if mock.CreateAgentErrorFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreateAgentErrorFunc(contextMoqParam, createAgentError)
}

// CreateAgentErrorCalls gets all the calls that were made to CreateAgentError.
// Check the length with:
//
//	len(mockedClient.CreateAgentErrorCalls())
func (mock *ClientMock) CreateAgentErrorCalls() []struct {
	ContextMoqParam  context.Context
	CreateAgentError types.CreateAgentError
} {
	var calls []struct {
		ContextMoqParam  context.Context
		CreateAgentError types.CreateAgentError
	}
	mock.lockCreateAgentError.RLock()
	calls = mock.calls.CreateAgentError
	mock.lockCreateAgentError.RUnlock()
	return calls
}

// CreateClusterObject calls CreateClusterObjectFunc.
func (mock *ClientMock) CreateClusterObject(contextMoqParam context.Context, s string, createClusterObject types.CreateClusterObject) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam     context.Context
		S                   string
		CreateClusterObject types.CreateClusterObject
	}{
		ContextMoqParam:     contextMoqParam,
		S:                   s,
		CreateClusterObject: createClusterObject,
	}
	mock.lockCreateClusterObject.Lock()
	mock.calls.CreateClusterObject = append(mock.calls.CreateClusterObject, callInfo)
	mock.lockCreateClusterObject.Unlock()
	if mock.CreateClusterObjectFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreateClusterObjectFunc(contextMoqParam, s, createClusterObject)
}

// CreateClusterObjectCalls gets all the calls that were made to CreateClusterObject.
// Check the length with:
//
//	len(mockedClient.CreateClusterObjectCalls())
func (mock *ClientMock) CreateClusterObjectCalls() []struct {
	ContextMoqParam     context.Context
	S                   string
	CreateClusterObject types.CreateClusterObject
} {
	var calls []struct {
		ContextMoqParam     context.Context
		S                   string
		CreateClusterObject types.CreateClusterObject
	}
	mock.lockCreateClusterObject.RLock()
	calls = mock.calls.CreateClusterObject
	mock.lockCreateClusterObject.RUnlock()
	return calls
}

// CreateClusterObjectRegex calls CreateClusterObjectRegexFunc.
func (mock *ClientMock) CreateClusterObjectRegex(contextMoqParam context.Context, createClusterObjectRegex types.CreateClusterObjectRegex) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam          context.Context
		CreateClusterObjectRegex types.CreateClusterObjectRegex
	}{
		ContextMoqParam:          contextMoqParam,
		CreateClusterObjectRegex: createClusterObjectRegex,
	}
	mock.lockCreateClusterObjectRegex.Lock()
	mock.calls.CreateClusterObjectRegex = append(mock.calls.CreateClusterObjectRegex, callInfo)
	mock.lockCreateClusterObjectRegex.Unlock()
	if mock.CreateClusterObjectRegexFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreateClusterObjectRegexFunc(contextMoqParam, createClusterObjectRegex)
}

// CreateClusterObjectRegexCalls gets all the calls that were made to CreateClusterObjectRegex.
// Check the length with:
//
//	len(mockedClient.CreateClusterObjectRegexCalls())
func (mock *ClientMock) CreateClusterObjectRegexCalls() []struct {
	ContextMoqParam          context.Context
	CreateClusterObjectRegex types.CreateClusterObjectRegex
} {
	var calls []struct {
		ContextMoqParam          context.Context
		CreateClusterObjectRegex types.CreateClusterObjectRegex
	}
	mock.lockCreateClusterObjectRegex.RLock()
	calls = mock.calls.CreateClusterObjectRegex
	mock.lockCreateClusterObjectRegex.RUnlock()
	return calls
}

// CreateConfigSection calls CreateConfigSectionFunc.
func (mock *ClientMock) CreateConfigSection(contextMoqParam context.Context, s string, createConfigSection types.CreateConfigSection) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam     context.Context
		S                   string
		CreateConfigSection types.CreateConfigSection
	}{
		ContextMoqParam:     contextMoqParam,
		S:                   s,
		CreateConfigSection: createConfigSection,
	}
	mock.lockCreateConfigSection.Lock()
	mock.calls.CreateConfigSection = append(mock.calls.CreateConfigSection, callInfo)
	mock.lockCreateConfigSection.Unlock()
	if mock.CreateConfigSectionFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreateConfigSectionFunc(contextMoqParam, s, createConfigSection)
}

// CreateConfigSectionCalls gets all the calls that were made to CreateConfigSection.
// Check the length with:
//
//	len(mockedClient.CreateConfigSectionCalls())
func (mock *ClientMock) CreateConfigSectionCalls() []struct {
	ContextMoqParam     context.Context
	S                   string
	CreateConfigSection types.CreateConfigSection
} {
	var calls []struct {
		ContextMoqParam     context.Context
		S                   string
		CreateConfigSection types.CreateConfigSection
	}
	mock.lockCreateConfigSection.RLock()
	calls = mock.calls.CreateConfigSection
	mock.lockCreateConfigSection.RUnlock()
	return calls
}

// CreateCoreInstance calls CreateCoreInstanceFunc.
func (mock *ClientMock) CreateCoreInstance(contextMoqParam context.Context, createCoreInstance types.CreateCoreInstance) (types.CreatedCoreInstance, error) {
	callInfo := struct {
		ContextMoqParam    context.Context
		CreateCoreInstance types.CreateCoreInstance
	}{
		ContextMoqParam:    contextMoqParam,
		CreateCoreInstance: createCoreInstance,
	}
	mock.lockCreateCoreInstance.Lock()
	mock.calls.CreateCoreInstance = append(mock.calls.CreateCoreInstance, callInfo)
	mock.lockCreateCoreInstance.Unlock()
	if mock.CreateCoreInstanceFunc == nil {
		var (
			createdCoreInstanceOut types.CreatedCoreInstance
			errOut                 error
		)
		return createdCoreInstanceOut, errOut
	}
	return mock.CreateCoreInstanceFunc(contextMoqParam, createCoreInstance)
}

// CreateCoreInstanceCalls gets all the calls that were made to CreateCoreInstance.
// Check the length with:
//
//	len(mockedClient.CreateCoreInstanceCalls())
func (mock *ClientMock) CreateCoreInstanceCalls() []struct {
	ContextMoqParam    context.Context
	CreateCoreInstance types.CreateCoreInstance
} {
	var calls []struct {
		ContextMoqParam    context.Context
		CreateCoreInstance types.CreateCoreInstance
	}
	mock.lockCreateCoreInstance.RLock()
	calls = mock.calls.CreateCoreInstance
	mock.lockCreateCoreInstance.RUnlock()
	return calls
}

// CreateCoreInstanceCheck calls CreateCoreInstanceCheckFunc.
func (mock *ClientMock) CreateCoreInstanceCheck(contextMoqParam context.Context, s string, check types.Check) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		Check           types.Check
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		Check:           check,
	}
	mock.lockCreateCoreInstanceCheck.Lock()
	mock.calls.CreateCoreInstanceCheck = append(mock.calls.CreateCoreInstanceCheck, callInfo)
	mock.lockCreateCoreInstanceCheck.Unlock()
	if mock.CreateCoreInstanceCheckFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreateCoreInstanceCheckFunc(contextMoqParam, s, check)
}

// CreateCoreInstanceCheckCalls gets all the calls that were made to CreateCoreInstanceCheck.
// Check the length with:
//
//	len(mockedClient.CreateCoreInstanceCheckCalls())
func (mock *ClientMock) CreateCoreInstanceCheckCalls() []struct {
	ContextMoqParam context.Context
	S               string
	Check           types.Check
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		Check           types.Check
	}
	mock.lockCreateCoreInstanceCheck.RLock()
	calls = mock.calls.CreateCoreInstanceCheck
	mock.lockCreateCoreInstanceCheck.RUnlock()
	return calls
}

// CreateCoreInstanceFile calls CreateCoreInstanceFileFunc.
func (mock *ClientMock) CreateCoreInstanceFile(contextMoqParam context.Context, createCoreInstanceFile types.CreateCoreInstanceFile) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam        context.Context
		CreateCoreInstanceFile types.CreateCoreInstanceFile
	}{
		ContextMoqParam:        contextMoqParam,
		CreateCoreInstanceFile: createCoreInstanceFile,
	}
	mock.lockCreateCoreInstanceFile.Lock()
	mock.calls.CreateCoreInstanceFile = append(mock.calls.CreateCoreInstanceFile, callInfo)
	mock.lockCreateCoreInstanceFile.Unlock()
	if mock.CreateCoreInstanceFileFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreateCoreInstanceFileFunc(contextMoqParam, createCoreInstanceFile)
}

// CreateCoreInstanceFileCalls gets all the calls that were made to CreateCoreInstanceFile.
// Check the length with:
//
//	len(mockedClient.CreateCoreInstanceFileCalls())
func (mock *ClientMock) CreateCoreInstanceFileCalls() []struct {
	ContextMoqParam        context.Context
	CreateCoreInstanceFile types.CreateCoreInstanceFile
} {
	var calls []struct {
		ContextMoqParam        context.Context
		CreateCoreInstanceFile types.CreateCoreInstanceFile
	}
	mock.lockCreateCoreInstanceFile.RLock()
	calls = mock.calls.CreateCoreInstanceFile
	mock.lockCreateCoreInstanceFile.RUnlock()
	return calls
}

// CreateCoreInstanceSecret calls CreateCoreInstanceSecretFunc.
func (mock *ClientMock) CreateCoreInstanceSecret(contextMoqParam context.Context, createCoreInstanceSecret types.CreateCoreInstanceSecret) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam          context.Context
		CreateCoreInstanceSecret types.CreateCoreInstanceSecret
	}{
		ContextMoqParam:          contextMoqParam,
		CreateCoreInstanceSecret: createCoreInstanceSecret,
	}
	mock.lockCreateCoreInstanceSecret.Lock()
	mock.calls.CreateCoreInstanceSecret = append(mock.calls.CreateCoreInstanceSecret, callInfo)
	mock.lockCreateCoreInstanceSecret.Unlock()
	if mock.CreateCoreInstanceSecretFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreateCoreInstanceSecretFunc(contextMoqParam, createCoreInstanceSecret)
}

// CreateCoreInstanceSecretCalls gets all the calls that were made to CreateCoreInstanceSecret.
// Check the length with:
//
//	len(mockedClient.CreateCoreInstanceSecretCalls())
func (mock *ClientMock) CreateCoreInstanceSecretCalls() []struct {
	ContextMoqParam          context.Context
	CreateCoreInstanceSecret types.CreateCoreInstanceSecret
} {
	var calls []struct {
		ContextMoqParam          context.Context
		CreateCoreInstanceSecret types.CreateCoreInstanceSecret
	}
	mock.lockCreateCoreInstanceSecret.RLock()
	calls = mock.calls.CreateCoreInstanceSecret
	mock.lockCreateCoreInstanceSecret.RUnlock()
	return calls
}

// CreateEnvironment calls CreateEnvironmentFunc.
func (mock *ClientMock) CreateEnvironment(contextMoqParam context.Context, s string, createEnvironment types.CreateEnvironment) (types.CreatedEnvironment, error) {
	callInfo := struct {
		ContextMoqParam   context.Context
		S                 string
		CreateEnvironment types.CreateEnvironment
	}{
		ContextMoqParam:   contextMoqParam,
		S:                 s,
		CreateEnvironment: createEnvironment,
	}
	mock.lockCreateEnvironment.Lock()
	mock.calls.CreateEnvironment = append(mock.calls.CreateEnvironment, callInfo)
	mock.lockCreateEnvironment.Unlock()
	if mock.CreateEnvironmentFunc == nil {
		var (
			createdEnvironmentOut types.CreatedEnvironment
			errOut                error
		)
		return createdEnvironmentOut, errOut
	}
	return mock.CreateEnvironmentFunc(contextMoqParam, s, createEnvironment)
}

// CreateEnvironmentCalls gets all the calls that were made to CreateEnvironment.
// Check the length with:
//
//	len(mockedClient.CreateEnvironmentCalls())
func (mock *ClientMock) CreateEnvironmentCalls() []struct {
	ContextMoqParam   context.Context
	S                 string
	CreateEnvironment types.CreateEnvironment
} {
	var calls []struct {
		ContextMoqParam   context.Context
		S                 string
		CreateEnvironment types.CreateEnvironment
	}
	mock.lockCreateEnvironment.RLock()
	calls = mock.calls.CreateEnvironment
	mock.lockCreateEnvironment.RUnlock()
	return calls
}

// CreateFleet calls CreateFleetFunc.
func (mock *ClientMock) CreateFleet(contextMoqParam context.Context, createFleet types.CreateFleet) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		CreateFleet     types.CreateFleet
	}{
		ContextMoqParam: contextMoqParam,
		CreateFleet:     createFleet,
	}
	mock.lockCreateFleet.Lock()
	mock.calls.CreateFleet = append(mock.calls.CreateFleet, callInfo)
	mock.lockCreateFleet.Unlock()
	if mock.CreateFleetFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreateFleetFunc(contextMoqParam, createFleet)
}

// CreateFleetCalls gets all the calls that were made to CreateFleet.
// Check the length with:
//
//	len(mockedClient.CreateFleetCalls())
func (mock *ClientMock) CreateFleetCalls() []struct {
	ContextMoqParam context.Context
	CreateFleet     types.CreateFleet
} {
	var calls []struct {
		ContextMoqParam context.Context
		CreateFleet     types.CreateFleet
	}
	mock.lockCreateFleet.RLock()
	calls = mock.calls.CreateFleet
	mock.lockCreateFleet.RUnlock()
	return calls
}

// CreateIngestCheck calls CreateIngestCheckFunc.
func (mock *ClientMock) CreateIngestCheck(contextMoqParam context.Context, s string, createIngestCheck types.CreateIngestCheck) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam   context.Context
		S                 string
		CreateIngestCheck types.CreateIngestCheck
	}{
		ContextMoqParam:   contextMoqParam,
		S:                 s,
		CreateIngestCheck: createIngestCheck,
	}
	mock.lockCreateIngestCheck.Lock()
	mock.calls.CreateIngestCheck = append(mock.calls.CreateIngestCheck, callInfo)
	mock.lockCreateIngestCheck.Unlock()
	if mock.CreateIngestCheckFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreateIngestCheckFunc(contextMoqParam, s, createIngestCheck)
}

// CreateIngestCheckCalls gets all the calls that were made to CreateIngestCheck.
// Check the length with:
//
//	len(mockedClient.CreateIngestCheckCalls())
func (mock *ClientMock) CreateIngestCheckCalls() []struct {
	ContextMoqParam   context.Context
	S                 string
	CreateIngestCheck types.CreateIngestCheck
} {
	var calls []struct {
		ContextMoqParam   context.Context
		S                 string
		CreateIngestCheck types.CreateIngestCheck
	}
	mock.lockCreateIngestCheck.RLock()
	calls = mock.calls.CreateIngestCheck
	mock.lockCreateIngestCheck.RUnlock()
	return calls
}

// CreateInvitation calls CreateInvitationFunc.
func (mock *ClientMock) CreateInvitation(contextMoqParam context.Context, s string, createInvitation types.CreateInvitation) error {
	callInfo := struct {
		ContextMoqParam  context.Context
		S                string
		CreateInvitation types.CreateInvitation
	}{
		ContextMoqParam:  contextMoqParam,
		S:                s,
		CreateInvitation: createInvitation,
	}
	mock.lockCreateInvitation.Lock()
	mock.calls.CreateInvitation = append(mock.calls.CreateInvitation, callInfo)
	mock.lockCreateInvitation.Unlock()
	if mock.CreateInvitationFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CreateInvitationFunc(contextMoqParam, s, createInvitation)
}

// CreateInvitationCalls gets all the calls that were made to CreateInvitation.
// Check the length with:
//
//	len(mockedClient.CreateInvitationCalls())
func (mock *ClientMock) CreateInvitationCalls() []struct {
	ContextMoqParam  context.Context
	S                string
	CreateInvitation types.CreateInvitation
} {
	var calls []struct {
		ContextMoqParam  context.Context
		S                string
		CreateInvitation types.CreateInvitation
	}
	mock.lockCreateInvitation.RLock()
	calls = mock.calls.CreateInvitation
	mock.lockCreateInvitation.RUnlock()
	return calls
}

// CreatePipeline calls CreatePipelineFunc.
func (mock *ClientMock) CreatePipeline(contextMoqParam context.Context, s string, createPipeline types.CreatePipeline) (types.CreatedPipeline, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		CreatePipeline  types.CreatePipeline
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		CreatePipeline:  createPipeline,
	}
	mock.lockCreatePipeline.Lock()
	mock.calls.CreatePipeline = append(mock.calls.CreatePipeline, callInfo)
	mock.lockCreatePipeline.Unlock()
	if mock.CreatePipelineFunc == nil {
		var (
			createdPipelineOut types.CreatedPipeline
			errOut             error
		)
		return createdPipelineOut, errOut
	}
	return mock.CreatePipelineFunc(contextMoqParam, s, createPipeline)
}

// CreatePipelineCalls gets all the calls that were made to CreatePipeline.
// Check the length with:
//
//	len(mockedClient.CreatePipelineCalls())
func (mock *ClientMock) CreatePipelineCalls() []struct {
	ContextMoqParam context.Context
	S               string
	CreatePipeline  types.CreatePipeline
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		CreatePipeline  types.CreatePipeline
	}
	mock.lockCreatePipeline.RLock()
	calls = mock.calls.CreatePipeline
	mock.lockCreatePipeline.RUnlock()
	return calls
}

// CreatePipelineCheck calls CreatePipelineCheckFunc.
func (mock *ClientMock) CreatePipelineCheck(contextMoqParam context.Context, s string, createPipelineCheck types.CreatePipelineCheck) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam     context.Context
		S                   string
		CreatePipelineCheck types.CreatePipelineCheck
	}{
		ContextMoqParam:     contextMoqParam,
		S:                   s,
		CreatePipelineCheck: createPipelineCheck,
	}
	mock.lockCreatePipelineCheck.Lock()
	mock.calls.CreatePipelineCheck = append(mock.calls.CreatePipelineCheck, callInfo)
	mock.lockCreatePipelineCheck.Unlock()
	if mock.CreatePipelineCheckFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreatePipelineCheckFunc(contextMoqParam, s, createPipelineCheck)
}

// CreatePipelineCheckCalls gets all the calls that were made to CreatePipelineCheck.
// Check the length with:
//
//	len(mockedClient.CreatePipelineCheckCalls())
func (mock *ClientMock) CreatePipelineCheckCalls() []struct {
	ContextMoqParam     context.Context
	S                   string
	CreatePipelineCheck types.CreatePipelineCheck
} {
	var calls []struct {
		ContextMoqParam     context.Context
		S                   string
		CreatePipelineCheck types.CreatePipelineCheck
	}
	mock.lockCreatePipelineCheck.RLock()
	calls = mock.calls.CreatePipelineCheck
	mock.lockCreatePipelineCheck.RUnlock()
	return calls
}

// CreatePipelineFile calls CreatePipelineFileFunc.
func (mock *ClientMock) CreatePipelineFile(contextMoqParam context.Context, s string, createPipelineFile types.CreatePipelineFile) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam    context.Context
		S                  string
		CreatePipelineFile types.CreatePipelineFile
	}{
		ContextMoqParam:    contextMoqParam,
		S:                  s,
		CreatePipelineFile: createPipelineFile,
	}
	mock.lockCreatePipelineFile.Lock()
	mock.calls.CreatePipelineFile = append(mock.calls.CreatePipelineFile, callInfo)
	mock.lockCreatePipelineFile.Unlock()
	if mock.CreatePipelineFileFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreatePipelineFileFunc(contextMoqParam, s, createPipelineFile)
}

// CreatePipelineFileCalls gets all the calls that were made to CreatePipelineFile.
// Check the length with:
//
//	len(mockedClient.CreatePipelineFileCalls())
func (mock *ClientMock) CreatePipelineFileCalls() []struct {
	ContextMoqParam    context.Context
	S                  string
	CreatePipelineFile types.CreatePipelineFile
} {
	var calls []struct {
		ContextMoqParam    context.Context
		S                  string
		CreatePipelineFile types.CreatePipelineFile
	}
	mock.lockCreatePipelineFile.RLock()
	calls = mock.calls.CreatePipelineFile
	mock.lockCreatePipelineFile.RUnlock()
	return calls
}

// CreatePipelinePort calls CreatePipelinePortFunc.
func (mock *ClientMock) CreatePipelinePort(contextMoqParam context.Context, s string, createPipelinePort types.CreatePipelinePort) (types.CreatedPipelinePort, error) {
	callInfo := struct {
		ContextMoqParam    context.Context
		S                  string
		CreatePipelinePort types.CreatePipelinePort
	}{
		ContextMoqParam:    contextMoqParam,
		S:                  s,
		CreatePipelinePort: createPipelinePort,
	}
	mock.lockCreatePipelinePort.Lock()
	mock.calls.CreatePipelinePort = append(mock.calls.CreatePipelinePort, callInfo)
	mock.lockCreatePipelinePort.Unlock()
	if mock.CreatePipelinePortFunc == nil {
		var (
			createdPipelinePortOut types.CreatedPipelinePort
			errOut                 error
		)
		return createdPipelinePortOut, errOut
	}
	return mock.CreatePipelinePortFunc(contextMoqParam, s, createPipelinePort)
}

// CreatePipelinePortCalls gets all the calls that were made to CreatePipelinePort.
// Check the length with:
//
//	len(mockedClient.CreatePipelinePortCalls())
func (mock *ClientMock) CreatePipelinePortCalls() []struct {
	ContextMoqParam    context.Context
	S                  string
	CreatePipelinePort types.CreatePipelinePort
} {
	var calls []struct {
		ContextMoqParam    context.Context
		S                  string
		CreatePipelinePort types.CreatePipelinePort
	}
	mock.lockCreatePipelinePort.RLock()
	calls = mock.calls.CreatePipelinePort
	mock.lockCreatePipelinePort.RUnlock()
	return calls
}

// CreatePipelineSecret calls CreatePipelineSecretFunc.
func (mock *ClientMock) CreatePipelineSecret(contextMoqParam context.Context, s string, createPipelineSecret types.CreatePipelineSecret) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam      context.Context
		S                    string
		CreatePipelineSecret types.CreatePipelineSecret
	}{
		ContextMoqParam:      contextMoqParam,
		S:                    s,
		CreatePipelineSecret: createPipelineSecret,
	}
	mock.lockCreatePipelineSecret.Lock()
	mock.calls.CreatePipelineSecret = append(mock.calls.CreatePipelineSecret, callInfo)
	mock.lockCreatePipelineSecret.Unlock()
	if mock.CreatePipelineSecretFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreatePipelineSecretFunc(contextMoqParam, s, createPipelineSecret)
}

// CreatePipelineSecretCalls gets all the calls that were made to CreatePipelineSecret.
// Check the length with:
//
//	len(mockedClient.CreatePipelineSecretCalls())
func (mock *ClientMock) CreatePipelineSecretCalls() []struct {
	ContextMoqParam      context.Context
	S                    string
	CreatePipelineSecret types.CreatePipelineSecret
} {
	var calls []struct {
		ContextMoqParam      context.Context
		S                    string
		CreatePipelineSecret types.CreatePipelineSecret
	}
	mock.lockCreatePipelineSecret.RLock()
	calls = mock.calls.CreatePipelineSecret
	mock.lockCreatePipelineSecret.RUnlock()
	return calls
}

// CreateProcessingRule calls CreateProcessingRuleFunc.
func (mock *ClientMock) CreateProcessingRule(contextMoqParam context.Context, createProcessingRule types.CreateProcessingRule) (types.CreatedProcessingRule, error) {
	callInfo := struct {
		ContextMoqParam      context.Context
		CreateProcessingRule types.CreateProcessingRule
	}{
		ContextMoqParam:      contextMoqParam,
		CreateProcessingRule: createProcessingRule,
	}
	mock.lockCreateProcessingRule.Lock()
	mock.calls.CreateProcessingRule = append(mock.calls.CreateProcessingRule, callInfo)
	mock.lockCreateProcessingRule.Unlock()
	if mock.CreateProcessingRuleFunc == nil {
		var (
			createdProcessingRuleOut types.CreatedProcessingRule
			errOut                   error
		)
		return createdProcessingRuleOut, errOut
	}
	return mock.CreateProcessingRuleFunc(contextMoqParam, createProcessingRule)
}

// CreateProcessingRuleCalls gets all the calls that were made to CreateProcessingRule.
// Check the length with:
//
//	len(mockedClient.CreateProcessingRuleCalls())
func (mock *ClientMock) CreateProcessingRuleCalls() []struct {
	ContextMoqParam      context.Context
	CreateProcessingRule types.CreateProcessingRule
} {
	var calls []struct {
		ContextMoqParam      context.Context
		CreateProcessingRule types.CreateProcessingRule
	}
	mock.lockCreateProcessingRule.RLock()
	calls = mock.calls.CreateProcessingRule
	mock.lockCreateProcessingRule.RUnlock()
	return calls
}

// CreateProcessingRuleTemplate calls CreateProcessingRuleTemplateFunc.
func (mock *ClientMock) CreateProcessingRuleTemplate(contextMoqParam context.Context, createProcessingRuleTemplate types.CreateProcessingRuleTemplate) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam              context.Context
		CreateProcessingRuleTemplate types.CreateProcessingRuleTemplate
	}{
		ContextMoqParam:              contextMoqParam,
		CreateProcessingRuleTemplate: createProcessingRuleTemplate,
	}
	mock.lockCreateProcessingRuleTemplate.Lock()
	mock.calls.CreateProcessingRuleTemplate = append(mock.calls.CreateProcessingRuleTemplate, callInfo)
	mock.lockCreateProcessingRuleTemplate.Unlock()
	if mock.CreateProcessingRuleTemplateFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreateProcessingRuleTemplateFunc(contextMoqParam, createProcessingRuleTemplate)
}

// CreateProcessingRuleTemplateCalls gets all the calls that were made to CreateProcessingRuleTemplate.
// Check the length with:
//
//	len(mockedClient.CreateProcessingRuleTemplateCalls())
func (mock *ClientMock) CreateProcessingRuleTemplateCalls() []struct {
	ContextMoqParam              context.Context
	CreateProcessingRuleTemplate types.CreateProcessingRuleTemplate
} {
	var calls []struct {
		ContextMoqParam              context.Context
		CreateProcessingRuleTemplate types.CreateProcessingRuleTemplate
	}
	mock.lockCreateProcessingRuleTemplate.RLock()
	calls = mock.calls.CreateProcessingRuleTemplate
	mock.lockCreateProcessingRuleTemplate.RUnlock()
	return calls
}

// CreateProject calls CreateProjectFunc.
func (mock *ClientMock) CreateProject(contextMoqParam context.Context, createProject types.CreateProject) (types.CreatedProject, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		CreateProject   types.CreateProject
	}{
		ContextMoqParam: contextMoqParam,
		CreateProject:   createProject,
	}
	mock.lockCreateProject.Lock()
	mock.calls.CreateProject = append(mock.calls.CreateProject, callInfo)
	mock.lockCreateProject.Unlock()
	if mock.CreateProjectFunc == nil {
		var (
			createdProjectOut types.CreatedProject
			errOut            error
		)
		return createdProjectOut, errOut
	}
	return mock.CreateProjectFunc(contextMoqParam, createProject)
}

// CreateProjectCalls gets all the calls that were made to CreateProject.
// Check the length with:
//
//	len(mockedClient.CreateProjectCalls())
func (mock *ClientMock) CreateProjectCalls() []struct {
	ContextMoqParam context.Context
	CreateProject   types.CreateProject
} {
	var calls []struct {
		ContextMoqParam context.Context
		CreateProject   types.CreateProject
	}
	mock.lockCreateProject.RLock()
	calls = mock.calls.CreateProject
	mock.lockCreateProject.RUnlock()
	return calls
}

// CreateResourceProfile calls CreateResourceProfileFunc.
func (mock *ClientMock) CreateResourceProfile(contextMoqParam context.Context, s string, createResourceProfile types.CreateResourceProfile) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam       context.Context
		S                     string
		CreateResourceProfile types.CreateResourceProfile
	}{
		ContextMoqParam:       contextMoqParam,
		S:                     s,
		CreateResourceProfile: createResourceProfile,
	}
	mock.lockCreateResourceProfile.Lock()
	mock.calls.CreateResourceProfile = append(mock.calls.CreateResourceProfile, callInfo)
	mock.lockCreateResourceProfile.Unlock()
	if mock.CreateResourceProfileFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreateResourceProfileFunc(contextMoqParam, s, createResourceProfile)
}

// CreateResourceProfileCalls gets all the calls that were made to CreateResourceProfile.
// Check the length with:
//
//	len(mockedClient.CreateResourceProfileCalls())
func (mock *ClientMock) CreateResourceProfileCalls() []struct {
	ContextMoqParam       context.Context
	S                     string
	CreateResourceProfile types.CreateResourceProfile
} {
	var calls []struct {
		ContextMoqParam       context.Context
		S                     string
		CreateResourceProfile types.CreateResourceProfile
	}
	mock.lockCreateResourceProfile.RLock()
	calls = mock.calls.CreateResourceProfile
	mock.lockCreateResourceProfile.RUnlock()
	return calls
}

// CreateToken calls CreateTokenFunc.
func (mock *ClientMock) CreateToken(contextMoqParam context.Context, s string, createToken types.CreateToken) (types.Token, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		CreateToken     types.CreateToken
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		CreateToken:     createToken,
	}
	mock.lockCreateToken.Lock()
	mock.calls.CreateToken = append(mock.calls.CreateToken, callInfo)
	mock.lockCreateToken.Unlock()
	if mock.CreateTokenFunc == nil {
		var (
			tokenOut types.Token
			errOut   error
		)
		return tokenOut, errOut
	}
	return mock.CreateTokenFunc(contextMoqParam, s, createToken)
}

// CreateTokenCalls gets all the calls that were made to CreateToken.
// Check the length with:
//
//	len(mockedClient.CreateTokenCalls())
func (mock *ClientMock) CreateTokenCalls() []struct {
	ContextMoqParam context.Context
	S               string
	CreateToken     types.CreateToken
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		CreateToken     types.CreateToken
	}
	mock.lockCreateToken.RLock()
	calls = mock.calls.CreateToken
	mock.lockCreateToken.RUnlock()
	return calls
}

// CreateTraceRecord calls CreateTraceRecordFunc.
func (mock *ClientMock) CreateTraceRecord(contextMoqParam context.Context, s string, createTraceRecord types.CreateTraceRecord) (types.CreatedTraceRecord, error) {
	callInfo := struct {
		ContextMoqParam   context.Context
		S                 string
		CreateTraceRecord types.CreateTraceRecord
	}{
		ContextMoqParam:   contextMoqParam,
		S:                 s,
		CreateTraceRecord: createTraceRecord,
	}
	mock.lockCreateTraceRecord.Lock()
	mock.calls.CreateTraceRecord = append(mock.calls.CreateTraceRecord, callInfo)
	mock.lockCreateTraceRecord.Unlock()
	if mock.CreateTraceRecordFunc == nil {
		var (
			createdTraceRecordOut types.CreatedTraceRecord
			errOut                error
		)
		return createdTraceRecordOut, errOut
	}
	return mock.CreateTraceRecordFunc(contextMoqParam, s, createTraceRecord)
}

// CreateTraceRecordCalls gets all the calls that were made to CreateTraceRecord.
// Check the length with:
//
//	len(mockedClient.CreateTraceRecordCalls())
func (mock *ClientMock) CreateTraceRecordCalls() []struct {
	ContextMoqParam   context.Context
	S                 string
	CreateTraceRecord types.CreateTraceRecord
} {
	var calls []struct {
		ContextMoqParam   context.Context
		S                 string
		CreateTraceRecord types.CreateTraceRecord
	}
	mock.lockCreateTraceRecord.RLock()
	calls = mock.calls.CreateTraceRecord
	mock.lockCreateTraceRecord.RUnlock()
	return calls
}

// CreateTraceSession calls CreateTraceSessionFunc.
func (mock *ClientMock) CreateTraceSession(contextMoqParam context.Context, s string, createTraceSession types.CreateTraceSession) (types.Created, error) {
	callInfo := struct {
		ContextMoqParam    context.Context
		S                  string
		CreateTraceSession types.CreateTraceSession
	}{
		ContextMoqParam:    contextMoqParam,
		S:                  s,
		CreateTraceSession: createTraceSession,
	}
	mock.lockCreateTraceSession.Lock()
	mock.calls.CreateTraceSession = append(mock.calls.CreateTraceSession, callInfo)
	mock.lockCreateTraceSession.Unlock()
	if mock.CreateTraceSessionFunc == nil {
		var (
			createdOut types.Created
			errOut     error
		)
		return createdOut, errOut
	}
	return mock.CreateTraceSessionFunc(contextMoqParam, s, createTraceSession)
}

// CreateTraceSessionCalls gets all the calls that were made to CreateTraceSession.
// Check the length with:
//
//	len(mockedClient.CreateTraceSessionCalls())
func (mock *ClientMock) CreateTraceSessionCalls() []struct {
	ContextMoqParam    context.Context
	S                  string
	CreateTraceSession types.CreateTraceSession
} {
	var calls []struct {
		ContextMoqParam    context.Context
		S                  string
		CreateTraceSession types.CreateTraceSession
	}
	mock.lockCreateTraceSession.RLock()
	calls = mock.calls.CreateTraceSession
	mock.lockCreateTraceSession.RUnlock()
	return calls
}

// DeleteAgent calls DeleteAgentFunc.
func (mock *ClientMock) DeleteAgent(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteAgent.Lock()
	mock.calls.DeleteAgent = append(mock.calls.DeleteAgent, callInfo)
	mock.lockDeleteAgent.Unlock()
	if mock.DeleteAgentFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteAgentFunc(contextMoqParam, s)
}

// DeleteAgentCalls gets all the calls that were made to DeleteAgent.
// Check the length with:
//
//	len(mockedClient.DeleteAgentCalls())
func (mock *ClientMock) DeleteAgentCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteAgent.RLock()
	calls = mock.calls.DeleteAgent
	mock.lockDeleteAgent.RUnlock()
	return calls
}

// DeleteAgents calls DeleteAgentsFunc.
func (mock *ClientMock) DeleteAgents(contextMoqParam context.Context, s string, strings ...string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		Strings         []string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		Strings:         strings,
	}
	mock.lockDeleteAgents.Lock()
	mock.calls.DeleteAgents = append(mock.calls.DeleteAgents, callInfo)
	mock.lockDeleteAgents.Unlock()
	if mock.DeleteAgentsFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteAgentsFunc(contextMoqParam, s, strings...)
}

// DeleteAgentsCalls gets all the calls that were made to DeleteAgents.
// Check the length with:
//
//	len(mockedClient.DeleteAgentsCalls())
func (mock *ClientMock) DeleteAgentsCalls() []struct {
	ContextMoqParam context.Context
	S               string
	Strings         []string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		Strings         []string
	}
	mock.lockDeleteAgents.RLock()
	calls = mock.calls.DeleteAgents
	mock.lockDeleteAgents.RUnlock()
	return calls
}

// DeleteClusterObject calls DeleteClusterObjectFunc.
func (mock *ClientMock) DeleteClusterObject(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteClusterObject.Lock()
	mock.calls.DeleteClusterObject = append(mock.calls.DeleteClusterObject, callInfo)
	mock.lockDeleteClusterObject.Unlock()
	if mock.DeleteClusterObjectFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteClusterObjectFunc(contextMoqParam, s)
}

// DeleteClusterObjectCalls gets all the calls that were made to DeleteClusterObject.
// Check the length with:
//
//	len(mockedClient.DeleteClusterObjectCalls())
func (mock *ClientMock) DeleteClusterObjectCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteClusterObject.RLock()
	calls = mock.calls.DeleteClusterObject
	mock.lockDeleteClusterObject.RUnlock()
	return calls
}

// DeleteClusterObjectRegex calls DeleteClusterObjectRegexFunc.
func (mock *ClientMock) DeleteClusterObjectRegex(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteClusterObjectRegex.Lock()
	mock.calls.DeleteClusterObjectRegex = append(mock.calls.DeleteClusterObjectRegex, callInfo)
	mock.lockDeleteClusterObjectRegex.Unlock()
	if mock.DeleteClusterObjectRegexFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteClusterObjectRegexFunc(contextMoqParam, s)
}

// DeleteClusterObjectRegexCalls gets all the calls that were made to DeleteClusterObjectRegex.
// Check the length with:
//
//	len(mockedClient.DeleteClusterObjectRegexCalls())
func (mock *ClientMock) DeleteClusterObjectRegexCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteClusterObjectRegex.RLock()
	calls = mock.calls.DeleteClusterObjectRegex
	mock.lockDeleteClusterObjectRegex.RUnlock()
	return calls
}

// DeleteConfigSection calls DeleteConfigSectionFunc.
func (mock *ClientMock) DeleteConfigSection(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteConfigSection.Lock()
	mock.calls.DeleteConfigSection = append(mock.calls.DeleteConfigSection, callInfo)
	mock.lockDeleteConfigSection.Unlock()
	if mock.DeleteConfigSectionFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteConfigSectionFunc(contextMoqParam, s)
}

// DeleteConfigSectionCalls gets all the calls that were made to DeleteConfigSection.
// Check the length with:
//
//	len(mockedClient.DeleteConfigSectionCalls())
func (mock *ClientMock) DeleteConfigSectionCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteConfigSection.RLock()
	calls = mock.calls.DeleteConfigSection
	mock.lockDeleteConfigSection.RUnlock()
	return calls
}

// DeleteCoreInstance calls DeleteCoreInstanceFunc.
func (mock *ClientMock) DeleteCoreInstance(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteCoreInstance.Lock()
	mock.calls.DeleteCoreInstance = append(mock.calls.DeleteCoreInstance, callInfo)
	mock.lockDeleteCoreInstance.Unlock()
	if mock.DeleteCoreInstanceFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteCoreInstanceFunc(contextMoqParam, s)
}

// DeleteCoreInstanceCalls gets all the calls that were made to DeleteCoreInstance.
// Check the length with:
//
//	len(mockedClient.DeleteCoreInstanceCalls())
func (mock *ClientMock) DeleteCoreInstanceCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteCoreInstance.RLock()
	calls = mock.calls.DeleteCoreInstance
	mock.lockDeleteCoreInstance.RUnlock()
	return calls
}

// DeleteCoreInstanceCheck calls DeleteCoreInstanceCheckFunc.
func (mock *ClientMock) DeleteCoreInstanceCheck(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteCoreInstanceCheck.Lock()
	mock.calls.DeleteCoreInstanceCheck = append(mock.calls.DeleteCoreInstanceCheck, callInfo)
	mock.lockDeleteCoreInstanceCheck.Unlock()
	if mock.DeleteCoreInstanceCheckFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteCoreInstanceCheckFunc(contextMoqParam, s)
}

// DeleteCoreInstanceCheckCalls gets all the calls that were made to DeleteCoreInstanceCheck.
// Check the length with:
//
//	len(mockedClient.DeleteCoreInstanceCheckCalls())
func (mock *ClientMock) DeleteCoreInstanceCheckCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteCoreInstanceCheck.RLock()
	calls = mock.calls.DeleteCoreInstanceCheck
	mock.lockDeleteCoreInstanceCheck.RUnlock()
	return calls
}

// DeleteCoreInstanceFile calls DeleteCoreInstanceFileFunc.
func (mock *ClientMock) DeleteCoreInstanceFile(contextMoqParam context.Context, s string) (types.Deleted, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteCoreInstanceFile.Lock()
	mock.calls.DeleteCoreInstanceFile = append(mock.calls.DeleteCoreInstanceFile, callInfo)
	mock.lockDeleteCoreInstanceFile.Unlock()
	if mock.DeleteCoreInstanceFileFunc == nil {
		var (
			deletedOut types.Deleted
			errOut     error
		)
		return deletedOut, errOut
	}
	return mock.DeleteCoreInstanceFileFunc(contextMoqParam, s)
}

// DeleteCoreInstanceFileCalls gets all the calls that were made to DeleteCoreInstanceFile.
// Check the length with:
//
//	len(mockedClient.DeleteCoreInstanceFileCalls())
func (mock *ClientMock) DeleteCoreInstanceFileCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteCoreInstanceFile.RLock()
	calls = mock.calls.DeleteCoreInstanceFile
	mock.lockDeleteCoreInstanceFile.RUnlock()
	return calls
}

// DeleteCoreInstanceSecret calls DeleteCoreInstanceSecretFunc.
func (mock *ClientMock) DeleteCoreInstanceSecret(contextMoqParam context.Context, s string) (types.Deleted, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteCoreInstanceSecret.Lock()
	mock.calls.DeleteCoreInstanceSecret = append(mock.calls.DeleteCoreInstanceSecret, callInfo)
	mock.lockDeleteCoreInstanceSecret.Unlock()
	if mock.DeleteCoreInstanceSecretFunc == nil {
		var (
			deletedOut types.Deleted
			errOut     error
		)
		return deletedOut, errOut
	}
	return mock.DeleteCoreInstanceSecretFunc(contextMoqParam, s)
}

// DeleteCoreInstanceSecretCalls gets all the calls that were made to DeleteCoreInstanceSecret.
// Check the length with:
//
//	len(mockedClient.DeleteCoreInstanceSecretCalls())
func (mock *ClientMock) DeleteCoreInstanceSecretCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteCoreInstanceSecret.RLock()
	calls = mock.calls.DeleteCoreInstanceSecret
	mock.lockDeleteCoreInstanceSecret.RUnlock()
	return calls
}

// DeleteCoreInstances calls DeleteCoreInstancesFunc.
func (mock *ClientMock) DeleteCoreInstances(contextMoqParam context.Context, s string, strings ...string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		Strings         []string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		Strings:         strings,
	}
	mock.lockDeleteCoreInstances.Lock()
	mock.calls.DeleteCoreInstances = append(mock.calls.DeleteCoreInstances, callInfo)
	mock.lockDeleteCoreInstances.Unlock()
	if mock.DeleteCoreInstancesFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteCoreInstancesFunc(contextMoqParam, s, strings...)
}

// DeleteCoreInstancesCalls gets all the calls that were made to DeleteCoreInstances.
// Check the length with:
//
//	len(mockedClient.DeleteCoreInstancesCalls())
func (mock *ClientMock) DeleteCoreInstancesCalls() []struct {
	ContextMoqParam context.Context
	S               string
	Strings         []string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		Strings         []string
	}
	mock.lockDeleteCoreInstances.RLock()
	calls = mock.calls.DeleteCoreInstances
	mock.lockDeleteCoreInstances.RUnlock()
	return calls
}

// DeleteEnvironment calls DeleteEnvironmentFunc.
func (mock *ClientMock) DeleteEnvironment(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteEnvironment.Lock()
	mock.calls.DeleteEnvironment = append(mock.calls.DeleteEnvironment, callInfo)
	mock.lockDeleteEnvironment.Unlock()
	if mock.DeleteEnvironmentFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteEnvironmentFunc(contextMoqParam, s)
}

// DeleteEnvironmentCalls gets all the calls that were made to DeleteEnvironment.
// Check the length with:
//
//	len(mockedClient.DeleteEnvironmentCalls())
func (mock *ClientMock) DeleteEnvironmentCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteEnvironment.RLock()
	calls = mock.calls.DeleteEnvironment
	mock.lockDeleteEnvironment.RUnlock()
	return calls
}

// DeleteFleet calls DeleteFleetFunc.
func (mock *ClientMock) DeleteFleet(contextMoqParam context.Context, s string) (types.Deleted, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteFleet.Lock()
	mock.calls.DeleteFleet = append(mock.calls.DeleteFleet, callInfo)
	mock.lockDeleteFleet.Unlock()
	if mock.DeleteFleetFunc == nil {
		var (
			deletedOut types.Deleted
			errOut     error
		)
		return deletedOut, errOut
	}
	return mock.DeleteFleetFunc(contextMoqParam, s)
}

// DeleteFleetCalls gets all the calls that were made to DeleteFleet.
// Check the length with:
//
//	len(mockedClient.DeleteFleetCalls())
func (mock *ClientMock) DeleteFleetCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteFleet.RLock()
	calls = mock.calls.DeleteFleet
	mock.lockDeleteFleet.RUnlock()
	return calls
}

// DeleteIngestCheck calls DeleteIngestCheckFunc.
func (mock *ClientMock) DeleteIngestCheck(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteIngestCheck.Lock()
	mock.calls.DeleteIngestCheck = append(mock.calls.DeleteIngestCheck, callInfo)
	mock.lockDeleteIngestCheck.Unlock()
	if mock.DeleteIngestCheckFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteIngestCheckFunc(contextMoqParam, s)
}

// DeleteIngestCheckCalls gets all the calls that were made to DeleteIngestCheck.
// Check the length with:
//
//	len(mockedClient.DeleteIngestCheckCalls())
func (mock *ClientMock) DeleteIngestCheckCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteIngestCheck.RLock()
	calls = mock.calls.DeleteIngestCheck
	mock.lockDeleteIngestCheck.RUnlock()
	return calls
}

// DeletePipeline calls DeletePipelineFunc.
func (mock *ClientMock) DeletePipeline(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeletePipeline.Lock()
	mock.calls.DeletePipeline = append(mock.calls.DeletePipeline, callInfo)
	mock.lockDeletePipeline.Unlock()
	if mock.DeletePipelineFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePipelineFunc(contextMoqParam, s)
}

// DeletePipelineCalls gets all the calls that were made to DeletePipeline.
// Check the length with:
//
//	len(mockedClient.DeletePipelineCalls())
func (mock *ClientMock) DeletePipelineCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeletePipeline.RLock()
	calls = mock.calls.DeletePipeline
	mock.lockDeletePipeline.RUnlock()
	return calls
}

// DeletePipelineCheck calls DeletePipelineCheckFunc.
func (mock *ClientMock) DeletePipelineCheck(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeletePipelineCheck.Lock()
	mock.calls.DeletePipelineCheck = append(mock.calls.DeletePipelineCheck, callInfo)
	mock.lockDeletePipelineCheck.Unlock()
	if mock.DeletePipelineCheckFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePipelineCheckFunc(contextMoqParam, s)
}

// DeletePipelineCheckCalls gets all the calls that were made to DeletePipelineCheck.
// Check the length with:
//
//	len(mockedClient.DeletePipelineCheckCalls())
func (mock *ClientMock) DeletePipelineCheckCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeletePipelineCheck.RLock()
	calls = mock.calls.DeletePipelineCheck
	mock.lockDeletePipelineCheck.RUnlock()
	return calls
}

// DeletePipelineClusterObjects calls DeletePipelineClusterObjectsFunc.
func (mock *ClientMock) DeletePipelineClusterObjects(contextMoqParam context.Context, s string, strings ...string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		Strings         []string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		Strings:         strings,
	}
	mock.lockDeletePipelineClusterObjects.Lock()
	mock.calls.DeletePipelineClusterObjects = append(mock.calls.DeletePipelineClusterObjects, callInfo)
	mock.lockDeletePipelineClusterObjects.Unlock()
	if mock.DeletePipelineClusterObjectsFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePipelineClusterObjectsFunc(contextMoqParam, s, strings...)
}

// DeletePipelineClusterObjectsCalls gets all the calls that were made to DeletePipelineClusterObjects.
// Check the length with:
//
//	len(mockedClient.DeletePipelineClusterObjectsCalls())
func (mock *ClientMock) DeletePipelineClusterObjectsCalls() []struct {
	ContextMoqParam context.Context
	S               string
	Strings         []string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		Strings         []string
	}
	mock.lockDeletePipelineClusterObjects.RLock()
	calls = mock.calls.DeletePipelineClusterObjects
	mock.lockDeletePipelineClusterObjects.RUnlock()
	return calls
}

// DeletePipelineFile calls DeletePipelineFileFunc.
func (mock *ClientMock) DeletePipelineFile(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeletePipelineFile.Lock()
	mock.calls.DeletePipelineFile = append(mock.calls.DeletePipelineFile, callInfo)
	mock.lockDeletePipelineFile.Unlock()
	if mock.DeletePipelineFileFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePipelineFileFunc(contextMoqParam, s)
}

// DeletePipelineFileCalls gets all the calls that were made to DeletePipelineFile.
// Check the length with:
//
//	len(mockedClient.DeletePipelineFileCalls())
func (mock *ClientMock) DeletePipelineFileCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeletePipelineFile.RLock()
	calls = mock.calls.DeletePipelineFile
	mock.lockDeletePipelineFile.RUnlock()
	return calls
}

// DeletePipelinePort calls DeletePipelinePortFunc.
func (mock *ClientMock) DeletePipelinePort(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeletePipelinePort.Lock()
	mock.calls.DeletePipelinePort = append(mock.calls.DeletePipelinePort, callInfo)
	mock.lockDeletePipelinePort.Unlock()
	if mock.DeletePipelinePortFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePipelinePortFunc(contextMoqParam, s)
}

// DeletePipelinePortCalls gets all the calls that were made to DeletePipelinePort.
// Check the length with:
//
//	len(mockedClient.DeletePipelinePortCalls())
func (mock *ClientMock) DeletePipelinePortCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeletePipelinePort.RLock()
	calls = mock.calls.DeletePipelinePort
	mock.lockDeletePipelinePort.RUnlock()
	return calls
}

// DeletePipelineSecret calls DeletePipelineSecretFunc.
func (mock *ClientMock) DeletePipelineSecret(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeletePipelineSecret.Lock()
	mock.calls.DeletePipelineSecret = append(mock.calls.DeletePipelineSecret, callInfo)
	mock.lockDeletePipelineSecret.Unlock()
	if mock.DeletePipelineSecretFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePipelineSecretFunc(contextMoqParam, s)
}

// DeletePipelineSecretCalls gets all the calls that were made to DeletePipelineSecret.
// Check the length with:
//
//	len(mockedClient.DeletePipelineSecretCalls())
func (mock *ClientMock) DeletePipelineSecretCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeletePipelineSecret.RLock()
	calls = mock.calls.DeletePipelineSecret
	mock.lockDeletePipelineSecret.RUnlock()
	return calls
}

// DeletePipelines calls DeletePipelinesFunc.
func (mock *ClientMock) DeletePipelines(contextMoqParam context.Context, s string, strings ...string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		Strings         []string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		Strings:         strings,
	}
	mock.lockDeletePipelines.Lock()
	mock.calls.DeletePipelines = append(mock.calls.DeletePipelines, callInfo)
	mock.lockDeletePipelines.Unlock()
	if mock.DeletePipelinesFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePipelinesFunc(contextMoqParam, s, strings...)
}

// DeletePipelinesCalls gets all the calls that were made to DeletePipelines.
// Check the length with:
//
//	len(mockedClient.DeletePipelinesCalls())
func (mock *ClientMock) DeletePipelinesCalls() []struct {
	ContextMoqParam context.Context
	S               string
	Strings         []string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		Strings         []string
	}
	mock.lockDeletePipelines.RLock()
	calls = mock.calls.DeletePipelines
	mock.lockDeletePipelines.RUnlock()
	return calls
}

// DeleteProcessingRule calls DeleteProcessingRuleFunc.
func (mock *ClientMock) DeleteProcessingRule(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteProcessingRule.Lock()
	mock.calls.DeleteProcessingRule = append(mock.calls.DeleteProcessingRule, callInfo)
	mock.lockDeleteProcessingRule.Unlock()
	if mock.DeleteProcessingRuleFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteProcessingRuleFunc(contextMoqParam, s)
}

// DeleteProcessingRuleCalls gets all the calls that were made to DeleteProcessingRule.
// Check the length with:
//
//	len(mockedClient.DeleteProcessingRuleCalls())
func (mock *ClientMock) DeleteProcessingRuleCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteProcessingRule.RLock()
	calls = mock.calls.DeleteProcessingRule
	mock.lockDeleteProcessingRule.RUnlock()
	return calls
}

// DeleteProcessingRuleTemplate calls DeleteProcessingRuleTemplateFunc.
func (mock *ClientMock) DeleteProcessingRuleTemplate(contextMoqParam context.Context, s string) (types.Deleted, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteProcessingRuleTemplate.Lock()
	mock.calls.DeleteProcessingRuleTemplate = append(mock.calls.DeleteProcessingRuleTemplate, callInfo)
	mock.lockDeleteProcessingRuleTemplate.Unlock()
	if mock.DeleteProcessingRuleTemplateFunc == nil {
		var (
			deletedOut types.Deleted
			errOut     error
		)
		return deletedOut, errOut
	}
	return mock.DeleteProcessingRuleTemplateFunc(contextMoqParam, s)
}

// DeleteProcessingRuleTemplateCalls gets all the calls that were made to DeleteProcessingRuleTemplate.
// Check the length with:
//
//	len(mockedClient.DeleteProcessingRuleTemplateCalls())
func (mock *ClientMock) DeleteProcessingRuleTemplateCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteProcessingRuleTemplate.RLock()
	calls = mock.calls.DeleteProcessingRuleTemplate
	mock.lockDeleteProcessingRuleTemplate.RUnlock()
	return calls
}

// DeleteResourceProfile calls DeleteResourceProfileFunc.
func (mock *ClientMock) DeleteResourceProfile(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteResourceProfile.Lock()
	mock.calls.DeleteResourceProfile = append(mock.calls.DeleteResourceProfile, callInfo)
	mock.lockDeleteResourceProfile.Unlock()
	if mock.DeleteResourceProfileFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteResourceProfileFunc(contextMoqParam, s)
}

// DeleteResourceProfileCalls gets all the calls that were made to DeleteResourceProfile.
// Check the length with:
//
//	len(mockedClient.DeleteResourceProfileCalls())
func (mock *ClientMock) DeleteResourceProfileCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteResourceProfile.RLock()
	calls = mock.calls.DeleteResourceProfile
	mock.lockDeleteResourceProfile.RUnlock()
	return calls
}

// DeleteToken calls DeleteTokenFunc.
func (mock *ClientMock) DeleteToken(contextMoqParam context.Context, s string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockDeleteToken.Lock()
	mock.calls.DeleteToken = append(mock.calls.DeleteToken, callInfo)
	mock.lockDeleteToken.Unlock()
	if mock.DeleteTokenFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteTokenFunc(contextMoqParam, s)
}

// DeleteTokenCalls gets all the calls that were made to DeleteToken.
// Check the length with:
//
//	len(mockedClient.DeleteTokenCalls())
func (mock *ClientMock) DeleteTokenCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockDeleteToken.RLock()
	calls = mock.calls.DeleteToken
	mock.lockDeleteToken.RUnlock()
	return calls
}

// DismissAgentError calls DismissAgentErrorFunc.
func (mock *ClientMock) DismissAgentError(contextMoqParam context.Context, dismissAgentError types.DismissAgentError) (types.DismissedAgentError, error) {
	callInfo := struct {
		ContextMoqParam   context.Context
		DismissAgentError types.DismissAgentError
	}{
		ContextMoqParam:   contextMoqParam,
		DismissAgentError: dismissAgentError,
	}
	mock.lockDismissAgentError.Lock()
	mock.calls.DismissAgentError = append(mock.calls.DismissAgentError, callInfo)
	mock.lockDismissAgentError.Unlock()
	if mock.DismissAgentErrorFunc == nil {
		var (
			dismissedAgentErrorOut types.DismissedAgentError
			errOut                 error
		)
		return dismissedAgentErrorOut, errOut
	}
	return mock.DismissAgentErrorFunc(contextMoqParam, dismissAgentError)
}

// DismissAgentErrorCalls gets all the calls that were made to DismissAgentError.
// Check the length with:
//
//	len(mockedClient.DismissAgentErrorCalls())
func (mock *ClientMock) DismissAgentErrorCalls() []struct {
	ContextMoqParam   context.Context
	DismissAgentError types.DismissAgentError
} {
	var calls []struct {
		ContextMoqParam   context.Context
		DismissAgentError types.DismissAgentError
	}
	mock.lockDismissAgentError.RLock()
	calls = mock.calls.DismissAgentError
	mock.lockDismissAgentError.RUnlock()
	return calls
}

// Environments calls EnvironmentsFunc.
func (mock *ClientMock) Environments(contextMoqParam context.Context, s string, environmentsParams types.EnvironmentsParams) (types.Environments, error) {
	callInfo := struct {
		ContextMoqParam    context.Context
		S                  string
		EnvironmentsParams types.EnvironmentsParams
	}{
		ContextMoqParam:    contextMoqParam,
		S:                  s,
		EnvironmentsParams: environmentsParams,
	}
	mock.lockEnvironments.Lock()
	mock.calls.Environments = append(mock.calls.Environments, callInfo)
	mock.lockEnvironments.Unlock()
	if mock.EnvironmentsFunc == nil {
		var (
			environmentsOut types.Environments
			errOut          error
		)
		return environmentsOut, errOut
	}
	return mock.EnvironmentsFunc(contextMoqParam, s, environmentsParams)
}

// EnvironmentsCalls gets all the calls that were made to Environments.
// Check the length with:
//
//	len(mockedClient.EnvironmentsCalls())
func (mock *ClientMock) EnvironmentsCalls() []struct {
	ContextMoqParam    context.Context
	S                  string
	EnvironmentsParams types.EnvironmentsParams
} {
	var calls []struct {
		ContextMoqParam    context.Context
		S                  string
		EnvironmentsParams types.EnvironmentsParams
	}
	mock.lockEnvironments.RLock()
	calls = mock.calls.Environments
	mock.lockEnvironments.RUnlock()
	return calls
}

// Fleet calls FleetFunc.
func (mock *ClientMock) Fleet(contextMoqParam context.Context, fleetParams types.FleetParams) (types.Fleet, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		FleetParams     types.FleetParams
	}{
		ContextMoqParam: contextMoqParam,
		FleetParams:     fleetParams,
	}
	mock.lockFleet.Lock()
	mock.calls.Fleet = append(mock.calls.Fleet, callInfo)
	mock.lockFleet.Unlock()
	if mock.FleetFunc == nil {
		var (
			fleetOut types.Fleet
			errOut   error
		)
		return fleetOut, errOut
	}
	return mock.FleetFunc(contextMoqParam, fleetParams)
}

// FleetCalls gets all the calls that were made to Fleet.
// Check the length with:
//
//	len(mockedClient.FleetCalls())
func (mock *ClientMock) FleetCalls() []struct {
	ContextMoqParam context.Context
	FleetParams     types.FleetParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		FleetParams     types.FleetParams
	}
	mock.lockFleet.RLock()
	calls = mock.calls.Fleet
	mock.lockFleet.RUnlock()
	return calls
}

// FleetConfig calls FleetConfigFunc.
func (mock *ClientMock) FleetConfig(contextMoqParam context.Context, s string, fleetConfigParams types.FleetConfigParams) (*fluentbitconfig.Config, error) {
	callInfo := struct {
		ContextMoqParam   context.Context
		S                 string
		FleetConfigParams types.FleetConfigParams
	}{
		ContextMoqParam:   contextMoqParam,
		S:                 s,
		FleetConfigParams: fleetConfigParams,
	}
	mock.lockFleetConfig.Lock()
	mock.calls.FleetConfig = append(mock.calls.FleetConfig, callInfo)
	mock.lockFleetConfig.Unlock()
	if mock.FleetConfigFunc == nil {
		var (
			configOut *fluentbitconfig.Config
			errOut    error
		)
		return configOut, errOut
	}
	return mock.FleetConfigFunc(contextMoqParam, s, fleetConfigParams)
}

// FleetConfigCalls gets all the calls that were made to FleetConfig.
// Check the length with:
//
//	len(mockedClient.FleetConfigCalls())
func (mock *ClientMock) FleetConfigCalls() []struct {
	ContextMoqParam   context.Context
	S                 string
	FleetConfigParams types.FleetConfigParams
} {
	var calls []struct {
		ContextMoqParam   context.Context
		S                 string
		FleetConfigParams types.FleetConfigParams
	}
	mock.lockFleetConfig.RLock()
	calls = mock.calls.FleetConfig
	mock.lockFleetConfig.RUnlock()
	return calls
}

// Fleets calls FleetsFunc.
func (mock *ClientMock) Fleets(contextMoqParam context.Context, fleetsParams types.FleetsParams) (types.Fleets, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		FleetsParams    types.FleetsParams
	}{
		ContextMoqParam: contextMoqParam,
		FleetsParams:    fleetsParams,
	}
	mock.lockFleets.Lock()
	mock.calls.Fleets = append(mock.calls.Fleets, callInfo)
	mock.lockFleets.Unlock()
	if mock.FleetsFunc == nil {
		var (
			fleetsOut types.Fleets
			errOut    error
		)
		return fleetsOut, errOut
	}
	return mock.FleetsFunc(contextMoqParam, fleetsParams)
}

// FleetsCalls gets all the calls that were made to Fleets.
// Check the length with:
//
//	len(mockedClient.FleetsCalls())
func (mock *ClientMock) FleetsCalls() []struct {
	ContextMoqParam context.Context
	FleetsParams    types.FleetsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		FleetsParams    types.FleetsParams
	}
	mock.lockFleets.RLock()
	calls = mock.calls.Fleets
	mock.lockFleets.RUnlock()
	return calls
}

// Health calls HealthFunc.
func (mock *ClientMock) Health(contextMoqParam context.Context) (types.Health, error) {
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	if mock.HealthFunc == nil {
		var (
			healthOut types.Health
			errOut    error
		)
		return healthOut, errOut
	}
	return mock.HealthFunc(contextMoqParam)
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//
//	len(mockedClient.HealthCalls())
func (mock *ClientMock) HealthCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}

// IngestCheck calls IngestCheckFunc.
func (mock *ClientMock) IngestCheck(contextMoqParam context.Context, s string) (types.IngestCheck, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockIngestCheck.Lock()
	mock.calls.IngestCheck = append(mock.calls.IngestCheck, callInfo)
	mock.lockIngestCheck.Unlock()
	if mock.IngestCheckFunc == nil {
		var (
			ingestCheckOut types.IngestCheck
			errOut         error
		)
		return ingestCheckOut, errOut
	}
	return mock.IngestCheckFunc(contextMoqParam, s)
}

// IngestCheckCalls gets all the calls that were made to IngestCheck.
// Check the length with:
//
//	len(mockedClient.IngestCheckCalls())
func (mock *ClientMock) IngestCheckCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockIngestCheck.RLock()
	calls = mock.calls.IngestCheck
	mock.lockIngestCheck.RUnlock()
	return calls
}

// IngestChecks calls IngestChecksFunc.
func (mock *ClientMock) IngestChecks(contextMoqParam context.Context, s string, ingestChecksParams types.IngestChecksParams) (types.IngestChecks, error) {
	callInfo := struct {
		ContextMoqParam    context.Context
		S                  string
		IngestChecksParams types.IngestChecksParams
	}{
		ContextMoqParam:    contextMoqParam,
		S:                  s,
		IngestChecksParams: ingestChecksParams,
	}
	mock.lockIngestChecks.Lock()
	mock.calls.IngestChecks = append(mock.calls.IngestChecks, callInfo)
	mock.lockIngestChecks.Unlock()
	if mock.IngestChecksFunc == nil {
		var (
			ingestChecksOut types.IngestChecks
			errOut          error
		)
		return ingestChecksOut, errOut
	}
	return mock.IngestChecksFunc(contextMoqParam, s, ingestChecksParams)
}

// IngestChecksCalls gets all the calls that were made to IngestChecks.
// Check the length with:
//
//	len(mockedClient.IngestChecksCalls())
func (mock *ClientMock) IngestChecksCalls() []struct {
	ContextMoqParam    context.Context
	S                  string
	IngestChecksParams types.IngestChecksParams
} {
	var calls []struct {
		ContextMoqParam    context.Context
		S                  string
		IngestChecksParams types.IngestChecksParams
	}
	mock.lockIngestChecks.RLock()
	calls = mock.calls.IngestChecks
	mock.lockIngestChecks.RUnlock()
	return calls
}

// Members calls MembersFunc.
func (mock *ClientMock) Members(contextMoqParam context.Context, s string, membersParams types.MembersParams) (types.Memberships, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MembersParams   types.MembersParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MembersParams:   membersParams,
	}
	mock.lockMembers.Lock()
	mock.calls.Members = append(mock.calls.Members, callInfo)
	mock.lockMembers.Unlock()
	if mock.MembersFunc == nil {
		var (
			membershipsOut types.Memberships
			errOut         error
		)
		return membershipsOut, errOut
	}
	return mock.MembersFunc(contextMoqParam, s, membersParams)
}

// MembersCalls gets all the calls that were made to Members.
// Check the length with:
//
//	len(mockedClient.MembersCalls())
func (mock *ClientMock) MembersCalls() []struct {
	ContextMoqParam context.Context
	S               string
	MembersParams   types.MembersParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MembersParams   types.MembersParams
	}
	mock.lockMembers.RLock()
	calls = mock.calls.Members
	mock.lockMembers.RUnlock()
	return calls
}

// Pipeline calls PipelineFunc.
func (mock *ClientMock) Pipeline(contextMoqParam context.Context, s string, pipelineParams types.PipelineParams) (types.Pipeline, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		PipelineParams  types.PipelineParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		PipelineParams:  pipelineParams,
	}
	mock.lockPipeline.Lock()
	mock.calls.Pipeline = append(mock.calls.Pipeline, callInfo)
	mock.lockPipeline.Unlock()
	if mock.PipelineFunc == nil {
		var (
			pipelineOut types.Pipeline
			errOut      error
		)
		return pipelineOut, errOut
	}
	return mock.PipelineFunc(contextMoqParam, s, pipelineParams)
}

// PipelineCalls gets all the calls that were made to Pipeline.
// Check the length with:
//
//	len(mockedClient.PipelineCalls())
func (mock *ClientMock) PipelineCalls() []struct {
	ContextMoqParam context.Context
	S               string
	PipelineParams  types.PipelineParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		PipelineParams  types.PipelineParams
	}
	mock.lockPipeline.RLock()
	calls = mock.calls.Pipeline
	mock.lockPipeline.RUnlock()
	return calls
}

// PipelineCheck calls PipelineCheckFunc.
func (mock *ClientMock) PipelineCheck(contextMoqParam context.Context, s string) (types.PipelineCheck, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockPipelineCheck.Lock()
	mock.calls.PipelineCheck = append(mock.calls.PipelineCheck, callInfo)
	mock.lockPipelineCheck.Unlock()
	if mock.PipelineCheckFunc == nil {
		var (
			pipelineCheckOut types.PipelineCheck
			errOut           error
		)
		return pipelineCheckOut, errOut
	}
	return mock.PipelineCheckFunc(contextMoqParam, s)
}

// PipelineCheckCalls gets all the calls that were made to PipelineCheck.
// Check the length with:
//
//	len(mockedClient.PipelineCheckCalls())
func (mock *ClientMock) PipelineCheckCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockPipelineCheck.RLock()
	calls = mock.calls.PipelineCheck
	mock.lockPipelineCheck.RUnlock()
	return calls
}

// PipelineChecks calls PipelineChecksFunc.
func (mock *ClientMock) PipelineChecks(contextMoqParam context.Context, s string, pipelineChecksParams types.PipelineChecksParams) (types.PipelineChecks, error) {
	callInfo := struct {
		ContextMoqParam      context.Context
		S                    string
		PipelineChecksParams types.PipelineChecksParams
	}{
		ContextMoqParam:      contextMoqParam,
		S:                    s,
		PipelineChecksParams: pipelineChecksParams,
	}
	mock.lockPipelineChecks.Lock()
	mock.calls.PipelineChecks = append(mock.calls.PipelineChecks, callInfo)
	mock.lockPipelineChecks.Unlock()
	if mock.PipelineChecksFunc == nil {
		var (
			pipelineChecksOut types.PipelineChecks
			errOut            error
		)
		return pipelineChecksOut, errOut
	}
	return mock.PipelineChecksFunc(contextMoqParam, s, pipelineChecksParams)
}

// PipelineChecksCalls gets all the calls that were made to PipelineChecks.
// Check the length with:
//
//	len(mockedClient.PipelineChecksCalls())
func (mock *ClientMock) PipelineChecksCalls() []struct {
	ContextMoqParam      context.Context
	S                    string
	PipelineChecksParams types.PipelineChecksParams
} {
	var calls []struct {
		ContextMoqParam      context.Context
		S                    string
		PipelineChecksParams types.PipelineChecksParams
	}
	mock.lockPipelineChecks.RLock()
	calls = mock.calls.PipelineChecks
	mock.lockPipelineChecks.RUnlock()
	return calls
}

// PipelineClusterObjects calls PipelineClusterObjectsFunc.
func (mock *ClientMock) PipelineClusterObjects(contextMoqParam context.Context, s string, pipelineClusterObjectsParams types.PipelineClusterObjectsParams) (types.ClusterObjects, error) {
	callInfo := struct {
		ContextMoqParam              context.Context
		S                            string
		PipelineClusterObjectsParams types.PipelineClusterObjectsParams
	}{
		ContextMoqParam:              contextMoqParam,
		S:                            s,
		PipelineClusterObjectsParams: pipelineClusterObjectsParams,
	}
	mock.lockPipelineClusterObjects.Lock()
	mock.calls.PipelineClusterObjects = append(mock.calls.PipelineClusterObjects, callInfo)
	mock.lockPipelineClusterObjects.Unlock()
	if mock.PipelineClusterObjectsFunc == nil {
		var (
			clusterObjectsOut types.ClusterObjects
			errOut            error
		)
		return clusterObjectsOut, errOut
	}
	return mock.PipelineClusterObjectsFunc(contextMoqParam, s, pipelineClusterObjectsParams)
}

// PipelineClusterObjectsCalls gets all the calls that were made to PipelineClusterObjects.
// Check the length with:
//
//	len(mockedClient.PipelineClusterObjectsCalls())
func (mock *ClientMock) PipelineClusterObjectsCalls() []struct {
	ContextMoqParam              context.Context
	S                            string
	PipelineClusterObjectsParams types.PipelineClusterObjectsParams
} {
	var calls []struct {
		ContextMoqParam              context.Context
		S                            string
		PipelineClusterObjectsParams types.PipelineClusterObjectsParams
	}
	mock.lockPipelineClusterObjects.RLock()
	calls = mock.calls.PipelineClusterObjects
	mock.lockPipelineClusterObjects.RUnlock()
	return calls
}

// PipelineConfigHistory calls PipelineConfigHistoryFunc.
func (mock *ClientMock) PipelineConfigHistory(contextMoqParam context.Context, s string, pipelineConfigHistoryParams types.PipelineConfigHistoryParams) (types.PipelineConfigHistory, error) {
	callInfo := struct {
		ContextMoqParam             context.Context
		S                           string
		PipelineConfigHistoryParams types.PipelineConfigHistoryParams
	}{
		ContextMoqParam:             contextMoqParam,
		S:                           s,
		PipelineConfigHistoryParams: pipelineConfigHistoryParams,
	}
	mock.lockPipelineConfigHistory.Lock()
	mock.calls.PipelineConfigHistory = append(mock.calls.PipelineConfigHistory, callInfo)
	mock.lockPipelineConfigHistory.Unlock()
	if mock.PipelineConfigHistoryFunc == nil {
		var (
			pipelineConfigHistoryOut types.PipelineConfigHistory
			errOut                   error
		)
		return pipelineConfigHistoryOut, errOut
	}
	return mock.PipelineConfigHistoryFunc(contextMoqParam, s, pipelineConfigHistoryParams)
}

// PipelineConfigHistoryCalls gets all the calls that were made to PipelineConfigHistory.
// Check the length with:
//
//	len(mockedClient.PipelineConfigHistoryCalls())
func (mock *ClientMock) PipelineConfigHistoryCalls() []struct {
	ContextMoqParam             context.Context
	S                           string
	PipelineConfigHistoryParams types.PipelineConfigHistoryParams
} {
	var calls []struct {
		ContextMoqParam             context.Context
		S                           string
		PipelineConfigHistoryParams types.PipelineConfigHistoryParams
	}
	mock.lockPipelineConfigHistory.RLock()
	calls = mock.calls.PipelineConfigHistory
	mock.lockPipelineConfigHistory.RUnlock()
	return calls
}

// PipelineFile calls PipelineFileFunc.
func (mock *ClientMock) PipelineFile(contextMoqParam context.Context, s string) (types.PipelineFile, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockPipelineFile.Lock()
	mock.calls.PipelineFile = append(mock.calls.PipelineFile, callInfo)
	mock.lockPipelineFile.Unlock()
	if mock.PipelineFileFunc == nil {
		var (
			pipelineFileOut types.PipelineFile
			errOut          error
		)
		return pipelineFileOut, errOut
	}
	return mock.PipelineFileFunc(contextMoqParam, s)
}

// PipelineFileCalls gets all the calls that were made to PipelineFile.
// Check the length with:
//
//	len(mockedClient.PipelineFileCalls())
func (mock *ClientMock) PipelineFileCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockPipelineFile.RLock()
	calls = mock.calls.PipelineFile
	mock.lockPipelineFile.RUnlock()
	return calls
}

// PipelineFiles calls PipelineFilesFunc.
func (mock *ClientMock) PipelineFiles(contextMoqParam context.Context, s string, pipelineFilesParams types.PipelineFilesParams) (types.PipelineFiles, error) {
	callInfo := struct {
		ContextMoqParam     context.Context
		S                   string
		PipelineFilesParams types.PipelineFilesParams
	}{
		ContextMoqParam:     contextMoqParam,
		S:                   s,
		PipelineFilesParams: pipelineFilesParams,
	}
	mock.lockPipelineFiles.Lock()
	mock.calls.PipelineFiles = append(mock.calls.PipelineFiles, callInfo)
	mock.lockPipelineFiles.Unlock()
	if mock.PipelineFilesFunc == nil {
		var (
			pipelineFilesOut types.PipelineFiles
			errOut           error
		)
		return pipelineFilesOut, errOut
	}
	return mock.PipelineFilesFunc(contextMoqParam, s, pipelineFilesParams)
}

// PipelineFilesCalls gets all the calls that were made to PipelineFiles.
// Check the length with:
//
//	len(mockedClient.PipelineFilesCalls())
func (mock *ClientMock) PipelineFilesCalls() []struct {
	ContextMoqParam     context.Context
	S                   string
	PipelineFilesParams types.PipelineFilesParams
} {
	var calls []struct {
		ContextMoqParam     context.Context
		S                   string
		PipelineFilesParams types.PipelineFilesParams
	}
	mock.lockPipelineFiles.RLock()
	calls = mock.calls.PipelineFiles
	mock.lockPipelineFiles.RUnlock()
	return calls
}

// PipelineMetadata calls PipelineMetadataFunc.
func (mock *ClientMock) PipelineMetadata(contextMoqParam context.Context, s string, strings ...string) (types.PipelineMetadata, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		Strings         []string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		Strings:         strings,
	}
	mock.lockPipelineMetadata.Lock()
	mock.calls.PipelineMetadata = append(mock.calls.PipelineMetadata, callInfo)
	mock.lockPipelineMetadata.Unlock()
	if mock.PipelineMetadataFunc == nil {
		var (
			pipelineMetadataOut types.PipelineMetadata
			errOut              error
		)
		return pipelineMetadataOut, errOut
	}
	return mock.PipelineMetadataFunc(contextMoqParam, s, strings...)
}

// PipelineMetadataCalls gets all the calls that were made to PipelineMetadata.
// Check the length with:
//
//	len(mockedClient.PipelineMetadataCalls())
func (mock *ClientMock) PipelineMetadataCalls() []struct {
	ContextMoqParam context.Context
	S               string
	Strings         []string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		Strings         []string
	}
	mock.lockPipelineMetadata.RLock()
	calls = mock.calls.PipelineMetadata
	mock.lockPipelineMetadata.RUnlock()
	return calls
}

// PipelineMetrics calls PipelineMetricsFunc.
func (mock *ClientMock) PipelineMetrics(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummary, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockPipelineMetrics.Lock()
	mock.calls.PipelineMetrics = append(mock.calls.PipelineMetrics, callInfo)
	mock.lockPipelineMetrics.Unlock()
	if mock.PipelineMetricsFunc == nil {
		var (
			metricsSummaryOut types.MetricsSummary
			errOut            error
		)
		return metricsSummaryOut, errOut
	}
	return mock.PipelineMetricsFunc(contextMoqParam, s, metricsParams)
}

// PipelineMetricsCalls gets all the calls that were made to PipelineMetrics.
// Check the length with:
//
//	len(mockedClient.PipelineMetricsCalls())
func (mock *ClientMock) PipelineMetricsCalls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockPipelineMetrics.RLock()
	calls = mock.calls.PipelineMetrics
	mock.lockPipelineMetrics.RUnlock()
	return calls
}

// PipelineMetricsByPlugin calls PipelineMetricsByPluginFunc.
func (mock *ClientMock) PipelineMetricsByPlugin(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsSummaryPlugin, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockPipelineMetricsByPlugin.Lock()
	mock.calls.PipelineMetricsByPlugin = append(mock.calls.PipelineMetricsByPlugin, callInfo)
	mock.lockPipelineMetricsByPlugin.Unlock()
	if mock.PipelineMetricsByPluginFunc == nil {
		var (
			metricsSummaryPluginOut types.MetricsSummaryPlugin
			errOut                  error
		)
		return metricsSummaryPluginOut, errOut
	}
	return mock.PipelineMetricsByPluginFunc(contextMoqParam, s, metricsParams)
}

// PipelineMetricsByPluginCalls gets all the calls that were made to PipelineMetricsByPlugin.
// Check the length with:
//
//	len(mockedClient.PipelineMetricsByPluginCalls())
func (mock *ClientMock) PipelineMetricsByPluginCalls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockPipelineMetricsByPlugin.RLock()
	calls = mock.calls.PipelineMetricsByPlugin
	mock.lockPipelineMetricsByPlugin.RUnlock()
	return calls
}

// PipelineMetricsOverTimeByPlugin calls PipelineMetricsOverTimeByPluginFunc.
func (mock *ClientMock) PipelineMetricsOverTimeByPlugin(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTimeByPlugin, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockPipelineMetricsOverTimeByPlugin.Lock()
	mock.calls.PipelineMetricsOverTimeByPlugin = append(mock.calls.PipelineMetricsOverTimeByPlugin, callInfo)
	mock.lockPipelineMetricsOverTimeByPlugin.Unlock()
	if mock.PipelineMetricsOverTimeByPluginFunc == nil {
		var (
			metricsOverTimeByPluginOut types.MetricsOverTimeByPlugin
			errOut                     error
		)
		return metricsOverTimeByPluginOut, errOut
	}
	return mock.PipelineMetricsOverTimeByPluginFunc(contextMoqParam, s, metricsParams)
}

// PipelineMetricsOverTimeByPluginCalls gets all the calls that were made to PipelineMetricsOverTimeByPlugin.
// Check the length with:
//
//	len(mockedClient.PipelineMetricsOverTimeByPluginCalls())
func (mock *ClientMock) PipelineMetricsOverTimeByPluginCalls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockPipelineMetricsOverTimeByPlugin.RLock()
	calls = mock.calls.PipelineMetricsOverTimeByPlugin
	mock.lockPipelineMetricsOverTimeByPlugin.RUnlock()
	return calls
}

// PipelineMetricsV1 calls PipelineMetricsV1Func.
func (mock *ClientMock) PipelineMetricsV1(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.AgentMetrics, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockPipelineMetricsV1.Lock()
	mock.calls.PipelineMetricsV1 = append(mock.calls.PipelineMetricsV1, callInfo)
	mock.lockPipelineMetricsV1.Unlock()
	if mock.PipelineMetricsV1Func == nil {
		var (
			agentMetricsOut types.AgentMetrics
			errOut          error
		)
		return agentMetricsOut, errOut
	}
	return mock.PipelineMetricsV1Func(contextMoqParam, s, metricsParams)
}

// PipelineMetricsV1Calls gets all the calls that were made to PipelineMetricsV1.
// Check the length with:
//
//	len(mockedClient.PipelineMetricsV1Calls())
func (mock *ClientMock) PipelineMetricsV1Calls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockPipelineMetricsV1.RLock()
	calls = mock.calls.PipelineMetricsV1
	mock.lockPipelineMetricsV1.RUnlock()
	return calls
}

// PipelineOverTimeMetrics calls PipelineOverTimeMetricsFunc.
func (mock *ClientMock) PipelineOverTimeMetrics(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.MetricsOverTime, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockPipelineOverTimeMetrics.Lock()
	mock.calls.PipelineOverTimeMetrics = append(mock.calls.PipelineOverTimeMetrics, callInfo)
	mock.lockPipelineOverTimeMetrics.Unlock()
	if mock.PipelineOverTimeMetricsFunc == nil {
		var (
			metricsOverTimeOut types.MetricsOverTime
			errOut             error
		)
		return metricsOverTimeOut, errOut
	}
	return mock.PipelineOverTimeMetricsFunc(contextMoqParam, s, metricsParams)
}

// PipelineOverTimeMetricsCalls gets all the calls that were made to PipelineOverTimeMetrics.
// Check the length with:
//
//	len(mockedClient.PipelineOverTimeMetricsCalls())
func (mock *ClientMock) PipelineOverTimeMetricsCalls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockPipelineOverTimeMetrics.RLock()
	calls = mock.calls.PipelineOverTimeMetrics
	mock.lockPipelineOverTimeMetrics.RUnlock()
	return calls
}

// PipelinePort calls PipelinePortFunc.
func (mock *ClientMock) PipelinePort(contextMoqParam context.Context, s string) (types.PipelinePort, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockPipelinePort.Lock()
	mock.calls.PipelinePort = append(mock.calls.PipelinePort, callInfo)
	mock.lockPipelinePort.Unlock()
	if mock.PipelinePortFunc == nil {
		var (
			pipelinePortOut types.PipelinePort
			errOut          error
		)
		return pipelinePortOut, errOut
	}
	return mock.PipelinePortFunc(contextMoqParam, s)
}

// PipelinePortCalls gets all the calls that were made to PipelinePort.
// Check the length with:
//
//	len(mockedClient.PipelinePortCalls())
func (mock *ClientMock) PipelinePortCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockPipelinePort.RLock()
	calls = mock.calls.PipelinePort
	mock.lockPipelinePort.RUnlock()
	return calls
}

// PipelinePorts calls PipelinePortsFunc.
func (mock *ClientMock) PipelinePorts(contextMoqParam context.Context, s string, pipelinePortsParams types.PipelinePortsParams) (types.PipelinePorts, error) {
	callInfo := struct {
		ContextMoqParam     context.Context
		S                   string
		PipelinePortsParams types.PipelinePortsParams
	}{
		ContextMoqParam:     contextMoqParam,
		S:                   s,
		PipelinePortsParams: pipelinePortsParams,
	}
	mock.lockPipelinePorts.Lock()
	mock.calls.PipelinePorts = append(mock.calls.PipelinePorts, callInfo)
	mock.lockPipelinePorts.Unlock()
	if mock.PipelinePortsFunc == nil {
		var (
			pipelinePortsOut types.PipelinePorts
			errOut           error
		)
		return pipelinePortsOut, errOut
	}
	return mock.PipelinePortsFunc(contextMoqParam, s, pipelinePortsParams)
}

// PipelinePortsCalls gets all the calls that were made to PipelinePorts.
// Check the length with:
//
//	len(mockedClient.PipelinePortsCalls())
func (mock *ClientMock) PipelinePortsCalls() []struct {
	ContextMoqParam     context.Context
	S                   string
	PipelinePortsParams types.PipelinePortsParams
} {
	var calls []struct {
		ContextMoqParam     context.Context
		S                   string
		PipelinePortsParams types.PipelinePortsParams
	}
	mock.lockPipelinePorts.RLock()
	calls = mock.calls.PipelinePorts
	mock.lockPipelinePorts.RUnlock()
	return calls
}

// PipelineSecret calls PipelineSecretFunc.
func (mock *ClientMock) PipelineSecret(contextMoqParam context.Context, s string) (types.PipelineSecret, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockPipelineSecret.Lock()
	mock.calls.PipelineSecret = append(mock.calls.PipelineSecret, callInfo)
	mock.lockPipelineSecret.Unlock()
	if mock.PipelineSecretFunc == nil {
		var (
			pipelineSecretOut types.PipelineSecret
			errOut            error
		)
		return pipelineSecretOut, errOut
	}
	return mock.PipelineSecretFunc(contextMoqParam, s)
}

// PipelineSecretCalls gets all the calls that were made to PipelineSecret.
// Check the length with:
//
//	len(mockedClient.PipelineSecretCalls())
func (mock *ClientMock) PipelineSecretCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockPipelineSecret.RLock()
	calls = mock.calls.PipelineSecret
	mock.lockPipelineSecret.RUnlock()
	return calls
}

// PipelineSecrets calls PipelineSecretsFunc.
func (mock *ClientMock) PipelineSecrets(contextMoqParam context.Context, s string, pipelineSecretsParams types.PipelineSecretsParams) (types.PipelineSecrets, error) {
	callInfo := struct {
		ContextMoqParam       context.Context
		S                     string
		PipelineSecretsParams types.PipelineSecretsParams
	}{
		ContextMoqParam:       contextMoqParam,
		S:                     s,
		PipelineSecretsParams: pipelineSecretsParams,
	}
	mock.lockPipelineSecrets.Lock()
	mock.calls.PipelineSecrets = append(mock.calls.PipelineSecrets, callInfo)
	mock.lockPipelineSecrets.Unlock()
	if mock.PipelineSecretsFunc == nil {
		var (
			pipelineSecretsOut types.PipelineSecrets
			errOut             error
		)
		return pipelineSecretsOut, errOut
	}
	return mock.PipelineSecretsFunc(contextMoqParam, s, pipelineSecretsParams)
}

// PipelineSecretsCalls gets all the calls that were made to PipelineSecrets.
// Check the length with:
//
//	len(mockedClient.PipelineSecretsCalls())
func (mock *ClientMock) PipelineSecretsCalls() []struct {
	ContextMoqParam       context.Context
	S                     string
	PipelineSecretsParams types.PipelineSecretsParams
} {
	var calls []struct {
		ContextMoqParam       context.Context
		S                     string
		PipelineSecretsParams types.PipelineSecretsParams
	}
	mock.lockPipelineSecrets.RLock()
	calls = mock.calls.PipelineSecrets
	mock.lockPipelineSecrets.RUnlock()
	return calls
}

// PipelineStatusHistory calls PipelineStatusHistoryFunc.
func (mock *ClientMock) PipelineStatusHistory(contextMoqParam context.Context, s string, pipelineStatusHistoryParams types.PipelineStatusHistoryParams) (types.PipelineStatusHistory, error) {
	callInfo := struct {
		ContextMoqParam             context.Context
		S                           string
		PipelineStatusHistoryParams types.PipelineStatusHistoryParams
	}{
		ContextMoqParam:             contextMoqParam,
		S:                           s,
		PipelineStatusHistoryParams: pipelineStatusHistoryParams,
	}
	mock.lockPipelineStatusHistory.Lock()
	mock.calls.PipelineStatusHistory = append(mock.calls.PipelineStatusHistory, callInfo)
	mock.lockPipelineStatusHistory.Unlock()
	if mock.PipelineStatusHistoryFunc == nil {
		var (
			pipelineStatusHistoryOut types.PipelineStatusHistory
			errOut                   error
		)
		return pipelineStatusHistoryOut, errOut
	}
	return mock.PipelineStatusHistoryFunc(contextMoqParam, s, pipelineStatusHistoryParams)
}

// PipelineStatusHistoryCalls gets all the calls that were made to PipelineStatusHistory.
// Check the length with:
//
//	len(mockedClient.PipelineStatusHistoryCalls())
func (mock *ClientMock) PipelineStatusHistoryCalls() []struct {
	ContextMoqParam             context.Context
	S                           string
	PipelineStatusHistoryParams types.PipelineStatusHistoryParams
} {
	var calls []struct {
		ContextMoqParam             context.Context
		S                           string
		PipelineStatusHistoryParams types.PipelineStatusHistoryParams
	}
	mock.lockPipelineStatusHistory.RLock()
	calls = mock.calls.PipelineStatusHistory
	mock.lockPipelineStatusHistory.RUnlock()
	return calls
}

// Pipelines calls PipelinesFunc.
func (mock *ClientMock) Pipelines(contextMoqParam context.Context, pipelinesParams types.PipelinesParams) (types.Pipelines, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		PipelinesParams types.PipelinesParams
	}{
		ContextMoqParam: contextMoqParam,
		PipelinesParams: pipelinesParams,
	}
	mock.lockPipelines.Lock()
	mock.calls.Pipelines = append(mock.calls.Pipelines, callInfo)
	mock.lockPipelines.Unlock()
	if mock.PipelinesFunc == nil {
		var (
			pipelinesOut types.Pipelines
			errOut       error
		)
		return pipelinesOut, errOut
	}
	return mock.PipelinesFunc(contextMoqParam, pipelinesParams)
}

// PipelinesCalls gets all the calls that were made to Pipelines.
// Check the length with:
//
//	len(mockedClient.PipelinesCalls())
func (mock *ClientMock) PipelinesCalls() []struct {
	ContextMoqParam context.Context
	PipelinesParams types.PipelinesParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		PipelinesParams types.PipelinesParams
	}
	mock.lockPipelines.RLock()
	calls = mock.calls.Pipelines
	mock.lockPipelines.RUnlock()
	return calls
}

// PipelinesMetricsV1 calls PipelinesMetricsV1Func.
func (mock *ClientMock) PipelinesMetricsV1(contextMoqParam context.Context, s string, pipelinesMetricsParams types.PipelinesMetricsParams) (types.PipelinesMetrics, error) {
	callInfo := struct {
		ContextMoqParam        context.Context
		S                      string
		PipelinesMetricsParams types.PipelinesMetricsParams
	}{
		ContextMoqParam:        contextMoqParam,
		S:                      s,
		PipelinesMetricsParams: pipelinesMetricsParams,
	}
	mock.lockPipelinesMetricsV1.Lock()
	mock.calls.PipelinesMetricsV1 = append(mock.calls.PipelinesMetricsV1, callInfo)
	mock.lockPipelinesMetricsV1.Unlock()
	if mock.PipelinesMetricsV1Func == nil {
		var (
			pipelinesMetricsOut types.PipelinesMetrics
			errOut              error
		)
		return pipelinesMetricsOut, errOut
	}
	return mock.PipelinesMetricsV1Func(contextMoqParam, s, pipelinesMetricsParams)
}

// PipelinesMetricsV1Calls gets all the calls that were made to PipelinesMetricsV1.
// Check the length with:
//
//	len(mockedClient.PipelinesMetricsV1Calls())
func (mock *ClientMock) PipelinesMetricsV1Calls() []struct {
	ContextMoqParam        context.Context
	S                      string
	PipelinesMetricsParams types.PipelinesMetricsParams
} {
	var calls []struct {
		ContextMoqParam        context.Context
		S                      string
		PipelinesMetricsParams types.PipelinesMetricsParams
	}
	mock.lockPipelinesMetricsV1.RLock()
	calls = mock.calls.PipelinesMetricsV1
	mock.lockPipelinesMetricsV1.RUnlock()
	return calls
}

// PreviewProcessingRule calls PreviewProcessingRuleFunc.
func (mock *ClientMock) PreviewProcessingRule(contextMoqParam context.Context, previewProcessingRule types.PreviewProcessingRule) ([]types.FluentBitLog, error) {
	callInfo := struct {
		ContextMoqParam       context.Context
		PreviewProcessingRule types.PreviewProcessingRule
	}{
		ContextMoqParam:       contextMoqParam,
		PreviewProcessingRule: previewProcessingRule,
	}
	mock.lockPreviewProcessingRule.Lock()
	mock.calls.PreviewProcessingRule = append(mock.calls.PreviewProcessingRule, callInfo)
	mock.lockPreviewProcessingRule.Unlock()
	if mock.PreviewProcessingRuleFunc == nil {
		var (
			fluentBitLogsOut []types.FluentBitLog
			errOut           error
		)
		return fluentBitLogsOut, errOut
	}
	return mock.PreviewProcessingRuleFunc(contextMoqParam, previewProcessingRule)
}

// PreviewProcessingRuleCalls gets all the calls that were made to PreviewProcessingRule.
// Check the length with:
//
//	len(mockedClient.PreviewProcessingRuleCalls())
func (mock *ClientMock) PreviewProcessingRuleCalls() []struct {
	ContextMoqParam       context.Context
	PreviewProcessingRule types.PreviewProcessingRule
} {
	var calls []struct {
		ContextMoqParam       context.Context
		PreviewProcessingRule types.PreviewProcessingRule
	}
	mock.lockPreviewProcessingRule.RLock()
	calls = mock.calls.PreviewProcessingRule
	mock.lockPreviewProcessingRule.RUnlock()
	return calls
}

// ProcessingRule calls ProcessingRuleFunc.
func (mock *ClientMock) ProcessingRule(contextMoqParam context.Context, s string) (types.ProcessingRule, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockProcessingRule.Lock()
	mock.calls.ProcessingRule = append(mock.calls.ProcessingRule, callInfo)
	mock.lockProcessingRule.Unlock()
	if mock.ProcessingRuleFunc == nil {
		var (
			processingRuleOut types.ProcessingRule
			errOut            error
		)
		return processingRuleOut, errOut
	}
	return mock.ProcessingRuleFunc(contextMoqParam, s)
}

// ProcessingRuleCalls gets all the calls that were made to ProcessingRule.
// Check the length with:
//
//	len(mockedClient.ProcessingRuleCalls())
func (mock *ClientMock) ProcessingRuleCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockProcessingRule.RLock()
	calls = mock.calls.ProcessingRule
	mock.lockProcessingRule.RUnlock()
	return calls
}

// ProcessingRuleTemplates calls ProcessingRuleTemplatesFunc.
func (mock *ClientMock) ProcessingRuleTemplates(contextMoqParam context.Context, listProcessingRuleTemplates types.ListProcessingRuleTemplates) (types.ProcessingRuleTemplates, error) {
	callInfo := struct {
		ContextMoqParam             context.Context
		ListProcessingRuleTemplates types.ListProcessingRuleTemplates
	}{
		ContextMoqParam:             contextMoqParam,
		ListProcessingRuleTemplates: listProcessingRuleTemplates,
	}
	mock.lockProcessingRuleTemplates.Lock()
	mock.calls.ProcessingRuleTemplates = append(mock.calls.ProcessingRuleTemplates, callInfo)
	mock.lockProcessingRuleTemplates.Unlock()
	if mock.ProcessingRuleTemplatesFunc == nil {
		var (
			processingRuleTemplatesOut types.ProcessingRuleTemplates
			errOut                     error
		)
		return processingRuleTemplatesOut, errOut
	}
	return mock.ProcessingRuleTemplatesFunc(contextMoqParam, listProcessingRuleTemplates)
}

// ProcessingRuleTemplatesCalls gets all the calls that were made to ProcessingRuleTemplates.
// Check the length with:
//
//	len(mockedClient.ProcessingRuleTemplatesCalls())
func (mock *ClientMock) ProcessingRuleTemplatesCalls() []struct {
	ContextMoqParam             context.Context
	ListProcessingRuleTemplates types.ListProcessingRuleTemplates
} {
	var calls []struct {
		ContextMoqParam             context.Context
		ListProcessingRuleTemplates types.ListProcessingRuleTemplates
	}
	mock.lockProcessingRuleTemplates.RLock()
	calls = mock.calls.ProcessingRuleTemplates
	mock.lockProcessingRuleTemplates.RUnlock()
	return calls
}

// ProcessingRules calls ProcessingRulesFunc.
func (mock *ClientMock) ProcessingRules(contextMoqParam context.Context, processingRulesParams types.ProcessingRulesParams) (types.ProcessingRules, error) {
	callInfo := struct {
		ContextMoqParam       context.Context
		ProcessingRulesParams types.ProcessingRulesParams
	}{
		ContextMoqParam:       contextMoqParam,
		ProcessingRulesParams: processingRulesParams,
	}
	mock.lockProcessingRules.Lock()
	mock.calls.ProcessingRules = append(mock.calls.ProcessingRules, callInfo)
	mock.lockProcessingRules.Unlock()
	if mock.ProcessingRulesFunc == nil {
		var (
			processingRulesOut types.ProcessingRules
			errOut             error
		)
		return processingRulesOut, errOut
	}
	return mock.ProcessingRulesFunc(contextMoqParam, processingRulesParams)
}

// ProcessingRulesCalls gets all the calls that were made to ProcessingRules.
// Check the length with:
//
//	len(mockedClient.ProcessingRulesCalls())
func (mock *ClientMock) ProcessingRulesCalls() []struct {
	ContextMoqParam       context.Context
	ProcessingRulesParams types.ProcessingRulesParams
} {
	var calls []struct {
		ContextMoqParam       context.Context
		ProcessingRulesParams types.ProcessingRulesParams
	}
	mock.lockProcessingRules.RLock()
	calls = mock.calls.ProcessingRules
	mock.lockProcessingRules.RUnlock()
	return calls
}

// Project calls ProjectFunc.
func (mock *ClientMock) Project(contextMoqParam context.Context, s string) (types.Project, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockProject.Lock()
	mock.calls.Project = append(mock.calls.Project, callInfo)
	mock.lockProject.Unlock()
	if mock.ProjectFunc == nil {
		var (
			projectOut types.Project
			errOut     error
		)
		return projectOut, errOut
	}
	return mock.ProjectFunc(contextMoqParam, s)
}

// ProjectCalls gets all the calls that were made to Project.
// Check the length with:
//
//	len(mockedClient.ProjectCalls())
func (mock *ClientMock) ProjectCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockProject.RLock()
	calls = mock.calls.Project
	mock.lockProject.RUnlock()
	return calls
}

// ProjectMetricsV1 calls ProjectMetricsV1Func.
func (mock *ClientMock) ProjectMetricsV1(contextMoqParam context.Context, s string, metricsParams types.MetricsParams) (types.ProjectMetrics, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		MetricsParams:   metricsParams,
	}
	mock.lockProjectMetricsV1.Lock()
	mock.calls.ProjectMetricsV1 = append(mock.calls.ProjectMetricsV1, callInfo)
	mock.lockProjectMetricsV1.Unlock()
	if mock.ProjectMetricsV1Func == nil {
		var (
			projectMetricsOut types.ProjectMetrics
			errOut            error
		)
		return projectMetricsOut, errOut
	}
	return mock.ProjectMetricsV1Func(contextMoqParam, s, metricsParams)
}

// ProjectMetricsV1Calls gets all the calls that were made to ProjectMetricsV1.
// Check the length with:
//
//	len(mockedClient.ProjectMetricsV1Calls())
func (mock *ClientMock) ProjectMetricsV1Calls() []struct {
	ContextMoqParam context.Context
	S               string
	MetricsParams   types.MetricsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		MetricsParams   types.MetricsParams
	}
	mock.lockProjectMetricsV1.RLock()
	calls = mock.calls.ProjectMetricsV1
	mock.lockProjectMetricsV1.RUnlock()
	return calls
}

// Projects calls ProjectsFunc.
func (mock *ClientMock) Projects(contextMoqParam context.Context, projectsParams types.ProjectsParams) (types.Projects, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		ProjectsParams  types.ProjectsParams
	}{
		ContextMoqParam: contextMoqParam,
		ProjectsParams:  projectsParams,
	}
	mock.lockProjects.Lock()
	mock.calls.Projects = append(mock.calls.Projects, callInfo)
	mock.lockProjects.Unlock()
	if mock.ProjectsFunc == nil {
		var (
			projectsOut types.Projects
			errOut      error
		)
		return projectsOut, errOut
	}
	return mock.ProjectsFunc(contextMoqParam, projectsParams)
}

// ProjectsCalls gets all the calls that were made to Projects.
// Check the length with:
//
//	len(mockedClient.ProjectsCalls())
func (mock *ClientMock) ProjectsCalls() []struct {
	ContextMoqParam context.Context
	ProjectsParams  types.ProjectsParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		ProjectsParams  types.ProjectsParams
	}
	mock.lockProjects.RLock()
	calls = mock.calls.Projects
	mock.lockProjects.RUnlock()
	return calls
}

// PushAWSMarketplaceSubscriptionNotification calls PushAWSMarketplaceSubscriptionNotificationFunc.
func (mock *ClientMock) PushAWSMarketplaceSubscriptionNotification(contextMoqParam context.Context, aWSMarketplaceSubscriptionNotification types.AWSMarketplaceSubscriptionNotification) error {
	callInfo := struct {
		ContextMoqParam                        context.Context
		AWSMarketplaceSubscriptionNotification types.AWSMarketplaceSubscriptionNotification
	}{
		ContextMoqParam:                        contextMoqParam,
		AWSMarketplaceSubscriptionNotification: aWSMarketplaceSubscriptionNotification,
	}
	mock.lockPushAWSMarketplaceSubscriptionNotification.Lock()
	mock.calls.PushAWSMarketplaceSubscriptionNotification = append(mock.calls.PushAWSMarketplaceSubscriptionNotification, callInfo)
	mock.lockPushAWSMarketplaceSubscriptionNotification.Unlock()
	if mock.PushAWSMarketplaceSubscriptionNotificationFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.PushAWSMarketplaceSubscriptionNotificationFunc(contextMoqParam, aWSMarketplaceSubscriptionNotification)
}

// PushAWSMarketplaceSubscriptionNotificationCalls gets all the calls that were made to PushAWSMarketplaceSubscriptionNotification.
// Check the length with:
//
//	len(mockedClient.PushAWSMarketplaceSubscriptionNotificationCalls())
func (mock *ClientMock) PushAWSMarketplaceSubscriptionNotificationCalls() []struct {
	ContextMoqParam                        context.Context
	AWSMarketplaceSubscriptionNotification types.AWSMarketplaceSubscriptionNotification
} {
	var calls []struct {
		ContextMoqParam                        context.Context
		AWSMarketplaceSubscriptionNotification types.AWSMarketplaceSubscriptionNotification
	}
	mock.lockPushAWSMarketplaceSubscriptionNotification.RLock()
	calls = mock.calls.PushAWSMarketplaceSubscriptionNotification
	mock.lockPushAWSMarketplaceSubscriptionNotification.RUnlock()
	return calls
}

// RegisterAgent calls RegisterAgentFunc.
func (mock *ClientMock) RegisterAgent(contextMoqParam context.Context, registerAgent types.RegisterAgent) (types.RegisteredAgent, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		RegisterAgent   types.RegisterAgent
	}{
		ContextMoqParam: contextMoqParam,
		RegisterAgent:   registerAgent,
	}
	mock.lockRegisterAgent.Lock()
	mock.calls.RegisterAgent = append(mock.calls.RegisterAgent, callInfo)
	mock.lockRegisterAgent.Unlock()
	if mock.RegisterAgentFunc == nil {
		var (
			registeredAgentOut types.RegisteredAgent
			errOut             error
		)
		return registeredAgentOut, errOut
	}
	return mock.RegisterAgentFunc(contextMoqParam, registerAgent)
}

// RegisterAgentCalls gets all the calls that were made to RegisterAgent.
// Check the length with:
//
//	len(mockedClient.RegisterAgentCalls())
func (mock *ClientMock) RegisterAgentCalls() []struct {
	ContextMoqParam context.Context
	RegisterAgent   types.RegisterAgent
} {
	var calls []struct {
		ContextMoqParam context.Context
		RegisterAgent   types.RegisterAgent
	}
	mock.lockRegisterAgent.RLock()
	calls = mock.calls.RegisterAgent
	mock.lockRegisterAgent.RUnlock()
	return calls
}

// ResourceProfile calls ResourceProfileFunc.
func (mock *ClientMock) ResourceProfile(contextMoqParam context.Context, s string) (types.ResourceProfile, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockResourceProfile.Lock()
	mock.calls.ResourceProfile = append(mock.calls.ResourceProfile, callInfo)
	mock.lockResourceProfile.Unlock()
	if mock.ResourceProfileFunc == nil {
		var (
			resourceProfileOut types.ResourceProfile
			errOut             error
		)
		return resourceProfileOut, errOut
	}
	return mock.ResourceProfileFunc(contextMoqParam, s)
}

// ResourceProfileCalls gets all the calls that were made to ResourceProfile.
// Check the length with:
//
//	len(mockedClient.ResourceProfileCalls())
func (mock *ClientMock) ResourceProfileCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockResourceProfile.RLock()
	calls = mock.calls.ResourceProfile
	mock.lockResourceProfile.RUnlock()
	return calls
}

// ResourceProfiles calls ResourceProfilesFunc.
func (mock *ClientMock) ResourceProfiles(contextMoqParam context.Context, s string, resourceProfilesParams types.ResourceProfilesParams) (types.ResourceProfiles, error) {
	callInfo := struct {
		ContextMoqParam        context.Context
		S                      string
		ResourceProfilesParams types.ResourceProfilesParams
	}{
		ContextMoqParam:        contextMoqParam,
		S:                      s,
		ResourceProfilesParams: resourceProfilesParams,
	}
	mock.lockResourceProfiles.Lock()
	mock.calls.ResourceProfiles = append(mock.calls.ResourceProfiles, callInfo)
	mock.lockResourceProfiles.Unlock()
	if mock.ResourceProfilesFunc == nil {
		var (
			resourceProfilesOut types.ResourceProfiles
			errOut              error
		)
		return resourceProfilesOut, errOut
	}
	return mock.ResourceProfilesFunc(contextMoqParam, s, resourceProfilesParams)
}

// ResourceProfilesCalls gets all the calls that were made to ResourceProfiles.
// Check the length with:
//
//	len(mockedClient.ResourceProfilesCalls())
func (mock *ClientMock) ResourceProfilesCalls() []struct {
	ContextMoqParam        context.Context
	S                      string
	ResourceProfilesParams types.ResourceProfilesParams
} {
	var calls []struct {
		ContextMoqParam        context.Context
		S                      string
		ResourceProfilesParams types.ResourceProfilesParams
	}
	mock.lockResourceProfiles.RLock()
	calls = mock.calls.ResourceProfiles
	mock.lockResourceProfiles.RUnlock()
	return calls
}

// Search calls SearchFunc.
func (mock *ClientMock) Search(contextMoqParam context.Context, searchQuery types.SearchQuery) ([]types.SearchResult, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		SearchQuery     types.SearchQuery
	}{
		ContextMoqParam: contextMoqParam,
		SearchQuery:     searchQuery,
	}
	mock.lockSearch.Lock()
	mock.calls.Search = append(mock.calls.Search, callInfo)
	mock.lockSearch.Unlock()
	if mock.SearchFunc == nil {
		var (
			searchResultsOut []types.SearchResult
			errOut           error
		)
		return searchResultsOut, errOut
	}
	return mock.SearchFunc(contextMoqParam, searchQuery)
}

// SearchCalls gets all the calls that were made to Search.
// Check the length with:
//
//	len(mockedClient.SearchCalls())
func (mock *ClientMock) SearchCalls() []struct {
	ContextMoqParam context.Context
	SearchQuery     types.SearchQuery
} {
	var calls []struct {
		ContextMoqParam context.Context
		SearchQuery     types.SearchQuery
	}
	mock.lockSearch.RLock()
	calls = mock.calls.Search
	mock.lockSearch.RUnlock()
	return calls
}

// SendVerificationEmail calls SendVerificationEmailFunc.
func (mock *ClientMock) SendVerificationEmail(contextMoqParam context.Context) error {
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockSendVerificationEmail.Lock()
	mock.calls.SendVerificationEmail = append(mock.calls.SendVerificationEmail, callInfo)
	mock.lockSendVerificationEmail.Unlock()
	if mock.SendVerificationEmailFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.SendVerificationEmailFunc(contextMoqParam)
}

// SendVerificationEmailCalls gets all the calls that were made to SendVerificationEmail.
// Check the length with:
//
//	len(mockedClient.SendVerificationEmailCalls())
func (mock *ClientMock) SendVerificationEmailCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockSendVerificationEmail.RLock()
	calls = mock.calls.SendVerificationEmail
	mock.lockSendVerificationEmail.RUnlock()
	return calls
}

// SetAgentToken calls SetAgentTokenFunc.
func (mock *ClientMock) SetAgentToken(s string) {
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockSetAgentToken.Lock()
	mock.calls.SetAgentToken = append(mock.calls.SetAgentToken, callInfo)
	mock.lockSetAgentToken.Unlock()
	if mock.SetAgentTokenFunc == nil {
		return
	}
	mock.SetAgentTokenFunc(s)
}

// SetAgentTokenCalls gets all the calls that were made to SetAgentToken.
// Check the length with:
//
//	len(mockedClient.SetAgentTokenCalls())
func (mock *ClientMock) SetAgentTokenCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockSetAgentToken.RLock()
	calls = mock.calls.SetAgentToken
	mock.lockSetAgentToken.RUnlock()
	return calls
}

// SetCoreInstanceToken calls SetCoreInstanceTokenFunc.
func (mock *ClientMock) SetCoreInstanceToken(s string) {
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockSetCoreInstanceToken.Lock()
	mock.calls.SetCoreInstanceToken = append(mock.calls.SetCoreInstanceToken, callInfo)
	mock.lockSetCoreInstanceToken.Unlock()
	if mock.SetCoreInstanceTokenFunc == nil {
		return
	}
	mock.SetCoreInstanceTokenFunc(s)
}

// SetCoreInstanceTokenCalls gets all the calls that were made to SetCoreInstanceToken.
// Check the length with:
//
//	len(mockedClient.SetCoreInstanceTokenCalls())
func (mock *ClientMock) SetCoreInstanceTokenCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockSetCoreInstanceToken.RLock()
	calls = mock.calls.SetCoreInstanceToken
	mock.lockSetCoreInstanceToken.RUnlock()
	return calls
}

// SetProjectToken calls SetProjectTokenFunc.
func (mock *ClientMock) SetProjectToken(s string) {
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockSetProjectToken.Lock()
	mock.calls.SetProjectToken = append(mock.calls.SetProjectToken, callInfo)
	mock.lockSetProjectToken.Unlock()
	if mock.SetProjectTokenFunc == nil {
		return
	}
	mock.SetProjectTokenFunc(s)
}

// SetProjectTokenCalls gets all the calls that were made to SetProjectToken.
// Check the length with:
//
//	len(mockedClient.SetProjectTokenCalls())
func (mock *ClientMock) SetProjectTokenCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockSetProjectToken.RLock()
	calls = mock.calls.SetProjectToken
	mock.lockSetProjectToken.RUnlock()
	return calls
}

// SetUserAgent calls SetUserAgentFunc.
func (mock *ClientMock) SetUserAgent(s string) {
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockSetUserAgent.Lock()
	mock.calls.SetUserAgent = append(mock.calls.SetUserAgent, callInfo)
	mock.lockSetUserAgent.Unlock()
	if mock.SetUserAgentFunc == nil {
		return
	}
	mock.SetUserAgentFunc(s)
}

// SetUserAgentCalls gets all the calls that were made to SetUserAgent.
// Check the length with:
//
//	len(mockedClient.SetUserAgentCalls())
func (mock *ClientMock) SetUserAgentCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockSetUserAgent.RLock()
	calls = mock.calls.SetUserAgent
	mock.lockSetUserAgent.RUnlock()
	return calls
}

// TerminateActiveTraceSession calls TerminateActiveTraceSessionFunc.
func (mock *ClientMock) TerminateActiveTraceSession(contextMoqParam context.Context, s string) (types.TerminatedTraceSession, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockTerminateActiveTraceSession.Lock()
	mock.calls.TerminateActiveTraceSession = append(mock.calls.TerminateActiveTraceSession, callInfo)
	mock.lockTerminateActiveTraceSession.Unlock()
	if mock.TerminateActiveTraceSessionFunc == nil {
		var (
			terminatedTraceSessionOut types.TerminatedTraceSession
			errOut                    error
		)
		return terminatedTraceSessionOut, errOut
	}
	return mock.TerminateActiveTraceSessionFunc(contextMoqParam, s)
}

// TerminateActiveTraceSessionCalls gets all the calls that were made to TerminateActiveTraceSession.
// Check the length with:
//
//	len(mockedClient.TerminateActiveTraceSessionCalls())
func (mock *ClientMock) TerminateActiveTraceSessionCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockTerminateActiveTraceSession.RLock()
	calls = mock.calls.TerminateActiveTraceSession
	mock.lockTerminateActiveTraceSession.RUnlock()
	return calls
}

// Token calls TokenFunc.
func (mock *ClientMock) Token(contextMoqParam context.Context, s string) (types.Token, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockToken.Lock()
	mock.calls.Token = append(mock.calls.Token, callInfo)
	mock.lockToken.Unlock()
	if mock.TokenFunc == nil {
		var (
			tokenOut types.Token
			errOut   error
		)
		return tokenOut, errOut
	}
	return mock.TokenFunc(contextMoqParam, s)
}

// TokenCalls gets all the calls that were made to Token.
// Check the length with:
//
//	len(mockedClient.TokenCalls())
func (mock *ClientMock) TokenCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockToken.RLock()
	calls = mock.calls.Token
	mock.lockToken.RUnlock()
	return calls
}

// Tokens calls TokensFunc.
func (mock *ClientMock) Tokens(contextMoqParam context.Context, s string, tokensParams types.TokensParams) (types.Tokens, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		TokensParams    types.TokensParams
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		TokensParams:    tokensParams,
	}
	mock.lockTokens.Lock()
	mock.calls.Tokens = append(mock.calls.Tokens, callInfo)
	mock.lockTokens.Unlock()
	if mock.TokensFunc == nil {
		var (
			tokensOut types.Tokens
			errOut    error
		)
		return tokensOut, errOut
	}
	return mock.TokensFunc(contextMoqParam, s, tokensParams)
}

// TokensCalls gets all the calls that were made to Tokens.
// Check the length with:
//
//	len(mockedClient.TokensCalls())
func (mock *ClientMock) TokensCalls() []struct {
	ContextMoqParam context.Context
	S               string
	TokensParams    types.TokensParams
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		TokensParams    types.TokensParams
	}
	mock.lockTokens.RLock()
	calls = mock.calls.Tokens
	mock.lockTokens.RUnlock()
	return calls
}

// TraceRecords calls TraceRecordsFunc.
func (mock *ClientMock) TraceRecords(contextMoqParam context.Context, s string, traceRecordsParams types.TraceRecordsParams) (types.TraceRecords, error) {
	callInfo := struct {
		ContextMoqParam    context.Context
		S                  string
		TraceRecordsParams types.TraceRecordsParams
	}{
		ContextMoqParam:    contextMoqParam,
		S:                  s,
		TraceRecordsParams: traceRecordsParams,
	}
	mock.lockTraceRecords.Lock()
	mock.calls.TraceRecords = append(mock.calls.TraceRecords, callInfo)
	mock.lockTraceRecords.Unlock()
	if mock.TraceRecordsFunc == nil {
		var (
			traceRecordsOut types.TraceRecords
			errOut          error
		)
		return traceRecordsOut, errOut
	}
	return mock.TraceRecordsFunc(contextMoqParam, s, traceRecordsParams)
}

// TraceRecordsCalls gets all the calls that were made to TraceRecords.
// Check the length with:
//
//	len(mockedClient.TraceRecordsCalls())
func (mock *ClientMock) TraceRecordsCalls() []struct {
	ContextMoqParam    context.Context
	S                  string
	TraceRecordsParams types.TraceRecordsParams
} {
	var calls []struct {
		ContextMoqParam    context.Context
		S                  string
		TraceRecordsParams types.TraceRecordsParams
	}
	mock.lockTraceRecords.RLock()
	calls = mock.calls.TraceRecords
	mock.lockTraceRecords.RUnlock()
	return calls
}

// TraceSession calls TraceSessionFunc.
func (mock *ClientMock) TraceSession(contextMoqParam context.Context, s string) (types.TraceSession, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockTraceSession.Lock()
	mock.calls.TraceSession = append(mock.calls.TraceSession, callInfo)
	mock.lockTraceSession.Unlock()
	if mock.TraceSessionFunc == nil {
		var (
			traceSessionOut types.TraceSession
			errOut          error
		)
		return traceSessionOut, errOut
	}
	return mock.TraceSessionFunc(contextMoqParam, s)
}

// TraceSessionCalls gets all the calls that were made to TraceSession.
// Check the length with:
//
//	len(mockedClient.TraceSessionCalls())
func (mock *ClientMock) TraceSessionCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockTraceSession.RLock()
	calls = mock.calls.TraceSession
	mock.lockTraceSession.RUnlock()
	return calls
}

// TraceSessions calls TraceSessionsFunc.
func (mock *ClientMock) TraceSessions(contextMoqParam context.Context, s string, traceSessionsParams types.TraceSessionsParams) (types.TraceSessions, error) {
	callInfo := struct {
		ContextMoqParam     context.Context
		S                   string
		TraceSessionsParams types.TraceSessionsParams
	}{
		ContextMoqParam:     contextMoqParam,
		S:                   s,
		TraceSessionsParams: traceSessionsParams,
	}
	mock.lockTraceSessions.Lock()
	mock.calls.TraceSessions = append(mock.calls.TraceSessions, callInfo)
	mock.lockTraceSessions.Unlock()
	if mock.TraceSessionsFunc == nil {
		var (
			traceSessionsOut types.TraceSessions
			errOut           error
		)
		return traceSessionsOut, errOut
	}
	return mock.TraceSessionsFunc(contextMoqParam, s, traceSessionsParams)
}

// TraceSessionsCalls gets all the calls that were made to TraceSessions.
// Check the length with:
//
//	len(mockedClient.TraceSessionsCalls())
func (mock *ClientMock) TraceSessionsCalls() []struct {
	ContextMoqParam     context.Context
	S                   string
	TraceSessionsParams types.TraceSessionsParams
} {
	var calls []struct {
		ContextMoqParam     context.Context
		S                   string
		TraceSessionsParams types.TraceSessionsParams
	}
	mock.lockTraceSessions.RLock()
	calls = mock.calls.TraceSessions
	mock.lockTraceSessions.RUnlock()
	return calls
}

// UpdateAgent calls UpdateAgentFunc.
func (mock *ClientMock) UpdateAgent(contextMoqParam context.Context, s string, updateAgent types.UpdateAgent) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		UpdateAgent     types.UpdateAgent
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		UpdateAgent:     updateAgent,
	}
	mock.lockUpdateAgent.Lock()
	mock.calls.UpdateAgent = append(mock.calls.UpdateAgent, callInfo)
	mock.lockUpdateAgent.Unlock()
	if mock.UpdateAgentFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateAgentFunc(contextMoqParam, s, updateAgent)
}

// UpdateAgentCalls gets all the calls that were made to UpdateAgent.
// Check the length with:
//
//	len(mockedClient.UpdateAgentCalls())
func (mock *ClientMock) UpdateAgentCalls() []struct {
	ContextMoqParam context.Context
	S               string
	UpdateAgent     types.UpdateAgent
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		UpdateAgent     types.UpdateAgent
	}
	mock.lockUpdateAgent.RLock()
	calls = mock.calls.UpdateAgent
	mock.lockUpdateAgent.RUnlock()
	return calls
}

// UpdateClusterObject calls UpdateClusterObjectFunc.
func (mock *ClientMock) UpdateClusterObject(contextMoqParam context.Context, s string, updateClusterObject types.UpdateClusterObject) error {
	callInfo := struct {
		ContextMoqParam     context.Context
		S                   string
		UpdateClusterObject types.UpdateClusterObject
	}{
		ContextMoqParam:     contextMoqParam,
		S:                   s,
		UpdateClusterObject: updateClusterObject,
	}
	mock.lockUpdateClusterObject.Lock()
	mock.calls.UpdateClusterObject = append(mock.calls.UpdateClusterObject, callInfo)
	mock.lockUpdateClusterObject.Unlock()
	if mock.UpdateClusterObjectFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateClusterObjectFunc(contextMoqParam, s, updateClusterObject)
}

// UpdateClusterObjectCalls gets all the calls that were made to UpdateClusterObject.
// Check the length with:
//
//	len(mockedClient.UpdateClusterObjectCalls())
func (mock *ClientMock) UpdateClusterObjectCalls() []struct {
	ContextMoqParam     context.Context
	S                   string
	UpdateClusterObject types.UpdateClusterObject
} {
	var calls []struct {
		ContextMoqParam     context.Context
		S                   string
		UpdateClusterObject types.UpdateClusterObject
	}
	mock.lockUpdateClusterObject.RLock()
	calls = mock.calls.UpdateClusterObject
	mock.lockUpdateClusterObject.RUnlock()
	return calls
}

// UpdateClusterObjectRegex calls UpdateClusterObjectRegexFunc.
func (mock *ClientMock) UpdateClusterObjectRegex(contextMoqParam context.Context, updateClusterObjectRegex types.UpdateClusterObjectRegex) (types.Updated, error) {
	callInfo := struct {
		ContextMoqParam          context.Context
		UpdateClusterObjectRegex types.UpdateClusterObjectRegex
	}{
		ContextMoqParam:          contextMoqParam,
		UpdateClusterObjectRegex: updateClusterObjectRegex,
	}
	mock.lockUpdateClusterObjectRegex.Lock()
	mock.calls.UpdateClusterObjectRegex = append(mock.calls.UpdateClusterObjectRegex, callInfo)
	mock.lockUpdateClusterObjectRegex.Unlock()
	if mock.UpdateClusterObjectRegexFunc == nil {
		var (
			updatedOut types.Updated
			errOut     error
		)
		return updatedOut, errOut
	}
	return mock.UpdateClusterObjectRegexFunc(contextMoqParam, updateClusterObjectRegex)
}

// UpdateClusterObjectRegexCalls gets all the calls that were made to UpdateClusterObjectRegex.
// Check the length with:
//
//	len(mockedClient.UpdateClusterObjectRegexCalls())
func (mock *ClientMock) UpdateClusterObjectRegexCalls() []struct {
	ContextMoqParam          context.Context
	UpdateClusterObjectRegex types.UpdateClusterObjectRegex
} {
	var calls []struct {
		ContextMoqParam          context.Context
		UpdateClusterObjectRegex types.UpdateClusterObjectRegex
	}
	mock.lockUpdateClusterObjectRegex.RLock()
	calls = mock.calls.UpdateClusterObjectRegex
	mock.lockUpdateClusterObjectRegex.RUnlock()
	return calls
}

// UpdateConfigSection calls UpdateConfigSectionFunc.
func (mock *ClientMock) UpdateConfigSection(contextMoqParam context.Context, s string, updateConfigSection types.UpdateConfigSection) (types.Updated, error) {
	callInfo := struct {
		ContextMoqParam     context.Context
		S                   string
		UpdateConfigSection types.UpdateConfigSection
	}{
		ContextMoqParam:     contextMoqParam,
		S:                   s,
		UpdateConfigSection: updateConfigSection,
	}
	mock.lockUpdateConfigSection.Lock()
	mock.calls.UpdateConfigSection = append(mock.calls.UpdateConfigSection, callInfo)
	mock.lockUpdateConfigSection.Unlock()
	if mock.UpdateConfigSectionFunc == nil {
		var (
			updatedOut types.Updated
			errOut     error
		)
		return updatedOut, errOut
	}
	return mock.UpdateConfigSectionFunc(contextMoqParam, s, updateConfigSection)
}

// UpdateConfigSectionCalls gets all the calls that were made to UpdateConfigSection.
// Check the length with:
//
//	len(mockedClient.UpdateConfigSectionCalls())
func (mock *ClientMock) UpdateConfigSectionCalls() []struct {
	ContextMoqParam     context.Context
	S                   string
	UpdateConfigSection types.UpdateConfigSection
} {
	var calls []struct {
		ContextMoqParam     context.Context
		S                   string
		UpdateConfigSection types.UpdateConfigSection
	}
	mock.lockUpdateConfigSection.RLock()
	calls = mock.calls.UpdateConfigSection
	mock.lockUpdateConfigSection.RUnlock()
	return calls
}

// UpdateConfigSectionSet calls UpdateConfigSectionSetFunc.
func (mock *ClientMock) UpdateConfigSectionSet(contextMoqParam context.Context, s string, strings ...string) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		Strings         []string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		Strings:         strings,
	}
	mock.lockUpdateConfigSectionSet.Lock()
	mock.calls.UpdateConfigSectionSet = append(mock.calls.UpdateConfigSectionSet, callInfo)
	mock.lockUpdateConfigSectionSet.Unlock()
	if mock.UpdateConfigSectionSetFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateConfigSectionSetFunc(contextMoqParam, s, strings...)
}

// UpdateConfigSectionSetCalls gets all the calls that were made to UpdateConfigSectionSet.
// Check the length with:
//
//	len(mockedClient.UpdateConfigSectionSetCalls())
func (mock *ClientMock) UpdateConfigSectionSetCalls() []struct {
	ContextMoqParam context.Context
	S               string
	Strings         []string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		Strings         []string
	}
	mock.lockUpdateConfigSectionSet.RLock()
	calls = mock.calls.UpdateConfigSectionSet
	mock.lockUpdateConfigSectionSet.RUnlock()
	return calls
}

// UpdateCoreInstance calls UpdateCoreInstanceFunc.
func (mock *ClientMock) UpdateCoreInstance(contextMoqParam context.Context, s string, updateCoreInstance types.UpdateCoreInstance) error {
	callInfo := struct {
		ContextMoqParam    context.Context
		S                  string
		UpdateCoreInstance types.UpdateCoreInstance
	}{
		ContextMoqParam:    contextMoqParam,
		S:                  s,
		UpdateCoreInstance: updateCoreInstance,
	}
	mock.lockUpdateCoreInstance.Lock()
	mock.calls.UpdateCoreInstance = append(mock.calls.UpdateCoreInstance, callInfo)
	mock.lockUpdateCoreInstance.Unlock()
	if mock.UpdateCoreInstanceFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateCoreInstanceFunc(contextMoqParam, s, updateCoreInstance)
}

// UpdateCoreInstanceCalls gets all the calls that were made to UpdateCoreInstance.
// Check the length with:
//
//	len(mockedClient.UpdateCoreInstanceCalls())
func (mock *ClientMock) UpdateCoreInstanceCalls() []struct {
	ContextMoqParam    context.Context
	S                  string
	UpdateCoreInstance types.UpdateCoreInstance
} {
	var calls []struct {
		ContextMoqParam    context.Context
		S                  string
		UpdateCoreInstance types.UpdateCoreInstance
	}
	mock.lockUpdateCoreInstance.RLock()
	calls = mock.calls.UpdateCoreInstance
	mock.lockUpdateCoreInstance.RUnlock()
	return calls
}

// UpdateCoreInstanceCheck calls UpdateCoreInstanceCheckFunc.
func (mock *ClientMock) UpdateCoreInstanceCheck(contextMoqParam context.Context, s string, updateCoreInstanceCheck types.UpdateCoreInstanceCheck) error {
	callInfo := struct {
		ContextMoqParam         context.Context
		S                       string
		UpdateCoreInstanceCheck types.UpdateCoreInstanceCheck
	}{
		ContextMoqParam:         contextMoqParam,
		S:                       s,
		UpdateCoreInstanceCheck: updateCoreInstanceCheck,
	}
	mock.lockUpdateCoreInstanceCheck.Lock()
	mock.calls.UpdateCoreInstanceCheck = append(mock.calls.UpdateCoreInstanceCheck, callInfo)
	mock.lockUpdateCoreInstanceCheck.Unlock()
	if mock.UpdateCoreInstanceCheckFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateCoreInstanceCheckFunc(contextMoqParam, s, updateCoreInstanceCheck)
}

// UpdateCoreInstanceCheckCalls gets all the calls that were made to UpdateCoreInstanceCheck.
// Check the length with:
//
//	len(mockedClient.UpdateCoreInstanceCheckCalls())
func (mock *ClientMock) UpdateCoreInstanceCheckCalls() []struct {
	ContextMoqParam         context.Context
	S                       string
	UpdateCoreInstanceCheck types.UpdateCoreInstanceCheck
} {
	var calls []struct {
		ContextMoqParam         context.Context
		S                       string
		UpdateCoreInstanceCheck types.UpdateCoreInstanceCheck
	}
	mock.lockUpdateCoreInstanceCheck.RLock()
	calls = mock.calls.UpdateCoreInstanceCheck
	mock.lockUpdateCoreInstanceCheck.RUnlock()
	return calls
}

// UpdateCoreInstanceFile calls UpdateCoreInstanceFileFunc.
func (mock *ClientMock) UpdateCoreInstanceFile(contextMoqParam context.Context, updateCoreInstanceFile types.UpdateCoreInstanceFile) (types.Updated, error) {
	callInfo := struct {
		ContextMoqParam        context.Context
		UpdateCoreInstanceFile types.UpdateCoreInstanceFile
	}{
		ContextMoqParam:        contextMoqParam,
		UpdateCoreInstanceFile: updateCoreInstanceFile,
	}
	mock.lockUpdateCoreInstanceFile.Lock()
	mock.calls.UpdateCoreInstanceFile = append(mock.calls.UpdateCoreInstanceFile, callInfo)
	mock.lockUpdateCoreInstanceFile.Unlock()
	if mock.UpdateCoreInstanceFileFunc == nil {
		var (
			updatedOut types.Updated
			errOut     error
		)
		return updatedOut, errOut
	}
	return mock.UpdateCoreInstanceFileFunc(contextMoqParam, updateCoreInstanceFile)
}

// UpdateCoreInstanceFileCalls gets all the calls that were made to UpdateCoreInstanceFile.
// Check the length with:
//
//	len(mockedClient.UpdateCoreInstanceFileCalls())
func (mock *ClientMock) UpdateCoreInstanceFileCalls() []struct {
	ContextMoqParam        context.Context
	UpdateCoreInstanceFile types.UpdateCoreInstanceFile
} {
	var calls []struct {
		ContextMoqParam        context.Context
		UpdateCoreInstanceFile types.UpdateCoreInstanceFile
	}
	mock.lockUpdateCoreInstanceFile.RLock()
	calls = mock.calls.UpdateCoreInstanceFile
	mock.lockUpdateCoreInstanceFile.RUnlock()
	return calls
}

// UpdateCoreInstanceSecret calls UpdateCoreInstanceSecretFunc.
func (mock *ClientMock) UpdateCoreInstanceSecret(contextMoqParam context.Context, updateCoreInstanceSecret types.UpdateCoreInstanceSecret) (types.Updated, error) {
	callInfo := struct {
		ContextMoqParam          context.Context
		UpdateCoreInstanceSecret types.UpdateCoreInstanceSecret
	}{
		ContextMoqParam:          contextMoqParam,
		UpdateCoreInstanceSecret: updateCoreInstanceSecret,
	}
	mock.lockUpdateCoreInstanceSecret.Lock()
	mock.calls.UpdateCoreInstanceSecret = append(mock.calls.UpdateCoreInstanceSecret, callInfo)
	mock.lockUpdateCoreInstanceSecret.Unlock()
	if mock.UpdateCoreInstanceSecretFunc == nil {
		var (
			updatedOut types.Updated
			errOut     error
		)
		return updatedOut, errOut
	}
	return mock.UpdateCoreInstanceSecretFunc(contextMoqParam, updateCoreInstanceSecret)
}

// UpdateCoreInstanceSecretCalls gets all the calls that were made to UpdateCoreInstanceSecret.
// Check the length with:
//
//	len(mockedClient.UpdateCoreInstanceSecretCalls())
func (mock *ClientMock) UpdateCoreInstanceSecretCalls() []struct {
	ContextMoqParam          context.Context
	UpdateCoreInstanceSecret types.UpdateCoreInstanceSecret
} {
	var calls []struct {
		ContextMoqParam          context.Context
		UpdateCoreInstanceSecret types.UpdateCoreInstanceSecret
	}
	mock.lockUpdateCoreInstanceSecret.RLock()
	calls = mock.calls.UpdateCoreInstanceSecret
	mock.lockUpdateCoreInstanceSecret.RUnlock()
	return calls
}

// UpdateEnvironment calls UpdateEnvironmentFunc.
func (mock *ClientMock) UpdateEnvironment(contextMoqParam context.Context, s string, updateEnvironment types.UpdateEnvironment) error {
	callInfo := struct {
		ContextMoqParam   context.Context
		S                 string
		UpdateEnvironment types.UpdateEnvironment
	}{
		ContextMoqParam:   contextMoqParam,
		S:                 s,
		UpdateEnvironment: updateEnvironment,
	}
	mock.lockUpdateEnvironment.Lock()
	mock.calls.UpdateEnvironment = append(mock.calls.UpdateEnvironment, callInfo)
	mock.lockUpdateEnvironment.Unlock()
	if mock.UpdateEnvironmentFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateEnvironmentFunc(contextMoqParam, s, updateEnvironment)
}

// UpdateEnvironmentCalls gets all the calls that were made to UpdateEnvironment.
// Check the length with:
//
//	len(mockedClient.UpdateEnvironmentCalls())
func (mock *ClientMock) UpdateEnvironmentCalls() []struct {
	ContextMoqParam   context.Context
	S                 string
	UpdateEnvironment types.UpdateEnvironment
} {
	var calls []struct {
		ContextMoqParam   context.Context
		S                 string
		UpdateEnvironment types.UpdateEnvironment
	}
	mock.lockUpdateEnvironment.RLock()
	calls = mock.calls.UpdateEnvironment
	mock.lockUpdateEnvironment.RUnlock()
	return calls
}

// UpdateFleet calls UpdateFleetFunc.
func (mock *ClientMock) UpdateFleet(contextMoqParam context.Context, updateFleet types.UpdateFleet) (types.Updated, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		UpdateFleet     types.UpdateFleet
	}{
		ContextMoqParam: contextMoqParam,
		UpdateFleet:     updateFleet,
	}
	mock.lockUpdateFleet.Lock()
	mock.calls.UpdateFleet = append(mock.calls.UpdateFleet, callInfo)
	mock.lockUpdateFleet.Unlock()
	if mock.UpdateFleetFunc == nil {
		var (
			updatedOut types.Updated
			errOut     error
		)
		return updatedOut, errOut
	}
	return mock.UpdateFleetFunc(contextMoqParam, updateFleet)
}

// UpdateFleetCalls gets all the calls that were made to UpdateFleet.
// Check the length with:
//
//	len(mockedClient.UpdateFleetCalls())
func (mock *ClientMock) UpdateFleetCalls() []struct {
	ContextMoqParam context.Context
	UpdateFleet     types.UpdateFleet
} {
	var calls []struct {
		ContextMoqParam context.Context
		UpdateFleet     types.UpdateFleet
	}
	mock.lockUpdateFleet.RLock()
	calls = mock.calls.UpdateFleet
	mock.lockUpdateFleet.RUnlock()
	return calls
}

// UpdateIngestCheck calls UpdateIngestCheckFunc.
func (mock *ClientMock) UpdateIngestCheck(contextMoqParam context.Context, s string, updateIngestCheck types.UpdateIngestCheck) error {
	callInfo := struct {
		ContextMoqParam   context.Context
		S                 string
		UpdateIngestCheck types.UpdateIngestCheck
	}{
		ContextMoqParam:   contextMoqParam,
		S:                 s,
		UpdateIngestCheck: updateIngestCheck,
	}
	mock.lockUpdateIngestCheck.Lock()
	mock.calls.UpdateIngestCheck = append(mock.calls.UpdateIngestCheck, callInfo)
	mock.lockUpdateIngestCheck.Unlock()
	if mock.UpdateIngestCheckFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateIngestCheckFunc(contextMoqParam, s, updateIngestCheck)
}

// UpdateIngestCheckCalls gets all the calls that were made to UpdateIngestCheck.
// Check the length with:
//
//	len(mockedClient.UpdateIngestCheckCalls())
func (mock *ClientMock) UpdateIngestCheckCalls() []struct {
	ContextMoqParam   context.Context
	S                 string
	UpdateIngestCheck types.UpdateIngestCheck
} {
	var calls []struct {
		ContextMoqParam   context.Context
		S                 string
		UpdateIngestCheck types.UpdateIngestCheck
	}
	mock.lockUpdateIngestCheck.RLock()
	calls = mock.calls.UpdateIngestCheck
	mock.lockUpdateIngestCheck.RUnlock()
	return calls
}

// UpdateMember calls UpdateMemberFunc.
func (mock *ClientMock) UpdateMember(contextMoqParam context.Context, updateMember types.UpdateMember) error {
	callInfo := struct {
		ContextMoqParam context.Context
		UpdateMember    types.UpdateMember
	}{
		ContextMoqParam: contextMoqParam,
		UpdateMember:    updateMember,
	}
	mock.lockUpdateMember.Lock()
	mock.calls.UpdateMember = append(mock.calls.UpdateMember, callInfo)
	mock.lockUpdateMember.Unlock()
	if mock.UpdateMemberFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateMemberFunc(contextMoqParam, updateMember)
}

// UpdateMemberCalls gets all the calls that were made to UpdateMember.
// Check the length with:
//
//	len(mockedClient.UpdateMemberCalls())
func (mock *ClientMock) UpdateMemberCalls() []struct {
	ContextMoqParam context.Context
	UpdateMember    types.UpdateMember
} {
	var calls []struct {
		ContextMoqParam context.Context
		UpdateMember    types.UpdateMember
	}
	mock.lockUpdateMember.RLock()
	calls = mock.calls.UpdateMember
	mock.lockUpdateMember.RUnlock()
	return calls
}

// UpdatePipeline calls UpdatePipelineFunc.
func (mock *ClientMock) UpdatePipeline(contextMoqParam context.Context, s string, updatePipeline types.UpdatePipeline) (types.UpdatedPipeline, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		UpdatePipeline  types.UpdatePipeline
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		UpdatePipeline:  updatePipeline,
	}
	mock.lockUpdatePipeline.Lock()
	mock.calls.UpdatePipeline = append(mock.calls.UpdatePipeline, callInfo)
	mock.lockUpdatePipeline.Unlock()
	if mock.UpdatePipelineFunc == nil {
		var (
			updatedPipelineOut types.UpdatedPipeline
			errOut             error
		)
		return updatedPipelineOut, errOut
	}
	return mock.UpdatePipelineFunc(contextMoqParam, s, updatePipeline)
}

// UpdatePipelineCalls gets all the calls that were made to UpdatePipeline.
// Check the length with:
//
//	len(mockedClient.UpdatePipelineCalls())
func (mock *ClientMock) UpdatePipelineCalls() []struct {
	ContextMoqParam context.Context
	S               string
	UpdatePipeline  types.UpdatePipeline
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		UpdatePipeline  types.UpdatePipeline
	}
	mock.lockUpdatePipeline.RLock()
	calls = mock.calls.UpdatePipeline
	mock.lockUpdatePipeline.RUnlock()
	return calls
}

// UpdatePipelineCheck calls UpdatePipelineCheckFunc.
func (mock *ClientMock) UpdatePipelineCheck(contextMoqParam context.Context, s string, updatePipelineCheck types.UpdatePipelineCheck) error {
	callInfo := struct {
		ContextMoqParam     context.Context
		S                   string
		UpdatePipelineCheck types.UpdatePipelineCheck
	}{
		ContextMoqParam:     contextMoqParam,
		S:                   s,
		UpdatePipelineCheck: updatePipelineCheck,
	}
	mock.lockUpdatePipelineCheck.Lock()
	mock.calls.UpdatePipelineCheck = append(mock.calls.UpdatePipelineCheck, callInfo)
	mock.lockUpdatePipelineCheck.Unlock()
	if mock.UpdatePipelineCheckFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdatePipelineCheckFunc(contextMoqParam, s, updatePipelineCheck)
}

// UpdatePipelineCheckCalls gets all the calls that were made to UpdatePipelineCheck.
// Check the length with:
//
//	len(mockedClient.UpdatePipelineCheckCalls())
func (mock *ClientMock) UpdatePipelineCheckCalls() []struct {
	ContextMoqParam     context.Context
	S                   string
	UpdatePipelineCheck types.UpdatePipelineCheck
} {
	var calls []struct {
		ContextMoqParam     context.Context
		S                   string
		UpdatePipelineCheck types.UpdatePipelineCheck
	}
	mock.lockUpdatePipelineCheck.RLock()
	calls = mock.calls.UpdatePipelineCheck
	mock.lockUpdatePipelineCheck.RUnlock()
	return calls
}

// UpdatePipelineClusterObjects calls UpdatePipelineClusterObjectsFunc.
func (mock *ClientMock) UpdatePipelineClusterObjects(contextMoqParam context.Context, s string, updatePipelineClusterObjects types.UpdatePipelineClusterObjects) error {
	callInfo := struct {
		ContextMoqParam              context.Context
		S                            string
		UpdatePipelineClusterObjects types.UpdatePipelineClusterObjects
	}{
		ContextMoqParam:              contextMoqParam,
		S:                            s,
		UpdatePipelineClusterObjects: updatePipelineClusterObjects,
	}
	mock.lockUpdatePipelineClusterObjects.Lock()
	mock.calls.UpdatePipelineClusterObjects = append(mock.calls.UpdatePipelineClusterObjects, callInfo)
	mock.lockUpdatePipelineClusterObjects.Unlock()
	if mock.UpdatePipelineClusterObjectsFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdatePipelineClusterObjectsFunc(contextMoqParam, s, updatePipelineClusterObjects)
}

// UpdatePipelineClusterObjectsCalls gets all the calls that were made to UpdatePipelineClusterObjects.
// Check the length with:
//
//	len(mockedClient.UpdatePipelineClusterObjectsCalls())
func (mock *ClientMock) UpdatePipelineClusterObjectsCalls() []struct {
	ContextMoqParam              context.Context
	S                            string
	UpdatePipelineClusterObjects types.UpdatePipelineClusterObjects
} {
	var calls []struct {
		ContextMoqParam              context.Context
		S                            string
		UpdatePipelineClusterObjects types.UpdatePipelineClusterObjects
	}
	mock.lockUpdatePipelineClusterObjects.RLock()
	calls = mock.calls.UpdatePipelineClusterObjects
	mock.lockUpdatePipelineClusterObjects.RUnlock()
	return calls
}

// UpdatePipelineFile calls UpdatePipelineFileFunc.
func (mock *ClientMock) UpdatePipelineFile(contextMoqParam context.Context, s string, updatePipelineFile types.UpdatePipelineFile) error {
	callInfo := struct {
		ContextMoqParam    context.Context
		S                  string
		UpdatePipelineFile types.UpdatePipelineFile
	}{
		ContextMoqParam:    contextMoqParam,
		S:                  s,
		UpdatePipelineFile: updatePipelineFile,
	}
	mock.lockUpdatePipelineFile.Lock()
	mock.calls.UpdatePipelineFile = append(mock.calls.UpdatePipelineFile, callInfo)
	mock.lockUpdatePipelineFile.Unlock()
	if mock.UpdatePipelineFileFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdatePipelineFileFunc(contextMoqParam, s, updatePipelineFile)
}

// UpdatePipelineFileCalls gets all the calls that were made to UpdatePipelineFile.
// Check the length with:
//
//	len(mockedClient.UpdatePipelineFileCalls())
func (mock *ClientMock) UpdatePipelineFileCalls() []struct {
	ContextMoqParam    context.Context
	S                  string
	UpdatePipelineFile types.UpdatePipelineFile
} {
	var calls []struct {
		ContextMoqParam    context.Context
		S                  string
		UpdatePipelineFile types.UpdatePipelineFile
	}
	mock.lockUpdatePipelineFile.RLock()
	calls = mock.calls.UpdatePipelineFile
	mock.lockUpdatePipelineFile.RUnlock()
	return calls
}

// UpdatePipelineMetadata calls UpdatePipelineMetadataFunc.
func (mock *ClientMock) UpdatePipelineMetadata(contextMoqParam context.Context, s string, updatePipelineMetadata types.UpdatePipelineMetadata) error {
	callInfo := struct {
		ContextMoqParam        context.Context
		S                      string
		UpdatePipelineMetadata types.UpdatePipelineMetadata
	}{
		ContextMoqParam:        contextMoqParam,
		S:                      s,
		UpdatePipelineMetadata: updatePipelineMetadata,
	}
	mock.lockUpdatePipelineMetadata.Lock()
	mock.calls.UpdatePipelineMetadata = append(mock.calls.UpdatePipelineMetadata, callInfo)
	mock.lockUpdatePipelineMetadata.Unlock()
	if mock.UpdatePipelineMetadataFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdatePipelineMetadataFunc(contextMoqParam, s, updatePipelineMetadata)
}

// UpdatePipelineMetadataCalls gets all the calls that were made to UpdatePipelineMetadata.
// Check the length with:
//
//	len(mockedClient.UpdatePipelineMetadataCalls())
func (mock *ClientMock) UpdatePipelineMetadataCalls() []struct {
	ContextMoqParam        context.Context
	S                      string
	UpdatePipelineMetadata types.UpdatePipelineMetadata
} {
	var calls []struct {
		ContextMoqParam        context.Context
		S                      string
		UpdatePipelineMetadata types.UpdatePipelineMetadata
	}
	mock.lockUpdatePipelineMetadata.RLock()
	calls = mock.calls.UpdatePipelineMetadata
	mock.lockUpdatePipelineMetadata.RUnlock()
	return calls
}

// UpdatePipelinePort calls UpdatePipelinePortFunc.
func (mock *ClientMock) UpdatePipelinePort(contextMoqParam context.Context, s string, updatePipelinePort types.UpdatePipelinePort) error {
	callInfo := struct {
		ContextMoqParam    context.Context
		S                  string
		UpdatePipelinePort types.UpdatePipelinePort
	}{
		ContextMoqParam:    contextMoqParam,
		S:                  s,
		UpdatePipelinePort: updatePipelinePort,
	}
	mock.lockUpdatePipelinePort.Lock()
	mock.calls.UpdatePipelinePort = append(mock.calls.UpdatePipelinePort, callInfo)
	mock.lockUpdatePipelinePort.Unlock()
	if mock.UpdatePipelinePortFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdatePipelinePortFunc(contextMoqParam, s, updatePipelinePort)
}

// UpdatePipelinePortCalls gets all the calls that were made to UpdatePipelinePort.
// Check the length with:
//
//	len(mockedClient.UpdatePipelinePortCalls())
func (mock *ClientMock) UpdatePipelinePortCalls() []struct {
	ContextMoqParam    context.Context
	S                  string
	UpdatePipelinePort types.UpdatePipelinePort
} {
	var calls []struct {
		ContextMoqParam    context.Context
		S                  string
		UpdatePipelinePort types.UpdatePipelinePort
	}
	mock.lockUpdatePipelinePort.RLock()
	calls = mock.calls.UpdatePipelinePort
	mock.lockUpdatePipelinePort.RUnlock()
	return calls
}

// UpdatePipelineSecret calls UpdatePipelineSecretFunc.
func (mock *ClientMock) UpdatePipelineSecret(contextMoqParam context.Context, s string, updatePipelineSecret types.UpdatePipelineSecret) error {
	callInfo := struct {
		ContextMoqParam      context.Context
		S                    string
		UpdatePipelineSecret types.UpdatePipelineSecret
	}{
		ContextMoqParam:      contextMoqParam,
		S:                    s,
		UpdatePipelineSecret: updatePipelineSecret,
	}
	mock.lockUpdatePipelineSecret.Lock()
	mock.calls.UpdatePipelineSecret = append(mock.calls.UpdatePipelineSecret, callInfo)
	mock.lockUpdatePipelineSecret.Unlock()
	if mock.UpdatePipelineSecretFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdatePipelineSecretFunc(contextMoqParam, s, updatePipelineSecret)
}

// UpdatePipelineSecretCalls gets all the calls that were made to UpdatePipelineSecret.
// Check the length with:
//
//	len(mockedClient.UpdatePipelineSecretCalls())
func (mock *ClientMock) UpdatePipelineSecretCalls() []struct {
	ContextMoqParam      context.Context
	S                    string
	UpdatePipelineSecret types.UpdatePipelineSecret
} {
	var calls []struct {
		ContextMoqParam      context.Context
		S                    string
		UpdatePipelineSecret types.UpdatePipelineSecret
	}
	mock.lockUpdatePipelineSecret.RLock()
	calls = mock.calls.UpdatePipelineSecret
	mock.lockUpdatePipelineSecret.RUnlock()
	return calls
}

// UpdateProcessingRule calls UpdateProcessingRuleFunc.
func (mock *ClientMock) UpdateProcessingRule(contextMoqParam context.Context, updateProcessingRule types.UpdateProcessingRule) (types.Updated, error) {
	callInfo := struct {
		ContextMoqParam      context.Context
		UpdateProcessingRule types.UpdateProcessingRule
	}{
		ContextMoqParam:      contextMoqParam,
		UpdateProcessingRule: updateProcessingRule,
	}
	mock.lockUpdateProcessingRule.Lock()
	mock.calls.UpdateProcessingRule = append(mock.calls.UpdateProcessingRule, callInfo)
	mock.lockUpdateProcessingRule.Unlock()
	if mock.UpdateProcessingRuleFunc == nil {
		var (
			updatedOut types.Updated
			errOut     error
		)
		return updatedOut, errOut
	}
	return mock.UpdateProcessingRuleFunc(contextMoqParam, updateProcessingRule)
}

// UpdateProcessingRuleCalls gets all the calls that were made to UpdateProcessingRule.
// Check the length with:
//
//	len(mockedClient.UpdateProcessingRuleCalls())
func (mock *ClientMock) UpdateProcessingRuleCalls() []struct {
	ContextMoqParam      context.Context
	UpdateProcessingRule types.UpdateProcessingRule
} {
	var calls []struct {
		ContextMoqParam      context.Context
		UpdateProcessingRule types.UpdateProcessingRule
	}
	mock.lockUpdateProcessingRule.RLock()
	calls = mock.calls.UpdateProcessingRule
	mock.lockUpdateProcessingRule.RUnlock()
	return calls
}

// UpdateProcessingRuleTemplate calls UpdateProcessingRuleTemplateFunc.
func (mock *ClientMock) UpdateProcessingRuleTemplate(contextMoqParam context.Context, updateProcessingRuleTemplate types.UpdateProcessingRuleTemplate) (types.Updated, error) {
	callInfo := struct {
		ContextMoqParam              context.Context
		UpdateProcessingRuleTemplate types.UpdateProcessingRuleTemplate
	}{
		ContextMoqParam:              contextMoqParam,
		UpdateProcessingRuleTemplate: updateProcessingRuleTemplate,
	}
	mock.lockUpdateProcessingRuleTemplate.Lock()
	mock.calls.UpdateProcessingRuleTemplate = append(mock.calls.UpdateProcessingRuleTemplate, callInfo)
	mock.lockUpdateProcessingRuleTemplate.Unlock()
	if mock.UpdateProcessingRuleTemplateFunc == nil {
		var (
			updatedOut types.Updated
			errOut     error
		)
		return updatedOut, errOut
	}
	return mock.UpdateProcessingRuleTemplateFunc(contextMoqParam, updateProcessingRuleTemplate)
}

// UpdateProcessingRuleTemplateCalls gets all the calls that were made to UpdateProcessingRuleTemplate.
// Check the length with:
//
//	len(mockedClient.UpdateProcessingRuleTemplateCalls())
func (mock *ClientMock) UpdateProcessingRuleTemplateCalls() []struct {
	ContextMoqParam              context.Context
	UpdateProcessingRuleTemplate types.UpdateProcessingRuleTemplate
} {
	var calls []struct {
		ContextMoqParam              context.Context
		UpdateProcessingRuleTemplate types.UpdateProcessingRuleTemplate
	}
	mock.lockUpdateProcessingRuleTemplate.RLock()
	calls = mock.calls.UpdateProcessingRuleTemplate
	mock.lockUpdateProcessingRuleTemplate.RUnlock()
	return calls
}

// UpdateProject calls UpdateProjectFunc.
func (mock *ClientMock) UpdateProject(contextMoqParam context.Context, s string, updateProject types.UpdateProject) error {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		UpdateProject   types.UpdateProject
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		UpdateProject:   updateProject,
	}
	mock.lockUpdateProject.Lock()
	mock.calls.UpdateProject = append(mock.calls.UpdateProject, callInfo)
	mock.lockUpdateProject.Unlock()
	if mock.UpdateProjectFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateProjectFunc(contextMoqParam, s, updateProject)
}

// UpdateProjectCalls gets all the calls that were made to UpdateProject.
// Check the length with:
//
//	len(mockedClient.UpdateProjectCalls())
func (mock *ClientMock) UpdateProjectCalls() []struct {
	ContextMoqParam context.Context
	S               string
	UpdateProject   types.UpdateProject
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		UpdateProject   types.UpdateProject
	}
	mock.lockUpdateProject.RLock()
	calls = mock.calls.UpdateProject
	mock.lockUpdateProject.RUnlock()
	return calls
}

// UpdateResourceProfile calls UpdateResourceProfileFunc.
func (mock *ClientMock) UpdateResourceProfile(contextMoqParam context.Context, s string, updateResourceProfile types.UpdateResourceProfile) error {
	callInfo := struct {
		ContextMoqParam       context.Context
		S                     string
		UpdateResourceProfile types.UpdateResourceProfile
	}{
		ContextMoqParam:       contextMoqParam,
		S:                     s,
		UpdateResourceProfile: updateResourceProfile,
	}
	mock.lockUpdateResourceProfile.Lock()
	mock.calls.UpdateResourceProfile = append(mock.calls.UpdateResourceProfile, callInfo)
	mock.lockUpdateResourceProfile.Unlock()
	if mock.UpdateResourceProfileFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateResourceProfileFunc(contextMoqParam, s, updateResourceProfile)
}

// UpdateResourceProfileCalls gets all the calls that were made to UpdateResourceProfile.
// Check the length with:
//
//	len(mockedClient.UpdateResourceProfileCalls())
func (mock *ClientMock) UpdateResourceProfileCalls() []struct {
	ContextMoqParam       context.Context
	S                     string
	UpdateResourceProfile types.UpdateResourceProfile
} {
	var calls []struct {
		ContextMoqParam       context.Context
		S                     string
		UpdateResourceProfile types.UpdateResourceProfile
	}
	mock.lockUpdateResourceProfile.RLock()
	calls = mock.calls.UpdateResourceProfile
	mock.lockUpdateResourceProfile.RUnlock()
	return calls
}

// UpdateToken calls UpdateTokenFunc.
func (mock *ClientMock) UpdateToken(contextMoqParam context.Context, updateToken types.UpdateToken) error {
	callInfo := struct {
		ContextMoqParam context.Context
		UpdateToken     types.UpdateToken
	}{
		ContextMoqParam: contextMoqParam,
		UpdateToken:     updateToken,
	}
	mock.lockUpdateToken.Lock()
	mock.calls.UpdateToken = append(mock.calls.UpdateToken, callInfo)
	mock.lockUpdateToken.Unlock()
	if mock.UpdateTokenFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateTokenFunc(contextMoqParam, updateToken)
}

// UpdateTokenCalls gets all the calls that were made to UpdateToken.
// Check the length with:
//
//	len(mockedClient.UpdateTokenCalls())
func (mock *ClientMock) UpdateTokenCalls() []struct {
	ContextMoqParam context.Context
	UpdateToken     types.UpdateToken
} {
	var calls []struct {
		ContextMoqParam context.Context
		UpdateToken     types.UpdateToken
	}
	mock.lockUpdateToken.RLock()
	calls = mock.calls.UpdateToken
	mock.lockUpdateToken.RUnlock()
	return calls
}

// UpdateTraceSession calls UpdateTraceSessionFunc.
func (mock *ClientMock) UpdateTraceSession(contextMoqParam context.Context, s string, updateTraceSession types.UpdateTraceSession) (types.Updated, error) {
	callInfo := struct {
		ContextMoqParam    context.Context
		S                  string
		UpdateTraceSession types.UpdateTraceSession
	}{
		ContextMoqParam:    contextMoqParam,
		S:                  s,
		UpdateTraceSession: updateTraceSession,
	}
	mock.lockUpdateTraceSession.Lock()
	mock.calls.UpdateTraceSession = append(mock.calls.UpdateTraceSession, callInfo)
	mock.lockUpdateTraceSession.Unlock()
	if mock.UpdateTraceSessionFunc == nil {
		var (
			updatedOut types.Updated
			errOut     error
		)
		return updatedOut, errOut
	}
	return mock.UpdateTraceSessionFunc(contextMoqParam, s, updateTraceSession)
}

// UpdateTraceSessionCalls gets all the calls that were made to UpdateTraceSession.
// Check the length with:
//
//	len(mockedClient.UpdateTraceSessionCalls())
func (mock *ClientMock) UpdateTraceSessionCalls() []struct {
	ContextMoqParam    context.Context
	S                  string
	UpdateTraceSession types.UpdateTraceSession
} {
	var calls []struct {
		ContextMoqParam    context.Context
		S                  string
		UpdateTraceSession types.UpdateTraceSession
	}
	mock.lockUpdateTraceSession.RLock()
	calls = mock.calls.UpdateTraceSession
	mock.lockUpdateTraceSession.RUnlock()
	return calls
}

// ValidateConfig calls ValidateConfigFunc.
func (mock *ClientMock) ValidateConfig(contextMoqParam context.Context, agentType types.AgentType, validatingConfig types.ValidatingConfig) (types.ValidatedConfig, error) {
	callInfo := struct {
		ContextMoqParam  context.Context
		AgentType        types.AgentType
		ValidatingConfig types.ValidatingConfig
	}{
		ContextMoqParam:  contextMoqParam,
		AgentType:        agentType,
		ValidatingConfig: validatingConfig,
	}
	mock.lockValidateConfig.Lock()
	mock.calls.ValidateConfig = append(mock.calls.ValidateConfig, callInfo)
	mock.lockValidateConfig.Unlock()
	if mock.ValidateConfigFunc == nil {
		var (
			validatedConfigOut types.ValidatedConfig
			errOut             error
		)
		return validatedConfigOut, errOut
	}
	return mock.ValidateConfigFunc(contextMoqParam, agentType, validatingConfig)
}

// ValidateConfigCalls gets all the calls that were made to ValidateConfig.
// Check the length with:
//
//	len(mockedClient.ValidateConfigCalls())
func (mock *ClientMock) ValidateConfigCalls() []struct {
	ContextMoqParam  context.Context
	AgentType        types.AgentType
	ValidatingConfig types.ValidatingConfig
} {
	var calls []struct {
		ContextMoqParam  context.Context
		AgentType        types.AgentType
		ValidatingConfig types.ValidatingConfig
	}
	mock.lockValidateConfig.RLock()
	calls = mock.calls.ValidateConfig
	mock.lockValidateConfig.RUnlock()
	return calls
}

// ValidateConfigV2 calls ValidateConfigV2Func.
func (mock *ClientMock) ValidateConfigV2(contextMoqParam context.Context, validatingConfig types.ValidatingConfig) (types.ValidatedConfigV2, error) {
	callInfo := struct {
		ContextMoqParam  context.Context
		ValidatingConfig types.ValidatingConfig
	}{
		ContextMoqParam:  contextMoqParam,
		ValidatingConfig: validatingConfig,
	}
	mock.lockValidateConfigV2.Lock()
	mock.calls.ValidateConfigV2 = append(mock.calls.ValidateConfigV2, callInfo)
	mock.lockValidateConfigV2.Unlock()
	if mock.ValidateConfigV2Func == nil {
		var (
			validatedConfigV2Out types.ValidatedConfigV2
			errOut               error
		)
		return validatedConfigV2Out, errOut
	}
	return mock.ValidateConfigV2Func(contextMoqParam, validatingConfig)
}

// ValidateConfigV2Calls gets all the calls that were made to ValidateConfigV2.
// Check the length with:
//
//	len(mockedClient.ValidateConfigV2Calls())
func (mock *ClientMock) ValidateConfigV2Calls() []struct {
	ContextMoqParam  context.Context
	ValidatingConfig types.ValidatingConfig
} {
	var calls []struct {
		ContextMoqParam  context.Context
		ValidatingConfig types.ValidatingConfig
	}
	mock.lockValidateConfigV2.RLock()
	calls = mock.calls.ValidateConfigV2
	mock.lockValidateConfigV2.RUnlock()
	return calls
}
