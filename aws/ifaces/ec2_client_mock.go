// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ifaces

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/ec2"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
// 	func TestSomethingThatUsesClient(t *testing.T) {
//
// 		// make and configure a mocked Client
// 		mockedClient := &ClientMock{
// 			AcceptReservedInstancesExchangeQuoteFunc: func(ctx context.Context, params *ec2.AcceptReservedInstancesExchangeQuoteInput, optFns ...func(*ec2.Options)) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
// 				panic("mock out the AcceptReservedInstancesExchangeQuote method")
// 			},
// 			AcceptTransitGatewayMulticastDomainAssociationsFunc: func(ctx context.Context, params *ec2.AcceptTransitGatewayMulticastDomainAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.AcceptTransitGatewayMulticastDomainAssociationsOutput, error) {
// 				panic("mock out the AcceptTransitGatewayMulticastDomainAssociations method")
// 			},
// 			AcceptTransitGatewayPeeringAttachmentFunc: func(ctx context.Context, params *ec2.AcceptTransitGatewayPeeringAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error) {
// 				panic("mock out the AcceptTransitGatewayPeeringAttachment method")
// 			},
// 			AcceptTransitGatewayVpcAttachmentFunc: func(ctx context.Context, params *ec2.AcceptTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
// 				panic("mock out the AcceptTransitGatewayVpcAttachment method")
// 			},
// 			AcceptVpcEndpointConnectionsFunc: func(ctx context.Context, params *ec2.AcceptVpcEndpointConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
// 				panic("mock out the AcceptVpcEndpointConnections method")
// 			},
// 			AcceptVpcPeeringConnectionFunc: func(ctx context.Context, params *ec2.AcceptVpcPeeringConnectionInput, optFns ...func(*ec2.Options)) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
// 				panic("mock out the AcceptVpcPeeringConnection method")
// 			},
// 			AdvertiseByoipCidrFunc: func(ctx context.Context, params *ec2.AdvertiseByoipCidrInput, optFns ...func(*ec2.Options)) (*ec2.AdvertiseByoipCidrOutput, error) {
// 				panic("mock out the AdvertiseByoipCidr method")
// 			},
// 			AllocateAddressFunc: func(ctx context.Context, params *ec2.AllocateAddressInput, optFns ...func(*ec2.Options)) (*ec2.AllocateAddressOutput, error) {
// 				panic("mock out the AllocateAddress method")
// 			},
// 			AllocateHostsFunc: func(ctx context.Context, params *ec2.AllocateHostsInput, optFns ...func(*ec2.Options)) (*ec2.AllocateHostsOutput, error) {
// 				panic("mock out the AllocateHosts method")
// 			},
// 			AllocateIpamPoolCidrFunc: func(ctx context.Context, params *ec2.AllocateIpamPoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.AllocateIpamPoolCidrOutput, error) {
// 				panic("mock out the AllocateIpamPoolCidr method")
// 			},
// 			ApplySecurityGroupsToClientVpnTargetNetworkFunc: func(ctx context.Context, params *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, optFns ...func(*ec2.Options)) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
// 				panic("mock out the ApplySecurityGroupsToClientVpnTargetNetwork method")
// 			},
// 			AssignIpv6AddressesFunc: func(ctx context.Context, params *ec2.AssignIpv6AddressesInput, optFns ...func(*ec2.Options)) (*ec2.AssignIpv6AddressesOutput, error) {
// 				panic("mock out the AssignIpv6Addresses method")
// 			},
// 			AssignPrivateIpAddressesFunc: func(ctx context.Context, params *ec2.AssignPrivateIpAddressesInput, optFns ...func(*ec2.Options)) (*ec2.AssignPrivateIpAddressesOutput, error) {
// 				panic("mock out the AssignPrivateIpAddresses method")
// 			},
// 			AssociateAddressFunc: func(ctx context.Context, params *ec2.AssociateAddressInput, optFns ...func(*ec2.Options)) (*ec2.AssociateAddressOutput, error) {
// 				panic("mock out the AssociateAddress method")
// 			},
// 			AssociateClientVpnTargetNetworkFunc: func(ctx context.Context, params *ec2.AssociateClientVpnTargetNetworkInput, optFns ...func(*ec2.Options)) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
// 				panic("mock out the AssociateClientVpnTargetNetwork method")
// 			},
// 			AssociateDhcpOptionsFunc: func(ctx context.Context, params *ec2.AssociateDhcpOptionsInput, optFns ...func(*ec2.Options)) (*ec2.AssociateDhcpOptionsOutput, error) {
// 				panic("mock out the AssociateDhcpOptions method")
// 			},
// 			AssociateEnclaveCertificateIamRoleFunc: func(ctx context.Context, params *ec2.AssociateEnclaveCertificateIamRoleInput, optFns ...func(*ec2.Options)) (*ec2.AssociateEnclaveCertificateIamRoleOutput, error) {
// 				panic("mock out the AssociateEnclaveCertificateIamRole method")
// 			},
// 			AssociateIamInstanceProfileFunc: func(ctx context.Context, params *ec2.AssociateIamInstanceProfileInput, optFns ...func(*ec2.Options)) (*ec2.AssociateIamInstanceProfileOutput, error) {
// 				panic("mock out the AssociateIamInstanceProfile method")
// 			},
// 			AssociateInstanceEventWindowFunc: func(ctx context.Context, params *ec2.AssociateInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.AssociateInstanceEventWindowOutput, error) {
// 				panic("mock out the AssociateInstanceEventWindow method")
// 			},
// 			AssociateRouteTableFunc: func(ctx context.Context, params *ec2.AssociateRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.AssociateRouteTableOutput, error) {
// 				panic("mock out the AssociateRouteTable method")
// 			},
// 			AssociateSubnetCidrBlockFunc: func(ctx context.Context, params *ec2.AssociateSubnetCidrBlockInput, optFns ...func(*ec2.Options)) (*ec2.AssociateSubnetCidrBlockOutput, error) {
// 				panic("mock out the AssociateSubnetCidrBlock method")
// 			},
// 			AssociateTransitGatewayMulticastDomainFunc: func(ctx context.Context, params *ec2.AssociateTransitGatewayMulticastDomainInput, optFns ...func(*ec2.Options)) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error) {
// 				panic("mock out the AssociateTransitGatewayMulticastDomain method")
// 			},
// 			AssociateTransitGatewayPolicyTableFunc: func(ctx context.Context, params *ec2.AssociateTransitGatewayPolicyTableInput, optFns ...func(*ec2.Options)) (*ec2.AssociateTransitGatewayPolicyTableOutput, error) {
// 				panic("mock out the AssociateTransitGatewayPolicyTable method")
// 			},
// 			AssociateTransitGatewayRouteTableFunc: func(ctx context.Context, params *ec2.AssociateTransitGatewayRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
// 				panic("mock out the AssociateTransitGatewayRouteTable method")
// 			},
// 			AssociateTrunkInterfaceFunc: func(ctx context.Context, params *ec2.AssociateTrunkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.AssociateTrunkInterfaceOutput, error) {
// 				panic("mock out the AssociateTrunkInterface method")
// 			},
// 			AssociateVpcCidrBlockFunc: func(ctx context.Context, params *ec2.AssociateVpcCidrBlockInput, optFns ...func(*ec2.Options)) (*ec2.AssociateVpcCidrBlockOutput, error) {
// 				panic("mock out the AssociateVpcCidrBlock method")
// 			},
// 			AttachClassicLinkVpcFunc: func(ctx context.Context, params *ec2.AttachClassicLinkVpcInput, optFns ...func(*ec2.Options)) (*ec2.AttachClassicLinkVpcOutput, error) {
// 				panic("mock out the AttachClassicLinkVpc method")
// 			},
// 			AttachInternetGatewayFunc: func(ctx context.Context, params *ec2.AttachInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.AttachInternetGatewayOutput, error) {
// 				panic("mock out the AttachInternetGateway method")
// 			},
// 			AttachNetworkInterfaceFunc: func(ctx context.Context, params *ec2.AttachNetworkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.AttachNetworkInterfaceOutput, error) {
// 				panic("mock out the AttachNetworkInterface method")
// 			},
// 			AttachVolumeFunc: func(ctx context.Context, params *ec2.AttachVolumeInput, optFns ...func(*ec2.Options)) (*ec2.AttachVolumeOutput, error) {
// 				panic("mock out the AttachVolume method")
// 			},
// 			AttachVpnGatewayFunc: func(ctx context.Context, params *ec2.AttachVpnGatewayInput, optFns ...func(*ec2.Options)) (*ec2.AttachVpnGatewayOutput, error) {
// 				panic("mock out the AttachVpnGateway method")
// 			},
// 			AuthorizeClientVpnIngressFunc: func(ctx context.Context, params *ec2.AuthorizeClientVpnIngressInput, optFns ...func(*ec2.Options)) (*ec2.AuthorizeClientVpnIngressOutput, error) {
// 				panic("mock out the AuthorizeClientVpnIngress method")
// 			},
// 			AuthorizeSecurityGroupEgressFunc: func(ctx context.Context, params *ec2.AuthorizeSecurityGroupEgressInput, optFns ...func(*ec2.Options)) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
// 				panic("mock out the AuthorizeSecurityGroupEgress method")
// 			},
// 			AuthorizeSecurityGroupIngressFunc: func(ctx context.Context, params *ec2.AuthorizeSecurityGroupIngressInput, optFns ...func(*ec2.Options)) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
// 				panic("mock out the AuthorizeSecurityGroupIngress method")
// 			},
// 			BundleInstanceFunc: func(ctx context.Context, params *ec2.BundleInstanceInput, optFns ...func(*ec2.Options)) (*ec2.BundleInstanceOutput, error) {
// 				panic("mock out the BundleInstance method")
// 			},
// 			CancelBundleTaskFunc: func(ctx context.Context, params *ec2.CancelBundleTaskInput, optFns ...func(*ec2.Options)) (*ec2.CancelBundleTaskOutput, error) {
// 				panic("mock out the CancelBundleTask method")
// 			},
// 			CancelCapacityReservationFunc: func(ctx context.Context, params *ec2.CancelCapacityReservationInput, optFns ...func(*ec2.Options)) (*ec2.CancelCapacityReservationOutput, error) {
// 				panic("mock out the CancelCapacityReservation method")
// 			},
// 			CancelCapacityReservationFleetsFunc: func(ctx context.Context, params *ec2.CancelCapacityReservationFleetsInput, optFns ...func(*ec2.Options)) (*ec2.CancelCapacityReservationFleetsOutput, error) {
// 				panic("mock out the CancelCapacityReservationFleets method")
// 			},
// 			CancelConversionTaskFunc: func(ctx context.Context, params *ec2.CancelConversionTaskInput, optFns ...func(*ec2.Options)) (*ec2.CancelConversionTaskOutput, error) {
// 				panic("mock out the CancelConversionTask method")
// 			},
// 			CancelExportTaskFunc: func(ctx context.Context, params *ec2.CancelExportTaskInput, optFns ...func(*ec2.Options)) (*ec2.CancelExportTaskOutput, error) {
// 				panic("mock out the CancelExportTask method")
// 			},
// 			CancelImportTaskFunc: func(ctx context.Context, params *ec2.CancelImportTaskInput, optFns ...func(*ec2.Options)) (*ec2.CancelImportTaskOutput, error) {
// 				panic("mock out the CancelImportTask method")
// 			},
// 			CancelReservedInstancesListingFunc: func(ctx context.Context, params *ec2.CancelReservedInstancesListingInput, optFns ...func(*ec2.Options)) (*ec2.CancelReservedInstancesListingOutput, error) {
// 				panic("mock out the CancelReservedInstancesListing method")
// 			},
// 			CancelSpotFleetRequestsFunc: func(ctx context.Context, params *ec2.CancelSpotFleetRequestsInput, optFns ...func(*ec2.Options)) (*ec2.CancelSpotFleetRequestsOutput, error) {
// 				panic("mock out the CancelSpotFleetRequests method")
// 			},
// 			CancelSpotInstanceRequestsFunc: func(ctx context.Context, params *ec2.CancelSpotInstanceRequestsInput, optFns ...func(*ec2.Options)) (*ec2.CancelSpotInstanceRequestsOutput, error) {
// 				panic("mock out the CancelSpotInstanceRequests method")
// 			},
// 			ConfirmProductInstanceFunc: func(ctx context.Context, params *ec2.ConfirmProductInstanceInput, optFns ...func(*ec2.Options)) (*ec2.ConfirmProductInstanceOutput, error) {
// 				panic("mock out the ConfirmProductInstance method")
// 			},
// 			CopyFpgaImageFunc: func(ctx context.Context, params *ec2.CopyFpgaImageInput, optFns ...func(*ec2.Options)) (*ec2.CopyFpgaImageOutput, error) {
// 				panic("mock out the CopyFpgaImage method")
// 			},
// 			CopyImageFunc: func(ctx context.Context, params *ec2.CopyImageInput, optFns ...func(*ec2.Options)) (*ec2.CopyImageOutput, error) {
// 				panic("mock out the CopyImage method")
// 			},
// 			CopySnapshotFunc: func(ctx context.Context, params *ec2.CopySnapshotInput, optFns ...func(*ec2.Options)) (*ec2.CopySnapshotOutput, error) {
// 				panic("mock out the CopySnapshot method")
// 			},
// 			CreateCapacityReservationFunc: func(ctx context.Context, params *ec2.CreateCapacityReservationInput, optFns ...func(*ec2.Options)) (*ec2.CreateCapacityReservationOutput, error) {
// 				panic("mock out the CreateCapacityReservation method")
// 			},
// 			CreateCapacityReservationFleetFunc: func(ctx context.Context, params *ec2.CreateCapacityReservationFleetInput, optFns ...func(*ec2.Options)) (*ec2.CreateCapacityReservationFleetOutput, error) {
// 				panic("mock out the CreateCapacityReservationFleet method")
// 			},
// 			CreateCarrierGatewayFunc: func(ctx context.Context, params *ec2.CreateCarrierGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateCarrierGatewayOutput, error) {
// 				panic("mock out the CreateCarrierGateway method")
// 			},
// 			CreateClientVpnEndpointFunc: func(ctx context.Context, params *ec2.CreateClientVpnEndpointInput, optFns ...func(*ec2.Options)) (*ec2.CreateClientVpnEndpointOutput, error) {
// 				panic("mock out the CreateClientVpnEndpoint method")
// 			},
// 			CreateClientVpnRouteFunc: func(ctx context.Context, params *ec2.CreateClientVpnRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateClientVpnRouteOutput, error) {
// 				panic("mock out the CreateClientVpnRoute method")
// 			},
// 			CreateCustomerGatewayFunc: func(ctx context.Context, params *ec2.CreateCustomerGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateCustomerGatewayOutput, error) {
// 				panic("mock out the CreateCustomerGateway method")
// 			},
// 			CreateDefaultSubnetFunc: func(ctx context.Context, params *ec2.CreateDefaultSubnetInput, optFns ...func(*ec2.Options)) (*ec2.CreateDefaultSubnetOutput, error) {
// 				panic("mock out the CreateDefaultSubnet method")
// 			},
// 			CreateDefaultVpcFunc: func(ctx context.Context, params *ec2.CreateDefaultVpcInput, optFns ...func(*ec2.Options)) (*ec2.CreateDefaultVpcOutput, error) {
// 				panic("mock out the CreateDefaultVpc method")
// 			},
// 			CreateDhcpOptionsFunc: func(ctx context.Context, params *ec2.CreateDhcpOptionsInput, optFns ...func(*ec2.Options)) (*ec2.CreateDhcpOptionsOutput, error) {
// 				panic("mock out the CreateDhcpOptions method")
// 			},
// 			CreateEgressOnlyInternetGatewayFunc: func(ctx context.Context, params *ec2.CreateEgressOnlyInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
// 				panic("mock out the CreateEgressOnlyInternetGateway method")
// 			},
// 			CreateFleetFunc: func(ctx context.Context, params *ec2.CreateFleetInput, optFns ...func(*ec2.Options)) (*ec2.CreateFleetOutput, error) {
// 				panic("mock out the CreateFleet method")
// 			},
// 			CreateFlowLogsFunc: func(ctx context.Context, params *ec2.CreateFlowLogsInput, optFns ...func(*ec2.Options)) (*ec2.CreateFlowLogsOutput, error) {
// 				panic("mock out the CreateFlowLogs method")
// 			},
// 			CreateFpgaImageFunc: func(ctx context.Context, params *ec2.CreateFpgaImageInput, optFns ...func(*ec2.Options)) (*ec2.CreateFpgaImageOutput, error) {
// 				panic("mock out the CreateFpgaImage method")
// 			},
// 			CreateImageFunc: func(ctx context.Context, params *ec2.CreateImageInput, optFns ...func(*ec2.Options)) (*ec2.CreateImageOutput, error) {
// 				panic("mock out the CreateImage method")
// 			},
// 			CreateInstanceEventWindowFunc: func(ctx context.Context, params *ec2.CreateInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.CreateInstanceEventWindowOutput, error) {
// 				panic("mock out the CreateInstanceEventWindow method")
// 			},
// 			CreateInstanceExportTaskFunc: func(ctx context.Context, params *ec2.CreateInstanceExportTaskInput, optFns ...func(*ec2.Options)) (*ec2.CreateInstanceExportTaskOutput, error) {
// 				panic("mock out the CreateInstanceExportTask method")
// 			},
// 			CreateInternetGatewayFunc: func(ctx context.Context, params *ec2.CreateInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateInternetGatewayOutput, error) {
// 				panic("mock out the CreateInternetGateway method")
// 			},
// 			CreateIpamFunc: func(ctx context.Context, params *ec2.CreateIpamInput, optFns ...func(*ec2.Options)) (*ec2.CreateIpamOutput, error) {
// 				panic("mock out the CreateIpam method")
// 			},
// 			CreateIpamPoolFunc: func(ctx context.Context, params *ec2.CreateIpamPoolInput, optFns ...func(*ec2.Options)) (*ec2.CreateIpamPoolOutput, error) {
// 				panic("mock out the CreateIpamPool method")
// 			},
// 			CreateIpamScopeFunc: func(ctx context.Context, params *ec2.CreateIpamScopeInput, optFns ...func(*ec2.Options)) (*ec2.CreateIpamScopeOutput, error) {
// 				panic("mock out the CreateIpamScope method")
// 			},
// 			CreateKeyPairFunc: func(ctx context.Context, params *ec2.CreateKeyPairInput, optFns ...func(*ec2.Options)) (*ec2.CreateKeyPairOutput, error) {
// 				panic("mock out the CreateKeyPair method")
// 			},
// 			CreateLaunchTemplateFunc: func(ctx context.Context, params *ec2.CreateLaunchTemplateInput, optFns ...func(*ec2.Options)) (*ec2.CreateLaunchTemplateOutput, error) {
// 				panic("mock out the CreateLaunchTemplate method")
// 			},
// 			CreateLaunchTemplateVersionFunc: func(ctx context.Context, params *ec2.CreateLaunchTemplateVersionInput, optFns ...func(*ec2.Options)) (*ec2.CreateLaunchTemplateVersionOutput, error) {
// 				panic("mock out the CreateLaunchTemplateVersion method")
// 			},
// 			CreateLocalGatewayRouteFunc: func(ctx context.Context, params *ec2.CreateLocalGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateLocalGatewayRouteOutput, error) {
// 				panic("mock out the CreateLocalGatewayRoute method")
// 			},
// 			CreateLocalGatewayRouteTableVpcAssociationFunc: func(ctx context.Context, params *ec2.CreateLocalGatewayRouteTableVpcAssociationInput, optFns ...func(*ec2.Options)) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error) {
// 				panic("mock out the CreateLocalGatewayRouteTableVpcAssociation method")
// 			},
// 			CreateManagedPrefixListFunc: func(ctx context.Context, params *ec2.CreateManagedPrefixListInput, optFns ...func(*ec2.Options)) (*ec2.CreateManagedPrefixListOutput, error) {
// 				panic("mock out the CreateManagedPrefixList method")
// 			},
// 			CreateNatGatewayFunc: func(ctx context.Context, params *ec2.CreateNatGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateNatGatewayOutput, error) {
// 				panic("mock out the CreateNatGateway method")
// 			},
// 			CreateNetworkAclFunc: func(ctx context.Context, params *ec2.CreateNetworkAclInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkAclOutput, error) {
// 				panic("mock out the CreateNetworkAcl method")
// 			},
// 			CreateNetworkAclEntryFunc: func(ctx context.Context, params *ec2.CreateNetworkAclEntryInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkAclEntryOutput, error) {
// 				panic("mock out the CreateNetworkAclEntry method")
// 			},
// 			CreateNetworkInsightsAccessScopeFunc: func(ctx context.Context, params *ec2.CreateNetworkInsightsAccessScopeInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkInsightsAccessScopeOutput, error) {
// 				panic("mock out the CreateNetworkInsightsAccessScope method")
// 			},
// 			CreateNetworkInsightsPathFunc: func(ctx context.Context, params *ec2.CreateNetworkInsightsPathInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkInsightsPathOutput, error) {
// 				panic("mock out the CreateNetworkInsightsPath method")
// 			},
// 			CreateNetworkInterfaceFunc: func(ctx context.Context, params *ec2.CreateNetworkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkInterfaceOutput, error) {
// 				panic("mock out the CreateNetworkInterface method")
// 			},
// 			CreateNetworkInterfacePermissionFunc: func(ctx context.Context, params *ec2.CreateNetworkInterfacePermissionInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
// 				panic("mock out the CreateNetworkInterfacePermission method")
// 			},
// 			CreatePlacementGroupFunc: func(ctx context.Context, params *ec2.CreatePlacementGroupInput, optFns ...func(*ec2.Options)) (*ec2.CreatePlacementGroupOutput, error) {
// 				panic("mock out the CreatePlacementGroup method")
// 			},
// 			CreatePublicIpv4PoolFunc: func(ctx context.Context, params *ec2.CreatePublicIpv4PoolInput, optFns ...func(*ec2.Options)) (*ec2.CreatePublicIpv4PoolOutput, error) {
// 				panic("mock out the CreatePublicIpv4Pool method")
// 			},
// 			CreateReplaceRootVolumeTaskFunc: func(ctx context.Context, params *ec2.CreateReplaceRootVolumeTaskInput, optFns ...func(*ec2.Options)) (*ec2.CreateReplaceRootVolumeTaskOutput, error) {
// 				panic("mock out the CreateReplaceRootVolumeTask method")
// 			},
// 			CreateReservedInstancesListingFunc: func(ctx context.Context, params *ec2.CreateReservedInstancesListingInput, optFns ...func(*ec2.Options)) (*ec2.CreateReservedInstancesListingOutput, error) {
// 				panic("mock out the CreateReservedInstancesListing method")
// 			},
// 			CreateRestoreImageTaskFunc: func(ctx context.Context, params *ec2.CreateRestoreImageTaskInput, optFns ...func(*ec2.Options)) (*ec2.CreateRestoreImageTaskOutput, error) {
// 				panic("mock out the CreateRestoreImageTask method")
// 			},
// 			CreateRouteFunc: func(ctx context.Context, params *ec2.CreateRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateRouteOutput, error) {
// 				panic("mock out the CreateRoute method")
// 			},
// 			CreateRouteTableFunc: func(ctx context.Context, params *ec2.CreateRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.CreateRouteTableOutput, error) {
// 				panic("mock out the CreateRouteTable method")
// 			},
// 			CreateSecurityGroupFunc: func(ctx context.Context, params *ec2.CreateSecurityGroupInput, optFns ...func(*ec2.Options)) (*ec2.CreateSecurityGroupOutput, error) {
// 				panic("mock out the CreateSecurityGroup method")
// 			},
// 			CreateSnapshotFunc: func(ctx context.Context, params *ec2.CreateSnapshotInput, optFns ...func(*ec2.Options)) (*ec2.CreateSnapshotOutput, error) {
// 				panic("mock out the CreateSnapshot method")
// 			},
// 			CreateSnapshotsFunc: func(ctx context.Context, params *ec2.CreateSnapshotsInput, optFns ...func(*ec2.Options)) (*ec2.CreateSnapshotsOutput, error) {
// 				panic("mock out the CreateSnapshots method")
// 			},
// 			CreateSpotDatafeedSubscriptionFunc: func(ctx context.Context, params *ec2.CreateSpotDatafeedSubscriptionInput, optFns ...func(*ec2.Options)) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
// 				panic("mock out the CreateSpotDatafeedSubscription method")
// 			},
// 			CreateStoreImageTaskFunc: func(ctx context.Context, params *ec2.CreateStoreImageTaskInput, optFns ...func(*ec2.Options)) (*ec2.CreateStoreImageTaskOutput, error) {
// 				panic("mock out the CreateStoreImageTask method")
// 			},
// 			CreateSubnetFunc: func(ctx context.Context, params *ec2.CreateSubnetInput, optFns ...func(*ec2.Options)) (*ec2.CreateSubnetOutput, error) {
// 				panic("mock out the CreateSubnet method")
// 			},
// 			CreateSubnetCidrReservationFunc: func(ctx context.Context, params *ec2.CreateSubnetCidrReservationInput, optFns ...func(*ec2.Options)) (*ec2.CreateSubnetCidrReservationOutput, error) {
// 				panic("mock out the CreateSubnetCidrReservation method")
// 			},
// 			CreateTagsFunc: func(ctx context.Context, params *ec2.CreateTagsInput, optFns ...func(*ec2.Options)) (*ec2.CreateTagsOutput, error) {
// 				panic("mock out the CreateTags method")
// 			},
// 			CreateTrafficMirrorFilterFunc: func(ctx context.Context, params *ec2.CreateTrafficMirrorFilterInput, optFns ...func(*ec2.Options)) (*ec2.CreateTrafficMirrorFilterOutput, error) {
// 				panic("mock out the CreateTrafficMirrorFilter method")
// 			},
// 			CreateTrafficMirrorFilterRuleFunc: func(ctx context.Context, params *ec2.CreateTrafficMirrorFilterRuleInput, optFns ...func(*ec2.Options)) (*ec2.CreateTrafficMirrorFilterRuleOutput, error) {
// 				panic("mock out the CreateTrafficMirrorFilterRule method")
// 			},
// 			CreateTrafficMirrorSessionFunc: func(ctx context.Context, params *ec2.CreateTrafficMirrorSessionInput, optFns ...func(*ec2.Options)) (*ec2.CreateTrafficMirrorSessionOutput, error) {
// 				panic("mock out the CreateTrafficMirrorSession method")
// 			},
// 			CreateTrafficMirrorTargetFunc: func(ctx context.Context, params *ec2.CreateTrafficMirrorTargetInput, optFns ...func(*ec2.Options)) (*ec2.CreateTrafficMirrorTargetOutput, error) {
// 				panic("mock out the CreateTrafficMirrorTarget method")
// 			},
// 			CreateTransitGatewayFunc: func(ctx context.Context, params *ec2.CreateTransitGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayOutput, error) {
// 				panic("mock out the CreateTransitGateway method")
// 			},
// 			CreateTransitGatewayConnectFunc: func(ctx context.Context, params *ec2.CreateTransitGatewayConnectInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayConnectOutput, error) {
// 				panic("mock out the CreateTransitGatewayConnect method")
// 			},
// 			CreateTransitGatewayConnectPeerFunc: func(ctx context.Context, params *ec2.CreateTransitGatewayConnectPeerInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayConnectPeerOutput, error) {
// 				panic("mock out the CreateTransitGatewayConnectPeer method")
// 			},
// 			CreateTransitGatewayMulticastDomainFunc: func(ctx context.Context, params *ec2.CreateTransitGatewayMulticastDomainInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayMulticastDomainOutput, error) {
// 				panic("mock out the CreateTransitGatewayMulticastDomain method")
// 			},
// 			CreateTransitGatewayPeeringAttachmentFunc: func(ctx context.Context, params *ec2.CreateTransitGatewayPeeringAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error) {
// 				panic("mock out the CreateTransitGatewayPeeringAttachment method")
// 			},
// 			CreateTransitGatewayPolicyTableFunc: func(ctx context.Context, params *ec2.CreateTransitGatewayPolicyTableInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayPolicyTableOutput, error) {
// 				panic("mock out the CreateTransitGatewayPolicyTable method")
// 			},
// 			CreateTransitGatewayPrefixListReferenceFunc: func(ctx context.Context, params *ec2.CreateTransitGatewayPrefixListReferenceInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayPrefixListReferenceOutput, error) {
// 				panic("mock out the CreateTransitGatewayPrefixListReference method")
// 			},
// 			CreateTransitGatewayRouteFunc: func(ctx context.Context, params *ec2.CreateTransitGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayRouteOutput, error) {
// 				panic("mock out the CreateTransitGatewayRoute method")
// 			},
// 			CreateTransitGatewayRouteTableFunc: func(ctx context.Context, params *ec2.CreateTransitGatewayRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
// 				panic("mock out the CreateTransitGatewayRouteTable method")
// 			},
// 			CreateTransitGatewayRouteTableAnnouncementFunc: func(ctx context.Context, params *ec2.CreateTransitGatewayRouteTableAnnouncementInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayRouteTableAnnouncementOutput, error) {
// 				panic("mock out the CreateTransitGatewayRouteTableAnnouncement method")
// 			},
// 			CreateTransitGatewayVpcAttachmentFunc: func(ctx context.Context, params *ec2.CreateTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
// 				panic("mock out the CreateTransitGatewayVpcAttachment method")
// 			},
// 			CreateVolumeFunc: func(ctx context.Context, params *ec2.CreateVolumeInput, optFns ...func(*ec2.Options)) (*ec2.CreateVolumeOutput, error) {
// 				panic("mock out the CreateVolume method")
// 			},
// 			CreateVpcFunc: func(ctx context.Context, params *ec2.CreateVpcInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcOutput, error) {
// 				panic("mock out the CreateVpc method")
// 			},
// 			CreateVpcEndpointFunc: func(ctx context.Context, params *ec2.CreateVpcEndpointInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcEndpointOutput, error) {
// 				panic("mock out the CreateVpcEndpoint method")
// 			},
// 			CreateVpcEndpointConnectionNotificationFunc: func(ctx context.Context, params *ec2.CreateVpcEndpointConnectionNotificationInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
// 				panic("mock out the CreateVpcEndpointConnectionNotification method")
// 			},
// 			CreateVpcEndpointServiceConfigurationFunc: func(ctx context.Context, params *ec2.CreateVpcEndpointServiceConfigurationInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
// 				panic("mock out the CreateVpcEndpointServiceConfiguration method")
// 			},
// 			CreateVpcPeeringConnectionFunc: func(ctx context.Context, params *ec2.CreateVpcPeeringConnectionInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcPeeringConnectionOutput, error) {
// 				panic("mock out the CreateVpcPeeringConnection method")
// 			},
// 			CreateVpnConnectionFunc: func(ctx context.Context, params *ec2.CreateVpnConnectionInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpnConnectionOutput, error) {
// 				panic("mock out the CreateVpnConnection method")
// 			},
// 			CreateVpnConnectionRouteFunc: func(ctx context.Context, params *ec2.CreateVpnConnectionRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpnConnectionRouteOutput, error) {
// 				panic("mock out the CreateVpnConnectionRoute method")
// 			},
// 			CreateVpnGatewayFunc: func(ctx context.Context, params *ec2.CreateVpnGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpnGatewayOutput, error) {
// 				panic("mock out the CreateVpnGateway method")
// 			},
// 			DeleteCarrierGatewayFunc: func(ctx context.Context, params *ec2.DeleteCarrierGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteCarrierGatewayOutput, error) {
// 				panic("mock out the DeleteCarrierGateway method")
// 			},
// 			DeleteClientVpnEndpointFunc: func(ctx context.Context, params *ec2.DeleteClientVpnEndpointInput, optFns ...func(*ec2.Options)) (*ec2.DeleteClientVpnEndpointOutput, error) {
// 				panic("mock out the DeleteClientVpnEndpoint method")
// 			},
// 			DeleteClientVpnRouteFunc: func(ctx context.Context, params *ec2.DeleteClientVpnRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteClientVpnRouteOutput, error) {
// 				panic("mock out the DeleteClientVpnRoute method")
// 			},
// 			DeleteCustomerGatewayFunc: func(ctx context.Context, params *ec2.DeleteCustomerGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteCustomerGatewayOutput, error) {
// 				panic("mock out the DeleteCustomerGateway method")
// 			},
// 			DeleteDhcpOptionsFunc: func(ctx context.Context, params *ec2.DeleteDhcpOptionsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteDhcpOptionsOutput, error) {
// 				panic("mock out the DeleteDhcpOptions method")
// 			},
// 			DeleteEgressOnlyInternetGatewayFunc: func(ctx context.Context, params *ec2.DeleteEgressOnlyInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
// 				panic("mock out the DeleteEgressOnlyInternetGateway method")
// 			},
// 			DeleteFleetsFunc: func(ctx context.Context, params *ec2.DeleteFleetsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteFleetsOutput, error) {
// 				panic("mock out the DeleteFleets method")
// 			},
// 			DeleteFlowLogsFunc: func(ctx context.Context, params *ec2.DeleteFlowLogsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteFlowLogsOutput, error) {
// 				panic("mock out the DeleteFlowLogs method")
// 			},
// 			DeleteFpgaImageFunc: func(ctx context.Context, params *ec2.DeleteFpgaImageInput, optFns ...func(*ec2.Options)) (*ec2.DeleteFpgaImageOutput, error) {
// 				panic("mock out the DeleteFpgaImage method")
// 			},
// 			DeleteInstanceEventWindowFunc: func(ctx context.Context, params *ec2.DeleteInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.DeleteInstanceEventWindowOutput, error) {
// 				panic("mock out the DeleteInstanceEventWindow method")
// 			},
// 			DeleteInternetGatewayFunc: func(ctx context.Context, params *ec2.DeleteInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteInternetGatewayOutput, error) {
// 				panic("mock out the DeleteInternetGateway method")
// 			},
// 			DeleteIpamFunc: func(ctx context.Context, params *ec2.DeleteIpamInput, optFns ...func(*ec2.Options)) (*ec2.DeleteIpamOutput, error) {
// 				panic("mock out the DeleteIpam method")
// 			},
// 			DeleteIpamPoolFunc: func(ctx context.Context, params *ec2.DeleteIpamPoolInput, optFns ...func(*ec2.Options)) (*ec2.DeleteIpamPoolOutput, error) {
// 				panic("mock out the DeleteIpamPool method")
// 			},
// 			DeleteIpamScopeFunc: func(ctx context.Context, params *ec2.DeleteIpamScopeInput, optFns ...func(*ec2.Options)) (*ec2.DeleteIpamScopeOutput, error) {
// 				panic("mock out the DeleteIpamScope method")
// 			},
// 			DeleteKeyPairFunc: func(ctx context.Context, params *ec2.DeleteKeyPairInput, optFns ...func(*ec2.Options)) (*ec2.DeleteKeyPairOutput, error) {
// 				panic("mock out the DeleteKeyPair method")
// 			},
// 			DeleteLaunchTemplateFunc: func(ctx context.Context, params *ec2.DeleteLaunchTemplateInput, optFns ...func(*ec2.Options)) (*ec2.DeleteLaunchTemplateOutput, error) {
// 				panic("mock out the DeleteLaunchTemplate method")
// 			},
// 			DeleteLaunchTemplateVersionsFunc: func(ctx context.Context, params *ec2.DeleteLaunchTemplateVersionsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
// 				panic("mock out the DeleteLaunchTemplateVersions method")
// 			},
// 			DeleteLocalGatewayRouteFunc: func(ctx context.Context, params *ec2.DeleteLocalGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteLocalGatewayRouteOutput, error) {
// 				panic("mock out the DeleteLocalGatewayRoute method")
// 			},
// 			DeleteLocalGatewayRouteTableVpcAssociationFunc: func(ctx context.Context, params *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput, optFns ...func(*ec2.Options)) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error) {
// 				panic("mock out the DeleteLocalGatewayRouteTableVpcAssociation method")
// 			},
// 			DeleteManagedPrefixListFunc: func(ctx context.Context, params *ec2.DeleteManagedPrefixListInput, optFns ...func(*ec2.Options)) (*ec2.DeleteManagedPrefixListOutput, error) {
// 				panic("mock out the DeleteManagedPrefixList method")
// 			},
// 			DeleteNatGatewayFunc: func(ctx context.Context, params *ec2.DeleteNatGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNatGatewayOutput, error) {
// 				panic("mock out the DeleteNatGateway method")
// 			},
// 			DeleteNetworkAclFunc: func(ctx context.Context, params *ec2.DeleteNetworkAclInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkAclOutput, error) {
// 				panic("mock out the DeleteNetworkAcl method")
// 			},
// 			DeleteNetworkAclEntryFunc: func(ctx context.Context, params *ec2.DeleteNetworkAclEntryInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkAclEntryOutput, error) {
// 				panic("mock out the DeleteNetworkAclEntry method")
// 			},
// 			DeleteNetworkInsightsAccessScopeFunc: func(ctx context.Context, params *ec2.DeleteNetworkInsightsAccessScopeInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInsightsAccessScopeOutput, error) {
// 				panic("mock out the DeleteNetworkInsightsAccessScope method")
// 			},
// 			DeleteNetworkInsightsAccessScopeAnalysisFunc: func(ctx context.Context, params *ec2.DeleteNetworkInsightsAccessScopeAnalysisInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInsightsAccessScopeAnalysisOutput, error) {
// 				panic("mock out the DeleteNetworkInsightsAccessScopeAnalysis method")
// 			},
// 			DeleteNetworkInsightsAnalysisFunc: func(ctx context.Context, params *ec2.DeleteNetworkInsightsAnalysisInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInsightsAnalysisOutput, error) {
// 				panic("mock out the DeleteNetworkInsightsAnalysis method")
// 			},
// 			DeleteNetworkInsightsPathFunc: func(ctx context.Context, params *ec2.DeleteNetworkInsightsPathInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInsightsPathOutput, error) {
// 				panic("mock out the DeleteNetworkInsightsPath method")
// 			},
// 			DeleteNetworkInterfaceFunc: func(ctx context.Context, params *ec2.DeleteNetworkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInterfaceOutput, error) {
// 				panic("mock out the DeleteNetworkInterface method")
// 			},
// 			DeleteNetworkInterfacePermissionFunc: func(ctx context.Context, params *ec2.DeleteNetworkInterfacePermissionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
// 				panic("mock out the DeleteNetworkInterfacePermission method")
// 			},
// 			DeletePlacementGroupFunc: func(ctx context.Context, params *ec2.DeletePlacementGroupInput, optFns ...func(*ec2.Options)) (*ec2.DeletePlacementGroupOutput, error) {
// 				panic("mock out the DeletePlacementGroup method")
// 			},
// 			DeletePublicIpv4PoolFunc: func(ctx context.Context, params *ec2.DeletePublicIpv4PoolInput, optFns ...func(*ec2.Options)) (*ec2.DeletePublicIpv4PoolOutput, error) {
// 				panic("mock out the DeletePublicIpv4Pool method")
// 			},
// 			DeleteQueuedReservedInstancesFunc: func(ctx context.Context, params *ec2.DeleteQueuedReservedInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DeleteQueuedReservedInstancesOutput, error) {
// 				panic("mock out the DeleteQueuedReservedInstances method")
// 			},
// 			DeleteRouteFunc: func(ctx context.Context, params *ec2.DeleteRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteRouteOutput, error) {
// 				panic("mock out the DeleteRoute method")
// 			},
// 			DeleteRouteTableFunc: func(ctx context.Context, params *ec2.DeleteRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.DeleteRouteTableOutput, error) {
// 				panic("mock out the DeleteRouteTable method")
// 			},
// 			DeleteSecurityGroupFunc: func(ctx context.Context, params *ec2.DeleteSecurityGroupInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSecurityGroupOutput, error) {
// 				panic("mock out the DeleteSecurityGroup method")
// 			},
// 			DeleteSnapshotFunc: func(ctx context.Context, params *ec2.DeleteSnapshotInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSnapshotOutput, error) {
// 				panic("mock out the DeleteSnapshot method")
// 			},
// 			DeleteSpotDatafeedSubscriptionFunc: func(ctx context.Context, params *ec2.DeleteSpotDatafeedSubscriptionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
// 				panic("mock out the DeleteSpotDatafeedSubscription method")
// 			},
// 			DeleteSubnetFunc: func(ctx context.Context, params *ec2.DeleteSubnetInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSubnetOutput, error) {
// 				panic("mock out the DeleteSubnet method")
// 			},
// 			DeleteSubnetCidrReservationFunc: func(ctx context.Context, params *ec2.DeleteSubnetCidrReservationInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSubnetCidrReservationOutput, error) {
// 				panic("mock out the DeleteSubnetCidrReservation method")
// 			},
// 			DeleteTagsFunc: func(ctx context.Context, params *ec2.DeleteTagsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTagsOutput, error) {
// 				panic("mock out the DeleteTags method")
// 			},
// 			DeleteTrafficMirrorFilterFunc: func(ctx context.Context, params *ec2.DeleteTrafficMirrorFilterInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTrafficMirrorFilterOutput, error) {
// 				panic("mock out the DeleteTrafficMirrorFilter method")
// 			},
// 			DeleteTrafficMirrorFilterRuleFunc: func(ctx context.Context, params *ec2.DeleteTrafficMirrorFilterRuleInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error) {
// 				panic("mock out the DeleteTrafficMirrorFilterRule method")
// 			},
// 			DeleteTrafficMirrorSessionFunc: func(ctx context.Context, params *ec2.DeleteTrafficMirrorSessionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTrafficMirrorSessionOutput, error) {
// 				panic("mock out the DeleteTrafficMirrorSession method")
// 			},
// 			DeleteTrafficMirrorTargetFunc: func(ctx context.Context, params *ec2.DeleteTrafficMirrorTargetInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTrafficMirrorTargetOutput, error) {
// 				panic("mock out the DeleteTrafficMirrorTarget method")
// 			},
// 			DeleteTransitGatewayFunc: func(ctx context.Context, params *ec2.DeleteTransitGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayOutput, error) {
// 				panic("mock out the DeleteTransitGateway method")
// 			},
// 			DeleteTransitGatewayConnectFunc: func(ctx context.Context, params *ec2.DeleteTransitGatewayConnectInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayConnectOutput, error) {
// 				panic("mock out the DeleteTransitGatewayConnect method")
// 			},
// 			DeleteTransitGatewayConnectPeerFunc: func(ctx context.Context, params *ec2.DeleteTransitGatewayConnectPeerInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayConnectPeerOutput, error) {
// 				panic("mock out the DeleteTransitGatewayConnectPeer method")
// 			},
// 			DeleteTransitGatewayMulticastDomainFunc: func(ctx context.Context, params *ec2.DeleteTransitGatewayMulticastDomainInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error) {
// 				panic("mock out the DeleteTransitGatewayMulticastDomain method")
// 			},
// 			DeleteTransitGatewayPeeringAttachmentFunc: func(ctx context.Context, params *ec2.DeleteTransitGatewayPeeringAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error) {
// 				panic("mock out the DeleteTransitGatewayPeeringAttachment method")
// 			},
// 			DeleteTransitGatewayPolicyTableFunc: func(ctx context.Context, params *ec2.DeleteTransitGatewayPolicyTableInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayPolicyTableOutput, error) {
// 				panic("mock out the DeleteTransitGatewayPolicyTable method")
// 			},
// 			DeleteTransitGatewayPrefixListReferenceFunc: func(ctx context.Context, params *ec2.DeleteTransitGatewayPrefixListReferenceInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayPrefixListReferenceOutput, error) {
// 				panic("mock out the DeleteTransitGatewayPrefixListReference method")
// 			},
// 			DeleteTransitGatewayRouteFunc: func(ctx context.Context, params *ec2.DeleteTransitGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayRouteOutput, error) {
// 				panic("mock out the DeleteTransitGatewayRoute method")
// 			},
// 			DeleteTransitGatewayRouteTableFunc: func(ctx context.Context, params *ec2.DeleteTransitGatewayRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
// 				panic("mock out the DeleteTransitGatewayRouteTable method")
// 			},
// 			DeleteTransitGatewayRouteTableAnnouncementFunc: func(ctx context.Context, params *ec2.DeleteTransitGatewayRouteTableAnnouncementInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayRouteTableAnnouncementOutput, error) {
// 				panic("mock out the DeleteTransitGatewayRouteTableAnnouncement method")
// 			},
// 			DeleteTransitGatewayVpcAttachmentFunc: func(ctx context.Context, params *ec2.DeleteTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
// 				panic("mock out the DeleteTransitGatewayVpcAttachment method")
// 			},
// 			DeleteVolumeFunc: func(ctx context.Context, params *ec2.DeleteVolumeInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVolumeOutput, error) {
// 				panic("mock out the DeleteVolume method")
// 			},
// 			DeleteVpcFunc: func(ctx context.Context, params *ec2.DeleteVpcInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcOutput, error) {
// 				panic("mock out the DeleteVpc method")
// 			},
// 			DeleteVpcEndpointConnectionNotificationsFunc: func(ctx context.Context, params *ec2.DeleteVpcEndpointConnectionNotificationsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
// 				panic("mock out the DeleteVpcEndpointConnectionNotifications method")
// 			},
// 			DeleteVpcEndpointServiceConfigurationsFunc: func(ctx context.Context, params *ec2.DeleteVpcEndpointServiceConfigurationsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
// 				panic("mock out the DeleteVpcEndpointServiceConfigurations method")
// 			},
// 			DeleteVpcEndpointsFunc: func(ctx context.Context, params *ec2.DeleteVpcEndpointsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcEndpointsOutput, error) {
// 				panic("mock out the DeleteVpcEndpoints method")
// 			},
// 			DeleteVpcPeeringConnectionFunc: func(ctx context.Context, params *ec2.DeleteVpcPeeringConnectionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
// 				panic("mock out the DeleteVpcPeeringConnection method")
// 			},
// 			DeleteVpnConnectionFunc: func(ctx context.Context, params *ec2.DeleteVpnConnectionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpnConnectionOutput, error) {
// 				panic("mock out the DeleteVpnConnection method")
// 			},
// 			DeleteVpnConnectionRouteFunc: func(ctx context.Context, params *ec2.DeleteVpnConnectionRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpnConnectionRouteOutput, error) {
// 				panic("mock out the DeleteVpnConnectionRoute method")
// 			},
// 			DeleteVpnGatewayFunc: func(ctx context.Context, params *ec2.DeleteVpnGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpnGatewayOutput, error) {
// 				panic("mock out the DeleteVpnGateway method")
// 			},
// 			DeprovisionByoipCidrFunc: func(ctx context.Context, params *ec2.DeprovisionByoipCidrInput, optFns ...func(*ec2.Options)) (*ec2.DeprovisionByoipCidrOutput, error) {
// 				panic("mock out the DeprovisionByoipCidr method")
// 			},
// 			DeprovisionIpamPoolCidrFunc: func(ctx context.Context, params *ec2.DeprovisionIpamPoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.DeprovisionIpamPoolCidrOutput, error) {
// 				panic("mock out the DeprovisionIpamPoolCidr method")
// 			},
// 			DeprovisionPublicIpv4PoolCidrFunc: func(ctx context.Context, params *ec2.DeprovisionPublicIpv4PoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.DeprovisionPublicIpv4PoolCidrOutput, error) {
// 				panic("mock out the DeprovisionPublicIpv4PoolCidr method")
// 			},
// 			DeregisterImageFunc: func(ctx context.Context, params *ec2.DeregisterImageInput, optFns ...func(*ec2.Options)) (*ec2.DeregisterImageOutput, error) {
// 				panic("mock out the DeregisterImage method")
// 			},
// 			DeregisterInstanceEventNotificationAttributesFunc: func(ctx context.Context, params *ec2.DeregisterInstanceEventNotificationAttributesInput, optFns ...func(*ec2.Options)) (*ec2.DeregisterInstanceEventNotificationAttributesOutput, error) {
// 				panic("mock out the DeregisterInstanceEventNotificationAttributes method")
// 			},
// 			DeregisterTransitGatewayMulticastGroupMembersFunc: func(ctx context.Context, params *ec2.DeregisterTransitGatewayMulticastGroupMembersInput, optFns ...func(*ec2.Options)) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error) {
// 				panic("mock out the DeregisterTransitGatewayMulticastGroupMembers method")
// 			},
// 			DeregisterTransitGatewayMulticastGroupSourcesFunc: func(ctx context.Context, params *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput, optFns ...func(*ec2.Options)) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error) {
// 				panic("mock out the DeregisterTransitGatewayMulticastGroupSources method")
// 			},
// 			DescribeAccountAttributesFunc: func(ctx context.Context, params *ec2.DescribeAccountAttributesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAccountAttributesOutput, error) {
// 				panic("mock out the DescribeAccountAttributes method")
// 			},
// 			DescribeAddressesFunc: func(ctx context.Context, params *ec2.DescribeAddressesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAddressesOutput, error) {
// 				panic("mock out the DescribeAddresses method")
// 			},
// 			DescribeAddressesAttributeFunc: func(ctx context.Context, params *ec2.DescribeAddressesAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAddressesAttributeOutput, error) {
// 				panic("mock out the DescribeAddressesAttribute method")
// 			},
// 			DescribeAggregateIdFormatFunc: func(ctx context.Context, params *ec2.DescribeAggregateIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAggregateIdFormatOutput, error) {
// 				panic("mock out the DescribeAggregateIdFormat method")
// 			},
// 			DescribeAvailabilityZonesFunc: func(ctx context.Context, params *ec2.DescribeAvailabilityZonesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAvailabilityZonesOutput, error) {
// 				panic("mock out the DescribeAvailabilityZones method")
// 			},
// 			DescribeBundleTasksFunc: func(ctx context.Context, params *ec2.DescribeBundleTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeBundleTasksOutput, error) {
// 				panic("mock out the DescribeBundleTasks method")
// 			},
// 			DescribeByoipCidrsFunc: func(ctx context.Context, params *ec2.DescribeByoipCidrsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeByoipCidrsOutput, error) {
// 				panic("mock out the DescribeByoipCidrs method")
// 			},
// 			DescribeCapacityReservationFleetsFunc: func(ctx context.Context, params *ec2.DescribeCapacityReservationFleetsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCapacityReservationFleetsOutput, error) {
// 				panic("mock out the DescribeCapacityReservationFleets method")
// 			},
// 			DescribeCapacityReservationsFunc: func(ctx context.Context, params *ec2.DescribeCapacityReservationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCapacityReservationsOutput, error) {
// 				panic("mock out the DescribeCapacityReservations method")
// 			},
// 			DescribeCarrierGatewaysFunc: func(ctx context.Context, params *ec2.DescribeCarrierGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCarrierGatewaysOutput, error) {
// 				panic("mock out the DescribeCarrierGateways method")
// 			},
// 			DescribeClassicLinkInstancesFunc: func(ctx context.Context, params *ec2.DescribeClassicLinkInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClassicLinkInstancesOutput, error) {
// 				panic("mock out the DescribeClassicLinkInstances method")
// 			},
// 			DescribeClientVpnAuthorizationRulesFunc: func(ctx context.Context, params *ec2.DescribeClientVpnAuthorizationRulesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
// 				panic("mock out the DescribeClientVpnAuthorizationRules method")
// 			},
// 			DescribeClientVpnConnectionsFunc: func(ctx context.Context, params *ec2.DescribeClientVpnConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnConnectionsOutput, error) {
// 				panic("mock out the DescribeClientVpnConnections method")
// 			},
// 			DescribeClientVpnEndpointsFunc: func(ctx context.Context, params *ec2.DescribeClientVpnEndpointsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnEndpointsOutput, error) {
// 				panic("mock out the DescribeClientVpnEndpoints method")
// 			},
// 			DescribeClientVpnRoutesFunc: func(ctx context.Context, params *ec2.DescribeClientVpnRoutesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnRoutesOutput, error) {
// 				panic("mock out the DescribeClientVpnRoutes method")
// 			},
// 			DescribeClientVpnTargetNetworksFunc: func(ctx context.Context, params *ec2.DescribeClientVpnTargetNetworksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
// 				panic("mock out the DescribeClientVpnTargetNetworks method")
// 			},
// 			DescribeCoipPoolsFunc: func(ctx context.Context, params *ec2.DescribeCoipPoolsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCoipPoolsOutput, error) {
// 				panic("mock out the DescribeCoipPools method")
// 			},
// 			DescribeConversionTasksFunc: func(ctx context.Context, params *ec2.DescribeConversionTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeConversionTasksOutput, error) {
// 				panic("mock out the DescribeConversionTasks method")
// 			},
// 			DescribeCustomerGatewaysFunc: func(ctx context.Context, params *ec2.DescribeCustomerGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCustomerGatewaysOutput, error) {
// 				panic("mock out the DescribeCustomerGateways method")
// 			},
// 			DescribeDhcpOptionsFunc: func(ctx context.Context, params *ec2.DescribeDhcpOptionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeDhcpOptionsOutput, error) {
// 				panic("mock out the DescribeDhcpOptions method")
// 			},
// 			DescribeEgressOnlyInternetGatewaysFunc: func(ctx context.Context, params *ec2.DescribeEgressOnlyInternetGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
// 				panic("mock out the DescribeEgressOnlyInternetGateways method")
// 			},
// 			DescribeElasticGpusFunc: func(ctx context.Context, params *ec2.DescribeElasticGpusInput, optFns ...func(*ec2.Options)) (*ec2.DescribeElasticGpusOutput, error) {
// 				panic("mock out the DescribeElasticGpus method")
// 			},
// 			DescribeExportImageTasksFunc: func(ctx context.Context, params *ec2.DescribeExportImageTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeExportImageTasksOutput, error) {
// 				panic("mock out the DescribeExportImageTasks method")
// 			},
// 			DescribeExportTasksFunc: func(ctx context.Context, params *ec2.DescribeExportTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeExportTasksOutput, error) {
// 				panic("mock out the DescribeExportTasks method")
// 			},
// 			DescribeFastLaunchImagesFunc: func(ctx context.Context, params *ec2.DescribeFastLaunchImagesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFastLaunchImagesOutput, error) {
// 				panic("mock out the DescribeFastLaunchImages method")
// 			},
// 			DescribeFastSnapshotRestoresFunc: func(ctx context.Context, params *ec2.DescribeFastSnapshotRestoresInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFastSnapshotRestoresOutput, error) {
// 				panic("mock out the DescribeFastSnapshotRestores method")
// 			},
// 			DescribeFleetHistoryFunc: func(ctx context.Context, params *ec2.DescribeFleetHistoryInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFleetHistoryOutput, error) {
// 				panic("mock out the DescribeFleetHistory method")
// 			},
// 			DescribeFleetInstancesFunc: func(ctx context.Context, params *ec2.DescribeFleetInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFleetInstancesOutput, error) {
// 				panic("mock out the DescribeFleetInstances method")
// 			},
// 			DescribeFleetsFunc: func(ctx context.Context, params *ec2.DescribeFleetsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFleetsOutput, error) {
// 				panic("mock out the DescribeFleets method")
// 			},
// 			DescribeFlowLogsFunc: func(ctx context.Context, params *ec2.DescribeFlowLogsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFlowLogsOutput, error) {
// 				panic("mock out the DescribeFlowLogs method")
// 			},
// 			DescribeFpgaImageAttributeFunc: func(ctx context.Context, params *ec2.DescribeFpgaImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFpgaImageAttributeOutput, error) {
// 				panic("mock out the DescribeFpgaImageAttribute method")
// 			},
// 			DescribeFpgaImagesFunc: func(ctx context.Context, params *ec2.DescribeFpgaImagesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFpgaImagesOutput, error) {
// 				panic("mock out the DescribeFpgaImages method")
// 			},
// 			DescribeHostReservationOfferingsFunc: func(ctx context.Context, params *ec2.DescribeHostReservationOfferingsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeHostReservationOfferingsOutput, error) {
// 				panic("mock out the DescribeHostReservationOfferings method")
// 			},
// 			DescribeHostReservationsFunc: func(ctx context.Context, params *ec2.DescribeHostReservationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeHostReservationsOutput, error) {
// 				panic("mock out the DescribeHostReservations method")
// 			},
// 			DescribeHostsFunc: func(ctx context.Context, params *ec2.DescribeHostsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeHostsOutput, error) {
// 				panic("mock out the DescribeHosts method")
// 			},
// 			DescribeIamInstanceProfileAssociationsFunc: func(ctx context.Context, params *ec2.DescribeIamInstanceProfileAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
// 				panic("mock out the DescribeIamInstanceProfileAssociations method")
// 			},
// 			DescribeIdFormatFunc: func(ctx context.Context, params *ec2.DescribeIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIdFormatOutput, error) {
// 				panic("mock out the DescribeIdFormat method")
// 			},
// 			DescribeIdentityIdFormatFunc: func(ctx context.Context, params *ec2.DescribeIdentityIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIdentityIdFormatOutput, error) {
// 				panic("mock out the DescribeIdentityIdFormat method")
// 			},
// 			DescribeImageAttributeFunc: func(ctx context.Context, params *ec2.DescribeImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeImageAttributeOutput, error) {
// 				panic("mock out the DescribeImageAttribute method")
// 			},
// 			DescribeImagesFunc: func(ctx context.Context, params *ec2.DescribeImagesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeImagesOutput, error) {
// 				panic("mock out the DescribeImages method")
// 			},
// 			DescribeImportImageTasksFunc: func(ctx context.Context, params *ec2.DescribeImportImageTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeImportImageTasksOutput, error) {
// 				panic("mock out the DescribeImportImageTasks method")
// 			},
// 			DescribeImportSnapshotTasksFunc: func(ctx context.Context, params *ec2.DescribeImportSnapshotTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeImportSnapshotTasksOutput, error) {
// 				panic("mock out the DescribeImportSnapshotTasks method")
// 			},
// 			DescribeInstanceAttributeFunc: func(ctx context.Context, params *ec2.DescribeInstanceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceAttributeOutput, error) {
// 				panic("mock out the DescribeInstanceAttribute method")
// 			},
// 			DescribeInstanceCreditSpecificationsFunc: func(ctx context.Context, params *ec2.DescribeInstanceCreditSpecificationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
// 				panic("mock out the DescribeInstanceCreditSpecifications method")
// 			},
// 			DescribeInstanceEventNotificationAttributesFunc: func(ctx context.Context, params *ec2.DescribeInstanceEventNotificationAttributesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceEventNotificationAttributesOutput, error) {
// 				panic("mock out the DescribeInstanceEventNotificationAttributes method")
// 			},
// 			DescribeInstanceEventWindowsFunc: func(ctx context.Context, params *ec2.DescribeInstanceEventWindowsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceEventWindowsOutput, error) {
// 				panic("mock out the DescribeInstanceEventWindows method")
// 			},
// 			DescribeInstanceStatusFunc: func(ctx context.Context, params *ec2.DescribeInstanceStatusInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceStatusOutput, error) {
// 				panic("mock out the DescribeInstanceStatus method")
// 			},
// 			DescribeInstanceTypeOfferingsFunc: func(ctx context.Context, params *ec2.DescribeInstanceTypeOfferingsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {
// 				panic("mock out the DescribeInstanceTypeOfferings method")
// 			},
// 			DescribeInstanceTypesFunc: func(ctx context.Context, params *ec2.DescribeInstanceTypesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceTypesOutput, error) {
// 				panic("mock out the DescribeInstanceTypes method")
// 			},
// 			DescribeInstancesFunc: func(ctx context.Context, params *ec2.DescribeInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error) {
// 				panic("mock out the DescribeInstances method")
// 			},
// 			DescribeInternetGatewaysFunc: func(ctx context.Context, params *ec2.DescribeInternetGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInternetGatewaysOutput, error) {
// 				panic("mock out the DescribeInternetGateways method")
// 			},
// 			DescribeIpamPoolsFunc: func(ctx context.Context, params *ec2.DescribeIpamPoolsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIpamPoolsOutput, error) {
// 				panic("mock out the DescribeIpamPools method")
// 			},
// 			DescribeIpamScopesFunc: func(ctx context.Context, params *ec2.DescribeIpamScopesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIpamScopesOutput, error) {
// 				panic("mock out the DescribeIpamScopes method")
// 			},
// 			DescribeIpamsFunc: func(ctx context.Context, params *ec2.DescribeIpamsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIpamsOutput, error) {
// 				panic("mock out the DescribeIpams method")
// 			},
// 			DescribeIpv6PoolsFunc: func(ctx context.Context, params *ec2.DescribeIpv6PoolsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIpv6PoolsOutput, error) {
// 				panic("mock out the DescribeIpv6Pools method")
// 			},
// 			DescribeKeyPairsFunc: func(ctx context.Context, params *ec2.DescribeKeyPairsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeKeyPairsOutput, error) {
// 				panic("mock out the DescribeKeyPairs method")
// 			},
// 			DescribeLaunchTemplateVersionsFunc: func(ctx context.Context, params *ec2.DescribeLaunchTemplateVersionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
// 				panic("mock out the DescribeLaunchTemplateVersions method")
// 			},
// 			DescribeLaunchTemplatesFunc: func(ctx context.Context, params *ec2.DescribeLaunchTemplatesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLaunchTemplatesOutput, error) {
// 				panic("mock out the DescribeLaunchTemplates method")
// 			},
// 			DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFunc: func(ctx context.Context, params *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {
// 				panic("mock out the DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations method")
// 			},
// 			DescribeLocalGatewayRouteTableVpcAssociationsFunc: func(ctx context.Context, params *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {
// 				panic("mock out the DescribeLocalGatewayRouteTableVpcAssociations method")
// 			},
// 			DescribeLocalGatewayRouteTablesFunc: func(ctx context.Context, params *ec2.DescribeLocalGatewayRouteTablesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {
// 				panic("mock out the DescribeLocalGatewayRouteTables method")
// 			},
// 			DescribeLocalGatewayVirtualInterfaceGroupsFunc: func(ctx context.Context, params *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {
// 				panic("mock out the DescribeLocalGatewayVirtualInterfaceGroups method")
// 			},
// 			DescribeLocalGatewayVirtualInterfacesFunc: func(ctx context.Context, params *ec2.DescribeLocalGatewayVirtualInterfacesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {
// 				panic("mock out the DescribeLocalGatewayVirtualInterfaces method")
// 			},
// 			DescribeLocalGatewaysFunc: func(ctx context.Context, params *ec2.DescribeLocalGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewaysOutput, error) {
// 				panic("mock out the DescribeLocalGateways method")
// 			},
// 			DescribeManagedPrefixListsFunc: func(ctx context.Context, params *ec2.DescribeManagedPrefixListsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeManagedPrefixListsOutput, error) {
// 				panic("mock out the DescribeManagedPrefixLists method")
// 			},
// 			DescribeMovingAddressesFunc: func(ctx context.Context, params *ec2.DescribeMovingAddressesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeMovingAddressesOutput, error) {
// 				panic("mock out the DescribeMovingAddresses method")
// 			},
// 			DescribeNatGatewaysFunc: func(ctx context.Context, params *ec2.DescribeNatGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNatGatewaysOutput, error) {
// 				panic("mock out the DescribeNatGateways method")
// 			},
// 			DescribeNetworkAclsFunc: func(ctx context.Context, params *ec2.DescribeNetworkAclsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkAclsOutput, error) {
// 				panic("mock out the DescribeNetworkAcls method")
// 			},
// 			DescribeNetworkInsightsAccessScopeAnalysesFunc: func(ctx context.Context, params *ec2.DescribeNetworkInsightsAccessScopeAnalysesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsAccessScopeAnalysesOutput, error) {
// 				panic("mock out the DescribeNetworkInsightsAccessScopeAnalyses method")
// 			},
// 			DescribeNetworkInsightsAccessScopesFunc: func(ctx context.Context, params *ec2.DescribeNetworkInsightsAccessScopesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsAccessScopesOutput, error) {
// 				panic("mock out the DescribeNetworkInsightsAccessScopes method")
// 			},
// 			DescribeNetworkInsightsAnalysesFunc: func(ctx context.Context, params *ec2.DescribeNetworkInsightsAnalysesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsAnalysesOutput, error) {
// 				panic("mock out the DescribeNetworkInsightsAnalyses method")
// 			},
// 			DescribeNetworkInsightsPathsFunc: func(ctx context.Context, params *ec2.DescribeNetworkInsightsPathsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsPathsOutput, error) {
// 				panic("mock out the DescribeNetworkInsightsPaths method")
// 			},
// 			DescribeNetworkInterfaceAttributeFunc: func(ctx context.Context, params *ec2.DescribeNetworkInterfaceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
// 				panic("mock out the DescribeNetworkInterfaceAttribute method")
// 			},
// 			DescribeNetworkInterfacePermissionsFunc: func(ctx context.Context, params *ec2.DescribeNetworkInterfacePermissionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
// 				panic("mock out the DescribeNetworkInterfacePermissions method")
// 			},
// 			DescribeNetworkInterfacesFunc: func(ctx context.Context, params *ec2.DescribeNetworkInterfacesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfacesOutput, error) {
// 				panic("mock out the DescribeNetworkInterfaces method")
// 			},
// 			DescribePlacementGroupsFunc: func(ctx context.Context, params *ec2.DescribePlacementGroupsInput, optFns ...func(*ec2.Options)) (*ec2.DescribePlacementGroupsOutput, error) {
// 				panic("mock out the DescribePlacementGroups method")
// 			},
// 			DescribePrefixListsFunc: func(ctx context.Context, params *ec2.DescribePrefixListsInput, optFns ...func(*ec2.Options)) (*ec2.DescribePrefixListsOutput, error) {
// 				panic("mock out the DescribePrefixLists method")
// 			},
// 			DescribePrincipalIdFormatFunc: func(ctx context.Context, params *ec2.DescribePrincipalIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.DescribePrincipalIdFormatOutput, error) {
// 				panic("mock out the DescribePrincipalIdFormat method")
// 			},
// 			DescribePublicIpv4PoolsFunc: func(ctx context.Context, params *ec2.DescribePublicIpv4PoolsInput, optFns ...func(*ec2.Options)) (*ec2.DescribePublicIpv4PoolsOutput, error) {
// 				panic("mock out the DescribePublicIpv4Pools method")
// 			},
// 			DescribeRegionsFunc: func(ctx context.Context, params *ec2.DescribeRegionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeRegionsOutput, error) {
// 				panic("mock out the DescribeRegions method")
// 			},
// 			DescribeReplaceRootVolumeTasksFunc: func(ctx context.Context, params *ec2.DescribeReplaceRootVolumeTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReplaceRootVolumeTasksOutput, error) {
// 				panic("mock out the DescribeReplaceRootVolumeTasks method")
// 			},
// 			DescribeReservedInstancesFunc: func(ctx context.Context, params *ec2.DescribeReservedInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesOutput, error) {
// 				panic("mock out the DescribeReservedInstances method")
// 			},
// 			DescribeReservedInstancesListingsFunc: func(ctx context.Context, params *ec2.DescribeReservedInstancesListingsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesListingsOutput, error) {
// 				panic("mock out the DescribeReservedInstancesListings method")
// 			},
// 			DescribeReservedInstancesModificationsFunc: func(ctx context.Context, params *ec2.DescribeReservedInstancesModificationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
// 				panic("mock out the DescribeReservedInstancesModifications method")
// 			},
// 			DescribeReservedInstancesOfferingsFunc: func(ctx context.Context, params *ec2.DescribeReservedInstancesOfferingsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
// 				panic("mock out the DescribeReservedInstancesOfferings method")
// 			},
// 			DescribeRouteTablesFunc: func(ctx context.Context, params *ec2.DescribeRouteTablesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeRouteTablesOutput, error) {
// 				panic("mock out the DescribeRouteTables method")
// 			},
// 			DescribeScheduledInstanceAvailabilityFunc: func(ctx context.Context, params *ec2.DescribeScheduledInstanceAvailabilityInput, optFns ...func(*ec2.Options)) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
// 				panic("mock out the DescribeScheduledInstanceAvailability method")
// 			},
// 			DescribeScheduledInstancesFunc: func(ctx context.Context, params *ec2.DescribeScheduledInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeScheduledInstancesOutput, error) {
// 				panic("mock out the DescribeScheduledInstances method")
// 			},
// 			DescribeSecurityGroupReferencesFunc: func(ctx context.Context, params *ec2.DescribeSecurityGroupReferencesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
// 				panic("mock out the DescribeSecurityGroupReferences method")
// 			},
// 			DescribeSecurityGroupRulesFunc: func(ctx context.Context, params *ec2.DescribeSecurityGroupRulesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupRulesOutput, error) {
// 				panic("mock out the DescribeSecurityGroupRules method")
// 			},
// 			DescribeSecurityGroupsFunc: func(ctx context.Context, params *ec2.DescribeSecurityGroupsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupsOutput, error) {
// 				panic("mock out the DescribeSecurityGroups method")
// 			},
// 			DescribeSnapshotAttributeFunc: func(ctx context.Context, params *ec2.DescribeSnapshotAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSnapshotAttributeOutput, error) {
// 				panic("mock out the DescribeSnapshotAttribute method")
// 			},
// 			DescribeSnapshotTierStatusFunc: func(ctx context.Context, params *ec2.DescribeSnapshotTierStatusInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSnapshotTierStatusOutput, error) {
// 				panic("mock out the DescribeSnapshotTierStatus method")
// 			},
// 			DescribeSnapshotsFunc: func(ctx context.Context, params *ec2.DescribeSnapshotsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSnapshotsOutput, error) {
// 				panic("mock out the DescribeSnapshots method")
// 			},
// 			DescribeSpotDatafeedSubscriptionFunc: func(ctx context.Context, params *ec2.DescribeSpotDatafeedSubscriptionInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
// 				panic("mock out the DescribeSpotDatafeedSubscription method")
// 			},
// 			DescribeSpotFleetInstancesFunc: func(ctx context.Context, params *ec2.DescribeSpotFleetInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotFleetInstancesOutput, error) {
// 				panic("mock out the DescribeSpotFleetInstances method")
// 			},
// 			DescribeSpotFleetRequestHistoryFunc: func(ctx context.Context, params *ec2.DescribeSpotFleetRequestHistoryInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
// 				panic("mock out the DescribeSpotFleetRequestHistory method")
// 			},
// 			DescribeSpotFleetRequestsFunc: func(ctx context.Context, params *ec2.DescribeSpotFleetRequestsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotFleetRequestsOutput, error) {
// 				panic("mock out the DescribeSpotFleetRequests method")
// 			},
// 			DescribeSpotInstanceRequestsFunc: func(ctx context.Context, params *ec2.DescribeSpotInstanceRequestsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
// 				panic("mock out the DescribeSpotInstanceRequests method")
// 			},
// 			DescribeSpotPriceHistoryFunc: func(ctx context.Context, params *ec2.DescribeSpotPriceHistoryInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotPriceHistoryOutput, error) {
// 				panic("mock out the DescribeSpotPriceHistory method")
// 			},
// 			DescribeStaleSecurityGroupsFunc: func(ctx context.Context, params *ec2.DescribeStaleSecurityGroupsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
// 				panic("mock out the DescribeStaleSecurityGroups method")
// 			},
// 			DescribeStoreImageTasksFunc: func(ctx context.Context, params *ec2.DescribeStoreImageTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeStoreImageTasksOutput, error) {
// 				panic("mock out the DescribeStoreImageTasks method")
// 			},
// 			DescribeSubnetsFunc: func(ctx context.Context, params *ec2.DescribeSubnetsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSubnetsOutput, error) {
// 				panic("mock out the DescribeSubnets method")
// 			},
// 			DescribeTagsFunc: func(ctx context.Context, params *ec2.DescribeTagsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTagsOutput, error) {
// 				panic("mock out the DescribeTags method")
// 			},
// 			DescribeTrafficMirrorFiltersFunc: func(ctx context.Context, params *ec2.DescribeTrafficMirrorFiltersInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {
// 				panic("mock out the DescribeTrafficMirrorFilters method")
// 			},
// 			DescribeTrafficMirrorSessionsFunc: func(ctx context.Context, params *ec2.DescribeTrafficMirrorSessionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {
// 				panic("mock out the DescribeTrafficMirrorSessions method")
// 			},
// 			DescribeTrafficMirrorTargetsFunc: func(ctx context.Context, params *ec2.DescribeTrafficMirrorTargetsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {
// 				panic("mock out the DescribeTrafficMirrorTargets method")
// 			},
// 			DescribeTransitGatewayAttachmentsFunc: func(ctx context.Context, params *ec2.DescribeTransitGatewayAttachmentsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
// 				panic("mock out the DescribeTransitGatewayAttachments method")
// 			},
// 			DescribeTransitGatewayConnectPeersFunc: func(ctx context.Context, params *ec2.DescribeTransitGatewayConnectPeersInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayConnectPeersOutput, error) {
// 				panic("mock out the DescribeTransitGatewayConnectPeers method")
// 			},
// 			DescribeTransitGatewayConnectsFunc: func(ctx context.Context, params *ec2.DescribeTransitGatewayConnectsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayConnectsOutput, error) {
// 				panic("mock out the DescribeTransitGatewayConnects method")
// 			},
// 			DescribeTransitGatewayMulticastDomainsFunc: func(ctx context.Context, params *ec2.DescribeTransitGatewayMulticastDomainsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {
// 				panic("mock out the DescribeTransitGatewayMulticastDomains method")
// 			},
// 			DescribeTransitGatewayPeeringAttachmentsFunc: func(ctx context.Context, params *ec2.DescribeTransitGatewayPeeringAttachmentsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {
// 				panic("mock out the DescribeTransitGatewayPeeringAttachments method")
// 			},
// 			DescribeTransitGatewayPolicyTablesFunc: func(ctx context.Context, params *ec2.DescribeTransitGatewayPolicyTablesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayPolicyTablesOutput, error) {
// 				panic("mock out the DescribeTransitGatewayPolicyTables method")
// 			},
// 			DescribeTransitGatewayRouteTableAnnouncementsFunc: func(ctx context.Context, params *ec2.DescribeTransitGatewayRouteTableAnnouncementsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayRouteTableAnnouncementsOutput, error) {
// 				panic("mock out the DescribeTransitGatewayRouteTableAnnouncements method")
// 			},
// 			DescribeTransitGatewayRouteTablesFunc: func(ctx context.Context, params *ec2.DescribeTransitGatewayRouteTablesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
// 				panic("mock out the DescribeTransitGatewayRouteTables method")
// 			},
// 			DescribeTransitGatewayVpcAttachmentsFunc: func(ctx context.Context, params *ec2.DescribeTransitGatewayVpcAttachmentsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
// 				panic("mock out the DescribeTransitGatewayVpcAttachments method")
// 			},
// 			DescribeTransitGatewaysFunc: func(ctx context.Context, params *ec2.DescribeTransitGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewaysOutput, error) {
// 				panic("mock out the DescribeTransitGateways method")
// 			},
// 			DescribeTrunkInterfaceAssociationsFunc: func(ctx context.Context, params *ec2.DescribeTrunkInterfaceAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTrunkInterfaceAssociationsOutput, error) {
// 				panic("mock out the DescribeTrunkInterfaceAssociations method")
// 			},
// 			DescribeVolumeAttributeFunc: func(ctx context.Context, params *ec2.DescribeVolumeAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVolumeAttributeOutput, error) {
// 				panic("mock out the DescribeVolumeAttribute method")
// 			},
// 			DescribeVolumeStatusFunc: func(ctx context.Context, params *ec2.DescribeVolumeStatusInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVolumeStatusOutput, error) {
// 				panic("mock out the DescribeVolumeStatus method")
// 			},
// 			DescribeVolumesFunc: func(ctx context.Context, params *ec2.DescribeVolumesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVolumesOutput, error) {
// 				panic("mock out the DescribeVolumes method")
// 			},
// 			DescribeVolumesModificationsFunc: func(ctx context.Context, params *ec2.DescribeVolumesModificationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVolumesModificationsOutput, error) {
// 				panic("mock out the DescribeVolumesModifications method")
// 			},
// 			DescribeVpcAttributeFunc: func(ctx context.Context, params *ec2.DescribeVpcAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcAttributeOutput, error) {
// 				panic("mock out the DescribeVpcAttribute method")
// 			},
// 			DescribeVpcClassicLinkFunc: func(ctx context.Context, params *ec2.DescribeVpcClassicLinkInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcClassicLinkOutput, error) {
// 				panic("mock out the DescribeVpcClassicLink method")
// 			},
// 			DescribeVpcClassicLinkDnsSupportFunc: func(ctx context.Context, params *ec2.DescribeVpcClassicLinkDnsSupportInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
// 				panic("mock out the DescribeVpcClassicLinkDnsSupport method")
// 			},
// 			DescribeVpcEndpointConnectionNotificationsFunc: func(ctx context.Context, params *ec2.DescribeVpcEndpointConnectionNotificationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
// 				panic("mock out the DescribeVpcEndpointConnectionNotifications method")
// 			},
// 			DescribeVpcEndpointConnectionsFunc: func(ctx context.Context, params *ec2.DescribeVpcEndpointConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
// 				panic("mock out the DescribeVpcEndpointConnections method")
// 			},
// 			DescribeVpcEndpointServiceConfigurationsFunc: func(ctx context.Context, params *ec2.DescribeVpcEndpointServiceConfigurationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
// 				panic("mock out the DescribeVpcEndpointServiceConfigurations method")
// 			},
// 			DescribeVpcEndpointServicePermissionsFunc: func(ctx context.Context, params *ec2.DescribeVpcEndpointServicePermissionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
// 				panic("mock out the DescribeVpcEndpointServicePermissions method")
// 			},
// 			DescribeVpcEndpointServicesFunc: func(ctx context.Context, params *ec2.DescribeVpcEndpointServicesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServicesOutput, error) {
// 				panic("mock out the DescribeVpcEndpointServices method")
// 			},
// 			DescribeVpcEndpointsFunc: func(ctx context.Context, params *ec2.DescribeVpcEndpointsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointsOutput, error) {
// 				panic("mock out the DescribeVpcEndpoints method")
// 			},
// 			DescribeVpcPeeringConnectionsFunc: func(ctx context.Context, params *ec2.DescribeVpcPeeringConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
// 				panic("mock out the DescribeVpcPeeringConnections method")
// 			},
// 			DescribeVpcsFunc: func(ctx context.Context, params *ec2.DescribeVpcsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcsOutput, error) {
// 				panic("mock out the DescribeVpcs method")
// 			},
// 			DescribeVpnConnectionsFunc: func(ctx context.Context, params *ec2.DescribeVpnConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpnConnectionsOutput, error) {
// 				panic("mock out the DescribeVpnConnections method")
// 			},
// 			DescribeVpnGatewaysFunc: func(ctx context.Context, params *ec2.DescribeVpnGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpnGatewaysOutput, error) {
// 				panic("mock out the DescribeVpnGateways method")
// 			},
// 			DetachClassicLinkVpcFunc: func(ctx context.Context, params *ec2.DetachClassicLinkVpcInput, optFns ...func(*ec2.Options)) (*ec2.DetachClassicLinkVpcOutput, error) {
// 				panic("mock out the DetachClassicLinkVpc method")
// 			},
// 			DetachInternetGatewayFunc: func(ctx context.Context, params *ec2.DetachInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DetachInternetGatewayOutput, error) {
// 				panic("mock out the DetachInternetGateway method")
// 			},
// 			DetachNetworkInterfaceFunc: func(ctx context.Context, params *ec2.DetachNetworkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.DetachNetworkInterfaceOutput, error) {
// 				panic("mock out the DetachNetworkInterface method")
// 			},
// 			DetachVolumeFunc: func(ctx context.Context, params *ec2.DetachVolumeInput, optFns ...func(*ec2.Options)) (*ec2.DetachVolumeOutput, error) {
// 				panic("mock out the DetachVolume method")
// 			},
// 			DetachVpnGatewayFunc: func(ctx context.Context, params *ec2.DetachVpnGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DetachVpnGatewayOutput, error) {
// 				panic("mock out the DetachVpnGateway method")
// 			},
// 			DisableEbsEncryptionByDefaultFunc: func(ctx context.Context, params *ec2.DisableEbsEncryptionByDefaultInput, optFns ...func(*ec2.Options)) (*ec2.DisableEbsEncryptionByDefaultOutput, error) {
// 				panic("mock out the DisableEbsEncryptionByDefault method")
// 			},
// 			DisableFastLaunchFunc: func(ctx context.Context, params *ec2.DisableFastLaunchInput, optFns ...func(*ec2.Options)) (*ec2.DisableFastLaunchOutput, error) {
// 				panic("mock out the DisableFastLaunch method")
// 			},
// 			DisableFastSnapshotRestoresFunc: func(ctx context.Context, params *ec2.DisableFastSnapshotRestoresInput, optFns ...func(*ec2.Options)) (*ec2.DisableFastSnapshotRestoresOutput, error) {
// 				panic("mock out the DisableFastSnapshotRestores method")
// 			},
// 			DisableImageDeprecationFunc: func(ctx context.Context, params *ec2.DisableImageDeprecationInput, optFns ...func(*ec2.Options)) (*ec2.DisableImageDeprecationOutput, error) {
// 				panic("mock out the DisableImageDeprecation method")
// 			},
// 			DisableIpamOrganizationAdminAccountFunc: func(ctx context.Context, params *ec2.DisableIpamOrganizationAdminAccountInput, optFns ...func(*ec2.Options)) (*ec2.DisableIpamOrganizationAdminAccountOutput, error) {
// 				panic("mock out the DisableIpamOrganizationAdminAccount method")
// 			},
// 			DisableSerialConsoleAccessFunc: func(ctx context.Context, params *ec2.DisableSerialConsoleAccessInput, optFns ...func(*ec2.Options)) (*ec2.DisableSerialConsoleAccessOutput, error) {
// 				panic("mock out the DisableSerialConsoleAccess method")
// 			},
// 			DisableTransitGatewayRouteTablePropagationFunc: func(ctx context.Context, params *ec2.DisableTransitGatewayRouteTablePropagationInput, optFns ...func(*ec2.Options)) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
// 				panic("mock out the DisableTransitGatewayRouteTablePropagation method")
// 			},
// 			DisableVgwRoutePropagationFunc: func(ctx context.Context, params *ec2.DisableVgwRoutePropagationInput, optFns ...func(*ec2.Options)) (*ec2.DisableVgwRoutePropagationOutput, error) {
// 				panic("mock out the DisableVgwRoutePropagation method")
// 			},
// 			DisableVpcClassicLinkFunc: func(ctx context.Context, params *ec2.DisableVpcClassicLinkInput, optFns ...func(*ec2.Options)) (*ec2.DisableVpcClassicLinkOutput, error) {
// 				panic("mock out the DisableVpcClassicLink method")
// 			},
// 			DisableVpcClassicLinkDnsSupportFunc: func(ctx context.Context, params *ec2.DisableVpcClassicLinkDnsSupportInput, optFns ...func(*ec2.Options)) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
// 				panic("mock out the DisableVpcClassicLinkDnsSupport method")
// 			},
// 			DisassociateAddressFunc: func(ctx context.Context, params *ec2.DisassociateAddressInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateAddressOutput, error) {
// 				panic("mock out the DisassociateAddress method")
// 			},
// 			DisassociateClientVpnTargetNetworkFunc: func(ctx context.Context, params *ec2.DisassociateClientVpnTargetNetworkInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
// 				panic("mock out the DisassociateClientVpnTargetNetwork method")
// 			},
// 			DisassociateEnclaveCertificateIamRoleFunc: func(ctx context.Context, params *ec2.DisassociateEnclaveCertificateIamRoleInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateEnclaveCertificateIamRoleOutput, error) {
// 				panic("mock out the DisassociateEnclaveCertificateIamRole method")
// 			},
// 			DisassociateIamInstanceProfileFunc: func(ctx context.Context, params *ec2.DisassociateIamInstanceProfileInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateIamInstanceProfileOutput, error) {
// 				panic("mock out the DisassociateIamInstanceProfile method")
// 			},
// 			DisassociateInstanceEventWindowFunc: func(ctx context.Context, params *ec2.DisassociateInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateInstanceEventWindowOutput, error) {
// 				panic("mock out the DisassociateInstanceEventWindow method")
// 			},
// 			DisassociateRouteTableFunc: func(ctx context.Context, params *ec2.DisassociateRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateRouteTableOutput, error) {
// 				panic("mock out the DisassociateRouteTable method")
// 			},
// 			DisassociateSubnetCidrBlockFunc: func(ctx context.Context, params *ec2.DisassociateSubnetCidrBlockInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
// 				panic("mock out the DisassociateSubnetCidrBlock method")
// 			},
// 			DisassociateTransitGatewayMulticastDomainFunc: func(ctx context.Context, params *ec2.DisassociateTransitGatewayMulticastDomainInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error) {
// 				panic("mock out the DisassociateTransitGatewayMulticastDomain method")
// 			},
// 			DisassociateTransitGatewayPolicyTableFunc: func(ctx context.Context, params *ec2.DisassociateTransitGatewayPolicyTableInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateTransitGatewayPolicyTableOutput, error) {
// 				panic("mock out the DisassociateTransitGatewayPolicyTable method")
// 			},
// 			DisassociateTransitGatewayRouteTableFunc: func(ctx context.Context, params *ec2.DisassociateTransitGatewayRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
// 				panic("mock out the DisassociateTransitGatewayRouteTable method")
// 			},
// 			DisassociateTrunkInterfaceFunc: func(ctx context.Context, params *ec2.DisassociateTrunkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateTrunkInterfaceOutput, error) {
// 				panic("mock out the DisassociateTrunkInterface method")
// 			},
// 			DisassociateVpcCidrBlockFunc: func(ctx context.Context, params *ec2.DisassociateVpcCidrBlockInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateVpcCidrBlockOutput, error) {
// 				panic("mock out the DisassociateVpcCidrBlock method")
// 			},
// 			EnableEbsEncryptionByDefaultFunc: func(ctx context.Context, params *ec2.EnableEbsEncryptionByDefaultInput, optFns ...func(*ec2.Options)) (*ec2.EnableEbsEncryptionByDefaultOutput, error) {
// 				panic("mock out the EnableEbsEncryptionByDefault method")
// 			},
// 			EnableFastLaunchFunc: func(ctx context.Context, params *ec2.EnableFastLaunchInput, optFns ...func(*ec2.Options)) (*ec2.EnableFastLaunchOutput, error) {
// 				panic("mock out the EnableFastLaunch method")
// 			},
// 			EnableFastSnapshotRestoresFunc: func(ctx context.Context, params *ec2.EnableFastSnapshotRestoresInput, optFns ...func(*ec2.Options)) (*ec2.EnableFastSnapshotRestoresOutput, error) {
// 				panic("mock out the EnableFastSnapshotRestores method")
// 			},
// 			EnableImageDeprecationFunc: func(ctx context.Context, params *ec2.EnableImageDeprecationInput, optFns ...func(*ec2.Options)) (*ec2.EnableImageDeprecationOutput, error) {
// 				panic("mock out the EnableImageDeprecation method")
// 			},
// 			EnableIpamOrganizationAdminAccountFunc: func(ctx context.Context, params *ec2.EnableIpamOrganizationAdminAccountInput, optFns ...func(*ec2.Options)) (*ec2.EnableIpamOrganizationAdminAccountOutput, error) {
// 				panic("mock out the EnableIpamOrganizationAdminAccount method")
// 			},
// 			EnableSerialConsoleAccessFunc: func(ctx context.Context, params *ec2.EnableSerialConsoleAccessInput, optFns ...func(*ec2.Options)) (*ec2.EnableSerialConsoleAccessOutput, error) {
// 				panic("mock out the EnableSerialConsoleAccess method")
// 			},
// 			EnableTransitGatewayRouteTablePropagationFunc: func(ctx context.Context, params *ec2.EnableTransitGatewayRouteTablePropagationInput, optFns ...func(*ec2.Options)) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
// 				panic("mock out the EnableTransitGatewayRouteTablePropagation method")
// 			},
// 			EnableVgwRoutePropagationFunc: func(ctx context.Context, params *ec2.EnableVgwRoutePropagationInput, optFns ...func(*ec2.Options)) (*ec2.EnableVgwRoutePropagationOutput, error) {
// 				panic("mock out the EnableVgwRoutePropagation method")
// 			},
// 			EnableVolumeIOFunc: func(ctx context.Context, params *ec2.EnableVolumeIOInput, optFns ...func(*ec2.Options)) (*ec2.EnableVolumeIOOutput, error) {
// 				panic("mock out the EnableVolumeIO method")
// 			},
// 			EnableVpcClassicLinkFunc: func(ctx context.Context, params *ec2.EnableVpcClassicLinkInput, optFns ...func(*ec2.Options)) (*ec2.EnableVpcClassicLinkOutput, error) {
// 				panic("mock out the EnableVpcClassicLink method")
// 			},
// 			EnableVpcClassicLinkDnsSupportFunc: func(ctx context.Context, params *ec2.EnableVpcClassicLinkDnsSupportInput, optFns ...func(*ec2.Options)) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
// 				panic("mock out the EnableVpcClassicLinkDnsSupport method")
// 			},
// 			ExportClientVpnClientCertificateRevocationListFunc: func(ctx context.Context, params *ec2.ExportClientVpnClientCertificateRevocationListInput, optFns ...func(*ec2.Options)) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
// 				panic("mock out the ExportClientVpnClientCertificateRevocationList method")
// 			},
// 			ExportClientVpnClientConfigurationFunc: func(ctx context.Context, params *ec2.ExportClientVpnClientConfigurationInput, optFns ...func(*ec2.Options)) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
// 				panic("mock out the ExportClientVpnClientConfiguration method")
// 			},
// 			ExportImageFunc: func(ctx context.Context, params *ec2.ExportImageInput, optFns ...func(*ec2.Options)) (*ec2.ExportImageOutput, error) {
// 				panic("mock out the ExportImage method")
// 			},
// 			ExportTransitGatewayRoutesFunc: func(ctx context.Context, params *ec2.ExportTransitGatewayRoutesInput, optFns ...func(*ec2.Options)) (*ec2.ExportTransitGatewayRoutesOutput, error) {
// 				panic("mock out the ExportTransitGatewayRoutes method")
// 			},
// 			GetAssociatedEnclaveCertificateIamRolesFunc: func(ctx context.Context, params *ec2.GetAssociatedEnclaveCertificateIamRolesInput, optFns ...func(*ec2.Options)) (*ec2.GetAssociatedEnclaveCertificateIamRolesOutput, error) {
// 				panic("mock out the GetAssociatedEnclaveCertificateIamRoles method")
// 			},
// 			GetAssociatedIpv6PoolCidrsFunc: func(ctx context.Context, params *ec2.GetAssociatedIpv6PoolCidrsInput, optFns ...func(*ec2.Options)) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {
// 				panic("mock out the GetAssociatedIpv6PoolCidrs method")
// 			},
// 			GetCapacityReservationUsageFunc: func(ctx context.Context, params *ec2.GetCapacityReservationUsageInput, optFns ...func(*ec2.Options)) (*ec2.GetCapacityReservationUsageOutput, error) {
// 				panic("mock out the GetCapacityReservationUsage method")
// 			},
// 			GetCoipPoolUsageFunc: func(ctx context.Context, params *ec2.GetCoipPoolUsageInput, optFns ...func(*ec2.Options)) (*ec2.GetCoipPoolUsageOutput, error) {
// 				panic("mock out the GetCoipPoolUsage method")
// 			},
// 			GetConsoleOutputFunc: func(ctx context.Context, params *ec2.GetConsoleOutputInput, optFns ...func(*ec2.Options)) (*ec2.GetConsoleOutputOutput, error) {
// 				panic("mock out the GetConsoleOutput method")
// 			},
// 			GetConsoleScreenshotFunc: func(ctx context.Context, params *ec2.GetConsoleScreenshotInput, optFns ...func(*ec2.Options)) (*ec2.GetConsoleScreenshotOutput, error) {
// 				panic("mock out the GetConsoleScreenshot method")
// 			},
// 			GetDefaultCreditSpecificationFunc: func(ctx context.Context, params *ec2.GetDefaultCreditSpecificationInput, optFns ...func(*ec2.Options)) (*ec2.GetDefaultCreditSpecificationOutput, error) {
// 				panic("mock out the GetDefaultCreditSpecification method")
// 			},
// 			GetEbsDefaultKmsKeyIdFunc: func(ctx context.Context, params *ec2.GetEbsDefaultKmsKeyIdInput, optFns ...func(*ec2.Options)) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {
// 				panic("mock out the GetEbsDefaultKmsKeyId method")
// 			},
// 			GetEbsEncryptionByDefaultFunc: func(ctx context.Context, params *ec2.GetEbsEncryptionByDefaultInput, optFns ...func(*ec2.Options)) (*ec2.GetEbsEncryptionByDefaultOutput, error) {
// 				panic("mock out the GetEbsEncryptionByDefault method")
// 			},
// 			GetFlowLogsIntegrationTemplateFunc: func(ctx context.Context, params *ec2.GetFlowLogsIntegrationTemplateInput, optFns ...func(*ec2.Options)) (*ec2.GetFlowLogsIntegrationTemplateOutput, error) {
// 				panic("mock out the GetFlowLogsIntegrationTemplate method")
// 			},
// 			GetGroupsForCapacityReservationFunc: func(ctx context.Context, params *ec2.GetGroupsForCapacityReservationInput, optFns ...func(*ec2.Options)) (*ec2.GetGroupsForCapacityReservationOutput, error) {
// 				panic("mock out the GetGroupsForCapacityReservation method")
// 			},
// 			GetHostReservationPurchasePreviewFunc: func(ctx context.Context, params *ec2.GetHostReservationPurchasePreviewInput, optFns ...func(*ec2.Options)) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
// 				panic("mock out the GetHostReservationPurchasePreview method")
// 			},
// 			GetInstanceTypesFromInstanceRequirementsFunc: func(ctx context.Context, params *ec2.GetInstanceTypesFromInstanceRequirementsInput, optFns ...func(*ec2.Options)) (*ec2.GetInstanceTypesFromInstanceRequirementsOutput, error) {
// 				panic("mock out the GetInstanceTypesFromInstanceRequirements method")
// 			},
// 			GetInstanceUefiDataFunc: func(ctx context.Context, params *ec2.GetInstanceUefiDataInput, optFns ...func(*ec2.Options)) (*ec2.GetInstanceUefiDataOutput, error) {
// 				panic("mock out the GetInstanceUefiData method")
// 			},
// 			GetIpamAddressHistoryFunc: func(ctx context.Context, params *ec2.GetIpamAddressHistoryInput, optFns ...func(*ec2.Options)) (*ec2.GetIpamAddressHistoryOutput, error) {
// 				panic("mock out the GetIpamAddressHistory method")
// 			},
// 			GetIpamPoolAllocationsFunc: func(ctx context.Context, params *ec2.GetIpamPoolAllocationsInput, optFns ...func(*ec2.Options)) (*ec2.GetIpamPoolAllocationsOutput, error) {
// 				panic("mock out the GetIpamPoolAllocations method")
// 			},
// 			GetIpamPoolCidrsFunc: func(ctx context.Context, params *ec2.GetIpamPoolCidrsInput, optFns ...func(*ec2.Options)) (*ec2.GetIpamPoolCidrsOutput, error) {
// 				panic("mock out the GetIpamPoolCidrs method")
// 			},
// 			GetIpamResourceCidrsFunc: func(ctx context.Context, params *ec2.GetIpamResourceCidrsInput, optFns ...func(*ec2.Options)) (*ec2.GetIpamResourceCidrsOutput, error) {
// 				panic("mock out the GetIpamResourceCidrs method")
// 			},
// 			GetLaunchTemplateDataFunc: func(ctx context.Context, params *ec2.GetLaunchTemplateDataInput, optFns ...func(*ec2.Options)) (*ec2.GetLaunchTemplateDataOutput, error) {
// 				panic("mock out the GetLaunchTemplateData method")
// 			},
// 			GetManagedPrefixListAssociationsFunc: func(ctx context.Context, params *ec2.GetManagedPrefixListAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.GetManagedPrefixListAssociationsOutput, error) {
// 				panic("mock out the GetManagedPrefixListAssociations method")
// 			},
// 			GetManagedPrefixListEntriesFunc: func(ctx context.Context, params *ec2.GetManagedPrefixListEntriesInput, optFns ...func(*ec2.Options)) (*ec2.GetManagedPrefixListEntriesOutput, error) {
// 				panic("mock out the GetManagedPrefixListEntries method")
// 			},
// 			GetNetworkInsightsAccessScopeAnalysisFindingsFunc: func(ctx context.Context, params *ec2.GetNetworkInsightsAccessScopeAnalysisFindingsInput, optFns ...func(*ec2.Options)) (*ec2.GetNetworkInsightsAccessScopeAnalysisFindingsOutput, error) {
// 				panic("mock out the GetNetworkInsightsAccessScopeAnalysisFindings method")
// 			},
// 			GetNetworkInsightsAccessScopeContentFunc: func(ctx context.Context, params *ec2.GetNetworkInsightsAccessScopeContentInput, optFns ...func(*ec2.Options)) (*ec2.GetNetworkInsightsAccessScopeContentOutput, error) {
// 				panic("mock out the GetNetworkInsightsAccessScopeContent method")
// 			},
// 			GetPasswordDataFunc: func(ctx context.Context, params *ec2.GetPasswordDataInput, optFns ...func(*ec2.Options)) (*ec2.GetPasswordDataOutput, error) {
// 				panic("mock out the GetPasswordData method")
// 			},
// 			GetReservedInstancesExchangeQuoteFunc: func(ctx context.Context, params *ec2.GetReservedInstancesExchangeQuoteInput, optFns ...func(*ec2.Options)) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
// 				panic("mock out the GetReservedInstancesExchangeQuote method")
// 			},
// 			GetSerialConsoleAccessStatusFunc: func(ctx context.Context, params *ec2.GetSerialConsoleAccessStatusInput, optFns ...func(*ec2.Options)) (*ec2.GetSerialConsoleAccessStatusOutput, error) {
// 				panic("mock out the GetSerialConsoleAccessStatus method")
// 			},
// 			GetSpotPlacementScoresFunc: func(ctx context.Context, params *ec2.GetSpotPlacementScoresInput, optFns ...func(*ec2.Options)) (*ec2.GetSpotPlacementScoresOutput, error) {
// 				panic("mock out the GetSpotPlacementScores method")
// 			},
// 			GetSubnetCidrReservationsFunc: func(ctx context.Context, params *ec2.GetSubnetCidrReservationsInput, optFns ...func(*ec2.Options)) (*ec2.GetSubnetCidrReservationsOutput, error) {
// 				panic("mock out the GetSubnetCidrReservations method")
// 			},
// 			GetTransitGatewayAttachmentPropagationsFunc: func(ctx context.Context, params *ec2.GetTransitGatewayAttachmentPropagationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
// 				panic("mock out the GetTransitGatewayAttachmentPropagations method")
// 			},
// 			GetTransitGatewayMulticastDomainAssociationsFunc: func(ctx context.Context, params *ec2.GetTransitGatewayMulticastDomainAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {
// 				panic("mock out the GetTransitGatewayMulticastDomainAssociations method")
// 			},
// 			GetTransitGatewayPolicyTableAssociationsFunc: func(ctx context.Context, params *ec2.GetTransitGatewayPolicyTableAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayPolicyTableAssociationsOutput, error) {
// 				panic("mock out the GetTransitGatewayPolicyTableAssociations method")
// 			},
// 			GetTransitGatewayPolicyTableEntriesFunc: func(ctx context.Context, params *ec2.GetTransitGatewayPolicyTableEntriesInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayPolicyTableEntriesOutput, error) {
// 				panic("mock out the GetTransitGatewayPolicyTableEntries method")
// 			},
// 			GetTransitGatewayPrefixListReferencesFunc: func(ctx context.Context, params *ec2.GetTransitGatewayPrefixListReferencesInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayPrefixListReferencesOutput, error) {
// 				panic("mock out the GetTransitGatewayPrefixListReferences method")
// 			},
// 			GetTransitGatewayRouteTableAssociationsFunc: func(ctx context.Context, params *ec2.GetTransitGatewayRouteTableAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
// 				panic("mock out the GetTransitGatewayRouteTableAssociations method")
// 			},
// 			GetTransitGatewayRouteTablePropagationsFunc: func(ctx context.Context, params *ec2.GetTransitGatewayRouteTablePropagationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
// 				panic("mock out the GetTransitGatewayRouteTablePropagations method")
// 			},
// 			GetVpnConnectionDeviceSampleConfigurationFunc: func(ctx context.Context, params *ec2.GetVpnConnectionDeviceSampleConfigurationInput, optFns ...func(*ec2.Options)) (*ec2.GetVpnConnectionDeviceSampleConfigurationOutput, error) {
// 				panic("mock out the GetVpnConnectionDeviceSampleConfiguration method")
// 			},
// 			GetVpnConnectionDeviceTypesFunc: func(ctx context.Context, params *ec2.GetVpnConnectionDeviceTypesInput, optFns ...func(*ec2.Options)) (*ec2.GetVpnConnectionDeviceTypesOutput, error) {
// 				panic("mock out the GetVpnConnectionDeviceTypes method")
// 			},
// 			ImportClientVpnClientCertificateRevocationListFunc: func(ctx context.Context, params *ec2.ImportClientVpnClientCertificateRevocationListInput, optFns ...func(*ec2.Options)) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
// 				panic("mock out the ImportClientVpnClientCertificateRevocationList method")
// 			},
// 			ImportImageFunc: func(ctx context.Context, params *ec2.ImportImageInput, optFns ...func(*ec2.Options)) (*ec2.ImportImageOutput, error) {
// 				panic("mock out the ImportImage method")
// 			},
// 			ImportInstanceFunc: func(ctx context.Context, params *ec2.ImportInstanceInput, optFns ...func(*ec2.Options)) (*ec2.ImportInstanceOutput, error) {
// 				panic("mock out the ImportInstance method")
// 			},
// 			ImportKeyPairFunc: func(ctx context.Context, params *ec2.ImportKeyPairInput, optFns ...func(*ec2.Options)) (*ec2.ImportKeyPairOutput, error) {
// 				panic("mock out the ImportKeyPair method")
// 			},
// 			ImportSnapshotFunc: func(ctx context.Context, params *ec2.ImportSnapshotInput, optFns ...func(*ec2.Options)) (*ec2.ImportSnapshotOutput, error) {
// 				panic("mock out the ImportSnapshot method")
// 			},
// 			ImportVolumeFunc: func(ctx context.Context, params *ec2.ImportVolumeInput, optFns ...func(*ec2.Options)) (*ec2.ImportVolumeOutput, error) {
// 				panic("mock out the ImportVolume method")
// 			},
// 			ListImagesInRecycleBinFunc: func(ctx context.Context, params *ec2.ListImagesInRecycleBinInput, optFns ...func(*ec2.Options)) (*ec2.ListImagesInRecycleBinOutput, error) {
// 				panic("mock out the ListImagesInRecycleBin method")
// 			},
// 			ListSnapshotsInRecycleBinFunc: func(ctx context.Context, params *ec2.ListSnapshotsInRecycleBinInput, optFns ...func(*ec2.Options)) (*ec2.ListSnapshotsInRecycleBinOutput, error) {
// 				panic("mock out the ListSnapshotsInRecycleBin method")
// 			},
// 			ModifyAddressAttributeFunc: func(ctx context.Context, params *ec2.ModifyAddressAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyAddressAttributeOutput, error) {
// 				panic("mock out the ModifyAddressAttribute method")
// 			},
// 			ModifyAvailabilityZoneGroupFunc: func(ctx context.Context, params *ec2.ModifyAvailabilityZoneGroupInput, optFns ...func(*ec2.Options)) (*ec2.ModifyAvailabilityZoneGroupOutput, error) {
// 				panic("mock out the ModifyAvailabilityZoneGroup method")
// 			},
// 			ModifyCapacityReservationFunc: func(ctx context.Context, params *ec2.ModifyCapacityReservationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyCapacityReservationOutput, error) {
// 				panic("mock out the ModifyCapacityReservation method")
// 			},
// 			ModifyCapacityReservationFleetFunc: func(ctx context.Context, params *ec2.ModifyCapacityReservationFleetInput, optFns ...func(*ec2.Options)) (*ec2.ModifyCapacityReservationFleetOutput, error) {
// 				panic("mock out the ModifyCapacityReservationFleet method")
// 			},
// 			ModifyClientVpnEndpointFunc: func(ctx context.Context, params *ec2.ModifyClientVpnEndpointInput, optFns ...func(*ec2.Options)) (*ec2.ModifyClientVpnEndpointOutput, error) {
// 				panic("mock out the ModifyClientVpnEndpoint method")
// 			},
// 			ModifyDefaultCreditSpecificationFunc: func(ctx context.Context, params *ec2.ModifyDefaultCreditSpecificationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyDefaultCreditSpecificationOutput, error) {
// 				panic("mock out the ModifyDefaultCreditSpecification method")
// 			},
// 			ModifyEbsDefaultKmsKeyIdFunc: func(ctx context.Context, params *ec2.ModifyEbsDefaultKmsKeyIdInput, optFns ...func(*ec2.Options)) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error) {
// 				panic("mock out the ModifyEbsDefaultKmsKeyId method")
// 			},
// 			ModifyFleetFunc: func(ctx context.Context, params *ec2.ModifyFleetInput, optFns ...func(*ec2.Options)) (*ec2.ModifyFleetOutput, error) {
// 				panic("mock out the ModifyFleet method")
// 			},
// 			ModifyFpgaImageAttributeFunc: func(ctx context.Context, params *ec2.ModifyFpgaImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyFpgaImageAttributeOutput, error) {
// 				panic("mock out the ModifyFpgaImageAttribute method")
// 			},
// 			ModifyHostsFunc: func(ctx context.Context, params *ec2.ModifyHostsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyHostsOutput, error) {
// 				panic("mock out the ModifyHosts method")
// 			},
// 			ModifyIdFormatFunc: func(ctx context.Context, params *ec2.ModifyIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIdFormatOutput, error) {
// 				panic("mock out the ModifyIdFormat method")
// 			},
// 			ModifyIdentityIdFormatFunc: func(ctx context.Context, params *ec2.ModifyIdentityIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIdentityIdFormatOutput, error) {
// 				panic("mock out the ModifyIdentityIdFormat method")
// 			},
// 			ModifyImageAttributeFunc: func(ctx context.Context, params *ec2.ModifyImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyImageAttributeOutput, error) {
// 				panic("mock out the ModifyImageAttribute method")
// 			},
// 			ModifyInstanceAttributeFunc: func(ctx context.Context, params *ec2.ModifyInstanceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceAttributeOutput, error) {
// 				panic("mock out the ModifyInstanceAttribute method")
// 			},
// 			ModifyInstanceCapacityReservationAttributesFunc: func(ctx context.Context, params *ec2.ModifyInstanceCapacityReservationAttributesInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
// 				panic("mock out the ModifyInstanceCapacityReservationAttributes method")
// 			},
// 			ModifyInstanceCreditSpecificationFunc: func(ctx context.Context, params *ec2.ModifyInstanceCreditSpecificationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
// 				panic("mock out the ModifyInstanceCreditSpecification method")
// 			},
// 			ModifyInstanceEventStartTimeFunc: func(ctx context.Context, params *ec2.ModifyInstanceEventStartTimeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceEventStartTimeOutput, error) {
// 				panic("mock out the ModifyInstanceEventStartTime method")
// 			},
// 			ModifyInstanceEventWindowFunc: func(ctx context.Context, params *ec2.ModifyInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceEventWindowOutput, error) {
// 				panic("mock out the ModifyInstanceEventWindow method")
// 			},
// 			ModifyInstanceMaintenanceOptionsFunc: func(ctx context.Context, params *ec2.ModifyInstanceMaintenanceOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceMaintenanceOptionsOutput, error) {
// 				panic("mock out the ModifyInstanceMaintenanceOptions method")
// 			},
// 			ModifyInstanceMetadataOptionsFunc: func(ctx context.Context, params *ec2.ModifyInstanceMetadataOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceMetadataOptionsOutput, error) {
// 				panic("mock out the ModifyInstanceMetadataOptions method")
// 			},
// 			ModifyInstancePlacementFunc: func(ctx context.Context, params *ec2.ModifyInstancePlacementInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstancePlacementOutput, error) {
// 				panic("mock out the ModifyInstancePlacement method")
// 			},
// 			ModifyIpamFunc: func(ctx context.Context, params *ec2.ModifyIpamInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIpamOutput, error) {
// 				panic("mock out the ModifyIpam method")
// 			},
// 			ModifyIpamPoolFunc: func(ctx context.Context, params *ec2.ModifyIpamPoolInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIpamPoolOutput, error) {
// 				panic("mock out the ModifyIpamPool method")
// 			},
// 			ModifyIpamResourceCidrFunc: func(ctx context.Context, params *ec2.ModifyIpamResourceCidrInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIpamResourceCidrOutput, error) {
// 				panic("mock out the ModifyIpamResourceCidr method")
// 			},
// 			ModifyIpamScopeFunc: func(ctx context.Context, params *ec2.ModifyIpamScopeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIpamScopeOutput, error) {
// 				panic("mock out the ModifyIpamScope method")
// 			},
// 			ModifyLaunchTemplateFunc: func(ctx context.Context, params *ec2.ModifyLaunchTemplateInput, optFns ...func(*ec2.Options)) (*ec2.ModifyLaunchTemplateOutput, error) {
// 				panic("mock out the ModifyLaunchTemplate method")
// 			},
// 			ModifyManagedPrefixListFunc: func(ctx context.Context, params *ec2.ModifyManagedPrefixListInput, optFns ...func(*ec2.Options)) (*ec2.ModifyManagedPrefixListOutput, error) {
// 				panic("mock out the ModifyManagedPrefixList method")
// 			},
// 			ModifyNetworkInterfaceAttributeFunc: func(ctx context.Context, params *ec2.ModifyNetworkInterfaceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
// 				panic("mock out the ModifyNetworkInterfaceAttribute method")
// 			},
// 			ModifyPrivateDnsNameOptionsFunc: func(ctx context.Context, params *ec2.ModifyPrivateDnsNameOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyPrivateDnsNameOptionsOutput, error) {
// 				panic("mock out the ModifyPrivateDnsNameOptions method")
// 			},
// 			ModifyReservedInstancesFunc: func(ctx context.Context, params *ec2.ModifyReservedInstancesInput, optFns ...func(*ec2.Options)) (*ec2.ModifyReservedInstancesOutput, error) {
// 				panic("mock out the ModifyReservedInstances method")
// 			},
// 			ModifySecurityGroupRulesFunc: func(ctx context.Context, params *ec2.ModifySecurityGroupRulesInput, optFns ...func(*ec2.Options)) (*ec2.ModifySecurityGroupRulesOutput, error) {
// 				panic("mock out the ModifySecurityGroupRules method")
// 			},
// 			ModifySnapshotAttributeFunc: func(ctx context.Context, params *ec2.ModifySnapshotAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifySnapshotAttributeOutput, error) {
// 				panic("mock out the ModifySnapshotAttribute method")
// 			},
// 			ModifySnapshotTierFunc: func(ctx context.Context, params *ec2.ModifySnapshotTierInput, optFns ...func(*ec2.Options)) (*ec2.ModifySnapshotTierOutput, error) {
// 				panic("mock out the ModifySnapshotTier method")
// 			},
// 			ModifySpotFleetRequestFunc: func(ctx context.Context, params *ec2.ModifySpotFleetRequestInput, optFns ...func(*ec2.Options)) (*ec2.ModifySpotFleetRequestOutput, error) {
// 				panic("mock out the ModifySpotFleetRequest method")
// 			},
// 			ModifySubnetAttributeFunc: func(ctx context.Context, params *ec2.ModifySubnetAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifySubnetAttributeOutput, error) {
// 				panic("mock out the ModifySubnetAttribute method")
// 			},
// 			ModifyTrafficMirrorFilterNetworkServicesFunc: func(ctx context.Context, params *ec2.ModifyTrafficMirrorFilterNetworkServicesInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error) {
// 				panic("mock out the ModifyTrafficMirrorFilterNetworkServices method")
// 			},
// 			ModifyTrafficMirrorFilterRuleFunc: func(ctx context.Context, params *ec2.ModifyTrafficMirrorFilterRuleInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error) {
// 				panic("mock out the ModifyTrafficMirrorFilterRule method")
// 			},
// 			ModifyTrafficMirrorSessionFunc: func(ctx context.Context, params *ec2.ModifyTrafficMirrorSessionInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTrafficMirrorSessionOutput, error) {
// 				panic("mock out the ModifyTrafficMirrorSession method")
// 			},
// 			ModifyTransitGatewayFunc: func(ctx context.Context, params *ec2.ModifyTransitGatewayInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTransitGatewayOutput, error) {
// 				panic("mock out the ModifyTransitGateway method")
// 			},
// 			ModifyTransitGatewayPrefixListReferenceFunc: func(ctx context.Context, params *ec2.ModifyTransitGatewayPrefixListReferenceInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTransitGatewayPrefixListReferenceOutput, error) {
// 				panic("mock out the ModifyTransitGatewayPrefixListReference method")
// 			},
// 			ModifyTransitGatewayVpcAttachmentFunc: func(ctx context.Context, params *ec2.ModifyTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
// 				panic("mock out the ModifyTransitGatewayVpcAttachment method")
// 			},
// 			ModifyVolumeFunc: func(ctx context.Context, params *ec2.ModifyVolumeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVolumeOutput, error) {
// 				panic("mock out the ModifyVolume method")
// 			},
// 			ModifyVolumeAttributeFunc: func(ctx context.Context, params *ec2.ModifyVolumeAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVolumeAttributeOutput, error) {
// 				panic("mock out the ModifyVolumeAttribute method")
// 			},
// 			ModifyVpcAttributeFunc: func(ctx context.Context, params *ec2.ModifyVpcAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcAttributeOutput, error) {
// 				panic("mock out the ModifyVpcAttribute method")
// 			},
// 			ModifyVpcEndpointFunc: func(ctx context.Context, params *ec2.ModifyVpcEndpointInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointOutput, error) {
// 				panic("mock out the ModifyVpcEndpoint method")
// 			},
// 			ModifyVpcEndpointConnectionNotificationFunc: func(ctx context.Context, params *ec2.ModifyVpcEndpointConnectionNotificationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
// 				panic("mock out the ModifyVpcEndpointConnectionNotification method")
// 			},
// 			ModifyVpcEndpointServiceConfigurationFunc: func(ctx context.Context, params *ec2.ModifyVpcEndpointServiceConfigurationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
// 				panic("mock out the ModifyVpcEndpointServiceConfiguration method")
// 			},
// 			ModifyVpcEndpointServicePayerResponsibilityFunc: func(ctx context.Context, params *ec2.ModifyVpcEndpointServicePayerResponsibilityInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointServicePayerResponsibilityOutput, error) {
// 				panic("mock out the ModifyVpcEndpointServicePayerResponsibility method")
// 			},
// 			ModifyVpcEndpointServicePermissionsFunc: func(ctx context.Context, params *ec2.ModifyVpcEndpointServicePermissionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
// 				panic("mock out the ModifyVpcEndpointServicePermissions method")
// 			},
// 			ModifyVpcPeeringConnectionOptionsFunc: func(ctx context.Context, params *ec2.ModifyVpcPeeringConnectionOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
// 				panic("mock out the ModifyVpcPeeringConnectionOptions method")
// 			},
// 			ModifyVpcTenancyFunc: func(ctx context.Context, params *ec2.ModifyVpcTenancyInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcTenancyOutput, error) {
// 				panic("mock out the ModifyVpcTenancy method")
// 			},
// 			ModifyVpnConnectionFunc: func(ctx context.Context, params *ec2.ModifyVpnConnectionInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpnConnectionOutput, error) {
// 				panic("mock out the ModifyVpnConnection method")
// 			},
// 			ModifyVpnConnectionOptionsFunc: func(ctx context.Context, params *ec2.ModifyVpnConnectionOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpnConnectionOptionsOutput, error) {
// 				panic("mock out the ModifyVpnConnectionOptions method")
// 			},
// 			ModifyVpnTunnelCertificateFunc: func(ctx context.Context, params *ec2.ModifyVpnTunnelCertificateInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpnTunnelCertificateOutput, error) {
// 				panic("mock out the ModifyVpnTunnelCertificate method")
// 			},
// 			ModifyVpnTunnelOptionsFunc: func(ctx context.Context, params *ec2.ModifyVpnTunnelOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpnTunnelOptionsOutput, error) {
// 				panic("mock out the ModifyVpnTunnelOptions method")
// 			},
// 			MonitorInstancesFunc: func(ctx context.Context, params *ec2.MonitorInstancesInput, optFns ...func(*ec2.Options)) (*ec2.MonitorInstancesOutput, error) {
// 				panic("mock out the MonitorInstances method")
// 			},
// 			MoveAddressToVpcFunc: func(ctx context.Context, params *ec2.MoveAddressToVpcInput, optFns ...func(*ec2.Options)) (*ec2.MoveAddressToVpcOutput, error) {
// 				panic("mock out the MoveAddressToVpc method")
// 			},
// 			MoveByoipCidrToIpamFunc: func(ctx context.Context, params *ec2.MoveByoipCidrToIpamInput, optFns ...func(*ec2.Options)) (*ec2.MoveByoipCidrToIpamOutput, error) {
// 				panic("mock out the MoveByoipCidrToIpam method")
// 			},
// 			ProvisionByoipCidrFunc: func(ctx context.Context, params *ec2.ProvisionByoipCidrInput, optFns ...func(*ec2.Options)) (*ec2.ProvisionByoipCidrOutput, error) {
// 				panic("mock out the ProvisionByoipCidr method")
// 			},
// 			ProvisionIpamPoolCidrFunc: func(ctx context.Context, params *ec2.ProvisionIpamPoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.ProvisionIpamPoolCidrOutput, error) {
// 				panic("mock out the ProvisionIpamPoolCidr method")
// 			},
// 			ProvisionPublicIpv4PoolCidrFunc: func(ctx context.Context, params *ec2.ProvisionPublicIpv4PoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.ProvisionPublicIpv4PoolCidrOutput, error) {
// 				panic("mock out the ProvisionPublicIpv4PoolCidr method")
// 			},
// 			PurchaseHostReservationFunc: func(ctx context.Context, params *ec2.PurchaseHostReservationInput, optFns ...func(*ec2.Options)) (*ec2.PurchaseHostReservationOutput, error) {
// 				panic("mock out the PurchaseHostReservation method")
// 			},
// 			PurchaseReservedInstancesOfferingFunc: func(ctx context.Context, params *ec2.PurchaseReservedInstancesOfferingInput, optFns ...func(*ec2.Options)) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
// 				panic("mock out the PurchaseReservedInstancesOffering method")
// 			},
// 			PurchaseScheduledInstancesFunc: func(ctx context.Context, params *ec2.PurchaseScheduledInstancesInput, optFns ...func(*ec2.Options)) (*ec2.PurchaseScheduledInstancesOutput, error) {
// 				panic("mock out the PurchaseScheduledInstances method")
// 			},
// 			RebootInstancesFunc: func(ctx context.Context, params *ec2.RebootInstancesInput, optFns ...func(*ec2.Options)) (*ec2.RebootInstancesOutput, error) {
// 				panic("mock out the RebootInstances method")
// 			},
// 			RegisterImageFunc: func(ctx context.Context, params *ec2.RegisterImageInput, optFns ...func(*ec2.Options)) (*ec2.RegisterImageOutput, error) {
// 				panic("mock out the RegisterImage method")
// 			},
// 			RegisterInstanceEventNotificationAttributesFunc: func(ctx context.Context, params *ec2.RegisterInstanceEventNotificationAttributesInput, optFns ...func(*ec2.Options)) (*ec2.RegisterInstanceEventNotificationAttributesOutput, error) {
// 				panic("mock out the RegisterInstanceEventNotificationAttributes method")
// 			},
// 			RegisterTransitGatewayMulticastGroupMembersFunc: func(ctx context.Context, params *ec2.RegisterTransitGatewayMulticastGroupMembersInput, optFns ...func(*ec2.Options)) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error) {
// 				panic("mock out the RegisterTransitGatewayMulticastGroupMembers method")
// 			},
// 			RegisterTransitGatewayMulticastGroupSourcesFunc: func(ctx context.Context, params *ec2.RegisterTransitGatewayMulticastGroupSourcesInput, optFns ...func(*ec2.Options)) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error) {
// 				panic("mock out the RegisterTransitGatewayMulticastGroupSources method")
// 			},
// 			RejectTransitGatewayMulticastDomainAssociationsFunc: func(ctx context.Context, params *ec2.RejectTransitGatewayMulticastDomainAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.RejectTransitGatewayMulticastDomainAssociationsOutput, error) {
// 				panic("mock out the RejectTransitGatewayMulticastDomainAssociations method")
// 			},
// 			RejectTransitGatewayPeeringAttachmentFunc: func(ctx context.Context, params *ec2.RejectTransitGatewayPeeringAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error) {
// 				panic("mock out the RejectTransitGatewayPeeringAttachment method")
// 			},
// 			RejectTransitGatewayVpcAttachmentFunc: func(ctx context.Context, params *ec2.RejectTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
// 				panic("mock out the RejectTransitGatewayVpcAttachment method")
// 			},
// 			RejectVpcEndpointConnectionsFunc: func(ctx context.Context, params *ec2.RejectVpcEndpointConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
// 				panic("mock out the RejectVpcEndpointConnections method")
// 			},
// 			RejectVpcPeeringConnectionFunc: func(ctx context.Context, params *ec2.RejectVpcPeeringConnectionInput, optFns ...func(*ec2.Options)) (*ec2.RejectVpcPeeringConnectionOutput, error) {
// 				panic("mock out the RejectVpcPeeringConnection method")
// 			},
// 			ReleaseAddressFunc: func(ctx context.Context, params *ec2.ReleaseAddressInput, optFns ...func(*ec2.Options)) (*ec2.ReleaseAddressOutput, error) {
// 				panic("mock out the ReleaseAddress method")
// 			},
// 			ReleaseHostsFunc: func(ctx context.Context, params *ec2.ReleaseHostsInput, optFns ...func(*ec2.Options)) (*ec2.ReleaseHostsOutput, error) {
// 				panic("mock out the ReleaseHosts method")
// 			},
// 			ReleaseIpamPoolAllocationFunc: func(ctx context.Context, params *ec2.ReleaseIpamPoolAllocationInput, optFns ...func(*ec2.Options)) (*ec2.ReleaseIpamPoolAllocationOutput, error) {
// 				panic("mock out the ReleaseIpamPoolAllocation method")
// 			},
// 			ReplaceIamInstanceProfileAssociationFunc: func(ctx context.Context, params *ec2.ReplaceIamInstanceProfileAssociationInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
// 				panic("mock out the ReplaceIamInstanceProfileAssociation method")
// 			},
// 			ReplaceNetworkAclAssociationFunc: func(ctx context.Context, params *ec2.ReplaceNetworkAclAssociationInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
// 				panic("mock out the ReplaceNetworkAclAssociation method")
// 			},
// 			ReplaceNetworkAclEntryFunc: func(ctx context.Context, params *ec2.ReplaceNetworkAclEntryInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceNetworkAclEntryOutput, error) {
// 				panic("mock out the ReplaceNetworkAclEntry method")
// 			},
// 			ReplaceRouteFunc: func(ctx context.Context, params *ec2.ReplaceRouteInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceRouteOutput, error) {
// 				panic("mock out the ReplaceRoute method")
// 			},
// 			ReplaceRouteTableAssociationFunc: func(ctx context.Context, params *ec2.ReplaceRouteTableAssociationInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceRouteTableAssociationOutput, error) {
// 				panic("mock out the ReplaceRouteTableAssociation method")
// 			},
// 			ReplaceTransitGatewayRouteFunc: func(ctx context.Context, params *ec2.ReplaceTransitGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
// 				panic("mock out the ReplaceTransitGatewayRoute method")
// 			},
// 			ReportInstanceStatusFunc: func(ctx context.Context, params *ec2.ReportInstanceStatusInput, optFns ...func(*ec2.Options)) (*ec2.ReportInstanceStatusOutput, error) {
// 				panic("mock out the ReportInstanceStatus method")
// 			},
// 			RequestSpotFleetFunc: func(ctx context.Context, params *ec2.RequestSpotFleetInput, optFns ...func(*ec2.Options)) (*ec2.RequestSpotFleetOutput, error) {
// 				panic("mock out the RequestSpotFleet method")
// 			},
// 			RequestSpotInstancesFunc: func(ctx context.Context, params *ec2.RequestSpotInstancesInput, optFns ...func(*ec2.Options)) (*ec2.RequestSpotInstancesOutput, error) {
// 				panic("mock out the RequestSpotInstances method")
// 			},
// 			ResetAddressAttributeFunc: func(ctx context.Context, params *ec2.ResetAddressAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetAddressAttributeOutput, error) {
// 				panic("mock out the ResetAddressAttribute method")
// 			},
// 			ResetEbsDefaultKmsKeyIdFunc: func(ctx context.Context, params *ec2.ResetEbsDefaultKmsKeyIdInput, optFns ...func(*ec2.Options)) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error) {
// 				panic("mock out the ResetEbsDefaultKmsKeyId method")
// 			},
// 			ResetFpgaImageAttributeFunc: func(ctx context.Context, params *ec2.ResetFpgaImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetFpgaImageAttributeOutput, error) {
// 				panic("mock out the ResetFpgaImageAttribute method")
// 			},
// 			ResetImageAttributeFunc: func(ctx context.Context, params *ec2.ResetImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetImageAttributeOutput, error) {
// 				panic("mock out the ResetImageAttribute method")
// 			},
// 			ResetInstanceAttributeFunc: func(ctx context.Context, params *ec2.ResetInstanceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetInstanceAttributeOutput, error) {
// 				panic("mock out the ResetInstanceAttribute method")
// 			},
// 			ResetNetworkInterfaceAttributeFunc: func(ctx context.Context, params *ec2.ResetNetworkInterfaceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
// 				panic("mock out the ResetNetworkInterfaceAttribute method")
// 			},
// 			ResetSnapshotAttributeFunc: func(ctx context.Context, params *ec2.ResetSnapshotAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetSnapshotAttributeOutput, error) {
// 				panic("mock out the ResetSnapshotAttribute method")
// 			},
// 			RestoreAddressToClassicFunc: func(ctx context.Context, params *ec2.RestoreAddressToClassicInput, optFns ...func(*ec2.Options)) (*ec2.RestoreAddressToClassicOutput, error) {
// 				panic("mock out the RestoreAddressToClassic method")
// 			},
// 			RestoreImageFromRecycleBinFunc: func(ctx context.Context, params *ec2.RestoreImageFromRecycleBinInput, optFns ...func(*ec2.Options)) (*ec2.RestoreImageFromRecycleBinOutput, error) {
// 				panic("mock out the RestoreImageFromRecycleBin method")
// 			},
// 			RestoreManagedPrefixListVersionFunc: func(ctx context.Context, params *ec2.RestoreManagedPrefixListVersionInput, optFns ...func(*ec2.Options)) (*ec2.RestoreManagedPrefixListVersionOutput, error) {
// 				panic("mock out the RestoreManagedPrefixListVersion method")
// 			},
// 			RestoreSnapshotFromRecycleBinFunc: func(ctx context.Context, params *ec2.RestoreSnapshotFromRecycleBinInput, optFns ...func(*ec2.Options)) (*ec2.RestoreSnapshotFromRecycleBinOutput, error) {
// 				panic("mock out the RestoreSnapshotFromRecycleBin method")
// 			},
// 			RestoreSnapshotTierFunc: func(ctx context.Context, params *ec2.RestoreSnapshotTierInput, optFns ...func(*ec2.Options)) (*ec2.RestoreSnapshotTierOutput, error) {
// 				panic("mock out the RestoreSnapshotTier method")
// 			},
// 			RevokeClientVpnIngressFunc: func(ctx context.Context, params *ec2.RevokeClientVpnIngressInput, optFns ...func(*ec2.Options)) (*ec2.RevokeClientVpnIngressOutput, error) {
// 				panic("mock out the RevokeClientVpnIngress method")
// 			},
// 			RevokeSecurityGroupEgressFunc: func(ctx context.Context, params *ec2.RevokeSecurityGroupEgressInput, optFns ...func(*ec2.Options)) (*ec2.RevokeSecurityGroupEgressOutput, error) {
// 				panic("mock out the RevokeSecurityGroupEgress method")
// 			},
// 			RevokeSecurityGroupIngressFunc: func(ctx context.Context, params *ec2.RevokeSecurityGroupIngressInput, optFns ...func(*ec2.Options)) (*ec2.RevokeSecurityGroupIngressOutput, error) {
// 				panic("mock out the RevokeSecurityGroupIngress method")
// 			},
// 			RunInstancesFunc: func(ctx context.Context, params *ec2.RunInstancesInput, optFns ...func(*ec2.Options)) (*ec2.RunInstancesOutput, error) {
// 				panic("mock out the RunInstances method")
// 			},
// 			RunScheduledInstancesFunc: func(ctx context.Context, params *ec2.RunScheduledInstancesInput, optFns ...func(*ec2.Options)) (*ec2.RunScheduledInstancesOutput, error) {
// 				panic("mock out the RunScheduledInstances method")
// 			},
// 			SearchLocalGatewayRoutesFunc: func(ctx context.Context, params *ec2.SearchLocalGatewayRoutesInput, optFns ...func(*ec2.Options)) (*ec2.SearchLocalGatewayRoutesOutput, error) {
// 				panic("mock out the SearchLocalGatewayRoutes method")
// 			},
// 			SearchTransitGatewayMulticastGroupsFunc: func(ctx context.Context, params *ec2.SearchTransitGatewayMulticastGroupsInput, optFns ...func(*ec2.Options)) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {
// 				panic("mock out the SearchTransitGatewayMulticastGroups method")
// 			},
// 			SearchTransitGatewayRoutesFunc: func(ctx context.Context, params *ec2.SearchTransitGatewayRoutesInput, optFns ...func(*ec2.Options)) (*ec2.SearchTransitGatewayRoutesOutput, error) {
// 				panic("mock out the SearchTransitGatewayRoutes method")
// 			},
// 			SendDiagnosticInterruptFunc: func(ctx context.Context, params *ec2.SendDiagnosticInterruptInput, optFns ...func(*ec2.Options)) (*ec2.SendDiagnosticInterruptOutput, error) {
// 				panic("mock out the SendDiagnosticInterrupt method")
// 			},
// 			StartInstancesFunc: func(ctx context.Context, params *ec2.StartInstancesInput, optFns ...func(*ec2.Options)) (*ec2.StartInstancesOutput, error) {
// 				panic("mock out the StartInstances method")
// 			},
// 			StartNetworkInsightsAccessScopeAnalysisFunc: func(ctx context.Context, params *ec2.StartNetworkInsightsAccessScopeAnalysisInput, optFns ...func(*ec2.Options)) (*ec2.StartNetworkInsightsAccessScopeAnalysisOutput, error) {
// 				panic("mock out the StartNetworkInsightsAccessScopeAnalysis method")
// 			},
// 			StartNetworkInsightsAnalysisFunc: func(ctx context.Context, params *ec2.StartNetworkInsightsAnalysisInput, optFns ...func(*ec2.Options)) (*ec2.StartNetworkInsightsAnalysisOutput, error) {
// 				panic("mock out the StartNetworkInsightsAnalysis method")
// 			},
// 			StartVpcEndpointServicePrivateDnsVerificationFunc: func(ctx context.Context, params *ec2.StartVpcEndpointServicePrivateDnsVerificationInput, optFns ...func(*ec2.Options)) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error) {
// 				panic("mock out the StartVpcEndpointServicePrivateDnsVerification method")
// 			},
// 			StopInstancesFunc: func(ctx context.Context, params *ec2.StopInstancesInput, optFns ...func(*ec2.Options)) (*ec2.StopInstancesOutput, error) {
// 				panic("mock out the StopInstances method")
// 			},
// 			TerminateClientVpnConnectionsFunc: func(ctx context.Context, params *ec2.TerminateClientVpnConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.TerminateClientVpnConnectionsOutput, error) {
// 				panic("mock out the TerminateClientVpnConnections method")
// 			},
// 			TerminateInstancesFunc: func(ctx context.Context, params *ec2.TerminateInstancesInput, optFns ...func(*ec2.Options)) (*ec2.TerminateInstancesOutput, error) {
// 				panic("mock out the TerminateInstances method")
// 			},
// 			UnassignIpv6AddressesFunc: func(ctx context.Context, params *ec2.UnassignIpv6AddressesInput, optFns ...func(*ec2.Options)) (*ec2.UnassignIpv6AddressesOutput, error) {
// 				panic("mock out the UnassignIpv6Addresses method")
// 			},
// 			UnassignPrivateIpAddressesFunc: func(ctx context.Context, params *ec2.UnassignPrivateIpAddressesInput, optFns ...func(*ec2.Options)) (*ec2.UnassignPrivateIpAddressesOutput, error) {
// 				panic("mock out the UnassignPrivateIpAddresses method")
// 			},
// 			UnmonitorInstancesFunc: func(ctx context.Context, params *ec2.UnmonitorInstancesInput, optFns ...func(*ec2.Options)) (*ec2.UnmonitorInstancesOutput, error) {
// 				panic("mock out the UnmonitorInstances method")
// 			},
// 			UpdateSecurityGroupRuleDescriptionsEgressFunc: func(ctx context.Context, params *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, optFns ...func(*ec2.Options)) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
// 				panic("mock out the UpdateSecurityGroupRuleDescriptionsEgress method")
// 			},
// 			UpdateSecurityGroupRuleDescriptionsIngressFunc: func(ctx context.Context, params *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, optFns ...func(*ec2.Options)) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
// 				panic("mock out the UpdateSecurityGroupRuleDescriptionsIngress method")
// 			},
// 			WithdrawByoipCidrFunc: func(ctx context.Context, params *ec2.WithdrawByoipCidrInput, optFns ...func(*ec2.Options)) (*ec2.WithdrawByoipCidrOutput, error) {
// 				panic("mock out the WithdrawByoipCidr method")
// 			},
// 		}
//
// 		// use mockedClient in code that requires Client
// 		// and then make assertions.
//
// 	}
type ClientMock struct {
	// AcceptReservedInstancesExchangeQuoteFunc mocks the AcceptReservedInstancesExchangeQuote method.
	AcceptReservedInstancesExchangeQuoteFunc func(ctx context.Context, params *ec2.AcceptReservedInstancesExchangeQuoteInput, optFns ...func(*ec2.Options)) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error)

	// AcceptTransitGatewayMulticastDomainAssociationsFunc mocks the AcceptTransitGatewayMulticastDomainAssociations method.
	AcceptTransitGatewayMulticastDomainAssociationsFunc func(ctx context.Context, params *ec2.AcceptTransitGatewayMulticastDomainAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.AcceptTransitGatewayMulticastDomainAssociationsOutput, error)

	// AcceptTransitGatewayPeeringAttachmentFunc mocks the AcceptTransitGatewayPeeringAttachment method.
	AcceptTransitGatewayPeeringAttachmentFunc func(ctx context.Context, params *ec2.AcceptTransitGatewayPeeringAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error)

	// AcceptTransitGatewayVpcAttachmentFunc mocks the AcceptTransitGatewayVpcAttachment method.
	AcceptTransitGatewayVpcAttachmentFunc func(ctx context.Context, params *ec2.AcceptTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error)

	// AcceptVpcEndpointConnectionsFunc mocks the AcceptVpcEndpointConnections method.
	AcceptVpcEndpointConnectionsFunc func(ctx context.Context, params *ec2.AcceptVpcEndpointConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.AcceptVpcEndpointConnectionsOutput, error)

	// AcceptVpcPeeringConnectionFunc mocks the AcceptVpcPeeringConnection method.
	AcceptVpcPeeringConnectionFunc func(ctx context.Context, params *ec2.AcceptVpcPeeringConnectionInput, optFns ...func(*ec2.Options)) (*ec2.AcceptVpcPeeringConnectionOutput, error)

	// AdvertiseByoipCidrFunc mocks the AdvertiseByoipCidr method.
	AdvertiseByoipCidrFunc func(ctx context.Context, params *ec2.AdvertiseByoipCidrInput, optFns ...func(*ec2.Options)) (*ec2.AdvertiseByoipCidrOutput, error)

	// AllocateAddressFunc mocks the AllocateAddress method.
	AllocateAddressFunc func(ctx context.Context, params *ec2.AllocateAddressInput, optFns ...func(*ec2.Options)) (*ec2.AllocateAddressOutput, error)

	// AllocateHostsFunc mocks the AllocateHosts method.
	AllocateHostsFunc func(ctx context.Context, params *ec2.AllocateHostsInput, optFns ...func(*ec2.Options)) (*ec2.AllocateHostsOutput, error)

	// AllocateIpamPoolCidrFunc mocks the AllocateIpamPoolCidr method.
	AllocateIpamPoolCidrFunc func(ctx context.Context, params *ec2.AllocateIpamPoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.AllocateIpamPoolCidrOutput, error)

	// ApplySecurityGroupsToClientVpnTargetNetworkFunc mocks the ApplySecurityGroupsToClientVpnTargetNetwork method.
	ApplySecurityGroupsToClientVpnTargetNetworkFunc func(ctx context.Context, params *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, optFns ...func(*ec2.Options)) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error)

	// AssignIpv6AddressesFunc mocks the AssignIpv6Addresses method.
	AssignIpv6AddressesFunc func(ctx context.Context, params *ec2.AssignIpv6AddressesInput, optFns ...func(*ec2.Options)) (*ec2.AssignIpv6AddressesOutput, error)

	// AssignPrivateIpAddressesFunc mocks the AssignPrivateIpAddresses method.
	AssignPrivateIpAddressesFunc func(ctx context.Context, params *ec2.AssignPrivateIpAddressesInput, optFns ...func(*ec2.Options)) (*ec2.AssignPrivateIpAddressesOutput, error)

	// AssociateAddressFunc mocks the AssociateAddress method.
	AssociateAddressFunc func(ctx context.Context, params *ec2.AssociateAddressInput, optFns ...func(*ec2.Options)) (*ec2.AssociateAddressOutput, error)

	// AssociateClientVpnTargetNetworkFunc mocks the AssociateClientVpnTargetNetwork method.
	AssociateClientVpnTargetNetworkFunc func(ctx context.Context, params *ec2.AssociateClientVpnTargetNetworkInput, optFns ...func(*ec2.Options)) (*ec2.AssociateClientVpnTargetNetworkOutput, error)

	// AssociateDhcpOptionsFunc mocks the AssociateDhcpOptions method.
	AssociateDhcpOptionsFunc func(ctx context.Context, params *ec2.AssociateDhcpOptionsInput, optFns ...func(*ec2.Options)) (*ec2.AssociateDhcpOptionsOutput, error)

	// AssociateEnclaveCertificateIamRoleFunc mocks the AssociateEnclaveCertificateIamRole method.
	AssociateEnclaveCertificateIamRoleFunc func(ctx context.Context, params *ec2.AssociateEnclaveCertificateIamRoleInput, optFns ...func(*ec2.Options)) (*ec2.AssociateEnclaveCertificateIamRoleOutput, error)

	// AssociateIamInstanceProfileFunc mocks the AssociateIamInstanceProfile method.
	AssociateIamInstanceProfileFunc func(ctx context.Context, params *ec2.AssociateIamInstanceProfileInput, optFns ...func(*ec2.Options)) (*ec2.AssociateIamInstanceProfileOutput, error)

	// AssociateInstanceEventWindowFunc mocks the AssociateInstanceEventWindow method.
	AssociateInstanceEventWindowFunc func(ctx context.Context, params *ec2.AssociateInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.AssociateInstanceEventWindowOutput, error)

	// AssociateRouteTableFunc mocks the AssociateRouteTable method.
	AssociateRouteTableFunc func(ctx context.Context, params *ec2.AssociateRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.AssociateRouteTableOutput, error)

	// AssociateSubnetCidrBlockFunc mocks the AssociateSubnetCidrBlock method.
	AssociateSubnetCidrBlockFunc func(ctx context.Context, params *ec2.AssociateSubnetCidrBlockInput, optFns ...func(*ec2.Options)) (*ec2.AssociateSubnetCidrBlockOutput, error)

	// AssociateTransitGatewayMulticastDomainFunc mocks the AssociateTransitGatewayMulticastDomain method.
	AssociateTransitGatewayMulticastDomainFunc func(ctx context.Context, params *ec2.AssociateTransitGatewayMulticastDomainInput, optFns ...func(*ec2.Options)) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error)

	// AssociateTransitGatewayPolicyTableFunc mocks the AssociateTransitGatewayPolicyTable method.
	AssociateTransitGatewayPolicyTableFunc func(ctx context.Context, params *ec2.AssociateTransitGatewayPolicyTableInput, optFns ...func(*ec2.Options)) (*ec2.AssociateTransitGatewayPolicyTableOutput, error)

	// AssociateTransitGatewayRouteTableFunc mocks the AssociateTransitGatewayRouteTable method.
	AssociateTransitGatewayRouteTableFunc func(ctx context.Context, params *ec2.AssociateTransitGatewayRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.AssociateTransitGatewayRouteTableOutput, error)

	// AssociateTrunkInterfaceFunc mocks the AssociateTrunkInterface method.
	AssociateTrunkInterfaceFunc func(ctx context.Context, params *ec2.AssociateTrunkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.AssociateTrunkInterfaceOutput, error)

	// AssociateVpcCidrBlockFunc mocks the AssociateVpcCidrBlock method.
	AssociateVpcCidrBlockFunc func(ctx context.Context, params *ec2.AssociateVpcCidrBlockInput, optFns ...func(*ec2.Options)) (*ec2.AssociateVpcCidrBlockOutput, error)

	// AttachClassicLinkVpcFunc mocks the AttachClassicLinkVpc method.
	AttachClassicLinkVpcFunc func(ctx context.Context, params *ec2.AttachClassicLinkVpcInput, optFns ...func(*ec2.Options)) (*ec2.AttachClassicLinkVpcOutput, error)

	// AttachInternetGatewayFunc mocks the AttachInternetGateway method.
	AttachInternetGatewayFunc func(ctx context.Context, params *ec2.AttachInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.AttachInternetGatewayOutput, error)

	// AttachNetworkInterfaceFunc mocks the AttachNetworkInterface method.
	AttachNetworkInterfaceFunc func(ctx context.Context, params *ec2.AttachNetworkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.AttachNetworkInterfaceOutput, error)

	// AttachVolumeFunc mocks the AttachVolume method.
	AttachVolumeFunc func(ctx context.Context, params *ec2.AttachVolumeInput, optFns ...func(*ec2.Options)) (*ec2.AttachVolumeOutput, error)

	// AttachVpnGatewayFunc mocks the AttachVpnGateway method.
	AttachVpnGatewayFunc func(ctx context.Context, params *ec2.AttachVpnGatewayInput, optFns ...func(*ec2.Options)) (*ec2.AttachVpnGatewayOutput, error)

	// AuthorizeClientVpnIngressFunc mocks the AuthorizeClientVpnIngress method.
	AuthorizeClientVpnIngressFunc func(ctx context.Context, params *ec2.AuthorizeClientVpnIngressInput, optFns ...func(*ec2.Options)) (*ec2.AuthorizeClientVpnIngressOutput, error)

	// AuthorizeSecurityGroupEgressFunc mocks the AuthorizeSecurityGroupEgress method.
	AuthorizeSecurityGroupEgressFunc func(ctx context.Context, params *ec2.AuthorizeSecurityGroupEgressInput, optFns ...func(*ec2.Options)) (*ec2.AuthorizeSecurityGroupEgressOutput, error)

	// AuthorizeSecurityGroupIngressFunc mocks the AuthorizeSecurityGroupIngress method.
	AuthorizeSecurityGroupIngressFunc func(ctx context.Context, params *ec2.AuthorizeSecurityGroupIngressInput, optFns ...func(*ec2.Options)) (*ec2.AuthorizeSecurityGroupIngressOutput, error)

	// BundleInstanceFunc mocks the BundleInstance method.
	BundleInstanceFunc func(ctx context.Context, params *ec2.BundleInstanceInput, optFns ...func(*ec2.Options)) (*ec2.BundleInstanceOutput, error)

	// CancelBundleTaskFunc mocks the CancelBundleTask method.
	CancelBundleTaskFunc func(ctx context.Context, params *ec2.CancelBundleTaskInput, optFns ...func(*ec2.Options)) (*ec2.CancelBundleTaskOutput, error)

	// CancelCapacityReservationFunc mocks the CancelCapacityReservation method.
	CancelCapacityReservationFunc func(ctx context.Context, params *ec2.CancelCapacityReservationInput, optFns ...func(*ec2.Options)) (*ec2.CancelCapacityReservationOutput, error)

	// CancelCapacityReservationFleetsFunc mocks the CancelCapacityReservationFleets method.
	CancelCapacityReservationFleetsFunc func(ctx context.Context, params *ec2.CancelCapacityReservationFleetsInput, optFns ...func(*ec2.Options)) (*ec2.CancelCapacityReservationFleetsOutput, error)

	// CancelConversionTaskFunc mocks the CancelConversionTask method.
	CancelConversionTaskFunc func(ctx context.Context, params *ec2.CancelConversionTaskInput, optFns ...func(*ec2.Options)) (*ec2.CancelConversionTaskOutput, error)

	// CancelExportTaskFunc mocks the CancelExportTask method.
	CancelExportTaskFunc func(ctx context.Context, params *ec2.CancelExportTaskInput, optFns ...func(*ec2.Options)) (*ec2.CancelExportTaskOutput, error)

	// CancelImportTaskFunc mocks the CancelImportTask method.
	CancelImportTaskFunc func(ctx context.Context, params *ec2.CancelImportTaskInput, optFns ...func(*ec2.Options)) (*ec2.CancelImportTaskOutput, error)

	// CancelReservedInstancesListingFunc mocks the CancelReservedInstancesListing method.
	CancelReservedInstancesListingFunc func(ctx context.Context, params *ec2.CancelReservedInstancesListingInput, optFns ...func(*ec2.Options)) (*ec2.CancelReservedInstancesListingOutput, error)

	// CancelSpotFleetRequestsFunc mocks the CancelSpotFleetRequests method.
	CancelSpotFleetRequestsFunc func(ctx context.Context, params *ec2.CancelSpotFleetRequestsInput, optFns ...func(*ec2.Options)) (*ec2.CancelSpotFleetRequestsOutput, error)

	// CancelSpotInstanceRequestsFunc mocks the CancelSpotInstanceRequests method.
	CancelSpotInstanceRequestsFunc func(ctx context.Context, params *ec2.CancelSpotInstanceRequestsInput, optFns ...func(*ec2.Options)) (*ec2.CancelSpotInstanceRequestsOutput, error)

	// ConfirmProductInstanceFunc mocks the ConfirmProductInstance method.
	ConfirmProductInstanceFunc func(ctx context.Context, params *ec2.ConfirmProductInstanceInput, optFns ...func(*ec2.Options)) (*ec2.ConfirmProductInstanceOutput, error)

	// CopyFpgaImageFunc mocks the CopyFpgaImage method.
	CopyFpgaImageFunc func(ctx context.Context, params *ec2.CopyFpgaImageInput, optFns ...func(*ec2.Options)) (*ec2.CopyFpgaImageOutput, error)

	// CopyImageFunc mocks the CopyImage method.
	CopyImageFunc func(ctx context.Context, params *ec2.CopyImageInput, optFns ...func(*ec2.Options)) (*ec2.CopyImageOutput, error)

	// CopySnapshotFunc mocks the CopySnapshot method.
	CopySnapshotFunc func(ctx context.Context, params *ec2.CopySnapshotInput, optFns ...func(*ec2.Options)) (*ec2.CopySnapshotOutput, error)

	// CreateCapacityReservationFunc mocks the CreateCapacityReservation method.
	CreateCapacityReservationFunc func(ctx context.Context, params *ec2.CreateCapacityReservationInput, optFns ...func(*ec2.Options)) (*ec2.CreateCapacityReservationOutput, error)

	// CreateCapacityReservationFleetFunc mocks the CreateCapacityReservationFleet method.
	CreateCapacityReservationFleetFunc func(ctx context.Context, params *ec2.CreateCapacityReservationFleetInput, optFns ...func(*ec2.Options)) (*ec2.CreateCapacityReservationFleetOutput, error)

	// CreateCarrierGatewayFunc mocks the CreateCarrierGateway method.
	CreateCarrierGatewayFunc func(ctx context.Context, params *ec2.CreateCarrierGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateCarrierGatewayOutput, error)

	// CreateClientVpnEndpointFunc mocks the CreateClientVpnEndpoint method.
	CreateClientVpnEndpointFunc func(ctx context.Context, params *ec2.CreateClientVpnEndpointInput, optFns ...func(*ec2.Options)) (*ec2.CreateClientVpnEndpointOutput, error)

	// CreateClientVpnRouteFunc mocks the CreateClientVpnRoute method.
	CreateClientVpnRouteFunc func(ctx context.Context, params *ec2.CreateClientVpnRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateClientVpnRouteOutput, error)

	// CreateCustomerGatewayFunc mocks the CreateCustomerGateway method.
	CreateCustomerGatewayFunc func(ctx context.Context, params *ec2.CreateCustomerGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateCustomerGatewayOutput, error)

	// CreateDefaultSubnetFunc mocks the CreateDefaultSubnet method.
	CreateDefaultSubnetFunc func(ctx context.Context, params *ec2.CreateDefaultSubnetInput, optFns ...func(*ec2.Options)) (*ec2.CreateDefaultSubnetOutput, error)

	// CreateDefaultVpcFunc mocks the CreateDefaultVpc method.
	CreateDefaultVpcFunc func(ctx context.Context, params *ec2.CreateDefaultVpcInput, optFns ...func(*ec2.Options)) (*ec2.CreateDefaultVpcOutput, error)

	// CreateDhcpOptionsFunc mocks the CreateDhcpOptions method.
	CreateDhcpOptionsFunc func(ctx context.Context, params *ec2.CreateDhcpOptionsInput, optFns ...func(*ec2.Options)) (*ec2.CreateDhcpOptionsOutput, error)

	// CreateEgressOnlyInternetGatewayFunc mocks the CreateEgressOnlyInternetGateway method.
	CreateEgressOnlyInternetGatewayFunc func(ctx context.Context, params *ec2.CreateEgressOnlyInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateEgressOnlyInternetGatewayOutput, error)

	// CreateFleetFunc mocks the CreateFleet method.
	CreateFleetFunc func(ctx context.Context, params *ec2.CreateFleetInput, optFns ...func(*ec2.Options)) (*ec2.CreateFleetOutput, error)

	// CreateFlowLogsFunc mocks the CreateFlowLogs method.
	CreateFlowLogsFunc func(ctx context.Context, params *ec2.CreateFlowLogsInput, optFns ...func(*ec2.Options)) (*ec2.CreateFlowLogsOutput, error)

	// CreateFpgaImageFunc mocks the CreateFpgaImage method.
	CreateFpgaImageFunc func(ctx context.Context, params *ec2.CreateFpgaImageInput, optFns ...func(*ec2.Options)) (*ec2.CreateFpgaImageOutput, error)

	// CreateImageFunc mocks the CreateImage method.
	CreateImageFunc func(ctx context.Context, params *ec2.CreateImageInput, optFns ...func(*ec2.Options)) (*ec2.CreateImageOutput, error)

	// CreateInstanceEventWindowFunc mocks the CreateInstanceEventWindow method.
	CreateInstanceEventWindowFunc func(ctx context.Context, params *ec2.CreateInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.CreateInstanceEventWindowOutput, error)

	// CreateInstanceExportTaskFunc mocks the CreateInstanceExportTask method.
	CreateInstanceExportTaskFunc func(ctx context.Context, params *ec2.CreateInstanceExportTaskInput, optFns ...func(*ec2.Options)) (*ec2.CreateInstanceExportTaskOutput, error)

	// CreateInternetGatewayFunc mocks the CreateInternetGateway method.
	CreateInternetGatewayFunc func(ctx context.Context, params *ec2.CreateInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateInternetGatewayOutput, error)

	// CreateIpamFunc mocks the CreateIpam method.
	CreateIpamFunc func(ctx context.Context, params *ec2.CreateIpamInput, optFns ...func(*ec2.Options)) (*ec2.CreateIpamOutput, error)

	// CreateIpamPoolFunc mocks the CreateIpamPool method.
	CreateIpamPoolFunc func(ctx context.Context, params *ec2.CreateIpamPoolInput, optFns ...func(*ec2.Options)) (*ec2.CreateIpamPoolOutput, error)

	// CreateIpamScopeFunc mocks the CreateIpamScope method.
	CreateIpamScopeFunc func(ctx context.Context, params *ec2.CreateIpamScopeInput, optFns ...func(*ec2.Options)) (*ec2.CreateIpamScopeOutput, error)

	// CreateKeyPairFunc mocks the CreateKeyPair method.
	CreateKeyPairFunc func(ctx context.Context, params *ec2.CreateKeyPairInput, optFns ...func(*ec2.Options)) (*ec2.CreateKeyPairOutput, error)

	// CreateLaunchTemplateFunc mocks the CreateLaunchTemplate method.
	CreateLaunchTemplateFunc func(ctx context.Context, params *ec2.CreateLaunchTemplateInput, optFns ...func(*ec2.Options)) (*ec2.CreateLaunchTemplateOutput, error)

	// CreateLaunchTemplateVersionFunc mocks the CreateLaunchTemplateVersion method.
	CreateLaunchTemplateVersionFunc func(ctx context.Context, params *ec2.CreateLaunchTemplateVersionInput, optFns ...func(*ec2.Options)) (*ec2.CreateLaunchTemplateVersionOutput, error)

	// CreateLocalGatewayRouteFunc mocks the CreateLocalGatewayRoute method.
	CreateLocalGatewayRouteFunc func(ctx context.Context, params *ec2.CreateLocalGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateLocalGatewayRouteOutput, error)

	// CreateLocalGatewayRouteTableVpcAssociationFunc mocks the CreateLocalGatewayRouteTableVpcAssociation method.
	CreateLocalGatewayRouteTableVpcAssociationFunc func(ctx context.Context, params *ec2.CreateLocalGatewayRouteTableVpcAssociationInput, optFns ...func(*ec2.Options)) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error)

	// CreateManagedPrefixListFunc mocks the CreateManagedPrefixList method.
	CreateManagedPrefixListFunc func(ctx context.Context, params *ec2.CreateManagedPrefixListInput, optFns ...func(*ec2.Options)) (*ec2.CreateManagedPrefixListOutput, error)

	// CreateNatGatewayFunc mocks the CreateNatGateway method.
	CreateNatGatewayFunc func(ctx context.Context, params *ec2.CreateNatGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateNatGatewayOutput, error)

	// CreateNetworkAclFunc mocks the CreateNetworkAcl method.
	CreateNetworkAclFunc func(ctx context.Context, params *ec2.CreateNetworkAclInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkAclOutput, error)

	// CreateNetworkAclEntryFunc mocks the CreateNetworkAclEntry method.
	CreateNetworkAclEntryFunc func(ctx context.Context, params *ec2.CreateNetworkAclEntryInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkAclEntryOutput, error)

	// CreateNetworkInsightsAccessScopeFunc mocks the CreateNetworkInsightsAccessScope method.
	CreateNetworkInsightsAccessScopeFunc func(ctx context.Context, params *ec2.CreateNetworkInsightsAccessScopeInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkInsightsAccessScopeOutput, error)

	// CreateNetworkInsightsPathFunc mocks the CreateNetworkInsightsPath method.
	CreateNetworkInsightsPathFunc func(ctx context.Context, params *ec2.CreateNetworkInsightsPathInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkInsightsPathOutput, error)

	// CreateNetworkInterfaceFunc mocks the CreateNetworkInterface method.
	CreateNetworkInterfaceFunc func(ctx context.Context, params *ec2.CreateNetworkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkInterfaceOutput, error)

	// CreateNetworkInterfacePermissionFunc mocks the CreateNetworkInterfacePermission method.
	CreateNetworkInterfacePermissionFunc func(ctx context.Context, params *ec2.CreateNetworkInterfacePermissionInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkInterfacePermissionOutput, error)

	// CreatePlacementGroupFunc mocks the CreatePlacementGroup method.
	CreatePlacementGroupFunc func(ctx context.Context, params *ec2.CreatePlacementGroupInput, optFns ...func(*ec2.Options)) (*ec2.CreatePlacementGroupOutput, error)

	// CreatePublicIpv4PoolFunc mocks the CreatePublicIpv4Pool method.
	CreatePublicIpv4PoolFunc func(ctx context.Context, params *ec2.CreatePublicIpv4PoolInput, optFns ...func(*ec2.Options)) (*ec2.CreatePublicIpv4PoolOutput, error)

	// CreateReplaceRootVolumeTaskFunc mocks the CreateReplaceRootVolumeTask method.
	CreateReplaceRootVolumeTaskFunc func(ctx context.Context, params *ec2.CreateReplaceRootVolumeTaskInput, optFns ...func(*ec2.Options)) (*ec2.CreateReplaceRootVolumeTaskOutput, error)

	// CreateReservedInstancesListingFunc mocks the CreateReservedInstancesListing method.
	CreateReservedInstancesListingFunc func(ctx context.Context, params *ec2.CreateReservedInstancesListingInput, optFns ...func(*ec2.Options)) (*ec2.CreateReservedInstancesListingOutput, error)

	// CreateRestoreImageTaskFunc mocks the CreateRestoreImageTask method.
	CreateRestoreImageTaskFunc func(ctx context.Context, params *ec2.CreateRestoreImageTaskInput, optFns ...func(*ec2.Options)) (*ec2.CreateRestoreImageTaskOutput, error)

	// CreateRouteFunc mocks the CreateRoute method.
	CreateRouteFunc func(ctx context.Context, params *ec2.CreateRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateRouteOutput, error)

	// CreateRouteTableFunc mocks the CreateRouteTable method.
	CreateRouteTableFunc func(ctx context.Context, params *ec2.CreateRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.CreateRouteTableOutput, error)

	// CreateSecurityGroupFunc mocks the CreateSecurityGroup method.
	CreateSecurityGroupFunc func(ctx context.Context, params *ec2.CreateSecurityGroupInput, optFns ...func(*ec2.Options)) (*ec2.CreateSecurityGroupOutput, error)

	// CreateSnapshotFunc mocks the CreateSnapshot method.
	CreateSnapshotFunc func(ctx context.Context, params *ec2.CreateSnapshotInput, optFns ...func(*ec2.Options)) (*ec2.CreateSnapshotOutput, error)

	// CreateSnapshotsFunc mocks the CreateSnapshots method.
	CreateSnapshotsFunc func(ctx context.Context, params *ec2.CreateSnapshotsInput, optFns ...func(*ec2.Options)) (*ec2.CreateSnapshotsOutput, error)

	// CreateSpotDatafeedSubscriptionFunc mocks the CreateSpotDatafeedSubscription method.
	CreateSpotDatafeedSubscriptionFunc func(ctx context.Context, params *ec2.CreateSpotDatafeedSubscriptionInput, optFns ...func(*ec2.Options)) (*ec2.CreateSpotDatafeedSubscriptionOutput, error)

	// CreateStoreImageTaskFunc mocks the CreateStoreImageTask method.
	CreateStoreImageTaskFunc func(ctx context.Context, params *ec2.CreateStoreImageTaskInput, optFns ...func(*ec2.Options)) (*ec2.CreateStoreImageTaskOutput, error)

	// CreateSubnetFunc mocks the CreateSubnet method.
	CreateSubnetFunc func(ctx context.Context, params *ec2.CreateSubnetInput, optFns ...func(*ec2.Options)) (*ec2.CreateSubnetOutput, error)

	// CreateSubnetCidrReservationFunc mocks the CreateSubnetCidrReservation method.
	CreateSubnetCidrReservationFunc func(ctx context.Context, params *ec2.CreateSubnetCidrReservationInput, optFns ...func(*ec2.Options)) (*ec2.CreateSubnetCidrReservationOutput, error)

	// CreateTagsFunc mocks the CreateTags method.
	CreateTagsFunc func(ctx context.Context, params *ec2.CreateTagsInput, optFns ...func(*ec2.Options)) (*ec2.CreateTagsOutput, error)

	// CreateTrafficMirrorFilterFunc mocks the CreateTrafficMirrorFilter method.
	CreateTrafficMirrorFilterFunc func(ctx context.Context, params *ec2.CreateTrafficMirrorFilterInput, optFns ...func(*ec2.Options)) (*ec2.CreateTrafficMirrorFilterOutput, error)

	// CreateTrafficMirrorFilterRuleFunc mocks the CreateTrafficMirrorFilterRule method.
	CreateTrafficMirrorFilterRuleFunc func(ctx context.Context, params *ec2.CreateTrafficMirrorFilterRuleInput, optFns ...func(*ec2.Options)) (*ec2.CreateTrafficMirrorFilterRuleOutput, error)

	// CreateTrafficMirrorSessionFunc mocks the CreateTrafficMirrorSession method.
	CreateTrafficMirrorSessionFunc func(ctx context.Context, params *ec2.CreateTrafficMirrorSessionInput, optFns ...func(*ec2.Options)) (*ec2.CreateTrafficMirrorSessionOutput, error)

	// CreateTrafficMirrorTargetFunc mocks the CreateTrafficMirrorTarget method.
	CreateTrafficMirrorTargetFunc func(ctx context.Context, params *ec2.CreateTrafficMirrorTargetInput, optFns ...func(*ec2.Options)) (*ec2.CreateTrafficMirrorTargetOutput, error)

	// CreateTransitGatewayFunc mocks the CreateTransitGateway method.
	CreateTransitGatewayFunc func(ctx context.Context, params *ec2.CreateTransitGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayOutput, error)

	// CreateTransitGatewayConnectFunc mocks the CreateTransitGatewayConnect method.
	CreateTransitGatewayConnectFunc func(ctx context.Context, params *ec2.CreateTransitGatewayConnectInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayConnectOutput, error)

	// CreateTransitGatewayConnectPeerFunc mocks the CreateTransitGatewayConnectPeer method.
	CreateTransitGatewayConnectPeerFunc func(ctx context.Context, params *ec2.CreateTransitGatewayConnectPeerInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayConnectPeerOutput, error)

	// CreateTransitGatewayMulticastDomainFunc mocks the CreateTransitGatewayMulticastDomain method.
	CreateTransitGatewayMulticastDomainFunc func(ctx context.Context, params *ec2.CreateTransitGatewayMulticastDomainInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayMulticastDomainOutput, error)

	// CreateTransitGatewayPeeringAttachmentFunc mocks the CreateTransitGatewayPeeringAttachment method.
	CreateTransitGatewayPeeringAttachmentFunc func(ctx context.Context, params *ec2.CreateTransitGatewayPeeringAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error)

	// CreateTransitGatewayPolicyTableFunc mocks the CreateTransitGatewayPolicyTable method.
	CreateTransitGatewayPolicyTableFunc func(ctx context.Context, params *ec2.CreateTransitGatewayPolicyTableInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayPolicyTableOutput, error)

	// CreateTransitGatewayPrefixListReferenceFunc mocks the CreateTransitGatewayPrefixListReference method.
	CreateTransitGatewayPrefixListReferenceFunc func(ctx context.Context, params *ec2.CreateTransitGatewayPrefixListReferenceInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayPrefixListReferenceOutput, error)

	// CreateTransitGatewayRouteFunc mocks the CreateTransitGatewayRoute method.
	CreateTransitGatewayRouteFunc func(ctx context.Context, params *ec2.CreateTransitGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayRouteOutput, error)

	// CreateTransitGatewayRouteTableFunc mocks the CreateTransitGatewayRouteTable method.
	CreateTransitGatewayRouteTableFunc func(ctx context.Context, params *ec2.CreateTransitGatewayRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayRouteTableOutput, error)

	// CreateTransitGatewayRouteTableAnnouncementFunc mocks the CreateTransitGatewayRouteTableAnnouncement method.
	CreateTransitGatewayRouteTableAnnouncementFunc func(ctx context.Context, params *ec2.CreateTransitGatewayRouteTableAnnouncementInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayRouteTableAnnouncementOutput, error)

	// CreateTransitGatewayVpcAttachmentFunc mocks the CreateTransitGatewayVpcAttachment method.
	CreateTransitGatewayVpcAttachmentFunc func(ctx context.Context, params *ec2.CreateTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error)

	// CreateVolumeFunc mocks the CreateVolume method.
	CreateVolumeFunc func(ctx context.Context, params *ec2.CreateVolumeInput, optFns ...func(*ec2.Options)) (*ec2.CreateVolumeOutput, error)

	// CreateVpcFunc mocks the CreateVpc method.
	CreateVpcFunc func(ctx context.Context, params *ec2.CreateVpcInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcOutput, error)

	// CreateVpcEndpointFunc mocks the CreateVpcEndpoint method.
	CreateVpcEndpointFunc func(ctx context.Context, params *ec2.CreateVpcEndpointInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcEndpointOutput, error)

	// CreateVpcEndpointConnectionNotificationFunc mocks the CreateVpcEndpointConnectionNotification method.
	CreateVpcEndpointConnectionNotificationFunc func(ctx context.Context, params *ec2.CreateVpcEndpointConnectionNotificationInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error)

	// CreateVpcEndpointServiceConfigurationFunc mocks the CreateVpcEndpointServiceConfiguration method.
	CreateVpcEndpointServiceConfigurationFunc func(ctx context.Context, params *ec2.CreateVpcEndpointServiceConfigurationInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error)

	// CreateVpcPeeringConnectionFunc mocks the CreateVpcPeeringConnection method.
	CreateVpcPeeringConnectionFunc func(ctx context.Context, params *ec2.CreateVpcPeeringConnectionInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcPeeringConnectionOutput, error)

	// CreateVpnConnectionFunc mocks the CreateVpnConnection method.
	CreateVpnConnectionFunc func(ctx context.Context, params *ec2.CreateVpnConnectionInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpnConnectionOutput, error)

	// CreateVpnConnectionRouteFunc mocks the CreateVpnConnectionRoute method.
	CreateVpnConnectionRouteFunc func(ctx context.Context, params *ec2.CreateVpnConnectionRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpnConnectionRouteOutput, error)

	// CreateVpnGatewayFunc mocks the CreateVpnGateway method.
	CreateVpnGatewayFunc func(ctx context.Context, params *ec2.CreateVpnGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpnGatewayOutput, error)

	// DeleteCarrierGatewayFunc mocks the DeleteCarrierGateway method.
	DeleteCarrierGatewayFunc func(ctx context.Context, params *ec2.DeleteCarrierGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteCarrierGatewayOutput, error)

	// DeleteClientVpnEndpointFunc mocks the DeleteClientVpnEndpoint method.
	DeleteClientVpnEndpointFunc func(ctx context.Context, params *ec2.DeleteClientVpnEndpointInput, optFns ...func(*ec2.Options)) (*ec2.DeleteClientVpnEndpointOutput, error)

	// DeleteClientVpnRouteFunc mocks the DeleteClientVpnRoute method.
	DeleteClientVpnRouteFunc func(ctx context.Context, params *ec2.DeleteClientVpnRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteClientVpnRouteOutput, error)

	// DeleteCustomerGatewayFunc mocks the DeleteCustomerGateway method.
	DeleteCustomerGatewayFunc func(ctx context.Context, params *ec2.DeleteCustomerGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteCustomerGatewayOutput, error)

	// DeleteDhcpOptionsFunc mocks the DeleteDhcpOptions method.
	DeleteDhcpOptionsFunc func(ctx context.Context, params *ec2.DeleteDhcpOptionsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteDhcpOptionsOutput, error)

	// DeleteEgressOnlyInternetGatewayFunc mocks the DeleteEgressOnlyInternetGateway method.
	DeleteEgressOnlyInternetGatewayFunc func(ctx context.Context, params *ec2.DeleteEgressOnlyInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error)

	// DeleteFleetsFunc mocks the DeleteFleets method.
	DeleteFleetsFunc func(ctx context.Context, params *ec2.DeleteFleetsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteFleetsOutput, error)

	// DeleteFlowLogsFunc mocks the DeleteFlowLogs method.
	DeleteFlowLogsFunc func(ctx context.Context, params *ec2.DeleteFlowLogsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteFlowLogsOutput, error)

	// DeleteFpgaImageFunc mocks the DeleteFpgaImage method.
	DeleteFpgaImageFunc func(ctx context.Context, params *ec2.DeleteFpgaImageInput, optFns ...func(*ec2.Options)) (*ec2.DeleteFpgaImageOutput, error)

	// DeleteInstanceEventWindowFunc mocks the DeleteInstanceEventWindow method.
	DeleteInstanceEventWindowFunc func(ctx context.Context, params *ec2.DeleteInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.DeleteInstanceEventWindowOutput, error)

	// DeleteInternetGatewayFunc mocks the DeleteInternetGateway method.
	DeleteInternetGatewayFunc func(ctx context.Context, params *ec2.DeleteInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteInternetGatewayOutput, error)

	// DeleteIpamFunc mocks the DeleteIpam method.
	DeleteIpamFunc func(ctx context.Context, params *ec2.DeleteIpamInput, optFns ...func(*ec2.Options)) (*ec2.DeleteIpamOutput, error)

	// DeleteIpamPoolFunc mocks the DeleteIpamPool method.
	DeleteIpamPoolFunc func(ctx context.Context, params *ec2.DeleteIpamPoolInput, optFns ...func(*ec2.Options)) (*ec2.DeleteIpamPoolOutput, error)

	// DeleteIpamScopeFunc mocks the DeleteIpamScope method.
	DeleteIpamScopeFunc func(ctx context.Context, params *ec2.DeleteIpamScopeInput, optFns ...func(*ec2.Options)) (*ec2.DeleteIpamScopeOutput, error)

	// DeleteKeyPairFunc mocks the DeleteKeyPair method.
	DeleteKeyPairFunc func(ctx context.Context, params *ec2.DeleteKeyPairInput, optFns ...func(*ec2.Options)) (*ec2.DeleteKeyPairOutput, error)

	// DeleteLaunchTemplateFunc mocks the DeleteLaunchTemplate method.
	DeleteLaunchTemplateFunc func(ctx context.Context, params *ec2.DeleteLaunchTemplateInput, optFns ...func(*ec2.Options)) (*ec2.DeleteLaunchTemplateOutput, error)

	// DeleteLaunchTemplateVersionsFunc mocks the DeleteLaunchTemplateVersions method.
	DeleteLaunchTemplateVersionsFunc func(ctx context.Context, params *ec2.DeleteLaunchTemplateVersionsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteLaunchTemplateVersionsOutput, error)

	// DeleteLocalGatewayRouteFunc mocks the DeleteLocalGatewayRoute method.
	DeleteLocalGatewayRouteFunc func(ctx context.Context, params *ec2.DeleteLocalGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteLocalGatewayRouteOutput, error)

	// DeleteLocalGatewayRouteTableVpcAssociationFunc mocks the DeleteLocalGatewayRouteTableVpcAssociation method.
	DeleteLocalGatewayRouteTableVpcAssociationFunc func(ctx context.Context, params *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput, optFns ...func(*ec2.Options)) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error)

	// DeleteManagedPrefixListFunc mocks the DeleteManagedPrefixList method.
	DeleteManagedPrefixListFunc func(ctx context.Context, params *ec2.DeleteManagedPrefixListInput, optFns ...func(*ec2.Options)) (*ec2.DeleteManagedPrefixListOutput, error)

	// DeleteNatGatewayFunc mocks the DeleteNatGateway method.
	DeleteNatGatewayFunc func(ctx context.Context, params *ec2.DeleteNatGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNatGatewayOutput, error)

	// DeleteNetworkAclFunc mocks the DeleteNetworkAcl method.
	DeleteNetworkAclFunc func(ctx context.Context, params *ec2.DeleteNetworkAclInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkAclOutput, error)

	// DeleteNetworkAclEntryFunc mocks the DeleteNetworkAclEntry method.
	DeleteNetworkAclEntryFunc func(ctx context.Context, params *ec2.DeleteNetworkAclEntryInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkAclEntryOutput, error)

	// DeleteNetworkInsightsAccessScopeFunc mocks the DeleteNetworkInsightsAccessScope method.
	DeleteNetworkInsightsAccessScopeFunc func(ctx context.Context, params *ec2.DeleteNetworkInsightsAccessScopeInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInsightsAccessScopeOutput, error)

	// DeleteNetworkInsightsAccessScopeAnalysisFunc mocks the DeleteNetworkInsightsAccessScopeAnalysis method.
	DeleteNetworkInsightsAccessScopeAnalysisFunc func(ctx context.Context, params *ec2.DeleteNetworkInsightsAccessScopeAnalysisInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInsightsAccessScopeAnalysisOutput, error)

	// DeleteNetworkInsightsAnalysisFunc mocks the DeleteNetworkInsightsAnalysis method.
	DeleteNetworkInsightsAnalysisFunc func(ctx context.Context, params *ec2.DeleteNetworkInsightsAnalysisInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInsightsAnalysisOutput, error)

	// DeleteNetworkInsightsPathFunc mocks the DeleteNetworkInsightsPath method.
	DeleteNetworkInsightsPathFunc func(ctx context.Context, params *ec2.DeleteNetworkInsightsPathInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInsightsPathOutput, error)

	// DeleteNetworkInterfaceFunc mocks the DeleteNetworkInterface method.
	DeleteNetworkInterfaceFunc func(ctx context.Context, params *ec2.DeleteNetworkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInterfaceOutput, error)

	// DeleteNetworkInterfacePermissionFunc mocks the DeleteNetworkInterfacePermission method.
	DeleteNetworkInterfacePermissionFunc func(ctx context.Context, params *ec2.DeleteNetworkInterfacePermissionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInterfacePermissionOutput, error)

	// DeletePlacementGroupFunc mocks the DeletePlacementGroup method.
	DeletePlacementGroupFunc func(ctx context.Context, params *ec2.DeletePlacementGroupInput, optFns ...func(*ec2.Options)) (*ec2.DeletePlacementGroupOutput, error)

	// DeletePublicIpv4PoolFunc mocks the DeletePublicIpv4Pool method.
	DeletePublicIpv4PoolFunc func(ctx context.Context, params *ec2.DeletePublicIpv4PoolInput, optFns ...func(*ec2.Options)) (*ec2.DeletePublicIpv4PoolOutput, error)

	// DeleteQueuedReservedInstancesFunc mocks the DeleteQueuedReservedInstances method.
	DeleteQueuedReservedInstancesFunc func(ctx context.Context, params *ec2.DeleteQueuedReservedInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DeleteQueuedReservedInstancesOutput, error)

	// DeleteRouteFunc mocks the DeleteRoute method.
	DeleteRouteFunc func(ctx context.Context, params *ec2.DeleteRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteRouteOutput, error)

	// DeleteRouteTableFunc mocks the DeleteRouteTable method.
	DeleteRouteTableFunc func(ctx context.Context, params *ec2.DeleteRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.DeleteRouteTableOutput, error)

	// DeleteSecurityGroupFunc mocks the DeleteSecurityGroup method.
	DeleteSecurityGroupFunc func(ctx context.Context, params *ec2.DeleteSecurityGroupInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSecurityGroupOutput, error)

	// DeleteSnapshotFunc mocks the DeleteSnapshot method.
	DeleteSnapshotFunc func(ctx context.Context, params *ec2.DeleteSnapshotInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSnapshotOutput, error)

	// DeleteSpotDatafeedSubscriptionFunc mocks the DeleteSpotDatafeedSubscription method.
	DeleteSpotDatafeedSubscriptionFunc func(ctx context.Context, params *ec2.DeleteSpotDatafeedSubscriptionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error)

	// DeleteSubnetFunc mocks the DeleteSubnet method.
	DeleteSubnetFunc func(ctx context.Context, params *ec2.DeleteSubnetInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSubnetOutput, error)

	// DeleteSubnetCidrReservationFunc mocks the DeleteSubnetCidrReservation method.
	DeleteSubnetCidrReservationFunc func(ctx context.Context, params *ec2.DeleteSubnetCidrReservationInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSubnetCidrReservationOutput, error)

	// DeleteTagsFunc mocks the DeleteTags method.
	DeleteTagsFunc func(ctx context.Context, params *ec2.DeleteTagsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTagsOutput, error)

	// DeleteTrafficMirrorFilterFunc mocks the DeleteTrafficMirrorFilter method.
	DeleteTrafficMirrorFilterFunc func(ctx context.Context, params *ec2.DeleteTrafficMirrorFilterInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTrafficMirrorFilterOutput, error)

	// DeleteTrafficMirrorFilterRuleFunc mocks the DeleteTrafficMirrorFilterRule method.
	DeleteTrafficMirrorFilterRuleFunc func(ctx context.Context, params *ec2.DeleteTrafficMirrorFilterRuleInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error)

	// DeleteTrafficMirrorSessionFunc mocks the DeleteTrafficMirrorSession method.
	DeleteTrafficMirrorSessionFunc func(ctx context.Context, params *ec2.DeleteTrafficMirrorSessionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTrafficMirrorSessionOutput, error)

	// DeleteTrafficMirrorTargetFunc mocks the DeleteTrafficMirrorTarget method.
	DeleteTrafficMirrorTargetFunc func(ctx context.Context, params *ec2.DeleteTrafficMirrorTargetInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTrafficMirrorTargetOutput, error)

	// DeleteTransitGatewayFunc mocks the DeleteTransitGateway method.
	DeleteTransitGatewayFunc func(ctx context.Context, params *ec2.DeleteTransitGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayOutput, error)

	// DeleteTransitGatewayConnectFunc mocks the DeleteTransitGatewayConnect method.
	DeleteTransitGatewayConnectFunc func(ctx context.Context, params *ec2.DeleteTransitGatewayConnectInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayConnectOutput, error)

	// DeleteTransitGatewayConnectPeerFunc mocks the DeleteTransitGatewayConnectPeer method.
	DeleteTransitGatewayConnectPeerFunc func(ctx context.Context, params *ec2.DeleteTransitGatewayConnectPeerInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayConnectPeerOutput, error)

	// DeleteTransitGatewayMulticastDomainFunc mocks the DeleteTransitGatewayMulticastDomain method.
	DeleteTransitGatewayMulticastDomainFunc func(ctx context.Context, params *ec2.DeleteTransitGatewayMulticastDomainInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error)

	// DeleteTransitGatewayPeeringAttachmentFunc mocks the DeleteTransitGatewayPeeringAttachment method.
	DeleteTransitGatewayPeeringAttachmentFunc func(ctx context.Context, params *ec2.DeleteTransitGatewayPeeringAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error)

	// DeleteTransitGatewayPolicyTableFunc mocks the DeleteTransitGatewayPolicyTable method.
	DeleteTransitGatewayPolicyTableFunc func(ctx context.Context, params *ec2.DeleteTransitGatewayPolicyTableInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayPolicyTableOutput, error)

	// DeleteTransitGatewayPrefixListReferenceFunc mocks the DeleteTransitGatewayPrefixListReference method.
	DeleteTransitGatewayPrefixListReferenceFunc func(ctx context.Context, params *ec2.DeleteTransitGatewayPrefixListReferenceInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayPrefixListReferenceOutput, error)

	// DeleteTransitGatewayRouteFunc mocks the DeleteTransitGatewayRoute method.
	DeleteTransitGatewayRouteFunc func(ctx context.Context, params *ec2.DeleteTransitGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayRouteOutput, error)

	// DeleteTransitGatewayRouteTableFunc mocks the DeleteTransitGatewayRouteTable method.
	DeleteTransitGatewayRouteTableFunc func(ctx context.Context, params *ec2.DeleteTransitGatewayRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayRouteTableOutput, error)

	// DeleteTransitGatewayRouteTableAnnouncementFunc mocks the DeleteTransitGatewayRouteTableAnnouncement method.
	DeleteTransitGatewayRouteTableAnnouncementFunc func(ctx context.Context, params *ec2.DeleteTransitGatewayRouteTableAnnouncementInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayRouteTableAnnouncementOutput, error)

	// DeleteTransitGatewayVpcAttachmentFunc mocks the DeleteTransitGatewayVpcAttachment method.
	DeleteTransitGatewayVpcAttachmentFunc func(ctx context.Context, params *ec2.DeleteTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error)

	// DeleteVolumeFunc mocks the DeleteVolume method.
	DeleteVolumeFunc func(ctx context.Context, params *ec2.DeleteVolumeInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVolumeOutput, error)

	// DeleteVpcFunc mocks the DeleteVpc method.
	DeleteVpcFunc func(ctx context.Context, params *ec2.DeleteVpcInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcOutput, error)

	// DeleteVpcEndpointConnectionNotificationsFunc mocks the DeleteVpcEndpointConnectionNotifications method.
	DeleteVpcEndpointConnectionNotificationsFunc func(ctx context.Context, params *ec2.DeleteVpcEndpointConnectionNotificationsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error)

	// DeleteVpcEndpointServiceConfigurationsFunc mocks the DeleteVpcEndpointServiceConfigurations method.
	DeleteVpcEndpointServiceConfigurationsFunc func(ctx context.Context, params *ec2.DeleteVpcEndpointServiceConfigurationsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error)

	// DeleteVpcEndpointsFunc mocks the DeleteVpcEndpoints method.
	DeleteVpcEndpointsFunc func(ctx context.Context, params *ec2.DeleteVpcEndpointsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcEndpointsOutput, error)

	// DeleteVpcPeeringConnectionFunc mocks the DeleteVpcPeeringConnection method.
	DeleteVpcPeeringConnectionFunc func(ctx context.Context, params *ec2.DeleteVpcPeeringConnectionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcPeeringConnectionOutput, error)

	// DeleteVpnConnectionFunc mocks the DeleteVpnConnection method.
	DeleteVpnConnectionFunc func(ctx context.Context, params *ec2.DeleteVpnConnectionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpnConnectionOutput, error)

	// DeleteVpnConnectionRouteFunc mocks the DeleteVpnConnectionRoute method.
	DeleteVpnConnectionRouteFunc func(ctx context.Context, params *ec2.DeleteVpnConnectionRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpnConnectionRouteOutput, error)

	// DeleteVpnGatewayFunc mocks the DeleteVpnGateway method.
	DeleteVpnGatewayFunc func(ctx context.Context, params *ec2.DeleteVpnGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpnGatewayOutput, error)

	// DeprovisionByoipCidrFunc mocks the DeprovisionByoipCidr method.
	DeprovisionByoipCidrFunc func(ctx context.Context, params *ec2.DeprovisionByoipCidrInput, optFns ...func(*ec2.Options)) (*ec2.DeprovisionByoipCidrOutput, error)

	// DeprovisionIpamPoolCidrFunc mocks the DeprovisionIpamPoolCidr method.
	DeprovisionIpamPoolCidrFunc func(ctx context.Context, params *ec2.DeprovisionIpamPoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.DeprovisionIpamPoolCidrOutput, error)

	// DeprovisionPublicIpv4PoolCidrFunc mocks the DeprovisionPublicIpv4PoolCidr method.
	DeprovisionPublicIpv4PoolCidrFunc func(ctx context.Context, params *ec2.DeprovisionPublicIpv4PoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.DeprovisionPublicIpv4PoolCidrOutput, error)

	// DeregisterImageFunc mocks the DeregisterImage method.
	DeregisterImageFunc func(ctx context.Context, params *ec2.DeregisterImageInput, optFns ...func(*ec2.Options)) (*ec2.DeregisterImageOutput, error)

	// DeregisterInstanceEventNotificationAttributesFunc mocks the DeregisterInstanceEventNotificationAttributes method.
	DeregisterInstanceEventNotificationAttributesFunc func(ctx context.Context, params *ec2.DeregisterInstanceEventNotificationAttributesInput, optFns ...func(*ec2.Options)) (*ec2.DeregisterInstanceEventNotificationAttributesOutput, error)

	// DeregisterTransitGatewayMulticastGroupMembersFunc mocks the DeregisterTransitGatewayMulticastGroupMembers method.
	DeregisterTransitGatewayMulticastGroupMembersFunc func(ctx context.Context, params *ec2.DeregisterTransitGatewayMulticastGroupMembersInput, optFns ...func(*ec2.Options)) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error)

	// DeregisterTransitGatewayMulticastGroupSourcesFunc mocks the DeregisterTransitGatewayMulticastGroupSources method.
	DeregisterTransitGatewayMulticastGroupSourcesFunc func(ctx context.Context, params *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput, optFns ...func(*ec2.Options)) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error)

	// DescribeAccountAttributesFunc mocks the DescribeAccountAttributes method.
	DescribeAccountAttributesFunc func(ctx context.Context, params *ec2.DescribeAccountAttributesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAccountAttributesOutput, error)

	// DescribeAddressesFunc mocks the DescribeAddresses method.
	DescribeAddressesFunc func(ctx context.Context, params *ec2.DescribeAddressesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAddressesOutput, error)

	// DescribeAddressesAttributeFunc mocks the DescribeAddressesAttribute method.
	DescribeAddressesAttributeFunc func(ctx context.Context, params *ec2.DescribeAddressesAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAddressesAttributeOutput, error)

	// DescribeAggregateIdFormatFunc mocks the DescribeAggregateIdFormat method.
	DescribeAggregateIdFormatFunc func(ctx context.Context, params *ec2.DescribeAggregateIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAggregateIdFormatOutput, error)

	// DescribeAvailabilityZonesFunc mocks the DescribeAvailabilityZones method.
	DescribeAvailabilityZonesFunc func(ctx context.Context, params *ec2.DescribeAvailabilityZonesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAvailabilityZonesOutput, error)

	// DescribeBundleTasksFunc mocks the DescribeBundleTasks method.
	DescribeBundleTasksFunc func(ctx context.Context, params *ec2.DescribeBundleTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeBundleTasksOutput, error)

	// DescribeByoipCidrsFunc mocks the DescribeByoipCidrs method.
	DescribeByoipCidrsFunc func(ctx context.Context, params *ec2.DescribeByoipCidrsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeByoipCidrsOutput, error)

	// DescribeCapacityReservationFleetsFunc mocks the DescribeCapacityReservationFleets method.
	DescribeCapacityReservationFleetsFunc func(ctx context.Context, params *ec2.DescribeCapacityReservationFleetsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCapacityReservationFleetsOutput, error)

	// DescribeCapacityReservationsFunc mocks the DescribeCapacityReservations method.
	DescribeCapacityReservationsFunc func(ctx context.Context, params *ec2.DescribeCapacityReservationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCapacityReservationsOutput, error)

	// DescribeCarrierGatewaysFunc mocks the DescribeCarrierGateways method.
	DescribeCarrierGatewaysFunc func(ctx context.Context, params *ec2.DescribeCarrierGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCarrierGatewaysOutput, error)

	// DescribeClassicLinkInstancesFunc mocks the DescribeClassicLinkInstances method.
	DescribeClassicLinkInstancesFunc func(ctx context.Context, params *ec2.DescribeClassicLinkInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClassicLinkInstancesOutput, error)

	// DescribeClientVpnAuthorizationRulesFunc mocks the DescribeClientVpnAuthorizationRules method.
	DescribeClientVpnAuthorizationRulesFunc func(ctx context.Context, params *ec2.DescribeClientVpnAuthorizationRulesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error)

	// DescribeClientVpnConnectionsFunc mocks the DescribeClientVpnConnections method.
	DescribeClientVpnConnectionsFunc func(ctx context.Context, params *ec2.DescribeClientVpnConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnConnectionsOutput, error)

	// DescribeClientVpnEndpointsFunc mocks the DescribeClientVpnEndpoints method.
	DescribeClientVpnEndpointsFunc func(ctx context.Context, params *ec2.DescribeClientVpnEndpointsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnEndpointsOutput, error)

	// DescribeClientVpnRoutesFunc mocks the DescribeClientVpnRoutes method.
	DescribeClientVpnRoutesFunc func(ctx context.Context, params *ec2.DescribeClientVpnRoutesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnRoutesOutput, error)

	// DescribeClientVpnTargetNetworksFunc mocks the DescribeClientVpnTargetNetworks method.
	DescribeClientVpnTargetNetworksFunc func(ctx context.Context, params *ec2.DescribeClientVpnTargetNetworksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnTargetNetworksOutput, error)

	// DescribeCoipPoolsFunc mocks the DescribeCoipPools method.
	DescribeCoipPoolsFunc func(ctx context.Context, params *ec2.DescribeCoipPoolsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCoipPoolsOutput, error)

	// DescribeConversionTasksFunc mocks the DescribeConversionTasks method.
	DescribeConversionTasksFunc func(ctx context.Context, params *ec2.DescribeConversionTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeConversionTasksOutput, error)

	// DescribeCustomerGatewaysFunc mocks the DescribeCustomerGateways method.
	DescribeCustomerGatewaysFunc func(ctx context.Context, params *ec2.DescribeCustomerGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCustomerGatewaysOutput, error)

	// DescribeDhcpOptionsFunc mocks the DescribeDhcpOptions method.
	DescribeDhcpOptionsFunc func(ctx context.Context, params *ec2.DescribeDhcpOptionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeDhcpOptionsOutput, error)

	// DescribeEgressOnlyInternetGatewaysFunc mocks the DescribeEgressOnlyInternetGateways method.
	DescribeEgressOnlyInternetGatewaysFunc func(ctx context.Context, params *ec2.DescribeEgressOnlyInternetGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error)

	// DescribeElasticGpusFunc mocks the DescribeElasticGpus method.
	DescribeElasticGpusFunc func(ctx context.Context, params *ec2.DescribeElasticGpusInput, optFns ...func(*ec2.Options)) (*ec2.DescribeElasticGpusOutput, error)

	// DescribeExportImageTasksFunc mocks the DescribeExportImageTasks method.
	DescribeExportImageTasksFunc func(ctx context.Context, params *ec2.DescribeExportImageTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeExportImageTasksOutput, error)

	// DescribeExportTasksFunc mocks the DescribeExportTasks method.
	DescribeExportTasksFunc func(ctx context.Context, params *ec2.DescribeExportTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeExportTasksOutput, error)

	// DescribeFastLaunchImagesFunc mocks the DescribeFastLaunchImages method.
	DescribeFastLaunchImagesFunc func(ctx context.Context, params *ec2.DescribeFastLaunchImagesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFastLaunchImagesOutput, error)

	// DescribeFastSnapshotRestoresFunc mocks the DescribeFastSnapshotRestores method.
	DescribeFastSnapshotRestoresFunc func(ctx context.Context, params *ec2.DescribeFastSnapshotRestoresInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFastSnapshotRestoresOutput, error)

	// DescribeFleetHistoryFunc mocks the DescribeFleetHistory method.
	DescribeFleetHistoryFunc func(ctx context.Context, params *ec2.DescribeFleetHistoryInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFleetHistoryOutput, error)

	// DescribeFleetInstancesFunc mocks the DescribeFleetInstances method.
	DescribeFleetInstancesFunc func(ctx context.Context, params *ec2.DescribeFleetInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFleetInstancesOutput, error)

	// DescribeFleetsFunc mocks the DescribeFleets method.
	DescribeFleetsFunc func(ctx context.Context, params *ec2.DescribeFleetsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFleetsOutput, error)

	// DescribeFlowLogsFunc mocks the DescribeFlowLogs method.
	DescribeFlowLogsFunc func(ctx context.Context, params *ec2.DescribeFlowLogsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFlowLogsOutput, error)

	// DescribeFpgaImageAttributeFunc mocks the DescribeFpgaImageAttribute method.
	DescribeFpgaImageAttributeFunc func(ctx context.Context, params *ec2.DescribeFpgaImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFpgaImageAttributeOutput, error)

	// DescribeFpgaImagesFunc mocks the DescribeFpgaImages method.
	DescribeFpgaImagesFunc func(ctx context.Context, params *ec2.DescribeFpgaImagesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFpgaImagesOutput, error)

	// DescribeHostReservationOfferingsFunc mocks the DescribeHostReservationOfferings method.
	DescribeHostReservationOfferingsFunc func(ctx context.Context, params *ec2.DescribeHostReservationOfferingsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeHostReservationOfferingsOutput, error)

	// DescribeHostReservationsFunc mocks the DescribeHostReservations method.
	DescribeHostReservationsFunc func(ctx context.Context, params *ec2.DescribeHostReservationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeHostReservationsOutput, error)

	// DescribeHostsFunc mocks the DescribeHosts method.
	DescribeHostsFunc func(ctx context.Context, params *ec2.DescribeHostsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeHostsOutput, error)

	// DescribeIamInstanceProfileAssociationsFunc mocks the DescribeIamInstanceProfileAssociations method.
	DescribeIamInstanceProfileAssociationsFunc func(ctx context.Context, params *ec2.DescribeIamInstanceProfileAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error)

	// DescribeIdFormatFunc mocks the DescribeIdFormat method.
	DescribeIdFormatFunc func(ctx context.Context, params *ec2.DescribeIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIdFormatOutput, error)

	// DescribeIdentityIdFormatFunc mocks the DescribeIdentityIdFormat method.
	DescribeIdentityIdFormatFunc func(ctx context.Context, params *ec2.DescribeIdentityIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIdentityIdFormatOutput, error)

	// DescribeImageAttributeFunc mocks the DescribeImageAttribute method.
	DescribeImageAttributeFunc func(ctx context.Context, params *ec2.DescribeImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeImageAttributeOutput, error)

	// DescribeImagesFunc mocks the DescribeImages method.
	DescribeImagesFunc func(ctx context.Context, params *ec2.DescribeImagesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeImagesOutput, error)

	// DescribeImportImageTasksFunc mocks the DescribeImportImageTasks method.
	DescribeImportImageTasksFunc func(ctx context.Context, params *ec2.DescribeImportImageTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeImportImageTasksOutput, error)

	// DescribeImportSnapshotTasksFunc mocks the DescribeImportSnapshotTasks method.
	DescribeImportSnapshotTasksFunc func(ctx context.Context, params *ec2.DescribeImportSnapshotTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeImportSnapshotTasksOutput, error)

	// DescribeInstanceAttributeFunc mocks the DescribeInstanceAttribute method.
	DescribeInstanceAttributeFunc func(ctx context.Context, params *ec2.DescribeInstanceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceAttributeOutput, error)

	// DescribeInstanceCreditSpecificationsFunc mocks the DescribeInstanceCreditSpecifications method.
	DescribeInstanceCreditSpecificationsFunc func(ctx context.Context, params *ec2.DescribeInstanceCreditSpecificationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceCreditSpecificationsOutput, error)

	// DescribeInstanceEventNotificationAttributesFunc mocks the DescribeInstanceEventNotificationAttributes method.
	DescribeInstanceEventNotificationAttributesFunc func(ctx context.Context, params *ec2.DescribeInstanceEventNotificationAttributesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceEventNotificationAttributesOutput, error)

	// DescribeInstanceEventWindowsFunc mocks the DescribeInstanceEventWindows method.
	DescribeInstanceEventWindowsFunc func(ctx context.Context, params *ec2.DescribeInstanceEventWindowsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceEventWindowsOutput, error)

	// DescribeInstanceStatusFunc mocks the DescribeInstanceStatus method.
	DescribeInstanceStatusFunc func(ctx context.Context, params *ec2.DescribeInstanceStatusInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceStatusOutput, error)

	// DescribeInstanceTypeOfferingsFunc mocks the DescribeInstanceTypeOfferings method.
	DescribeInstanceTypeOfferingsFunc func(ctx context.Context, params *ec2.DescribeInstanceTypeOfferingsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceTypeOfferingsOutput, error)

	// DescribeInstanceTypesFunc mocks the DescribeInstanceTypes method.
	DescribeInstanceTypesFunc func(ctx context.Context, params *ec2.DescribeInstanceTypesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceTypesOutput, error)

	// DescribeInstancesFunc mocks the DescribeInstances method.
	DescribeInstancesFunc func(ctx context.Context, params *ec2.DescribeInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error)

	// DescribeInternetGatewaysFunc mocks the DescribeInternetGateways method.
	DescribeInternetGatewaysFunc func(ctx context.Context, params *ec2.DescribeInternetGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInternetGatewaysOutput, error)

	// DescribeIpamPoolsFunc mocks the DescribeIpamPools method.
	DescribeIpamPoolsFunc func(ctx context.Context, params *ec2.DescribeIpamPoolsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIpamPoolsOutput, error)

	// DescribeIpamScopesFunc mocks the DescribeIpamScopes method.
	DescribeIpamScopesFunc func(ctx context.Context, params *ec2.DescribeIpamScopesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIpamScopesOutput, error)

	// DescribeIpamsFunc mocks the DescribeIpams method.
	DescribeIpamsFunc func(ctx context.Context, params *ec2.DescribeIpamsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIpamsOutput, error)

	// DescribeIpv6PoolsFunc mocks the DescribeIpv6Pools method.
	DescribeIpv6PoolsFunc func(ctx context.Context, params *ec2.DescribeIpv6PoolsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIpv6PoolsOutput, error)

	// DescribeKeyPairsFunc mocks the DescribeKeyPairs method.
	DescribeKeyPairsFunc func(ctx context.Context, params *ec2.DescribeKeyPairsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeKeyPairsOutput, error)

	// DescribeLaunchTemplateVersionsFunc mocks the DescribeLaunchTemplateVersions method.
	DescribeLaunchTemplateVersionsFunc func(ctx context.Context, params *ec2.DescribeLaunchTemplateVersionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLaunchTemplateVersionsOutput, error)

	// DescribeLaunchTemplatesFunc mocks the DescribeLaunchTemplates method.
	DescribeLaunchTemplatesFunc func(ctx context.Context, params *ec2.DescribeLaunchTemplatesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLaunchTemplatesOutput, error)

	// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFunc mocks the DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations method.
	DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFunc func(ctx context.Context, params *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error)

	// DescribeLocalGatewayRouteTableVpcAssociationsFunc mocks the DescribeLocalGatewayRouteTableVpcAssociations method.
	DescribeLocalGatewayRouteTableVpcAssociationsFunc func(ctx context.Context, params *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error)

	// DescribeLocalGatewayRouteTablesFunc mocks the DescribeLocalGatewayRouteTables method.
	DescribeLocalGatewayRouteTablesFunc func(ctx context.Context, params *ec2.DescribeLocalGatewayRouteTablesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayRouteTablesOutput, error)

	// DescribeLocalGatewayVirtualInterfaceGroupsFunc mocks the DescribeLocalGatewayVirtualInterfaceGroups method.
	DescribeLocalGatewayVirtualInterfaceGroupsFunc func(ctx context.Context, params *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error)

	// DescribeLocalGatewayVirtualInterfacesFunc mocks the DescribeLocalGatewayVirtualInterfaces method.
	DescribeLocalGatewayVirtualInterfacesFunc func(ctx context.Context, params *ec2.DescribeLocalGatewayVirtualInterfacesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error)

	// DescribeLocalGatewaysFunc mocks the DescribeLocalGateways method.
	DescribeLocalGatewaysFunc func(ctx context.Context, params *ec2.DescribeLocalGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewaysOutput, error)

	// DescribeManagedPrefixListsFunc mocks the DescribeManagedPrefixLists method.
	DescribeManagedPrefixListsFunc func(ctx context.Context, params *ec2.DescribeManagedPrefixListsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeManagedPrefixListsOutput, error)

	// DescribeMovingAddressesFunc mocks the DescribeMovingAddresses method.
	DescribeMovingAddressesFunc func(ctx context.Context, params *ec2.DescribeMovingAddressesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeMovingAddressesOutput, error)

	// DescribeNatGatewaysFunc mocks the DescribeNatGateways method.
	DescribeNatGatewaysFunc func(ctx context.Context, params *ec2.DescribeNatGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNatGatewaysOutput, error)

	// DescribeNetworkAclsFunc mocks the DescribeNetworkAcls method.
	DescribeNetworkAclsFunc func(ctx context.Context, params *ec2.DescribeNetworkAclsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkAclsOutput, error)

	// DescribeNetworkInsightsAccessScopeAnalysesFunc mocks the DescribeNetworkInsightsAccessScopeAnalyses method.
	DescribeNetworkInsightsAccessScopeAnalysesFunc func(ctx context.Context, params *ec2.DescribeNetworkInsightsAccessScopeAnalysesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsAccessScopeAnalysesOutput, error)

	// DescribeNetworkInsightsAccessScopesFunc mocks the DescribeNetworkInsightsAccessScopes method.
	DescribeNetworkInsightsAccessScopesFunc func(ctx context.Context, params *ec2.DescribeNetworkInsightsAccessScopesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsAccessScopesOutput, error)

	// DescribeNetworkInsightsAnalysesFunc mocks the DescribeNetworkInsightsAnalyses method.
	DescribeNetworkInsightsAnalysesFunc func(ctx context.Context, params *ec2.DescribeNetworkInsightsAnalysesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsAnalysesOutput, error)

	// DescribeNetworkInsightsPathsFunc mocks the DescribeNetworkInsightsPaths method.
	DescribeNetworkInsightsPathsFunc func(ctx context.Context, params *ec2.DescribeNetworkInsightsPathsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsPathsOutput, error)

	// DescribeNetworkInterfaceAttributeFunc mocks the DescribeNetworkInterfaceAttribute method.
	DescribeNetworkInterfaceAttributeFunc func(ctx context.Context, params *ec2.DescribeNetworkInterfaceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfaceAttributeOutput, error)

	// DescribeNetworkInterfacePermissionsFunc mocks the DescribeNetworkInterfacePermissions method.
	DescribeNetworkInterfacePermissionsFunc func(ctx context.Context, params *ec2.DescribeNetworkInterfacePermissionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfacePermissionsOutput, error)

	// DescribeNetworkInterfacesFunc mocks the DescribeNetworkInterfaces method.
	DescribeNetworkInterfacesFunc func(ctx context.Context, params *ec2.DescribeNetworkInterfacesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfacesOutput, error)

	// DescribePlacementGroupsFunc mocks the DescribePlacementGroups method.
	DescribePlacementGroupsFunc func(ctx context.Context, params *ec2.DescribePlacementGroupsInput, optFns ...func(*ec2.Options)) (*ec2.DescribePlacementGroupsOutput, error)

	// DescribePrefixListsFunc mocks the DescribePrefixLists method.
	DescribePrefixListsFunc func(ctx context.Context, params *ec2.DescribePrefixListsInput, optFns ...func(*ec2.Options)) (*ec2.DescribePrefixListsOutput, error)

	// DescribePrincipalIdFormatFunc mocks the DescribePrincipalIdFormat method.
	DescribePrincipalIdFormatFunc func(ctx context.Context, params *ec2.DescribePrincipalIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.DescribePrincipalIdFormatOutput, error)

	// DescribePublicIpv4PoolsFunc mocks the DescribePublicIpv4Pools method.
	DescribePublicIpv4PoolsFunc func(ctx context.Context, params *ec2.DescribePublicIpv4PoolsInput, optFns ...func(*ec2.Options)) (*ec2.DescribePublicIpv4PoolsOutput, error)

	// DescribeRegionsFunc mocks the DescribeRegions method.
	DescribeRegionsFunc func(ctx context.Context, params *ec2.DescribeRegionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeRegionsOutput, error)

	// DescribeReplaceRootVolumeTasksFunc mocks the DescribeReplaceRootVolumeTasks method.
	DescribeReplaceRootVolumeTasksFunc func(ctx context.Context, params *ec2.DescribeReplaceRootVolumeTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReplaceRootVolumeTasksOutput, error)

	// DescribeReservedInstancesFunc mocks the DescribeReservedInstances method.
	DescribeReservedInstancesFunc func(ctx context.Context, params *ec2.DescribeReservedInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesOutput, error)

	// DescribeReservedInstancesListingsFunc mocks the DescribeReservedInstancesListings method.
	DescribeReservedInstancesListingsFunc func(ctx context.Context, params *ec2.DescribeReservedInstancesListingsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesListingsOutput, error)

	// DescribeReservedInstancesModificationsFunc mocks the DescribeReservedInstancesModifications method.
	DescribeReservedInstancesModificationsFunc func(ctx context.Context, params *ec2.DescribeReservedInstancesModificationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesModificationsOutput, error)

	// DescribeReservedInstancesOfferingsFunc mocks the DescribeReservedInstancesOfferings method.
	DescribeReservedInstancesOfferingsFunc func(ctx context.Context, params *ec2.DescribeReservedInstancesOfferingsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesOfferingsOutput, error)

	// DescribeRouteTablesFunc mocks the DescribeRouteTables method.
	DescribeRouteTablesFunc func(ctx context.Context, params *ec2.DescribeRouteTablesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeRouteTablesOutput, error)

	// DescribeScheduledInstanceAvailabilityFunc mocks the DescribeScheduledInstanceAvailability method.
	DescribeScheduledInstanceAvailabilityFunc func(ctx context.Context, params *ec2.DescribeScheduledInstanceAvailabilityInput, optFns ...func(*ec2.Options)) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error)

	// DescribeScheduledInstancesFunc mocks the DescribeScheduledInstances method.
	DescribeScheduledInstancesFunc func(ctx context.Context, params *ec2.DescribeScheduledInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeScheduledInstancesOutput, error)

	// DescribeSecurityGroupReferencesFunc mocks the DescribeSecurityGroupReferences method.
	DescribeSecurityGroupReferencesFunc func(ctx context.Context, params *ec2.DescribeSecurityGroupReferencesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupReferencesOutput, error)

	// DescribeSecurityGroupRulesFunc mocks the DescribeSecurityGroupRules method.
	DescribeSecurityGroupRulesFunc func(ctx context.Context, params *ec2.DescribeSecurityGroupRulesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupRulesOutput, error)

	// DescribeSecurityGroupsFunc mocks the DescribeSecurityGroups method.
	DescribeSecurityGroupsFunc func(ctx context.Context, params *ec2.DescribeSecurityGroupsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupsOutput, error)

	// DescribeSnapshotAttributeFunc mocks the DescribeSnapshotAttribute method.
	DescribeSnapshotAttributeFunc func(ctx context.Context, params *ec2.DescribeSnapshotAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSnapshotAttributeOutput, error)

	// DescribeSnapshotTierStatusFunc mocks the DescribeSnapshotTierStatus method.
	DescribeSnapshotTierStatusFunc func(ctx context.Context, params *ec2.DescribeSnapshotTierStatusInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSnapshotTierStatusOutput, error)

	// DescribeSnapshotsFunc mocks the DescribeSnapshots method.
	DescribeSnapshotsFunc func(ctx context.Context, params *ec2.DescribeSnapshotsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSnapshotsOutput, error)

	// DescribeSpotDatafeedSubscriptionFunc mocks the DescribeSpotDatafeedSubscription method.
	DescribeSpotDatafeedSubscriptionFunc func(ctx context.Context, params *ec2.DescribeSpotDatafeedSubscriptionInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error)

	// DescribeSpotFleetInstancesFunc mocks the DescribeSpotFleetInstances method.
	DescribeSpotFleetInstancesFunc func(ctx context.Context, params *ec2.DescribeSpotFleetInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotFleetInstancesOutput, error)

	// DescribeSpotFleetRequestHistoryFunc mocks the DescribeSpotFleetRequestHistory method.
	DescribeSpotFleetRequestHistoryFunc func(ctx context.Context, params *ec2.DescribeSpotFleetRequestHistoryInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotFleetRequestHistoryOutput, error)

	// DescribeSpotFleetRequestsFunc mocks the DescribeSpotFleetRequests method.
	DescribeSpotFleetRequestsFunc func(ctx context.Context, params *ec2.DescribeSpotFleetRequestsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotFleetRequestsOutput, error)

	// DescribeSpotInstanceRequestsFunc mocks the DescribeSpotInstanceRequests method.
	DescribeSpotInstanceRequestsFunc func(ctx context.Context, params *ec2.DescribeSpotInstanceRequestsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotInstanceRequestsOutput, error)

	// DescribeSpotPriceHistoryFunc mocks the DescribeSpotPriceHistory method.
	DescribeSpotPriceHistoryFunc func(ctx context.Context, params *ec2.DescribeSpotPriceHistoryInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotPriceHistoryOutput, error)

	// DescribeStaleSecurityGroupsFunc mocks the DescribeStaleSecurityGroups method.
	DescribeStaleSecurityGroupsFunc func(ctx context.Context, params *ec2.DescribeStaleSecurityGroupsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeStaleSecurityGroupsOutput, error)

	// DescribeStoreImageTasksFunc mocks the DescribeStoreImageTasks method.
	DescribeStoreImageTasksFunc func(ctx context.Context, params *ec2.DescribeStoreImageTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeStoreImageTasksOutput, error)

	// DescribeSubnetsFunc mocks the DescribeSubnets method.
	DescribeSubnetsFunc func(ctx context.Context, params *ec2.DescribeSubnetsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSubnetsOutput, error)

	// DescribeTagsFunc mocks the DescribeTags method.
	DescribeTagsFunc func(ctx context.Context, params *ec2.DescribeTagsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTagsOutput, error)

	// DescribeTrafficMirrorFiltersFunc mocks the DescribeTrafficMirrorFilters method.
	DescribeTrafficMirrorFiltersFunc func(ctx context.Context, params *ec2.DescribeTrafficMirrorFiltersInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTrafficMirrorFiltersOutput, error)

	// DescribeTrafficMirrorSessionsFunc mocks the DescribeTrafficMirrorSessions method.
	DescribeTrafficMirrorSessionsFunc func(ctx context.Context, params *ec2.DescribeTrafficMirrorSessionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTrafficMirrorSessionsOutput, error)

	// DescribeTrafficMirrorTargetsFunc mocks the DescribeTrafficMirrorTargets method.
	DescribeTrafficMirrorTargetsFunc func(ctx context.Context, params *ec2.DescribeTrafficMirrorTargetsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTrafficMirrorTargetsOutput, error)

	// DescribeTransitGatewayAttachmentsFunc mocks the DescribeTransitGatewayAttachments method.
	DescribeTransitGatewayAttachmentsFunc func(ctx context.Context, params *ec2.DescribeTransitGatewayAttachmentsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayAttachmentsOutput, error)

	// DescribeTransitGatewayConnectPeersFunc mocks the DescribeTransitGatewayConnectPeers method.
	DescribeTransitGatewayConnectPeersFunc func(ctx context.Context, params *ec2.DescribeTransitGatewayConnectPeersInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayConnectPeersOutput, error)

	// DescribeTransitGatewayConnectsFunc mocks the DescribeTransitGatewayConnects method.
	DescribeTransitGatewayConnectsFunc func(ctx context.Context, params *ec2.DescribeTransitGatewayConnectsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayConnectsOutput, error)

	// DescribeTransitGatewayMulticastDomainsFunc mocks the DescribeTransitGatewayMulticastDomains method.
	DescribeTransitGatewayMulticastDomainsFunc func(ctx context.Context, params *ec2.DescribeTransitGatewayMulticastDomainsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error)

	// DescribeTransitGatewayPeeringAttachmentsFunc mocks the DescribeTransitGatewayPeeringAttachments method.
	DescribeTransitGatewayPeeringAttachmentsFunc func(ctx context.Context, params *ec2.DescribeTransitGatewayPeeringAttachmentsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error)

	// DescribeTransitGatewayPolicyTablesFunc mocks the DescribeTransitGatewayPolicyTables method.
	DescribeTransitGatewayPolicyTablesFunc func(ctx context.Context, params *ec2.DescribeTransitGatewayPolicyTablesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayPolicyTablesOutput, error)

	// DescribeTransitGatewayRouteTableAnnouncementsFunc mocks the DescribeTransitGatewayRouteTableAnnouncements method.
	DescribeTransitGatewayRouteTableAnnouncementsFunc func(ctx context.Context, params *ec2.DescribeTransitGatewayRouteTableAnnouncementsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayRouteTableAnnouncementsOutput, error)

	// DescribeTransitGatewayRouteTablesFunc mocks the DescribeTransitGatewayRouteTables method.
	DescribeTransitGatewayRouteTablesFunc func(ctx context.Context, params *ec2.DescribeTransitGatewayRouteTablesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayRouteTablesOutput, error)

	// DescribeTransitGatewayVpcAttachmentsFunc mocks the DescribeTransitGatewayVpcAttachments method.
	DescribeTransitGatewayVpcAttachmentsFunc func(ctx context.Context, params *ec2.DescribeTransitGatewayVpcAttachmentsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error)

	// DescribeTransitGatewaysFunc mocks the DescribeTransitGateways method.
	DescribeTransitGatewaysFunc func(ctx context.Context, params *ec2.DescribeTransitGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewaysOutput, error)

	// DescribeTrunkInterfaceAssociationsFunc mocks the DescribeTrunkInterfaceAssociations method.
	DescribeTrunkInterfaceAssociationsFunc func(ctx context.Context, params *ec2.DescribeTrunkInterfaceAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTrunkInterfaceAssociationsOutput, error)

	// DescribeVolumeAttributeFunc mocks the DescribeVolumeAttribute method.
	DescribeVolumeAttributeFunc func(ctx context.Context, params *ec2.DescribeVolumeAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVolumeAttributeOutput, error)

	// DescribeVolumeStatusFunc mocks the DescribeVolumeStatus method.
	DescribeVolumeStatusFunc func(ctx context.Context, params *ec2.DescribeVolumeStatusInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVolumeStatusOutput, error)

	// DescribeVolumesFunc mocks the DescribeVolumes method.
	DescribeVolumesFunc func(ctx context.Context, params *ec2.DescribeVolumesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVolumesOutput, error)

	// DescribeVolumesModificationsFunc mocks the DescribeVolumesModifications method.
	DescribeVolumesModificationsFunc func(ctx context.Context, params *ec2.DescribeVolumesModificationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVolumesModificationsOutput, error)

	// DescribeVpcAttributeFunc mocks the DescribeVpcAttribute method.
	DescribeVpcAttributeFunc func(ctx context.Context, params *ec2.DescribeVpcAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcAttributeOutput, error)

	// DescribeVpcClassicLinkFunc mocks the DescribeVpcClassicLink method.
	DescribeVpcClassicLinkFunc func(ctx context.Context, params *ec2.DescribeVpcClassicLinkInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcClassicLinkOutput, error)

	// DescribeVpcClassicLinkDnsSupportFunc mocks the DescribeVpcClassicLinkDnsSupport method.
	DescribeVpcClassicLinkDnsSupportFunc func(ctx context.Context, params *ec2.DescribeVpcClassicLinkDnsSupportInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error)

	// DescribeVpcEndpointConnectionNotificationsFunc mocks the DescribeVpcEndpointConnectionNotifications method.
	DescribeVpcEndpointConnectionNotificationsFunc func(ctx context.Context, params *ec2.DescribeVpcEndpointConnectionNotificationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error)

	// DescribeVpcEndpointConnectionsFunc mocks the DescribeVpcEndpointConnections method.
	DescribeVpcEndpointConnectionsFunc func(ctx context.Context, params *ec2.DescribeVpcEndpointConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointConnectionsOutput, error)

	// DescribeVpcEndpointServiceConfigurationsFunc mocks the DescribeVpcEndpointServiceConfigurations method.
	DescribeVpcEndpointServiceConfigurationsFunc func(ctx context.Context, params *ec2.DescribeVpcEndpointServiceConfigurationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error)

	// DescribeVpcEndpointServicePermissionsFunc mocks the DescribeVpcEndpointServicePermissions method.
	DescribeVpcEndpointServicePermissionsFunc func(ctx context.Context, params *ec2.DescribeVpcEndpointServicePermissionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error)

	// DescribeVpcEndpointServicesFunc mocks the DescribeVpcEndpointServices method.
	DescribeVpcEndpointServicesFunc func(ctx context.Context, params *ec2.DescribeVpcEndpointServicesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServicesOutput, error)

	// DescribeVpcEndpointsFunc mocks the DescribeVpcEndpoints method.
	DescribeVpcEndpointsFunc func(ctx context.Context, params *ec2.DescribeVpcEndpointsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointsOutput, error)

	// DescribeVpcPeeringConnectionsFunc mocks the DescribeVpcPeeringConnections method.
	DescribeVpcPeeringConnectionsFunc func(ctx context.Context, params *ec2.DescribeVpcPeeringConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcPeeringConnectionsOutput, error)

	// DescribeVpcsFunc mocks the DescribeVpcs method.
	DescribeVpcsFunc func(ctx context.Context, params *ec2.DescribeVpcsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcsOutput, error)

	// DescribeVpnConnectionsFunc mocks the DescribeVpnConnections method.
	DescribeVpnConnectionsFunc func(ctx context.Context, params *ec2.DescribeVpnConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpnConnectionsOutput, error)

	// DescribeVpnGatewaysFunc mocks the DescribeVpnGateways method.
	DescribeVpnGatewaysFunc func(ctx context.Context, params *ec2.DescribeVpnGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpnGatewaysOutput, error)

	// DetachClassicLinkVpcFunc mocks the DetachClassicLinkVpc method.
	DetachClassicLinkVpcFunc func(ctx context.Context, params *ec2.DetachClassicLinkVpcInput, optFns ...func(*ec2.Options)) (*ec2.DetachClassicLinkVpcOutput, error)

	// DetachInternetGatewayFunc mocks the DetachInternetGateway method.
	DetachInternetGatewayFunc func(ctx context.Context, params *ec2.DetachInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DetachInternetGatewayOutput, error)

	// DetachNetworkInterfaceFunc mocks the DetachNetworkInterface method.
	DetachNetworkInterfaceFunc func(ctx context.Context, params *ec2.DetachNetworkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.DetachNetworkInterfaceOutput, error)

	// DetachVolumeFunc mocks the DetachVolume method.
	DetachVolumeFunc func(ctx context.Context, params *ec2.DetachVolumeInput, optFns ...func(*ec2.Options)) (*ec2.DetachVolumeOutput, error)

	// DetachVpnGatewayFunc mocks the DetachVpnGateway method.
	DetachVpnGatewayFunc func(ctx context.Context, params *ec2.DetachVpnGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DetachVpnGatewayOutput, error)

	// DisableEbsEncryptionByDefaultFunc mocks the DisableEbsEncryptionByDefault method.
	DisableEbsEncryptionByDefaultFunc func(ctx context.Context, params *ec2.DisableEbsEncryptionByDefaultInput, optFns ...func(*ec2.Options)) (*ec2.DisableEbsEncryptionByDefaultOutput, error)

	// DisableFastLaunchFunc mocks the DisableFastLaunch method.
	DisableFastLaunchFunc func(ctx context.Context, params *ec2.DisableFastLaunchInput, optFns ...func(*ec2.Options)) (*ec2.DisableFastLaunchOutput, error)

	// DisableFastSnapshotRestoresFunc mocks the DisableFastSnapshotRestores method.
	DisableFastSnapshotRestoresFunc func(ctx context.Context, params *ec2.DisableFastSnapshotRestoresInput, optFns ...func(*ec2.Options)) (*ec2.DisableFastSnapshotRestoresOutput, error)

	// DisableImageDeprecationFunc mocks the DisableImageDeprecation method.
	DisableImageDeprecationFunc func(ctx context.Context, params *ec2.DisableImageDeprecationInput, optFns ...func(*ec2.Options)) (*ec2.DisableImageDeprecationOutput, error)

	// DisableIpamOrganizationAdminAccountFunc mocks the DisableIpamOrganizationAdminAccount method.
	DisableIpamOrganizationAdminAccountFunc func(ctx context.Context, params *ec2.DisableIpamOrganizationAdminAccountInput, optFns ...func(*ec2.Options)) (*ec2.DisableIpamOrganizationAdminAccountOutput, error)

	// DisableSerialConsoleAccessFunc mocks the DisableSerialConsoleAccess method.
	DisableSerialConsoleAccessFunc func(ctx context.Context, params *ec2.DisableSerialConsoleAccessInput, optFns ...func(*ec2.Options)) (*ec2.DisableSerialConsoleAccessOutput, error)

	// DisableTransitGatewayRouteTablePropagationFunc mocks the DisableTransitGatewayRouteTablePropagation method.
	DisableTransitGatewayRouteTablePropagationFunc func(ctx context.Context, params *ec2.DisableTransitGatewayRouteTablePropagationInput, optFns ...func(*ec2.Options)) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error)

	// DisableVgwRoutePropagationFunc mocks the DisableVgwRoutePropagation method.
	DisableVgwRoutePropagationFunc func(ctx context.Context, params *ec2.DisableVgwRoutePropagationInput, optFns ...func(*ec2.Options)) (*ec2.DisableVgwRoutePropagationOutput, error)

	// DisableVpcClassicLinkFunc mocks the DisableVpcClassicLink method.
	DisableVpcClassicLinkFunc func(ctx context.Context, params *ec2.DisableVpcClassicLinkInput, optFns ...func(*ec2.Options)) (*ec2.DisableVpcClassicLinkOutput, error)

	// DisableVpcClassicLinkDnsSupportFunc mocks the DisableVpcClassicLinkDnsSupport method.
	DisableVpcClassicLinkDnsSupportFunc func(ctx context.Context, params *ec2.DisableVpcClassicLinkDnsSupportInput, optFns ...func(*ec2.Options)) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error)

	// DisassociateAddressFunc mocks the DisassociateAddress method.
	DisassociateAddressFunc func(ctx context.Context, params *ec2.DisassociateAddressInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateAddressOutput, error)

	// DisassociateClientVpnTargetNetworkFunc mocks the DisassociateClientVpnTargetNetwork method.
	DisassociateClientVpnTargetNetworkFunc func(ctx context.Context, params *ec2.DisassociateClientVpnTargetNetworkInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateClientVpnTargetNetworkOutput, error)

	// DisassociateEnclaveCertificateIamRoleFunc mocks the DisassociateEnclaveCertificateIamRole method.
	DisassociateEnclaveCertificateIamRoleFunc func(ctx context.Context, params *ec2.DisassociateEnclaveCertificateIamRoleInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateEnclaveCertificateIamRoleOutput, error)

	// DisassociateIamInstanceProfileFunc mocks the DisassociateIamInstanceProfile method.
	DisassociateIamInstanceProfileFunc func(ctx context.Context, params *ec2.DisassociateIamInstanceProfileInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateIamInstanceProfileOutput, error)

	// DisassociateInstanceEventWindowFunc mocks the DisassociateInstanceEventWindow method.
	DisassociateInstanceEventWindowFunc func(ctx context.Context, params *ec2.DisassociateInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateInstanceEventWindowOutput, error)

	// DisassociateRouteTableFunc mocks the DisassociateRouteTable method.
	DisassociateRouteTableFunc func(ctx context.Context, params *ec2.DisassociateRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateRouteTableOutput, error)

	// DisassociateSubnetCidrBlockFunc mocks the DisassociateSubnetCidrBlock method.
	DisassociateSubnetCidrBlockFunc func(ctx context.Context, params *ec2.DisassociateSubnetCidrBlockInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateSubnetCidrBlockOutput, error)

	// DisassociateTransitGatewayMulticastDomainFunc mocks the DisassociateTransitGatewayMulticastDomain method.
	DisassociateTransitGatewayMulticastDomainFunc func(ctx context.Context, params *ec2.DisassociateTransitGatewayMulticastDomainInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error)

	// DisassociateTransitGatewayPolicyTableFunc mocks the DisassociateTransitGatewayPolicyTable method.
	DisassociateTransitGatewayPolicyTableFunc func(ctx context.Context, params *ec2.DisassociateTransitGatewayPolicyTableInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateTransitGatewayPolicyTableOutput, error)

	// DisassociateTransitGatewayRouteTableFunc mocks the DisassociateTransitGatewayRouteTable method.
	DisassociateTransitGatewayRouteTableFunc func(ctx context.Context, params *ec2.DisassociateTransitGatewayRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateTransitGatewayRouteTableOutput, error)

	// DisassociateTrunkInterfaceFunc mocks the DisassociateTrunkInterface method.
	DisassociateTrunkInterfaceFunc func(ctx context.Context, params *ec2.DisassociateTrunkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateTrunkInterfaceOutput, error)

	// DisassociateVpcCidrBlockFunc mocks the DisassociateVpcCidrBlock method.
	DisassociateVpcCidrBlockFunc func(ctx context.Context, params *ec2.DisassociateVpcCidrBlockInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateVpcCidrBlockOutput, error)

	// EnableEbsEncryptionByDefaultFunc mocks the EnableEbsEncryptionByDefault method.
	EnableEbsEncryptionByDefaultFunc func(ctx context.Context, params *ec2.EnableEbsEncryptionByDefaultInput, optFns ...func(*ec2.Options)) (*ec2.EnableEbsEncryptionByDefaultOutput, error)

	// EnableFastLaunchFunc mocks the EnableFastLaunch method.
	EnableFastLaunchFunc func(ctx context.Context, params *ec2.EnableFastLaunchInput, optFns ...func(*ec2.Options)) (*ec2.EnableFastLaunchOutput, error)

	// EnableFastSnapshotRestoresFunc mocks the EnableFastSnapshotRestores method.
	EnableFastSnapshotRestoresFunc func(ctx context.Context, params *ec2.EnableFastSnapshotRestoresInput, optFns ...func(*ec2.Options)) (*ec2.EnableFastSnapshotRestoresOutput, error)

	// EnableImageDeprecationFunc mocks the EnableImageDeprecation method.
	EnableImageDeprecationFunc func(ctx context.Context, params *ec2.EnableImageDeprecationInput, optFns ...func(*ec2.Options)) (*ec2.EnableImageDeprecationOutput, error)

	// EnableIpamOrganizationAdminAccountFunc mocks the EnableIpamOrganizationAdminAccount method.
	EnableIpamOrganizationAdminAccountFunc func(ctx context.Context, params *ec2.EnableIpamOrganizationAdminAccountInput, optFns ...func(*ec2.Options)) (*ec2.EnableIpamOrganizationAdminAccountOutput, error)

	// EnableSerialConsoleAccessFunc mocks the EnableSerialConsoleAccess method.
	EnableSerialConsoleAccessFunc func(ctx context.Context, params *ec2.EnableSerialConsoleAccessInput, optFns ...func(*ec2.Options)) (*ec2.EnableSerialConsoleAccessOutput, error)

	// EnableTransitGatewayRouteTablePropagationFunc mocks the EnableTransitGatewayRouteTablePropagation method.
	EnableTransitGatewayRouteTablePropagationFunc func(ctx context.Context, params *ec2.EnableTransitGatewayRouteTablePropagationInput, optFns ...func(*ec2.Options)) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error)

	// EnableVgwRoutePropagationFunc mocks the EnableVgwRoutePropagation method.
	EnableVgwRoutePropagationFunc func(ctx context.Context, params *ec2.EnableVgwRoutePropagationInput, optFns ...func(*ec2.Options)) (*ec2.EnableVgwRoutePropagationOutput, error)

	// EnableVolumeIOFunc mocks the EnableVolumeIO method.
	EnableVolumeIOFunc func(ctx context.Context, params *ec2.EnableVolumeIOInput, optFns ...func(*ec2.Options)) (*ec2.EnableVolumeIOOutput, error)

	// EnableVpcClassicLinkFunc mocks the EnableVpcClassicLink method.
	EnableVpcClassicLinkFunc func(ctx context.Context, params *ec2.EnableVpcClassicLinkInput, optFns ...func(*ec2.Options)) (*ec2.EnableVpcClassicLinkOutput, error)

	// EnableVpcClassicLinkDnsSupportFunc mocks the EnableVpcClassicLinkDnsSupport method.
	EnableVpcClassicLinkDnsSupportFunc func(ctx context.Context, params *ec2.EnableVpcClassicLinkDnsSupportInput, optFns ...func(*ec2.Options)) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error)

	// ExportClientVpnClientCertificateRevocationListFunc mocks the ExportClientVpnClientCertificateRevocationList method.
	ExportClientVpnClientCertificateRevocationListFunc func(ctx context.Context, params *ec2.ExportClientVpnClientCertificateRevocationListInput, optFns ...func(*ec2.Options)) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error)

	// ExportClientVpnClientConfigurationFunc mocks the ExportClientVpnClientConfiguration method.
	ExportClientVpnClientConfigurationFunc func(ctx context.Context, params *ec2.ExportClientVpnClientConfigurationInput, optFns ...func(*ec2.Options)) (*ec2.ExportClientVpnClientConfigurationOutput, error)

	// ExportImageFunc mocks the ExportImage method.
	ExportImageFunc func(ctx context.Context, params *ec2.ExportImageInput, optFns ...func(*ec2.Options)) (*ec2.ExportImageOutput, error)

	// ExportTransitGatewayRoutesFunc mocks the ExportTransitGatewayRoutes method.
	ExportTransitGatewayRoutesFunc func(ctx context.Context, params *ec2.ExportTransitGatewayRoutesInput, optFns ...func(*ec2.Options)) (*ec2.ExportTransitGatewayRoutesOutput, error)

	// GetAssociatedEnclaveCertificateIamRolesFunc mocks the GetAssociatedEnclaveCertificateIamRoles method.
	GetAssociatedEnclaveCertificateIamRolesFunc func(ctx context.Context, params *ec2.GetAssociatedEnclaveCertificateIamRolesInput, optFns ...func(*ec2.Options)) (*ec2.GetAssociatedEnclaveCertificateIamRolesOutput, error)

	// GetAssociatedIpv6PoolCidrsFunc mocks the GetAssociatedIpv6PoolCidrs method.
	GetAssociatedIpv6PoolCidrsFunc func(ctx context.Context, params *ec2.GetAssociatedIpv6PoolCidrsInput, optFns ...func(*ec2.Options)) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error)

	// GetCapacityReservationUsageFunc mocks the GetCapacityReservationUsage method.
	GetCapacityReservationUsageFunc func(ctx context.Context, params *ec2.GetCapacityReservationUsageInput, optFns ...func(*ec2.Options)) (*ec2.GetCapacityReservationUsageOutput, error)

	// GetCoipPoolUsageFunc mocks the GetCoipPoolUsage method.
	GetCoipPoolUsageFunc func(ctx context.Context, params *ec2.GetCoipPoolUsageInput, optFns ...func(*ec2.Options)) (*ec2.GetCoipPoolUsageOutput, error)

	// GetConsoleOutputFunc mocks the GetConsoleOutput method.
	GetConsoleOutputFunc func(ctx context.Context, params *ec2.GetConsoleOutputInput, optFns ...func(*ec2.Options)) (*ec2.GetConsoleOutputOutput, error)

	// GetConsoleScreenshotFunc mocks the GetConsoleScreenshot method.
	GetConsoleScreenshotFunc func(ctx context.Context, params *ec2.GetConsoleScreenshotInput, optFns ...func(*ec2.Options)) (*ec2.GetConsoleScreenshotOutput, error)

	// GetDefaultCreditSpecificationFunc mocks the GetDefaultCreditSpecification method.
	GetDefaultCreditSpecificationFunc func(ctx context.Context, params *ec2.GetDefaultCreditSpecificationInput, optFns ...func(*ec2.Options)) (*ec2.GetDefaultCreditSpecificationOutput, error)

	// GetEbsDefaultKmsKeyIdFunc mocks the GetEbsDefaultKmsKeyId method.
	GetEbsDefaultKmsKeyIdFunc func(ctx context.Context, params *ec2.GetEbsDefaultKmsKeyIdInput, optFns ...func(*ec2.Options)) (*ec2.GetEbsDefaultKmsKeyIdOutput, error)

	// GetEbsEncryptionByDefaultFunc mocks the GetEbsEncryptionByDefault method.
	GetEbsEncryptionByDefaultFunc func(ctx context.Context, params *ec2.GetEbsEncryptionByDefaultInput, optFns ...func(*ec2.Options)) (*ec2.GetEbsEncryptionByDefaultOutput, error)

	// GetFlowLogsIntegrationTemplateFunc mocks the GetFlowLogsIntegrationTemplate method.
	GetFlowLogsIntegrationTemplateFunc func(ctx context.Context, params *ec2.GetFlowLogsIntegrationTemplateInput, optFns ...func(*ec2.Options)) (*ec2.GetFlowLogsIntegrationTemplateOutput, error)

	// GetGroupsForCapacityReservationFunc mocks the GetGroupsForCapacityReservation method.
	GetGroupsForCapacityReservationFunc func(ctx context.Context, params *ec2.GetGroupsForCapacityReservationInput, optFns ...func(*ec2.Options)) (*ec2.GetGroupsForCapacityReservationOutput, error)

	// GetHostReservationPurchasePreviewFunc mocks the GetHostReservationPurchasePreview method.
	GetHostReservationPurchasePreviewFunc func(ctx context.Context, params *ec2.GetHostReservationPurchasePreviewInput, optFns ...func(*ec2.Options)) (*ec2.GetHostReservationPurchasePreviewOutput, error)

	// GetInstanceTypesFromInstanceRequirementsFunc mocks the GetInstanceTypesFromInstanceRequirements method.
	GetInstanceTypesFromInstanceRequirementsFunc func(ctx context.Context, params *ec2.GetInstanceTypesFromInstanceRequirementsInput, optFns ...func(*ec2.Options)) (*ec2.GetInstanceTypesFromInstanceRequirementsOutput, error)

	// GetInstanceUefiDataFunc mocks the GetInstanceUefiData method.
	GetInstanceUefiDataFunc func(ctx context.Context, params *ec2.GetInstanceUefiDataInput, optFns ...func(*ec2.Options)) (*ec2.GetInstanceUefiDataOutput, error)

	// GetIpamAddressHistoryFunc mocks the GetIpamAddressHistory method.
	GetIpamAddressHistoryFunc func(ctx context.Context, params *ec2.GetIpamAddressHistoryInput, optFns ...func(*ec2.Options)) (*ec2.GetIpamAddressHistoryOutput, error)

	// GetIpamPoolAllocationsFunc mocks the GetIpamPoolAllocations method.
	GetIpamPoolAllocationsFunc func(ctx context.Context, params *ec2.GetIpamPoolAllocationsInput, optFns ...func(*ec2.Options)) (*ec2.GetIpamPoolAllocationsOutput, error)

	// GetIpamPoolCidrsFunc mocks the GetIpamPoolCidrs method.
	GetIpamPoolCidrsFunc func(ctx context.Context, params *ec2.GetIpamPoolCidrsInput, optFns ...func(*ec2.Options)) (*ec2.GetIpamPoolCidrsOutput, error)

	// GetIpamResourceCidrsFunc mocks the GetIpamResourceCidrs method.
	GetIpamResourceCidrsFunc func(ctx context.Context, params *ec2.GetIpamResourceCidrsInput, optFns ...func(*ec2.Options)) (*ec2.GetIpamResourceCidrsOutput, error)

	// GetLaunchTemplateDataFunc mocks the GetLaunchTemplateData method.
	GetLaunchTemplateDataFunc func(ctx context.Context, params *ec2.GetLaunchTemplateDataInput, optFns ...func(*ec2.Options)) (*ec2.GetLaunchTemplateDataOutput, error)

	// GetManagedPrefixListAssociationsFunc mocks the GetManagedPrefixListAssociations method.
	GetManagedPrefixListAssociationsFunc func(ctx context.Context, params *ec2.GetManagedPrefixListAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.GetManagedPrefixListAssociationsOutput, error)

	// GetManagedPrefixListEntriesFunc mocks the GetManagedPrefixListEntries method.
	GetManagedPrefixListEntriesFunc func(ctx context.Context, params *ec2.GetManagedPrefixListEntriesInput, optFns ...func(*ec2.Options)) (*ec2.GetManagedPrefixListEntriesOutput, error)

	// GetNetworkInsightsAccessScopeAnalysisFindingsFunc mocks the GetNetworkInsightsAccessScopeAnalysisFindings method.
	GetNetworkInsightsAccessScopeAnalysisFindingsFunc func(ctx context.Context, params *ec2.GetNetworkInsightsAccessScopeAnalysisFindingsInput, optFns ...func(*ec2.Options)) (*ec2.GetNetworkInsightsAccessScopeAnalysisFindingsOutput, error)

	// GetNetworkInsightsAccessScopeContentFunc mocks the GetNetworkInsightsAccessScopeContent method.
	GetNetworkInsightsAccessScopeContentFunc func(ctx context.Context, params *ec2.GetNetworkInsightsAccessScopeContentInput, optFns ...func(*ec2.Options)) (*ec2.GetNetworkInsightsAccessScopeContentOutput, error)

	// GetPasswordDataFunc mocks the GetPasswordData method.
	GetPasswordDataFunc func(ctx context.Context, params *ec2.GetPasswordDataInput, optFns ...func(*ec2.Options)) (*ec2.GetPasswordDataOutput, error)

	// GetReservedInstancesExchangeQuoteFunc mocks the GetReservedInstancesExchangeQuote method.
	GetReservedInstancesExchangeQuoteFunc func(ctx context.Context, params *ec2.GetReservedInstancesExchangeQuoteInput, optFns ...func(*ec2.Options)) (*ec2.GetReservedInstancesExchangeQuoteOutput, error)

	// GetSerialConsoleAccessStatusFunc mocks the GetSerialConsoleAccessStatus method.
	GetSerialConsoleAccessStatusFunc func(ctx context.Context, params *ec2.GetSerialConsoleAccessStatusInput, optFns ...func(*ec2.Options)) (*ec2.GetSerialConsoleAccessStatusOutput, error)

	// GetSpotPlacementScoresFunc mocks the GetSpotPlacementScores method.
	GetSpotPlacementScoresFunc func(ctx context.Context, params *ec2.GetSpotPlacementScoresInput, optFns ...func(*ec2.Options)) (*ec2.GetSpotPlacementScoresOutput, error)

	// GetSubnetCidrReservationsFunc mocks the GetSubnetCidrReservations method.
	GetSubnetCidrReservationsFunc func(ctx context.Context, params *ec2.GetSubnetCidrReservationsInput, optFns ...func(*ec2.Options)) (*ec2.GetSubnetCidrReservationsOutput, error)

	// GetTransitGatewayAttachmentPropagationsFunc mocks the GetTransitGatewayAttachmentPropagations method.
	GetTransitGatewayAttachmentPropagationsFunc func(ctx context.Context, params *ec2.GetTransitGatewayAttachmentPropagationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error)

	// GetTransitGatewayMulticastDomainAssociationsFunc mocks the GetTransitGatewayMulticastDomainAssociations method.
	GetTransitGatewayMulticastDomainAssociationsFunc func(ctx context.Context, params *ec2.GetTransitGatewayMulticastDomainAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error)

	// GetTransitGatewayPolicyTableAssociationsFunc mocks the GetTransitGatewayPolicyTableAssociations method.
	GetTransitGatewayPolicyTableAssociationsFunc func(ctx context.Context, params *ec2.GetTransitGatewayPolicyTableAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayPolicyTableAssociationsOutput, error)

	// GetTransitGatewayPolicyTableEntriesFunc mocks the GetTransitGatewayPolicyTableEntries method.
	GetTransitGatewayPolicyTableEntriesFunc func(ctx context.Context, params *ec2.GetTransitGatewayPolicyTableEntriesInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayPolicyTableEntriesOutput, error)

	// GetTransitGatewayPrefixListReferencesFunc mocks the GetTransitGatewayPrefixListReferences method.
	GetTransitGatewayPrefixListReferencesFunc func(ctx context.Context, params *ec2.GetTransitGatewayPrefixListReferencesInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayPrefixListReferencesOutput, error)

	// GetTransitGatewayRouteTableAssociationsFunc mocks the GetTransitGatewayRouteTableAssociations method.
	GetTransitGatewayRouteTableAssociationsFunc func(ctx context.Context, params *ec2.GetTransitGatewayRouteTableAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error)

	// GetTransitGatewayRouteTablePropagationsFunc mocks the GetTransitGatewayRouteTablePropagations method.
	GetTransitGatewayRouteTablePropagationsFunc func(ctx context.Context, params *ec2.GetTransitGatewayRouteTablePropagationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error)

	// GetVpnConnectionDeviceSampleConfigurationFunc mocks the GetVpnConnectionDeviceSampleConfiguration method.
	GetVpnConnectionDeviceSampleConfigurationFunc func(ctx context.Context, params *ec2.GetVpnConnectionDeviceSampleConfigurationInput, optFns ...func(*ec2.Options)) (*ec2.GetVpnConnectionDeviceSampleConfigurationOutput, error)

	// GetVpnConnectionDeviceTypesFunc mocks the GetVpnConnectionDeviceTypes method.
	GetVpnConnectionDeviceTypesFunc func(ctx context.Context, params *ec2.GetVpnConnectionDeviceTypesInput, optFns ...func(*ec2.Options)) (*ec2.GetVpnConnectionDeviceTypesOutput, error)

	// ImportClientVpnClientCertificateRevocationListFunc mocks the ImportClientVpnClientCertificateRevocationList method.
	ImportClientVpnClientCertificateRevocationListFunc func(ctx context.Context, params *ec2.ImportClientVpnClientCertificateRevocationListInput, optFns ...func(*ec2.Options)) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error)

	// ImportImageFunc mocks the ImportImage method.
	ImportImageFunc func(ctx context.Context, params *ec2.ImportImageInput, optFns ...func(*ec2.Options)) (*ec2.ImportImageOutput, error)

	// ImportInstanceFunc mocks the ImportInstance method.
	ImportInstanceFunc func(ctx context.Context, params *ec2.ImportInstanceInput, optFns ...func(*ec2.Options)) (*ec2.ImportInstanceOutput, error)

	// ImportKeyPairFunc mocks the ImportKeyPair method.
	ImportKeyPairFunc func(ctx context.Context, params *ec2.ImportKeyPairInput, optFns ...func(*ec2.Options)) (*ec2.ImportKeyPairOutput, error)

	// ImportSnapshotFunc mocks the ImportSnapshot method.
	ImportSnapshotFunc func(ctx context.Context, params *ec2.ImportSnapshotInput, optFns ...func(*ec2.Options)) (*ec2.ImportSnapshotOutput, error)

	// ImportVolumeFunc mocks the ImportVolume method.
	ImportVolumeFunc func(ctx context.Context, params *ec2.ImportVolumeInput, optFns ...func(*ec2.Options)) (*ec2.ImportVolumeOutput, error)

	// ListImagesInRecycleBinFunc mocks the ListImagesInRecycleBin method.
	ListImagesInRecycleBinFunc func(ctx context.Context, params *ec2.ListImagesInRecycleBinInput, optFns ...func(*ec2.Options)) (*ec2.ListImagesInRecycleBinOutput, error)

	// ListSnapshotsInRecycleBinFunc mocks the ListSnapshotsInRecycleBin method.
	ListSnapshotsInRecycleBinFunc func(ctx context.Context, params *ec2.ListSnapshotsInRecycleBinInput, optFns ...func(*ec2.Options)) (*ec2.ListSnapshotsInRecycleBinOutput, error)

	// ModifyAddressAttributeFunc mocks the ModifyAddressAttribute method.
	ModifyAddressAttributeFunc func(ctx context.Context, params *ec2.ModifyAddressAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyAddressAttributeOutput, error)

	// ModifyAvailabilityZoneGroupFunc mocks the ModifyAvailabilityZoneGroup method.
	ModifyAvailabilityZoneGroupFunc func(ctx context.Context, params *ec2.ModifyAvailabilityZoneGroupInput, optFns ...func(*ec2.Options)) (*ec2.ModifyAvailabilityZoneGroupOutput, error)

	// ModifyCapacityReservationFunc mocks the ModifyCapacityReservation method.
	ModifyCapacityReservationFunc func(ctx context.Context, params *ec2.ModifyCapacityReservationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyCapacityReservationOutput, error)

	// ModifyCapacityReservationFleetFunc mocks the ModifyCapacityReservationFleet method.
	ModifyCapacityReservationFleetFunc func(ctx context.Context, params *ec2.ModifyCapacityReservationFleetInput, optFns ...func(*ec2.Options)) (*ec2.ModifyCapacityReservationFleetOutput, error)

	// ModifyClientVpnEndpointFunc mocks the ModifyClientVpnEndpoint method.
	ModifyClientVpnEndpointFunc func(ctx context.Context, params *ec2.ModifyClientVpnEndpointInput, optFns ...func(*ec2.Options)) (*ec2.ModifyClientVpnEndpointOutput, error)

	// ModifyDefaultCreditSpecificationFunc mocks the ModifyDefaultCreditSpecification method.
	ModifyDefaultCreditSpecificationFunc func(ctx context.Context, params *ec2.ModifyDefaultCreditSpecificationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyDefaultCreditSpecificationOutput, error)

	// ModifyEbsDefaultKmsKeyIdFunc mocks the ModifyEbsDefaultKmsKeyId method.
	ModifyEbsDefaultKmsKeyIdFunc func(ctx context.Context, params *ec2.ModifyEbsDefaultKmsKeyIdInput, optFns ...func(*ec2.Options)) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error)

	// ModifyFleetFunc mocks the ModifyFleet method.
	ModifyFleetFunc func(ctx context.Context, params *ec2.ModifyFleetInput, optFns ...func(*ec2.Options)) (*ec2.ModifyFleetOutput, error)

	// ModifyFpgaImageAttributeFunc mocks the ModifyFpgaImageAttribute method.
	ModifyFpgaImageAttributeFunc func(ctx context.Context, params *ec2.ModifyFpgaImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyFpgaImageAttributeOutput, error)

	// ModifyHostsFunc mocks the ModifyHosts method.
	ModifyHostsFunc func(ctx context.Context, params *ec2.ModifyHostsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyHostsOutput, error)

	// ModifyIdFormatFunc mocks the ModifyIdFormat method.
	ModifyIdFormatFunc func(ctx context.Context, params *ec2.ModifyIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIdFormatOutput, error)

	// ModifyIdentityIdFormatFunc mocks the ModifyIdentityIdFormat method.
	ModifyIdentityIdFormatFunc func(ctx context.Context, params *ec2.ModifyIdentityIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIdentityIdFormatOutput, error)

	// ModifyImageAttributeFunc mocks the ModifyImageAttribute method.
	ModifyImageAttributeFunc func(ctx context.Context, params *ec2.ModifyImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyImageAttributeOutput, error)

	// ModifyInstanceAttributeFunc mocks the ModifyInstanceAttribute method.
	ModifyInstanceAttributeFunc func(ctx context.Context, params *ec2.ModifyInstanceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceAttributeOutput, error)

	// ModifyInstanceCapacityReservationAttributesFunc mocks the ModifyInstanceCapacityReservationAttributes method.
	ModifyInstanceCapacityReservationAttributesFunc func(ctx context.Context, params *ec2.ModifyInstanceCapacityReservationAttributesInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error)

	// ModifyInstanceCreditSpecificationFunc mocks the ModifyInstanceCreditSpecification method.
	ModifyInstanceCreditSpecificationFunc func(ctx context.Context, params *ec2.ModifyInstanceCreditSpecificationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceCreditSpecificationOutput, error)

	// ModifyInstanceEventStartTimeFunc mocks the ModifyInstanceEventStartTime method.
	ModifyInstanceEventStartTimeFunc func(ctx context.Context, params *ec2.ModifyInstanceEventStartTimeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceEventStartTimeOutput, error)

	// ModifyInstanceEventWindowFunc mocks the ModifyInstanceEventWindow method.
	ModifyInstanceEventWindowFunc func(ctx context.Context, params *ec2.ModifyInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceEventWindowOutput, error)

	// ModifyInstanceMaintenanceOptionsFunc mocks the ModifyInstanceMaintenanceOptions method.
	ModifyInstanceMaintenanceOptionsFunc func(ctx context.Context, params *ec2.ModifyInstanceMaintenanceOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceMaintenanceOptionsOutput, error)

	// ModifyInstanceMetadataOptionsFunc mocks the ModifyInstanceMetadataOptions method.
	ModifyInstanceMetadataOptionsFunc func(ctx context.Context, params *ec2.ModifyInstanceMetadataOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceMetadataOptionsOutput, error)

	// ModifyInstancePlacementFunc mocks the ModifyInstancePlacement method.
	ModifyInstancePlacementFunc func(ctx context.Context, params *ec2.ModifyInstancePlacementInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstancePlacementOutput, error)

	// ModifyIpamFunc mocks the ModifyIpam method.
	ModifyIpamFunc func(ctx context.Context, params *ec2.ModifyIpamInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIpamOutput, error)

	// ModifyIpamPoolFunc mocks the ModifyIpamPool method.
	ModifyIpamPoolFunc func(ctx context.Context, params *ec2.ModifyIpamPoolInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIpamPoolOutput, error)

	// ModifyIpamResourceCidrFunc mocks the ModifyIpamResourceCidr method.
	ModifyIpamResourceCidrFunc func(ctx context.Context, params *ec2.ModifyIpamResourceCidrInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIpamResourceCidrOutput, error)

	// ModifyIpamScopeFunc mocks the ModifyIpamScope method.
	ModifyIpamScopeFunc func(ctx context.Context, params *ec2.ModifyIpamScopeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIpamScopeOutput, error)

	// ModifyLaunchTemplateFunc mocks the ModifyLaunchTemplate method.
	ModifyLaunchTemplateFunc func(ctx context.Context, params *ec2.ModifyLaunchTemplateInput, optFns ...func(*ec2.Options)) (*ec2.ModifyLaunchTemplateOutput, error)

	// ModifyManagedPrefixListFunc mocks the ModifyManagedPrefixList method.
	ModifyManagedPrefixListFunc func(ctx context.Context, params *ec2.ModifyManagedPrefixListInput, optFns ...func(*ec2.Options)) (*ec2.ModifyManagedPrefixListOutput, error)

	// ModifyNetworkInterfaceAttributeFunc mocks the ModifyNetworkInterfaceAttribute method.
	ModifyNetworkInterfaceAttributeFunc func(ctx context.Context, params *ec2.ModifyNetworkInterfaceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyNetworkInterfaceAttributeOutput, error)

	// ModifyPrivateDnsNameOptionsFunc mocks the ModifyPrivateDnsNameOptions method.
	ModifyPrivateDnsNameOptionsFunc func(ctx context.Context, params *ec2.ModifyPrivateDnsNameOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyPrivateDnsNameOptionsOutput, error)

	// ModifyReservedInstancesFunc mocks the ModifyReservedInstances method.
	ModifyReservedInstancesFunc func(ctx context.Context, params *ec2.ModifyReservedInstancesInput, optFns ...func(*ec2.Options)) (*ec2.ModifyReservedInstancesOutput, error)

	// ModifySecurityGroupRulesFunc mocks the ModifySecurityGroupRules method.
	ModifySecurityGroupRulesFunc func(ctx context.Context, params *ec2.ModifySecurityGroupRulesInput, optFns ...func(*ec2.Options)) (*ec2.ModifySecurityGroupRulesOutput, error)

	// ModifySnapshotAttributeFunc mocks the ModifySnapshotAttribute method.
	ModifySnapshotAttributeFunc func(ctx context.Context, params *ec2.ModifySnapshotAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifySnapshotAttributeOutput, error)

	// ModifySnapshotTierFunc mocks the ModifySnapshotTier method.
	ModifySnapshotTierFunc func(ctx context.Context, params *ec2.ModifySnapshotTierInput, optFns ...func(*ec2.Options)) (*ec2.ModifySnapshotTierOutput, error)

	// ModifySpotFleetRequestFunc mocks the ModifySpotFleetRequest method.
	ModifySpotFleetRequestFunc func(ctx context.Context, params *ec2.ModifySpotFleetRequestInput, optFns ...func(*ec2.Options)) (*ec2.ModifySpotFleetRequestOutput, error)

	// ModifySubnetAttributeFunc mocks the ModifySubnetAttribute method.
	ModifySubnetAttributeFunc func(ctx context.Context, params *ec2.ModifySubnetAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifySubnetAttributeOutput, error)

	// ModifyTrafficMirrorFilterNetworkServicesFunc mocks the ModifyTrafficMirrorFilterNetworkServices method.
	ModifyTrafficMirrorFilterNetworkServicesFunc func(ctx context.Context, params *ec2.ModifyTrafficMirrorFilterNetworkServicesInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error)

	// ModifyTrafficMirrorFilterRuleFunc mocks the ModifyTrafficMirrorFilterRule method.
	ModifyTrafficMirrorFilterRuleFunc func(ctx context.Context, params *ec2.ModifyTrafficMirrorFilterRuleInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error)

	// ModifyTrafficMirrorSessionFunc mocks the ModifyTrafficMirrorSession method.
	ModifyTrafficMirrorSessionFunc func(ctx context.Context, params *ec2.ModifyTrafficMirrorSessionInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTrafficMirrorSessionOutput, error)

	// ModifyTransitGatewayFunc mocks the ModifyTransitGateway method.
	ModifyTransitGatewayFunc func(ctx context.Context, params *ec2.ModifyTransitGatewayInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTransitGatewayOutput, error)

	// ModifyTransitGatewayPrefixListReferenceFunc mocks the ModifyTransitGatewayPrefixListReference method.
	ModifyTransitGatewayPrefixListReferenceFunc func(ctx context.Context, params *ec2.ModifyTransitGatewayPrefixListReferenceInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTransitGatewayPrefixListReferenceOutput, error)

	// ModifyTransitGatewayVpcAttachmentFunc mocks the ModifyTransitGatewayVpcAttachment method.
	ModifyTransitGatewayVpcAttachmentFunc func(ctx context.Context, params *ec2.ModifyTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error)

	// ModifyVolumeFunc mocks the ModifyVolume method.
	ModifyVolumeFunc func(ctx context.Context, params *ec2.ModifyVolumeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVolumeOutput, error)

	// ModifyVolumeAttributeFunc mocks the ModifyVolumeAttribute method.
	ModifyVolumeAttributeFunc func(ctx context.Context, params *ec2.ModifyVolumeAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVolumeAttributeOutput, error)

	// ModifyVpcAttributeFunc mocks the ModifyVpcAttribute method.
	ModifyVpcAttributeFunc func(ctx context.Context, params *ec2.ModifyVpcAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcAttributeOutput, error)

	// ModifyVpcEndpointFunc mocks the ModifyVpcEndpoint method.
	ModifyVpcEndpointFunc func(ctx context.Context, params *ec2.ModifyVpcEndpointInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointOutput, error)

	// ModifyVpcEndpointConnectionNotificationFunc mocks the ModifyVpcEndpointConnectionNotification method.
	ModifyVpcEndpointConnectionNotificationFunc func(ctx context.Context, params *ec2.ModifyVpcEndpointConnectionNotificationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error)

	// ModifyVpcEndpointServiceConfigurationFunc mocks the ModifyVpcEndpointServiceConfiguration method.
	ModifyVpcEndpointServiceConfigurationFunc func(ctx context.Context, params *ec2.ModifyVpcEndpointServiceConfigurationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error)

	// ModifyVpcEndpointServicePayerResponsibilityFunc mocks the ModifyVpcEndpointServicePayerResponsibility method.
	ModifyVpcEndpointServicePayerResponsibilityFunc func(ctx context.Context, params *ec2.ModifyVpcEndpointServicePayerResponsibilityInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointServicePayerResponsibilityOutput, error)

	// ModifyVpcEndpointServicePermissionsFunc mocks the ModifyVpcEndpointServicePermissions method.
	ModifyVpcEndpointServicePermissionsFunc func(ctx context.Context, params *ec2.ModifyVpcEndpointServicePermissionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error)

	// ModifyVpcPeeringConnectionOptionsFunc mocks the ModifyVpcPeeringConnectionOptions method.
	ModifyVpcPeeringConnectionOptionsFunc func(ctx context.Context, params *ec2.ModifyVpcPeeringConnectionOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error)

	// ModifyVpcTenancyFunc mocks the ModifyVpcTenancy method.
	ModifyVpcTenancyFunc func(ctx context.Context, params *ec2.ModifyVpcTenancyInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcTenancyOutput, error)

	// ModifyVpnConnectionFunc mocks the ModifyVpnConnection method.
	ModifyVpnConnectionFunc func(ctx context.Context, params *ec2.ModifyVpnConnectionInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpnConnectionOutput, error)

	// ModifyVpnConnectionOptionsFunc mocks the ModifyVpnConnectionOptions method.
	ModifyVpnConnectionOptionsFunc func(ctx context.Context, params *ec2.ModifyVpnConnectionOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpnConnectionOptionsOutput, error)

	// ModifyVpnTunnelCertificateFunc mocks the ModifyVpnTunnelCertificate method.
	ModifyVpnTunnelCertificateFunc func(ctx context.Context, params *ec2.ModifyVpnTunnelCertificateInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpnTunnelCertificateOutput, error)

	// ModifyVpnTunnelOptionsFunc mocks the ModifyVpnTunnelOptions method.
	ModifyVpnTunnelOptionsFunc func(ctx context.Context, params *ec2.ModifyVpnTunnelOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpnTunnelOptionsOutput, error)

	// MonitorInstancesFunc mocks the MonitorInstances method.
	MonitorInstancesFunc func(ctx context.Context, params *ec2.MonitorInstancesInput, optFns ...func(*ec2.Options)) (*ec2.MonitorInstancesOutput, error)

	// MoveAddressToVpcFunc mocks the MoveAddressToVpc method.
	MoveAddressToVpcFunc func(ctx context.Context, params *ec2.MoveAddressToVpcInput, optFns ...func(*ec2.Options)) (*ec2.MoveAddressToVpcOutput, error)

	// MoveByoipCidrToIpamFunc mocks the MoveByoipCidrToIpam method.
	MoveByoipCidrToIpamFunc func(ctx context.Context, params *ec2.MoveByoipCidrToIpamInput, optFns ...func(*ec2.Options)) (*ec2.MoveByoipCidrToIpamOutput, error)

	// ProvisionByoipCidrFunc mocks the ProvisionByoipCidr method.
	ProvisionByoipCidrFunc func(ctx context.Context, params *ec2.ProvisionByoipCidrInput, optFns ...func(*ec2.Options)) (*ec2.ProvisionByoipCidrOutput, error)

	// ProvisionIpamPoolCidrFunc mocks the ProvisionIpamPoolCidr method.
	ProvisionIpamPoolCidrFunc func(ctx context.Context, params *ec2.ProvisionIpamPoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.ProvisionIpamPoolCidrOutput, error)

	// ProvisionPublicIpv4PoolCidrFunc mocks the ProvisionPublicIpv4PoolCidr method.
	ProvisionPublicIpv4PoolCidrFunc func(ctx context.Context, params *ec2.ProvisionPublicIpv4PoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.ProvisionPublicIpv4PoolCidrOutput, error)

	// PurchaseHostReservationFunc mocks the PurchaseHostReservation method.
	PurchaseHostReservationFunc func(ctx context.Context, params *ec2.PurchaseHostReservationInput, optFns ...func(*ec2.Options)) (*ec2.PurchaseHostReservationOutput, error)

	// PurchaseReservedInstancesOfferingFunc mocks the PurchaseReservedInstancesOffering method.
	PurchaseReservedInstancesOfferingFunc func(ctx context.Context, params *ec2.PurchaseReservedInstancesOfferingInput, optFns ...func(*ec2.Options)) (*ec2.PurchaseReservedInstancesOfferingOutput, error)

	// PurchaseScheduledInstancesFunc mocks the PurchaseScheduledInstances method.
	PurchaseScheduledInstancesFunc func(ctx context.Context, params *ec2.PurchaseScheduledInstancesInput, optFns ...func(*ec2.Options)) (*ec2.PurchaseScheduledInstancesOutput, error)

	// RebootInstancesFunc mocks the RebootInstances method.
	RebootInstancesFunc func(ctx context.Context, params *ec2.RebootInstancesInput, optFns ...func(*ec2.Options)) (*ec2.RebootInstancesOutput, error)

	// RegisterImageFunc mocks the RegisterImage method.
	RegisterImageFunc func(ctx context.Context, params *ec2.RegisterImageInput, optFns ...func(*ec2.Options)) (*ec2.RegisterImageOutput, error)

	// RegisterInstanceEventNotificationAttributesFunc mocks the RegisterInstanceEventNotificationAttributes method.
	RegisterInstanceEventNotificationAttributesFunc func(ctx context.Context, params *ec2.RegisterInstanceEventNotificationAttributesInput, optFns ...func(*ec2.Options)) (*ec2.RegisterInstanceEventNotificationAttributesOutput, error)

	// RegisterTransitGatewayMulticastGroupMembersFunc mocks the RegisterTransitGatewayMulticastGroupMembers method.
	RegisterTransitGatewayMulticastGroupMembersFunc func(ctx context.Context, params *ec2.RegisterTransitGatewayMulticastGroupMembersInput, optFns ...func(*ec2.Options)) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error)

	// RegisterTransitGatewayMulticastGroupSourcesFunc mocks the RegisterTransitGatewayMulticastGroupSources method.
	RegisterTransitGatewayMulticastGroupSourcesFunc func(ctx context.Context, params *ec2.RegisterTransitGatewayMulticastGroupSourcesInput, optFns ...func(*ec2.Options)) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error)

	// RejectTransitGatewayMulticastDomainAssociationsFunc mocks the RejectTransitGatewayMulticastDomainAssociations method.
	RejectTransitGatewayMulticastDomainAssociationsFunc func(ctx context.Context, params *ec2.RejectTransitGatewayMulticastDomainAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.RejectTransitGatewayMulticastDomainAssociationsOutput, error)

	// RejectTransitGatewayPeeringAttachmentFunc mocks the RejectTransitGatewayPeeringAttachment method.
	RejectTransitGatewayPeeringAttachmentFunc func(ctx context.Context, params *ec2.RejectTransitGatewayPeeringAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error)

	// RejectTransitGatewayVpcAttachmentFunc mocks the RejectTransitGatewayVpcAttachment method.
	RejectTransitGatewayVpcAttachmentFunc func(ctx context.Context, params *ec2.RejectTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error)

	// RejectVpcEndpointConnectionsFunc mocks the RejectVpcEndpointConnections method.
	RejectVpcEndpointConnectionsFunc func(ctx context.Context, params *ec2.RejectVpcEndpointConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.RejectVpcEndpointConnectionsOutput, error)

	// RejectVpcPeeringConnectionFunc mocks the RejectVpcPeeringConnection method.
	RejectVpcPeeringConnectionFunc func(ctx context.Context, params *ec2.RejectVpcPeeringConnectionInput, optFns ...func(*ec2.Options)) (*ec2.RejectVpcPeeringConnectionOutput, error)

	// ReleaseAddressFunc mocks the ReleaseAddress method.
	ReleaseAddressFunc func(ctx context.Context, params *ec2.ReleaseAddressInput, optFns ...func(*ec2.Options)) (*ec2.ReleaseAddressOutput, error)

	// ReleaseHostsFunc mocks the ReleaseHosts method.
	ReleaseHostsFunc func(ctx context.Context, params *ec2.ReleaseHostsInput, optFns ...func(*ec2.Options)) (*ec2.ReleaseHostsOutput, error)

	// ReleaseIpamPoolAllocationFunc mocks the ReleaseIpamPoolAllocation method.
	ReleaseIpamPoolAllocationFunc func(ctx context.Context, params *ec2.ReleaseIpamPoolAllocationInput, optFns ...func(*ec2.Options)) (*ec2.ReleaseIpamPoolAllocationOutput, error)

	// ReplaceIamInstanceProfileAssociationFunc mocks the ReplaceIamInstanceProfileAssociation method.
	ReplaceIamInstanceProfileAssociationFunc func(ctx context.Context, params *ec2.ReplaceIamInstanceProfileAssociationInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error)

	// ReplaceNetworkAclAssociationFunc mocks the ReplaceNetworkAclAssociation method.
	ReplaceNetworkAclAssociationFunc func(ctx context.Context, params *ec2.ReplaceNetworkAclAssociationInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceNetworkAclAssociationOutput, error)

	// ReplaceNetworkAclEntryFunc mocks the ReplaceNetworkAclEntry method.
	ReplaceNetworkAclEntryFunc func(ctx context.Context, params *ec2.ReplaceNetworkAclEntryInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceNetworkAclEntryOutput, error)

	// ReplaceRouteFunc mocks the ReplaceRoute method.
	ReplaceRouteFunc func(ctx context.Context, params *ec2.ReplaceRouteInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceRouteOutput, error)

	// ReplaceRouteTableAssociationFunc mocks the ReplaceRouteTableAssociation method.
	ReplaceRouteTableAssociationFunc func(ctx context.Context, params *ec2.ReplaceRouteTableAssociationInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceRouteTableAssociationOutput, error)

	// ReplaceTransitGatewayRouteFunc mocks the ReplaceTransitGatewayRoute method.
	ReplaceTransitGatewayRouteFunc func(ctx context.Context, params *ec2.ReplaceTransitGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceTransitGatewayRouteOutput, error)

	// ReportInstanceStatusFunc mocks the ReportInstanceStatus method.
	ReportInstanceStatusFunc func(ctx context.Context, params *ec2.ReportInstanceStatusInput, optFns ...func(*ec2.Options)) (*ec2.ReportInstanceStatusOutput, error)

	// RequestSpotFleetFunc mocks the RequestSpotFleet method.
	RequestSpotFleetFunc func(ctx context.Context, params *ec2.RequestSpotFleetInput, optFns ...func(*ec2.Options)) (*ec2.RequestSpotFleetOutput, error)

	// RequestSpotInstancesFunc mocks the RequestSpotInstances method.
	RequestSpotInstancesFunc func(ctx context.Context, params *ec2.RequestSpotInstancesInput, optFns ...func(*ec2.Options)) (*ec2.RequestSpotInstancesOutput, error)

	// ResetAddressAttributeFunc mocks the ResetAddressAttribute method.
	ResetAddressAttributeFunc func(ctx context.Context, params *ec2.ResetAddressAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetAddressAttributeOutput, error)

	// ResetEbsDefaultKmsKeyIdFunc mocks the ResetEbsDefaultKmsKeyId method.
	ResetEbsDefaultKmsKeyIdFunc func(ctx context.Context, params *ec2.ResetEbsDefaultKmsKeyIdInput, optFns ...func(*ec2.Options)) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error)

	// ResetFpgaImageAttributeFunc mocks the ResetFpgaImageAttribute method.
	ResetFpgaImageAttributeFunc func(ctx context.Context, params *ec2.ResetFpgaImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetFpgaImageAttributeOutput, error)

	// ResetImageAttributeFunc mocks the ResetImageAttribute method.
	ResetImageAttributeFunc func(ctx context.Context, params *ec2.ResetImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetImageAttributeOutput, error)

	// ResetInstanceAttributeFunc mocks the ResetInstanceAttribute method.
	ResetInstanceAttributeFunc func(ctx context.Context, params *ec2.ResetInstanceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetInstanceAttributeOutput, error)

	// ResetNetworkInterfaceAttributeFunc mocks the ResetNetworkInterfaceAttribute method.
	ResetNetworkInterfaceAttributeFunc func(ctx context.Context, params *ec2.ResetNetworkInterfaceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetNetworkInterfaceAttributeOutput, error)

	// ResetSnapshotAttributeFunc mocks the ResetSnapshotAttribute method.
	ResetSnapshotAttributeFunc func(ctx context.Context, params *ec2.ResetSnapshotAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetSnapshotAttributeOutput, error)

	// RestoreAddressToClassicFunc mocks the RestoreAddressToClassic method.
	RestoreAddressToClassicFunc func(ctx context.Context, params *ec2.RestoreAddressToClassicInput, optFns ...func(*ec2.Options)) (*ec2.RestoreAddressToClassicOutput, error)

	// RestoreImageFromRecycleBinFunc mocks the RestoreImageFromRecycleBin method.
	RestoreImageFromRecycleBinFunc func(ctx context.Context, params *ec2.RestoreImageFromRecycleBinInput, optFns ...func(*ec2.Options)) (*ec2.RestoreImageFromRecycleBinOutput, error)

	// RestoreManagedPrefixListVersionFunc mocks the RestoreManagedPrefixListVersion method.
	RestoreManagedPrefixListVersionFunc func(ctx context.Context, params *ec2.RestoreManagedPrefixListVersionInput, optFns ...func(*ec2.Options)) (*ec2.RestoreManagedPrefixListVersionOutput, error)

	// RestoreSnapshotFromRecycleBinFunc mocks the RestoreSnapshotFromRecycleBin method.
	RestoreSnapshotFromRecycleBinFunc func(ctx context.Context, params *ec2.RestoreSnapshotFromRecycleBinInput, optFns ...func(*ec2.Options)) (*ec2.RestoreSnapshotFromRecycleBinOutput, error)

	// RestoreSnapshotTierFunc mocks the RestoreSnapshotTier method.
	RestoreSnapshotTierFunc func(ctx context.Context, params *ec2.RestoreSnapshotTierInput, optFns ...func(*ec2.Options)) (*ec2.RestoreSnapshotTierOutput, error)

	// RevokeClientVpnIngressFunc mocks the RevokeClientVpnIngress method.
	RevokeClientVpnIngressFunc func(ctx context.Context, params *ec2.RevokeClientVpnIngressInput, optFns ...func(*ec2.Options)) (*ec2.RevokeClientVpnIngressOutput, error)

	// RevokeSecurityGroupEgressFunc mocks the RevokeSecurityGroupEgress method.
	RevokeSecurityGroupEgressFunc func(ctx context.Context, params *ec2.RevokeSecurityGroupEgressInput, optFns ...func(*ec2.Options)) (*ec2.RevokeSecurityGroupEgressOutput, error)

	// RevokeSecurityGroupIngressFunc mocks the RevokeSecurityGroupIngress method.
	RevokeSecurityGroupIngressFunc func(ctx context.Context, params *ec2.RevokeSecurityGroupIngressInput, optFns ...func(*ec2.Options)) (*ec2.RevokeSecurityGroupIngressOutput, error)

	// RunInstancesFunc mocks the RunInstances method.
	RunInstancesFunc func(ctx context.Context, params *ec2.RunInstancesInput, optFns ...func(*ec2.Options)) (*ec2.RunInstancesOutput, error)

	// RunScheduledInstancesFunc mocks the RunScheduledInstances method.
	RunScheduledInstancesFunc func(ctx context.Context, params *ec2.RunScheduledInstancesInput, optFns ...func(*ec2.Options)) (*ec2.RunScheduledInstancesOutput, error)

	// SearchLocalGatewayRoutesFunc mocks the SearchLocalGatewayRoutes method.
	SearchLocalGatewayRoutesFunc func(ctx context.Context, params *ec2.SearchLocalGatewayRoutesInput, optFns ...func(*ec2.Options)) (*ec2.SearchLocalGatewayRoutesOutput, error)

	// SearchTransitGatewayMulticastGroupsFunc mocks the SearchTransitGatewayMulticastGroups method.
	SearchTransitGatewayMulticastGroupsFunc func(ctx context.Context, params *ec2.SearchTransitGatewayMulticastGroupsInput, optFns ...func(*ec2.Options)) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error)

	// SearchTransitGatewayRoutesFunc mocks the SearchTransitGatewayRoutes method.
	SearchTransitGatewayRoutesFunc func(ctx context.Context, params *ec2.SearchTransitGatewayRoutesInput, optFns ...func(*ec2.Options)) (*ec2.SearchTransitGatewayRoutesOutput, error)

	// SendDiagnosticInterruptFunc mocks the SendDiagnosticInterrupt method.
	SendDiagnosticInterruptFunc func(ctx context.Context, params *ec2.SendDiagnosticInterruptInput, optFns ...func(*ec2.Options)) (*ec2.SendDiagnosticInterruptOutput, error)

	// StartInstancesFunc mocks the StartInstances method.
	StartInstancesFunc func(ctx context.Context, params *ec2.StartInstancesInput, optFns ...func(*ec2.Options)) (*ec2.StartInstancesOutput, error)

	// StartNetworkInsightsAccessScopeAnalysisFunc mocks the StartNetworkInsightsAccessScopeAnalysis method.
	StartNetworkInsightsAccessScopeAnalysisFunc func(ctx context.Context, params *ec2.StartNetworkInsightsAccessScopeAnalysisInput, optFns ...func(*ec2.Options)) (*ec2.StartNetworkInsightsAccessScopeAnalysisOutput, error)

	// StartNetworkInsightsAnalysisFunc mocks the StartNetworkInsightsAnalysis method.
	StartNetworkInsightsAnalysisFunc func(ctx context.Context, params *ec2.StartNetworkInsightsAnalysisInput, optFns ...func(*ec2.Options)) (*ec2.StartNetworkInsightsAnalysisOutput, error)

	// StartVpcEndpointServicePrivateDnsVerificationFunc mocks the StartVpcEndpointServicePrivateDnsVerification method.
	StartVpcEndpointServicePrivateDnsVerificationFunc func(ctx context.Context, params *ec2.StartVpcEndpointServicePrivateDnsVerificationInput, optFns ...func(*ec2.Options)) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error)

	// StopInstancesFunc mocks the StopInstances method.
	StopInstancesFunc func(ctx context.Context, params *ec2.StopInstancesInput, optFns ...func(*ec2.Options)) (*ec2.StopInstancesOutput, error)

	// TerminateClientVpnConnectionsFunc mocks the TerminateClientVpnConnections method.
	TerminateClientVpnConnectionsFunc func(ctx context.Context, params *ec2.TerminateClientVpnConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.TerminateClientVpnConnectionsOutput, error)

	// TerminateInstancesFunc mocks the TerminateInstances method.
	TerminateInstancesFunc func(ctx context.Context, params *ec2.TerminateInstancesInput, optFns ...func(*ec2.Options)) (*ec2.TerminateInstancesOutput, error)

	// UnassignIpv6AddressesFunc mocks the UnassignIpv6Addresses method.
	UnassignIpv6AddressesFunc func(ctx context.Context, params *ec2.UnassignIpv6AddressesInput, optFns ...func(*ec2.Options)) (*ec2.UnassignIpv6AddressesOutput, error)

	// UnassignPrivateIpAddressesFunc mocks the UnassignPrivateIpAddresses method.
	UnassignPrivateIpAddressesFunc func(ctx context.Context, params *ec2.UnassignPrivateIpAddressesInput, optFns ...func(*ec2.Options)) (*ec2.UnassignPrivateIpAddressesOutput, error)

	// UnmonitorInstancesFunc mocks the UnmonitorInstances method.
	UnmonitorInstancesFunc func(ctx context.Context, params *ec2.UnmonitorInstancesInput, optFns ...func(*ec2.Options)) (*ec2.UnmonitorInstancesOutput, error)

	// UpdateSecurityGroupRuleDescriptionsEgressFunc mocks the UpdateSecurityGroupRuleDescriptionsEgress method.
	UpdateSecurityGroupRuleDescriptionsEgressFunc func(ctx context.Context, params *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, optFns ...func(*ec2.Options)) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error)

	// UpdateSecurityGroupRuleDescriptionsIngressFunc mocks the UpdateSecurityGroupRuleDescriptionsIngress method.
	UpdateSecurityGroupRuleDescriptionsIngressFunc func(ctx context.Context, params *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, optFns ...func(*ec2.Options)) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error)

	// WithdrawByoipCidrFunc mocks the WithdrawByoipCidr method.
	WithdrawByoipCidrFunc func(ctx context.Context, params *ec2.WithdrawByoipCidrInput, optFns ...func(*ec2.Options)) (*ec2.WithdrawByoipCidrOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// AcceptReservedInstancesExchangeQuote holds details about calls to the AcceptReservedInstancesExchangeQuote method.
		AcceptReservedInstancesExchangeQuote []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AcceptReservedInstancesExchangeQuoteInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AcceptTransitGatewayMulticastDomainAssociations holds details about calls to the AcceptTransitGatewayMulticastDomainAssociations method.
		AcceptTransitGatewayMulticastDomainAssociations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AcceptTransitGatewayMulticastDomainAssociationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AcceptTransitGatewayPeeringAttachment holds details about calls to the AcceptTransitGatewayPeeringAttachment method.
		AcceptTransitGatewayPeeringAttachment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AcceptTransitGatewayPeeringAttachmentInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AcceptTransitGatewayVpcAttachment holds details about calls to the AcceptTransitGatewayVpcAttachment method.
		AcceptTransitGatewayVpcAttachment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AcceptTransitGatewayVpcAttachmentInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AcceptVpcEndpointConnections holds details about calls to the AcceptVpcEndpointConnections method.
		AcceptVpcEndpointConnections []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AcceptVpcEndpointConnectionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AcceptVpcPeeringConnection holds details about calls to the AcceptVpcPeeringConnection method.
		AcceptVpcPeeringConnection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AcceptVpcPeeringConnectionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AdvertiseByoipCidr holds details about calls to the AdvertiseByoipCidr method.
		AdvertiseByoipCidr []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AdvertiseByoipCidrInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AllocateAddress holds details about calls to the AllocateAddress method.
		AllocateAddress []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AllocateAddressInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AllocateHosts holds details about calls to the AllocateHosts method.
		AllocateHosts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AllocateHostsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AllocateIpamPoolCidr holds details about calls to the AllocateIpamPoolCidr method.
		AllocateIpamPoolCidr []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AllocateIpamPoolCidrInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ApplySecurityGroupsToClientVpnTargetNetwork holds details about calls to the ApplySecurityGroupsToClientVpnTargetNetwork method.
		ApplySecurityGroupsToClientVpnTargetNetwork []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssignIpv6Addresses holds details about calls to the AssignIpv6Addresses method.
		AssignIpv6Addresses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssignIpv6AddressesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssignPrivateIpAddresses holds details about calls to the AssignPrivateIpAddresses method.
		AssignPrivateIpAddresses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssignPrivateIpAddressesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssociateAddress holds details about calls to the AssociateAddress method.
		AssociateAddress []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssociateAddressInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssociateClientVpnTargetNetwork holds details about calls to the AssociateClientVpnTargetNetwork method.
		AssociateClientVpnTargetNetwork []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssociateClientVpnTargetNetworkInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssociateDhcpOptions holds details about calls to the AssociateDhcpOptions method.
		AssociateDhcpOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssociateDhcpOptionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssociateEnclaveCertificateIamRole holds details about calls to the AssociateEnclaveCertificateIamRole method.
		AssociateEnclaveCertificateIamRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssociateEnclaveCertificateIamRoleInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssociateIamInstanceProfile holds details about calls to the AssociateIamInstanceProfile method.
		AssociateIamInstanceProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssociateIamInstanceProfileInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssociateInstanceEventWindow holds details about calls to the AssociateInstanceEventWindow method.
		AssociateInstanceEventWindow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssociateInstanceEventWindowInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssociateRouteTable holds details about calls to the AssociateRouteTable method.
		AssociateRouteTable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssociateRouteTableInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssociateSubnetCidrBlock holds details about calls to the AssociateSubnetCidrBlock method.
		AssociateSubnetCidrBlock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssociateSubnetCidrBlockInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssociateTransitGatewayMulticastDomain holds details about calls to the AssociateTransitGatewayMulticastDomain method.
		AssociateTransitGatewayMulticastDomain []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssociateTransitGatewayMulticastDomainInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssociateTransitGatewayPolicyTable holds details about calls to the AssociateTransitGatewayPolicyTable method.
		AssociateTransitGatewayPolicyTable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssociateTransitGatewayPolicyTableInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssociateTransitGatewayRouteTable holds details about calls to the AssociateTransitGatewayRouteTable method.
		AssociateTransitGatewayRouteTable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssociateTransitGatewayRouteTableInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssociateTrunkInterface holds details about calls to the AssociateTrunkInterface method.
		AssociateTrunkInterface []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssociateTrunkInterfaceInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AssociateVpcCidrBlock holds details about calls to the AssociateVpcCidrBlock method.
		AssociateVpcCidrBlock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AssociateVpcCidrBlockInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AttachClassicLinkVpc holds details about calls to the AttachClassicLinkVpc method.
		AttachClassicLinkVpc []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AttachClassicLinkVpcInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AttachInternetGateway holds details about calls to the AttachInternetGateway method.
		AttachInternetGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AttachInternetGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AttachNetworkInterface holds details about calls to the AttachNetworkInterface method.
		AttachNetworkInterface []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AttachNetworkInterfaceInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AttachVolume holds details about calls to the AttachVolume method.
		AttachVolume []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AttachVolumeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AttachVpnGateway holds details about calls to the AttachVpnGateway method.
		AttachVpnGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AttachVpnGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AuthorizeClientVpnIngress holds details about calls to the AuthorizeClientVpnIngress method.
		AuthorizeClientVpnIngress []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AuthorizeClientVpnIngressInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AuthorizeSecurityGroupEgress holds details about calls to the AuthorizeSecurityGroupEgress method.
		AuthorizeSecurityGroupEgress []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AuthorizeSecurityGroupEgressInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// AuthorizeSecurityGroupIngress holds details about calls to the AuthorizeSecurityGroupIngress method.
		AuthorizeSecurityGroupIngress []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.AuthorizeSecurityGroupIngressInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// BundleInstance holds details about calls to the BundleInstance method.
		BundleInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.BundleInstanceInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CancelBundleTask holds details about calls to the CancelBundleTask method.
		CancelBundleTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CancelBundleTaskInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CancelCapacityReservation holds details about calls to the CancelCapacityReservation method.
		CancelCapacityReservation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CancelCapacityReservationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CancelCapacityReservationFleets holds details about calls to the CancelCapacityReservationFleets method.
		CancelCapacityReservationFleets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CancelCapacityReservationFleetsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CancelConversionTask holds details about calls to the CancelConversionTask method.
		CancelConversionTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CancelConversionTaskInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CancelExportTask holds details about calls to the CancelExportTask method.
		CancelExportTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CancelExportTaskInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CancelImportTask holds details about calls to the CancelImportTask method.
		CancelImportTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CancelImportTaskInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CancelReservedInstancesListing holds details about calls to the CancelReservedInstancesListing method.
		CancelReservedInstancesListing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CancelReservedInstancesListingInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CancelSpotFleetRequests holds details about calls to the CancelSpotFleetRequests method.
		CancelSpotFleetRequests []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CancelSpotFleetRequestsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CancelSpotInstanceRequests holds details about calls to the CancelSpotInstanceRequests method.
		CancelSpotInstanceRequests []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CancelSpotInstanceRequestsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ConfirmProductInstance holds details about calls to the ConfirmProductInstance method.
		ConfirmProductInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ConfirmProductInstanceInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CopyFpgaImage holds details about calls to the CopyFpgaImage method.
		CopyFpgaImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CopyFpgaImageInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CopyImage holds details about calls to the CopyImage method.
		CopyImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CopyImageInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CopySnapshot holds details about calls to the CopySnapshot method.
		CopySnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CopySnapshotInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateCapacityReservation holds details about calls to the CreateCapacityReservation method.
		CreateCapacityReservation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateCapacityReservationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateCapacityReservationFleet holds details about calls to the CreateCapacityReservationFleet method.
		CreateCapacityReservationFleet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateCapacityReservationFleetInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateCarrierGateway holds details about calls to the CreateCarrierGateway method.
		CreateCarrierGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateCarrierGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateClientVpnEndpoint holds details about calls to the CreateClientVpnEndpoint method.
		CreateClientVpnEndpoint []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateClientVpnEndpointInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateClientVpnRoute holds details about calls to the CreateClientVpnRoute method.
		CreateClientVpnRoute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateClientVpnRouteInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateCustomerGateway holds details about calls to the CreateCustomerGateway method.
		CreateCustomerGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateCustomerGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateDefaultSubnet holds details about calls to the CreateDefaultSubnet method.
		CreateDefaultSubnet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateDefaultSubnetInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateDefaultVpc holds details about calls to the CreateDefaultVpc method.
		CreateDefaultVpc []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateDefaultVpcInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateDhcpOptions holds details about calls to the CreateDhcpOptions method.
		CreateDhcpOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateDhcpOptionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateEgressOnlyInternetGateway holds details about calls to the CreateEgressOnlyInternetGateway method.
		CreateEgressOnlyInternetGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateEgressOnlyInternetGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateFleet holds details about calls to the CreateFleet method.
		CreateFleet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateFleetInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateFlowLogs holds details about calls to the CreateFlowLogs method.
		CreateFlowLogs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateFlowLogsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateFpgaImage holds details about calls to the CreateFpgaImage method.
		CreateFpgaImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateFpgaImageInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateImage holds details about calls to the CreateImage method.
		CreateImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateImageInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateInstanceEventWindow holds details about calls to the CreateInstanceEventWindow method.
		CreateInstanceEventWindow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateInstanceEventWindowInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateInstanceExportTask holds details about calls to the CreateInstanceExportTask method.
		CreateInstanceExportTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateInstanceExportTaskInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateInternetGateway holds details about calls to the CreateInternetGateway method.
		CreateInternetGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateInternetGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateIpam holds details about calls to the CreateIpam method.
		CreateIpam []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateIpamInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateIpamPool holds details about calls to the CreateIpamPool method.
		CreateIpamPool []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateIpamPoolInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateIpamScope holds details about calls to the CreateIpamScope method.
		CreateIpamScope []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateIpamScopeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateKeyPair holds details about calls to the CreateKeyPair method.
		CreateKeyPair []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateKeyPairInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateLaunchTemplate holds details about calls to the CreateLaunchTemplate method.
		CreateLaunchTemplate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateLaunchTemplateInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateLaunchTemplateVersion holds details about calls to the CreateLaunchTemplateVersion method.
		CreateLaunchTemplateVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateLaunchTemplateVersionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateLocalGatewayRoute holds details about calls to the CreateLocalGatewayRoute method.
		CreateLocalGatewayRoute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateLocalGatewayRouteInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateLocalGatewayRouteTableVpcAssociation holds details about calls to the CreateLocalGatewayRouteTableVpcAssociation method.
		CreateLocalGatewayRouteTableVpcAssociation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateManagedPrefixList holds details about calls to the CreateManagedPrefixList method.
		CreateManagedPrefixList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateManagedPrefixListInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateNatGateway holds details about calls to the CreateNatGateway method.
		CreateNatGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateNatGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateNetworkAcl holds details about calls to the CreateNetworkAcl method.
		CreateNetworkAcl []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateNetworkAclInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateNetworkAclEntry holds details about calls to the CreateNetworkAclEntry method.
		CreateNetworkAclEntry []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateNetworkAclEntryInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateNetworkInsightsAccessScope holds details about calls to the CreateNetworkInsightsAccessScope method.
		CreateNetworkInsightsAccessScope []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateNetworkInsightsAccessScopeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateNetworkInsightsPath holds details about calls to the CreateNetworkInsightsPath method.
		CreateNetworkInsightsPath []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateNetworkInsightsPathInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateNetworkInterface holds details about calls to the CreateNetworkInterface method.
		CreateNetworkInterface []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateNetworkInterfaceInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateNetworkInterfacePermission holds details about calls to the CreateNetworkInterfacePermission method.
		CreateNetworkInterfacePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateNetworkInterfacePermissionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreatePlacementGroup holds details about calls to the CreatePlacementGroup method.
		CreatePlacementGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreatePlacementGroupInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreatePublicIpv4Pool holds details about calls to the CreatePublicIpv4Pool method.
		CreatePublicIpv4Pool []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreatePublicIpv4PoolInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateReplaceRootVolumeTask holds details about calls to the CreateReplaceRootVolumeTask method.
		CreateReplaceRootVolumeTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateReplaceRootVolumeTaskInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateReservedInstancesListing holds details about calls to the CreateReservedInstancesListing method.
		CreateReservedInstancesListing []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateReservedInstancesListingInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateRestoreImageTask holds details about calls to the CreateRestoreImageTask method.
		CreateRestoreImageTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateRestoreImageTaskInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateRoute holds details about calls to the CreateRoute method.
		CreateRoute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateRouteInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateRouteTable holds details about calls to the CreateRouteTable method.
		CreateRouteTable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateRouteTableInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateSecurityGroup holds details about calls to the CreateSecurityGroup method.
		CreateSecurityGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateSecurityGroupInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateSnapshot holds details about calls to the CreateSnapshot method.
		CreateSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateSnapshotInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateSnapshots holds details about calls to the CreateSnapshots method.
		CreateSnapshots []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateSnapshotsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateSpotDatafeedSubscription holds details about calls to the CreateSpotDatafeedSubscription method.
		CreateSpotDatafeedSubscription []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateSpotDatafeedSubscriptionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateStoreImageTask holds details about calls to the CreateStoreImageTask method.
		CreateStoreImageTask []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateStoreImageTaskInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateSubnet holds details about calls to the CreateSubnet method.
		CreateSubnet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateSubnetInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateSubnetCidrReservation holds details about calls to the CreateSubnetCidrReservation method.
		CreateSubnetCidrReservation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateSubnetCidrReservationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTags holds details about calls to the CreateTags method.
		CreateTags []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTagsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTrafficMirrorFilter holds details about calls to the CreateTrafficMirrorFilter method.
		CreateTrafficMirrorFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTrafficMirrorFilterInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTrafficMirrorFilterRule holds details about calls to the CreateTrafficMirrorFilterRule method.
		CreateTrafficMirrorFilterRule []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTrafficMirrorFilterRuleInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTrafficMirrorSession holds details about calls to the CreateTrafficMirrorSession method.
		CreateTrafficMirrorSession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTrafficMirrorSessionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTrafficMirrorTarget holds details about calls to the CreateTrafficMirrorTarget method.
		CreateTrafficMirrorTarget []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTrafficMirrorTargetInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTransitGateway holds details about calls to the CreateTransitGateway method.
		CreateTransitGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTransitGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTransitGatewayConnect holds details about calls to the CreateTransitGatewayConnect method.
		CreateTransitGatewayConnect []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTransitGatewayConnectInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTransitGatewayConnectPeer holds details about calls to the CreateTransitGatewayConnectPeer method.
		CreateTransitGatewayConnectPeer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTransitGatewayConnectPeerInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTransitGatewayMulticastDomain holds details about calls to the CreateTransitGatewayMulticastDomain method.
		CreateTransitGatewayMulticastDomain []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTransitGatewayMulticastDomainInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTransitGatewayPeeringAttachment holds details about calls to the CreateTransitGatewayPeeringAttachment method.
		CreateTransitGatewayPeeringAttachment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTransitGatewayPeeringAttachmentInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTransitGatewayPolicyTable holds details about calls to the CreateTransitGatewayPolicyTable method.
		CreateTransitGatewayPolicyTable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTransitGatewayPolicyTableInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTransitGatewayPrefixListReference holds details about calls to the CreateTransitGatewayPrefixListReference method.
		CreateTransitGatewayPrefixListReference []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTransitGatewayPrefixListReferenceInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTransitGatewayRoute holds details about calls to the CreateTransitGatewayRoute method.
		CreateTransitGatewayRoute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTransitGatewayRouteInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTransitGatewayRouteTable holds details about calls to the CreateTransitGatewayRouteTable method.
		CreateTransitGatewayRouteTable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTransitGatewayRouteTableInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTransitGatewayRouteTableAnnouncement holds details about calls to the CreateTransitGatewayRouteTableAnnouncement method.
		CreateTransitGatewayRouteTableAnnouncement []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTransitGatewayRouteTableAnnouncementInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateTransitGatewayVpcAttachment holds details about calls to the CreateTransitGatewayVpcAttachment method.
		CreateTransitGatewayVpcAttachment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateTransitGatewayVpcAttachmentInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateVolume holds details about calls to the CreateVolume method.
		CreateVolume []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateVolumeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateVpc holds details about calls to the CreateVpc method.
		CreateVpc []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateVpcInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateVpcEndpoint holds details about calls to the CreateVpcEndpoint method.
		CreateVpcEndpoint []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateVpcEndpointInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateVpcEndpointConnectionNotification holds details about calls to the CreateVpcEndpointConnectionNotification method.
		CreateVpcEndpointConnectionNotification []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateVpcEndpointConnectionNotificationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateVpcEndpointServiceConfiguration holds details about calls to the CreateVpcEndpointServiceConfiguration method.
		CreateVpcEndpointServiceConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateVpcEndpointServiceConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateVpcPeeringConnection holds details about calls to the CreateVpcPeeringConnection method.
		CreateVpcPeeringConnection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateVpcPeeringConnectionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateVpnConnection holds details about calls to the CreateVpnConnection method.
		CreateVpnConnection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateVpnConnectionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateVpnConnectionRoute holds details about calls to the CreateVpnConnectionRoute method.
		CreateVpnConnectionRoute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateVpnConnectionRouteInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// CreateVpnGateway holds details about calls to the CreateVpnGateway method.
		CreateVpnGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.CreateVpnGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteCarrierGateway holds details about calls to the DeleteCarrierGateway method.
		DeleteCarrierGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteCarrierGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteClientVpnEndpoint holds details about calls to the DeleteClientVpnEndpoint method.
		DeleteClientVpnEndpoint []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteClientVpnEndpointInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteClientVpnRoute holds details about calls to the DeleteClientVpnRoute method.
		DeleteClientVpnRoute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteClientVpnRouteInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteCustomerGateway holds details about calls to the DeleteCustomerGateway method.
		DeleteCustomerGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteCustomerGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteDhcpOptions holds details about calls to the DeleteDhcpOptions method.
		DeleteDhcpOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteDhcpOptionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteEgressOnlyInternetGateway holds details about calls to the DeleteEgressOnlyInternetGateway method.
		DeleteEgressOnlyInternetGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteEgressOnlyInternetGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteFleets holds details about calls to the DeleteFleets method.
		DeleteFleets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteFleetsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteFlowLogs holds details about calls to the DeleteFlowLogs method.
		DeleteFlowLogs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteFlowLogsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteFpgaImage holds details about calls to the DeleteFpgaImage method.
		DeleteFpgaImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteFpgaImageInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteInstanceEventWindow holds details about calls to the DeleteInstanceEventWindow method.
		DeleteInstanceEventWindow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteInstanceEventWindowInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteInternetGateway holds details about calls to the DeleteInternetGateway method.
		DeleteInternetGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteInternetGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteIpam holds details about calls to the DeleteIpam method.
		DeleteIpam []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteIpamInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteIpamPool holds details about calls to the DeleteIpamPool method.
		DeleteIpamPool []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteIpamPoolInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteIpamScope holds details about calls to the DeleteIpamScope method.
		DeleteIpamScope []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteIpamScopeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteKeyPair holds details about calls to the DeleteKeyPair method.
		DeleteKeyPair []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteKeyPairInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteLaunchTemplate holds details about calls to the DeleteLaunchTemplate method.
		DeleteLaunchTemplate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteLaunchTemplateInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteLaunchTemplateVersions holds details about calls to the DeleteLaunchTemplateVersions method.
		DeleteLaunchTemplateVersions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteLaunchTemplateVersionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteLocalGatewayRoute holds details about calls to the DeleteLocalGatewayRoute method.
		DeleteLocalGatewayRoute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteLocalGatewayRouteInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteLocalGatewayRouteTableVpcAssociation holds details about calls to the DeleteLocalGatewayRouteTableVpcAssociation method.
		DeleteLocalGatewayRouteTableVpcAssociation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteManagedPrefixList holds details about calls to the DeleteManagedPrefixList method.
		DeleteManagedPrefixList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteManagedPrefixListInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteNatGateway holds details about calls to the DeleteNatGateway method.
		DeleteNatGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteNatGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteNetworkAcl holds details about calls to the DeleteNetworkAcl method.
		DeleteNetworkAcl []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteNetworkAclInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteNetworkAclEntry holds details about calls to the DeleteNetworkAclEntry method.
		DeleteNetworkAclEntry []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteNetworkAclEntryInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteNetworkInsightsAccessScope holds details about calls to the DeleteNetworkInsightsAccessScope method.
		DeleteNetworkInsightsAccessScope []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteNetworkInsightsAccessScopeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteNetworkInsightsAccessScopeAnalysis holds details about calls to the DeleteNetworkInsightsAccessScopeAnalysis method.
		DeleteNetworkInsightsAccessScopeAnalysis []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteNetworkInsightsAccessScopeAnalysisInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteNetworkInsightsAnalysis holds details about calls to the DeleteNetworkInsightsAnalysis method.
		DeleteNetworkInsightsAnalysis []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteNetworkInsightsAnalysisInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteNetworkInsightsPath holds details about calls to the DeleteNetworkInsightsPath method.
		DeleteNetworkInsightsPath []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteNetworkInsightsPathInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteNetworkInterface holds details about calls to the DeleteNetworkInterface method.
		DeleteNetworkInterface []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteNetworkInterfaceInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteNetworkInterfacePermission holds details about calls to the DeleteNetworkInterfacePermission method.
		DeleteNetworkInterfacePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteNetworkInterfacePermissionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeletePlacementGroup holds details about calls to the DeletePlacementGroup method.
		DeletePlacementGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeletePlacementGroupInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeletePublicIpv4Pool holds details about calls to the DeletePublicIpv4Pool method.
		DeletePublicIpv4Pool []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeletePublicIpv4PoolInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteQueuedReservedInstances holds details about calls to the DeleteQueuedReservedInstances method.
		DeleteQueuedReservedInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteQueuedReservedInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteRoute holds details about calls to the DeleteRoute method.
		DeleteRoute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteRouteInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteRouteTable holds details about calls to the DeleteRouteTable method.
		DeleteRouteTable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteRouteTableInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteSecurityGroup holds details about calls to the DeleteSecurityGroup method.
		DeleteSecurityGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteSecurityGroupInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteSnapshot holds details about calls to the DeleteSnapshot method.
		DeleteSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteSnapshotInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteSpotDatafeedSubscription holds details about calls to the DeleteSpotDatafeedSubscription method.
		DeleteSpotDatafeedSubscription []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteSpotDatafeedSubscriptionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteSubnet holds details about calls to the DeleteSubnet method.
		DeleteSubnet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteSubnetInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteSubnetCidrReservation holds details about calls to the DeleteSubnetCidrReservation method.
		DeleteSubnetCidrReservation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteSubnetCidrReservationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTags holds details about calls to the DeleteTags method.
		DeleteTags []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTagsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTrafficMirrorFilter holds details about calls to the DeleteTrafficMirrorFilter method.
		DeleteTrafficMirrorFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTrafficMirrorFilterInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTrafficMirrorFilterRule holds details about calls to the DeleteTrafficMirrorFilterRule method.
		DeleteTrafficMirrorFilterRule []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTrafficMirrorFilterRuleInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTrafficMirrorSession holds details about calls to the DeleteTrafficMirrorSession method.
		DeleteTrafficMirrorSession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTrafficMirrorSessionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTrafficMirrorTarget holds details about calls to the DeleteTrafficMirrorTarget method.
		DeleteTrafficMirrorTarget []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTrafficMirrorTargetInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTransitGateway holds details about calls to the DeleteTransitGateway method.
		DeleteTransitGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTransitGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTransitGatewayConnect holds details about calls to the DeleteTransitGatewayConnect method.
		DeleteTransitGatewayConnect []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTransitGatewayConnectInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTransitGatewayConnectPeer holds details about calls to the DeleteTransitGatewayConnectPeer method.
		DeleteTransitGatewayConnectPeer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTransitGatewayConnectPeerInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTransitGatewayMulticastDomain holds details about calls to the DeleteTransitGatewayMulticastDomain method.
		DeleteTransitGatewayMulticastDomain []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTransitGatewayMulticastDomainInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTransitGatewayPeeringAttachment holds details about calls to the DeleteTransitGatewayPeeringAttachment method.
		DeleteTransitGatewayPeeringAttachment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTransitGatewayPeeringAttachmentInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTransitGatewayPolicyTable holds details about calls to the DeleteTransitGatewayPolicyTable method.
		DeleteTransitGatewayPolicyTable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTransitGatewayPolicyTableInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTransitGatewayPrefixListReference holds details about calls to the DeleteTransitGatewayPrefixListReference method.
		DeleteTransitGatewayPrefixListReference []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTransitGatewayPrefixListReferenceInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTransitGatewayRoute holds details about calls to the DeleteTransitGatewayRoute method.
		DeleteTransitGatewayRoute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTransitGatewayRouteInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTransitGatewayRouteTable holds details about calls to the DeleteTransitGatewayRouteTable method.
		DeleteTransitGatewayRouteTable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTransitGatewayRouteTableInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTransitGatewayRouteTableAnnouncement holds details about calls to the DeleteTransitGatewayRouteTableAnnouncement method.
		DeleteTransitGatewayRouteTableAnnouncement []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTransitGatewayRouteTableAnnouncementInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteTransitGatewayVpcAttachment holds details about calls to the DeleteTransitGatewayVpcAttachment method.
		DeleteTransitGatewayVpcAttachment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteTransitGatewayVpcAttachmentInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteVolume holds details about calls to the DeleteVolume method.
		DeleteVolume []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteVolumeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteVpc holds details about calls to the DeleteVpc method.
		DeleteVpc []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteVpcInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteVpcEndpointConnectionNotifications holds details about calls to the DeleteVpcEndpointConnectionNotifications method.
		DeleteVpcEndpointConnectionNotifications []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteVpcEndpointConnectionNotificationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteVpcEndpointServiceConfigurations holds details about calls to the DeleteVpcEndpointServiceConfigurations method.
		DeleteVpcEndpointServiceConfigurations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteVpcEndpointServiceConfigurationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteVpcEndpoints holds details about calls to the DeleteVpcEndpoints method.
		DeleteVpcEndpoints []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteVpcEndpointsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteVpcPeeringConnection holds details about calls to the DeleteVpcPeeringConnection method.
		DeleteVpcPeeringConnection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteVpcPeeringConnectionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteVpnConnection holds details about calls to the DeleteVpnConnection method.
		DeleteVpnConnection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteVpnConnectionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteVpnConnectionRoute holds details about calls to the DeleteVpnConnectionRoute method.
		DeleteVpnConnectionRoute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteVpnConnectionRouteInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeleteVpnGateway holds details about calls to the DeleteVpnGateway method.
		DeleteVpnGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeleteVpnGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeprovisionByoipCidr holds details about calls to the DeprovisionByoipCidr method.
		DeprovisionByoipCidr []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeprovisionByoipCidrInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeprovisionIpamPoolCidr holds details about calls to the DeprovisionIpamPoolCidr method.
		DeprovisionIpamPoolCidr []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeprovisionIpamPoolCidrInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeprovisionPublicIpv4PoolCidr holds details about calls to the DeprovisionPublicIpv4PoolCidr method.
		DeprovisionPublicIpv4PoolCidr []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeprovisionPublicIpv4PoolCidrInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeregisterImage holds details about calls to the DeregisterImage method.
		DeregisterImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeregisterImageInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeregisterInstanceEventNotificationAttributes holds details about calls to the DeregisterInstanceEventNotificationAttributes method.
		DeregisterInstanceEventNotificationAttributes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeregisterInstanceEventNotificationAttributesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeregisterTransitGatewayMulticastGroupMembers holds details about calls to the DeregisterTransitGatewayMulticastGroupMembers method.
		DeregisterTransitGatewayMulticastGroupMembers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DeregisterTransitGatewayMulticastGroupSources holds details about calls to the DeregisterTransitGatewayMulticastGroupSources method.
		DeregisterTransitGatewayMulticastGroupSources []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeAccountAttributes holds details about calls to the DescribeAccountAttributes method.
		DescribeAccountAttributes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeAccountAttributesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeAddresses holds details about calls to the DescribeAddresses method.
		DescribeAddresses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeAddressesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeAddressesAttribute holds details about calls to the DescribeAddressesAttribute method.
		DescribeAddressesAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeAddressesAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeAggregateIdFormat holds details about calls to the DescribeAggregateIdFormat method.
		DescribeAggregateIdFormat []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeAggregateIdFormatInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeAvailabilityZones holds details about calls to the DescribeAvailabilityZones method.
		DescribeAvailabilityZones []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeAvailabilityZonesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeBundleTasks holds details about calls to the DescribeBundleTasks method.
		DescribeBundleTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeBundleTasksInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeByoipCidrs holds details about calls to the DescribeByoipCidrs method.
		DescribeByoipCidrs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeByoipCidrsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeCapacityReservationFleets holds details about calls to the DescribeCapacityReservationFleets method.
		DescribeCapacityReservationFleets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeCapacityReservationFleetsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeCapacityReservations holds details about calls to the DescribeCapacityReservations method.
		DescribeCapacityReservations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeCapacityReservationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeCarrierGateways holds details about calls to the DescribeCarrierGateways method.
		DescribeCarrierGateways []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeCarrierGatewaysInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeClassicLinkInstances holds details about calls to the DescribeClassicLinkInstances method.
		DescribeClassicLinkInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeClassicLinkInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeClientVpnAuthorizationRules holds details about calls to the DescribeClientVpnAuthorizationRules method.
		DescribeClientVpnAuthorizationRules []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeClientVpnAuthorizationRulesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeClientVpnConnections holds details about calls to the DescribeClientVpnConnections method.
		DescribeClientVpnConnections []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeClientVpnConnectionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeClientVpnEndpoints holds details about calls to the DescribeClientVpnEndpoints method.
		DescribeClientVpnEndpoints []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeClientVpnEndpointsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeClientVpnRoutes holds details about calls to the DescribeClientVpnRoutes method.
		DescribeClientVpnRoutes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeClientVpnRoutesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeClientVpnTargetNetworks holds details about calls to the DescribeClientVpnTargetNetworks method.
		DescribeClientVpnTargetNetworks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeClientVpnTargetNetworksInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeCoipPools holds details about calls to the DescribeCoipPools method.
		DescribeCoipPools []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeCoipPoolsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeConversionTasks holds details about calls to the DescribeConversionTasks method.
		DescribeConversionTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeConversionTasksInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeCustomerGateways holds details about calls to the DescribeCustomerGateways method.
		DescribeCustomerGateways []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeCustomerGatewaysInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeDhcpOptions holds details about calls to the DescribeDhcpOptions method.
		DescribeDhcpOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeDhcpOptionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeEgressOnlyInternetGateways holds details about calls to the DescribeEgressOnlyInternetGateways method.
		DescribeEgressOnlyInternetGateways []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeEgressOnlyInternetGatewaysInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeElasticGpus holds details about calls to the DescribeElasticGpus method.
		DescribeElasticGpus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeElasticGpusInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeExportImageTasks holds details about calls to the DescribeExportImageTasks method.
		DescribeExportImageTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeExportImageTasksInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeExportTasks holds details about calls to the DescribeExportTasks method.
		DescribeExportTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeExportTasksInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeFastLaunchImages holds details about calls to the DescribeFastLaunchImages method.
		DescribeFastLaunchImages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeFastLaunchImagesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeFastSnapshotRestores holds details about calls to the DescribeFastSnapshotRestores method.
		DescribeFastSnapshotRestores []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeFastSnapshotRestoresInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeFleetHistory holds details about calls to the DescribeFleetHistory method.
		DescribeFleetHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeFleetHistoryInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeFleetInstances holds details about calls to the DescribeFleetInstances method.
		DescribeFleetInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeFleetInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeFleets holds details about calls to the DescribeFleets method.
		DescribeFleets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeFleetsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeFlowLogs holds details about calls to the DescribeFlowLogs method.
		DescribeFlowLogs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeFlowLogsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeFpgaImageAttribute holds details about calls to the DescribeFpgaImageAttribute method.
		DescribeFpgaImageAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeFpgaImageAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeFpgaImages holds details about calls to the DescribeFpgaImages method.
		DescribeFpgaImages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeFpgaImagesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeHostReservationOfferings holds details about calls to the DescribeHostReservationOfferings method.
		DescribeHostReservationOfferings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeHostReservationOfferingsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeHostReservations holds details about calls to the DescribeHostReservations method.
		DescribeHostReservations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeHostReservationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeHosts holds details about calls to the DescribeHosts method.
		DescribeHosts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeHostsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeIamInstanceProfileAssociations holds details about calls to the DescribeIamInstanceProfileAssociations method.
		DescribeIamInstanceProfileAssociations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeIamInstanceProfileAssociationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeIdFormat holds details about calls to the DescribeIdFormat method.
		DescribeIdFormat []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeIdFormatInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeIdentityIdFormat holds details about calls to the DescribeIdentityIdFormat method.
		DescribeIdentityIdFormat []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeIdentityIdFormatInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeImageAttribute holds details about calls to the DescribeImageAttribute method.
		DescribeImageAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeImageAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeImages holds details about calls to the DescribeImages method.
		DescribeImages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeImagesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeImportImageTasks holds details about calls to the DescribeImportImageTasks method.
		DescribeImportImageTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeImportImageTasksInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeImportSnapshotTasks holds details about calls to the DescribeImportSnapshotTasks method.
		DescribeImportSnapshotTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeImportSnapshotTasksInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeInstanceAttribute holds details about calls to the DescribeInstanceAttribute method.
		DescribeInstanceAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeInstanceAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeInstanceCreditSpecifications holds details about calls to the DescribeInstanceCreditSpecifications method.
		DescribeInstanceCreditSpecifications []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeInstanceCreditSpecificationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeInstanceEventNotificationAttributes holds details about calls to the DescribeInstanceEventNotificationAttributes method.
		DescribeInstanceEventNotificationAttributes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeInstanceEventNotificationAttributesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeInstanceEventWindows holds details about calls to the DescribeInstanceEventWindows method.
		DescribeInstanceEventWindows []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeInstanceEventWindowsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeInstanceStatus holds details about calls to the DescribeInstanceStatus method.
		DescribeInstanceStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeInstanceStatusInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeInstanceTypeOfferings holds details about calls to the DescribeInstanceTypeOfferings method.
		DescribeInstanceTypeOfferings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeInstanceTypeOfferingsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeInstanceTypes holds details about calls to the DescribeInstanceTypes method.
		DescribeInstanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeInstanceTypesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeInstances holds details about calls to the DescribeInstances method.
		DescribeInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeInternetGateways holds details about calls to the DescribeInternetGateways method.
		DescribeInternetGateways []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeInternetGatewaysInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeIpamPools holds details about calls to the DescribeIpamPools method.
		DescribeIpamPools []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeIpamPoolsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeIpamScopes holds details about calls to the DescribeIpamScopes method.
		DescribeIpamScopes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeIpamScopesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeIpams holds details about calls to the DescribeIpams method.
		DescribeIpams []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeIpamsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeIpv6Pools holds details about calls to the DescribeIpv6Pools method.
		DescribeIpv6Pools []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeIpv6PoolsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeKeyPairs holds details about calls to the DescribeKeyPairs method.
		DescribeKeyPairs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeKeyPairsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeLaunchTemplateVersions holds details about calls to the DescribeLaunchTemplateVersions method.
		DescribeLaunchTemplateVersions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeLaunchTemplateVersionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeLaunchTemplates holds details about calls to the DescribeLaunchTemplates method.
		DescribeLaunchTemplates []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeLaunchTemplatesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations holds details about calls to the DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations method.
		DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeLocalGatewayRouteTableVpcAssociations holds details about calls to the DescribeLocalGatewayRouteTableVpcAssociations method.
		DescribeLocalGatewayRouteTableVpcAssociations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeLocalGatewayRouteTables holds details about calls to the DescribeLocalGatewayRouteTables method.
		DescribeLocalGatewayRouteTables []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeLocalGatewayRouteTablesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeLocalGatewayVirtualInterfaceGroups holds details about calls to the DescribeLocalGatewayVirtualInterfaceGroups method.
		DescribeLocalGatewayVirtualInterfaceGroups []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeLocalGatewayVirtualInterfaces holds details about calls to the DescribeLocalGatewayVirtualInterfaces method.
		DescribeLocalGatewayVirtualInterfaces []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeLocalGatewayVirtualInterfacesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeLocalGateways holds details about calls to the DescribeLocalGateways method.
		DescribeLocalGateways []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeLocalGatewaysInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeManagedPrefixLists holds details about calls to the DescribeManagedPrefixLists method.
		DescribeManagedPrefixLists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeManagedPrefixListsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeMovingAddresses holds details about calls to the DescribeMovingAddresses method.
		DescribeMovingAddresses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeMovingAddressesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeNatGateways holds details about calls to the DescribeNatGateways method.
		DescribeNatGateways []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeNatGatewaysInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeNetworkAcls holds details about calls to the DescribeNetworkAcls method.
		DescribeNetworkAcls []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeNetworkAclsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeNetworkInsightsAccessScopeAnalyses holds details about calls to the DescribeNetworkInsightsAccessScopeAnalyses method.
		DescribeNetworkInsightsAccessScopeAnalyses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeNetworkInsightsAccessScopeAnalysesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeNetworkInsightsAccessScopes holds details about calls to the DescribeNetworkInsightsAccessScopes method.
		DescribeNetworkInsightsAccessScopes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeNetworkInsightsAccessScopesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeNetworkInsightsAnalyses holds details about calls to the DescribeNetworkInsightsAnalyses method.
		DescribeNetworkInsightsAnalyses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeNetworkInsightsAnalysesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeNetworkInsightsPaths holds details about calls to the DescribeNetworkInsightsPaths method.
		DescribeNetworkInsightsPaths []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeNetworkInsightsPathsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeNetworkInterfaceAttribute holds details about calls to the DescribeNetworkInterfaceAttribute method.
		DescribeNetworkInterfaceAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeNetworkInterfaceAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeNetworkInterfacePermissions holds details about calls to the DescribeNetworkInterfacePermissions method.
		DescribeNetworkInterfacePermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeNetworkInterfacePermissionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeNetworkInterfaces holds details about calls to the DescribeNetworkInterfaces method.
		DescribeNetworkInterfaces []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeNetworkInterfacesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribePlacementGroups holds details about calls to the DescribePlacementGroups method.
		DescribePlacementGroups []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribePlacementGroupsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribePrefixLists holds details about calls to the DescribePrefixLists method.
		DescribePrefixLists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribePrefixListsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribePrincipalIdFormat holds details about calls to the DescribePrincipalIdFormat method.
		DescribePrincipalIdFormat []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribePrincipalIdFormatInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribePublicIpv4Pools holds details about calls to the DescribePublicIpv4Pools method.
		DescribePublicIpv4Pools []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribePublicIpv4PoolsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeRegions holds details about calls to the DescribeRegions method.
		DescribeRegions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeRegionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeReplaceRootVolumeTasks holds details about calls to the DescribeReplaceRootVolumeTasks method.
		DescribeReplaceRootVolumeTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeReplaceRootVolumeTasksInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeReservedInstances holds details about calls to the DescribeReservedInstances method.
		DescribeReservedInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeReservedInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeReservedInstancesListings holds details about calls to the DescribeReservedInstancesListings method.
		DescribeReservedInstancesListings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeReservedInstancesListingsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeReservedInstancesModifications holds details about calls to the DescribeReservedInstancesModifications method.
		DescribeReservedInstancesModifications []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeReservedInstancesModificationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeReservedInstancesOfferings holds details about calls to the DescribeReservedInstancesOfferings method.
		DescribeReservedInstancesOfferings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeReservedInstancesOfferingsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeRouteTables holds details about calls to the DescribeRouteTables method.
		DescribeRouteTables []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeRouteTablesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeScheduledInstanceAvailability holds details about calls to the DescribeScheduledInstanceAvailability method.
		DescribeScheduledInstanceAvailability []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeScheduledInstanceAvailabilityInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeScheduledInstances holds details about calls to the DescribeScheduledInstances method.
		DescribeScheduledInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeScheduledInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeSecurityGroupReferences holds details about calls to the DescribeSecurityGroupReferences method.
		DescribeSecurityGroupReferences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeSecurityGroupReferencesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeSecurityGroupRules holds details about calls to the DescribeSecurityGroupRules method.
		DescribeSecurityGroupRules []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeSecurityGroupRulesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeSecurityGroups holds details about calls to the DescribeSecurityGroups method.
		DescribeSecurityGroups []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeSecurityGroupsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeSnapshotAttribute holds details about calls to the DescribeSnapshotAttribute method.
		DescribeSnapshotAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeSnapshotAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeSnapshotTierStatus holds details about calls to the DescribeSnapshotTierStatus method.
		DescribeSnapshotTierStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeSnapshotTierStatusInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeSnapshots holds details about calls to the DescribeSnapshots method.
		DescribeSnapshots []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeSnapshotsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeSpotDatafeedSubscription holds details about calls to the DescribeSpotDatafeedSubscription method.
		DescribeSpotDatafeedSubscription []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeSpotDatafeedSubscriptionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeSpotFleetInstances holds details about calls to the DescribeSpotFleetInstances method.
		DescribeSpotFleetInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeSpotFleetInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeSpotFleetRequestHistory holds details about calls to the DescribeSpotFleetRequestHistory method.
		DescribeSpotFleetRequestHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeSpotFleetRequestHistoryInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeSpotFleetRequests holds details about calls to the DescribeSpotFleetRequests method.
		DescribeSpotFleetRequests []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeSpotFleetRequestsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeSpotInstanceRequests holds details about calls to the DescribeSpotInstanceRequests method.
		DescribeSpotInstanceRequests []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeSpotInstanceRequestsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeSpotPriceHistory holds details about calls to the DescribeSpotPriceHistory method.
		DescribeSpotPriceHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeSpotPriceHistoryInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeStaleSecurityGroups holds details about calls to the DescribeStaleSecurityGroups method.
		DescribeStaleSecurityGroups []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeStaleSecurityGroupsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeStoreImageTasks holds details about calls to the DescribeStoreImageTasks method.
		DescribeStoreImageTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeStoreImageTasksInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeSubnets holds details about calls to the DescribeSubnets method.
		DescribeSubnets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeSubnetsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTags holds details about calls to the DescribeTags method.
		DescribeTags []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTagsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTrafficMirrorFilters holds details about calls to the DescribeTrafficMirrorFilters method.
		DescribeTrafficMirrorFilters []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTrafficMirrorFiltersInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTrafficMirrorSessions holds details about calls to the DescribeTrafficMirrorSessions method.
		DescribeTrafficMirrorSessions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTrafficMirrorSessionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTrafficMirrorTargets holds details about calls to the DescribeTrafficMirrorTargets method.
		DescribeTrafficMirrorTargets []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTrafficMirrorTargetsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTransitGatewayAttachments holds details about calls to the DescribeTransitGatewayAttachments method.
		DescribeTransitGatewayAttachments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTransitGatewayAttachmentsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTransitGatewayConnectPeers holds details about calls to the DescribeTransitGatewayConnectPeers method.
		DescribeTransitGatewayConnectPeers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTransitGatewayConnectPeersInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTransitGatewayConnects holds details about calls to the DescribeTransitGatewayConnects method.
		DescribeTransitGatewayConnects []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTransitGatewayConnectsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTransitGatewayMulticastDomains holds details about calls to the DescribeTransitGatewayMulticastDomains method.
		DescribeTransitGatewayMulticastDomains []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTransitGatewayMulticastDomainsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTransitGatewayPeeringAttachments holds details about calls to the DescribeTransitGatewayPeeringAttachments method.
		DescribeTransitGatewayPeeringAttachments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTransitGatewayPeeringAttachmentsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTransitGatewayPolicyTables holds details about calls to the DescribeTransitGatewayPolicyTables method.
		DescribeTransitGatewayPolicyTables []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTransitGatewayPolicyTablesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTransitGatewayRouteTableAnnouncements holds details about calls to the DescribeTransitGatewayRouteTableAnnouncements method.
		DescribeTransitGatewayRouteTableAnnouncements []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTransitGatewayRouteTableAnnouncementsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTransitGatewayRouteTables holds details about calls to the DescribeTransitGatewayRouteTables method.
		DescribeTransitGatewayRouteTables []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTransitGatewayRouteTablesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTransitGatewayVpcAttachments holds details about calls to the DescribeTransitGatewayVpcAttachments method.
		DescribeTransitGatewayVpcAttachments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTransitGatewayVpcAttachmentsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTransitGateways holds details about calls to the DescribeTransitGateways method.
		DescribeTransitGateways []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTransitGatewaysInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeTrunkInterfaceAssociations holds details about calls to the DescribeTrunkInterfaceAssociations method.
		DescribeTrunkInterfaceAssociations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeTrunkInterfaceAssociationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVolumeAttribute holds details about calls to the DescribeVolumeAttribute method.
		DescribeVolumeAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVolumeAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVolumeStatus holds details about calls to the DescribeVolumeStatus method.
		DescribeVolumeStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVolumeStatusInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVolumes holds details about calls to the DescribeVolumes method.
		DescribeVolumes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVolumesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVolumesModifications holds details about calls to the DescribeVolumesModifications method.
		DescribeVolumesModifications []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVolumesModificationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVpcAttribute holds details about calls to the DescribeVpcAttribute method.
		DescribeVpcAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVpcAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVpcClassicLink holds details about calls to the DescribeVpcClassicLink method.
		DescribeVpcClassicLink []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVpcClassicLinkInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVpcClassicLinkDnsSupport holds details about calls to the DescribeVpcClassicLinkDnsSupport method.
		DescribeVpcClassicLinkDnsSupport []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVpcClassicLinkDnsSupportInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVpcEndpointConnectionNotifications holds details about calls to the DescribeVpcEndpointConnectionNotifications method.
		DescribeVpcEndpointConnectionNotifications []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVpcEndpointConnectionNotificationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVpcEndpointConnections holds details about calls to the DescribeVpcEndpointConnections method.
		DescribeVpcEndpointConnections []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVpcEndpointConnectionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVpcEndpointServiceConfigurations holds details about calls to the DescribeVpcEndpointServiceConfigurations method.
		DescribeVpcEndpointServiceConfigurations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVpcEndpointServiceConfigurationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVpcEndpointServicePermissions holds details about calls to the DescribeVpcEndpointServicePermissions method.
		DescribeVpcEndpointServicePermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVpcEndpointServicePermissionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVpcEndpointServices holds details about calls to the DescribeVpcEndpointServices method.
		DescribeVpcEndpointServices []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVpcEndpointServicesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVpcEndpoints holds details about calls to the DescribeVpcEndpoints method.
		DescribeVpcEndpoints []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVpcEndpointsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVpcPeeringConnections holds details about calls to the DescribeVpcPeeringConnections method.
		DescribeVpcPeeringConnections []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVpcPeeringConnectionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVpcs holds details about calls to the DescribeVpcs method.
		DescribeVpcs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVpcsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVpnConnections holds details about calls to the DescribeVpnConnections method.
		DescribeVpnConnections []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVpnConnectionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DescribeVpnGateways holds details about calls to the DescribeVpnGateways method.
		DescribeVpnGateways []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DescribeVpnGatewaysInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DetachClassicLinkVpc holds details about calls to the DetachClassicLinkVpc method.
		DetachClassicLinkVpc []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DetachClassicLinkVpcInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DetachInternetGateway holds details about calls to the DetachInternetGateway method.
		DetachInternetGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DetachInternetGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DetachNetworkInterface holds details about calls to the DetachNetworkInterface method.
		DetachNetworkInterface []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DetachNetworkInterfaceInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DetachVolume holds details about calls to the DetachVolume method.
		DetachVolume []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DetachVolumeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DetachVpnGateway holds details about calls to the DetachVpnGateway method.
		DetachVpnGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DetachVpnGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisableEbsEncryptionByDefault holds details about calls to the DisableEbsEncryptionByDefault method.
		DisableEbsEncryptionByDefault []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisableEbsEncryptionByDefaultInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisableFastLaunch holds details about calls to the DisableFastLaunch method.
		DisableFastLaunch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisableFastLaunchInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisableFastSnapshotRestores holds details about calls to the DisableFastSnapshotRestores method.
		DisableFastSnapshotRestores []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisableFastSnapshotRestoresInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisableImageDeprecation holds details about calls to the DisableImageDeprecation method.
		DisableImageDeprecation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisableImageDeprecationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisableIpamOrganizationAdminAccount holds details about calls to the DisableIpamOrganizationAdminAccount method.
		DisableIpamOrganizationAdminAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisableIpamOrganizationAdminAccountInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisableSerialConsoleAccess holds details about calls to the DisableSerialConsoleAccess method.
		DisableSerialConsoleAccess []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisableSerialConsoleAccessInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisableTransitGatewayRouteTablePropagation holds details about calls to the DisableTransitGatewayRouteTablePropagation method.
		DisableTransitGatewayRouteTablePropagation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisableTransitGatewayRouteTablePropagationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisableVgwRoutePropagation holds details about calls to the DisableVgwRoutePropagation method.
		DisableVgwRoutePropagation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisableVgwRoutePropagationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisableVpcClassicLink holds details about calls to the DisableVpcClassicLink method.
		DisableVpcClassicLink []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisableVpcClassicLinkInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisableVpcClassicLinkDnsSupport holds details about calls to the DisableVpcClassicLinkDnsSupport method.
		DisableVpcClassicLinkDnsSupport []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisableVpcClassicLinkDnsSupportInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisassociateAddress holds details about calls to the DisassociateAddress method.
		DisassociateAddress []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisassociateAddressInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisassociateClientVpnTargetNetwork holds details about calls to the DisassociateClientVpnTargetNetwork method.
		DisassociateClientVpnTargetNetwork []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisassociateClientVpnTargetNetworkInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisassociateEnclaveCertificateIamRole holds details about calls to the DisassociateEnclaveCertificateIamRole method.
		DisassociateEnclaveCertificateIamRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisassociateEnclaveCertificateIamRoleInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisassociateIamInstanceProfile holds details about calls to the DisassociateIamInstanceProfile method.
		DisassociateIamInstanceProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisassociateIamInstanceProfileInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisassociateInstanceEventWindow holds details about calls to the DisassociateInstanceEventWindow method.
		DisassociateInstanceEventWindow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisassociateInstanceEventWindowInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisassociateRouteTable holds details about calls to the DisassociateRouteTable method.
		DisassociateRouteTable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisassociateRouteTableInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisassociateSubnetCidrBlock holds details about calls to the DisassociateSubnetCidrBlock method.
		DisassociateSubnetCidrBlock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisassociateSubnetCidrBlockInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisassociateTransitGatewayMulticastDomain holds details about calls to the DisassociateTransitGatewayMulticastDomain method.
		DisassociateTransitGatewayMulticastDomain []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisassociateTransitGatewayMulticastDomainInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisassociateTransitGatewayPolicyTable holds details about calls to the DisassociateTransitGatewayPolicyTable method.
		DisassociateTransitGatewayPolicyTable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisassociateTransitGatewayPolicyTableInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisassociateTransitGatewayRouteTable holds details about calls to the DisassociateTransitGatewayRouteTable method.
		DisassociateTransitGatewayRouteTable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisassociateTransitGatewayRouteTableInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisassociateTrunkInterface holds details about calls to the DisassociateTrunkInterface method.
		DisassociateTrunkInterface []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisassociateTrunkInterfaceInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// DisassociateVpcCidrBlock holds details about calls to the DisassociateVpcCidrBlock method.
		DisassociateVpcCidrBlock []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.DisassociateVpcCidrBlockInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// EnableEbsEncryptionByDefault holds details about calls to the EnableEbsEncryptionByDefault method.
		EnableEbsEncryptionByDefault []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.EnableEbsEncryptionByDefaultInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// EnableFastLaunch holds details about calls to the EnableFastLaunch method.
		EnableFastLaunch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.EnableFastLaunchInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// EnableFastSnapshotRestores holds details about calls to the EnableFastSnapshotRestores method.
		EnableFastSnapshotRestores []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.EnableFastSnapshotRestoresInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// EnableImageDeprecation holds details about calls to the EnableImageDeprecation method.
		EnableImageDeprecation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.EnableImageDeprecationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// EnableIpamOrganizationAdminAccount holds details about calls to the EnableIpamOrganizationAdminAccount method.
		EnableIpamOrganizationAdminAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.EnableIpamOrganizationAdminAccountInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// EnableSerialConsoleAccess holds details about calls to the EnableSerialConsoleAccess method.
		EnableSerialConsoleAccess []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.EnableSerialConsoleAccessInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// EnableTransitGatewayRouteTablePropagation holds details about calls to the EnableTransitGatewayRouteTablePropagation method.
		EnableTransitGatewayRouteTablePropagation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.EnableTransitGatewayRouteTablePropagationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// EnableVgwRoutePropagation holds details about calls to the EnableVgwRoutePropagation method.
		EnableVgwRoutePropagation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.EnableVgwRoutePropagationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// EnableVolumeIO holds details about calls to the EnableVolumeIO method.
		EnableVolumeIO []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.EnableVolumeIOInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// EnableVpcClassicLink holds details about calls to the EnableVpcClassicLink method.
		EnableVpcClassicLink []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.EnableVpcClassicLinkInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// EnableVpcClassicLinkDnsSupport holds details about calls to the EnableVpcClassicLinkDnsSupport method.
		EnableVpcClassicLinkDnsSupport []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.EnableVpcClassicLinkDnsSupportInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ExportClientVpnClientCertificateRevocationList holds details about calls to the ExportClientVpnClientCertificateRevocationList method.
		ExportClientVpnClientCertificateRevocationList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ExportClientVpnClientCertificateRevocationListInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ExportClientVpnClientConfiguration holds details about calls to the ExportClientVpnClientConfiguration method.
		ExportClientVpnClientConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ExportClientVpnClientConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ExportImage holds details about calls to the ExportImage method.
		ExportImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ExportImageInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ExportTransitGatewayRoutes holds details about calls to the ExportTransitGatewayRoutes method.
		ExportTransitGatewayRoutes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ExportTransitGatewayRoutesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetAssociatedEnclaveCertificateIamRoles holds details about calls to the GetAssociatedEnclaveCertificateIamRoles method.
		GetAssociatedEnclaveCertificateIamRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetAssociatedEnclaveCertificateIamRolesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetAssociatedIpv6PoolCidrs holds details about calls to the GetAssociatedIpv6PoolCidrs method.
		GetAssociatedIpv6PoolCidrs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetAssociatedIpv6PoolCidrsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetCapacityReservationUsage holds details about calls to the GetCapacityReservationUsage method.
		GetCapacityReservationUsage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetCapacityReservationUsageInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetCoipPoolUsage holds details about calls to the GetCoipPoolUsage method.
		GetCoipPoolUsage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetCoipPoolUsageInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetConsoleOutput holds details about calls to the GetConsoleOutput method.
		GetConsoleOutput []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetConsoleOutputInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetConsoleScreenshot holds details about calls to the GetConsoleScreenshot method.
		GetConsoleScreenshot []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetConsoleScreenshotInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetDefaultCreditSpecification holds details about calls to the GetDefaultCreditSpecification method.
		GetDefaultCreditSpecification []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetDefaultCreditSpecificationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetEbsDefaultKmsKeyId holds details about calls to the GetEbsDefaultKmsKeyId method.
		GetEbsDefaultKmsKeyId []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetEbsDefaultKmsKeyIdInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetEbsEncryptionByDefault holds details about calls to the GetEbsEncryptionByDefault method.
		GetEbsEncryptionByDefault []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetEbsEncryptionByDefaultInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetFlowLogsIntegrationTemplate holds details about calls to the GetFlowLogsIntegrationTemplate method.
		GetFlowLogsIntegrationTemplate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetFlowLogsIntegrationTemplateInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetGroupsForCapacityReservation holds details about calls to the GetGroupsForCapacityReservation method.
		GetGroupsForCapacityReservation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetGroupsForCapacityReservationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetHostReservationPurchasePreview holds details about calls to the GetHostReservationPurchasePreview method.
		GetHostReservationPurchasePreview []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetHostReservationPurchasePreviewInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetInstanceTypesFromInstanceRequirements holds details about calls to the GetInstanceTypesFromInstanceRequirements method.
		GetInstanceTypesFromInstanceRequirements []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetInstanceTypesFromInstanceRequirementsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetInstanceUefiData holds details about calls to the GetInstanceUefiData method.
		GetInstanceUefiData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetInstanceUefiDataInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetIpamAddressHistory holds details about calls to the GetIpamAddressHistory method.
		GetIpamAddressHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetIpamAddressHistoryInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetIpamPoolAllocations holds details about calls to the GetIpamPoolAllocations method.
		GetIpamPoolAllocations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetIpamPoolAllocationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetIpamPoolCidrs holds details about calls to the GetIpamPoolCidrs method.
		GetIpamPoolCidrs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetIpamPoolCidrsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetIpamResourceCidrs holds details about calls to the GetIpamResourceCidrs method.
		GetIpamResourceCidrs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetIpamResourceCidrsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetLaunchTemplateData holds details about calls to the GetLaunchTemplateData method.
		GetLaunchTemplateData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetLaunchTemplateDataInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetManagedPrefixListAssociations holds details about calls to the GetManagedPrefixListAssociations method.
		GetManagedPrefixListAssociations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetManagedPrefixListAssociationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetManagedPrefixListEntries holds details about calls to the GetManagedPrefixListEntries method.
		GetManagedPrefixListEntries []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetManagedPrefixListEntriesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetNetworkInsightsAccessScopeAnalysisFindings holds details about calls to the GetNetworkInsightsAccessScopeAnalysisFindings method.
		GetNetworkInsightsAccessScopeAnalysisFindings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetNetworkInsightsAccessScopeAnalysisFindingsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetNetworkInsightsAccessScopeContent holds details about calls to the GetNetworkInsightsAccessScopeContent method.
		GetNetworkInsightsAccessScopeContent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetNetworkInsightsAccessScopeContentInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetPasswordData holds details about calls to the GetPasswordData method.
		GetPasswordData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetPasswordDataInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetReservedInstancesExchangeQuote holds details about calls to the GetReservedInstancesExchangeQuote method.
		GetReservedInstancesExchangeQuote []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetReservedInstancesExchangeQuoteInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetSerialConsoleAccessStatus holds details about calls to the GetSerialConsoleAccessStatus method.
		GetSerialConsoleAccessStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetSerialConsoleAccessStatusInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetSpotPlacementScores holds details about calls to the GetSpotPlacementScores method.
		GetSpotPlacementScores []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetSpotPlacementScoresInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetSubnetCidrReservations holds details about calls to the GetSubnetCidrReservations method.
		GetSubnetCidrReservations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetSubnetCidrReservationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetTransitGatewayAttachmentPropagations holds details about calls to the GetTransitGatewayAttachmentPropagations method.
		GetTransitGatewayAttachmentPropagations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetTransitGatewayAttachmentPropagationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetTransitGatewayMulticastDomainAssociations holds details about calls to the GetTransitGatewayMulticastDomainAssociations method.
		GetTransitGatewayMulticastDomainAssociations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetTransitGatewayMulticastDomainAssociationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetTransitGatewayPolicyTableAssociations holds details about calls to the GetTransitGatewayPolicyTableAssociations method.
		GetTransitGatewayPolicyTableAssociations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetTransitGatewayPolicyTableAssociationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetTransitGatewayPolicyTableEntries holds details about calls to the GetTransitGatewayPolicyTableEntries method.
		GetTransitGatewayPolicyTableEntries []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetTransitGatewayPolicyTableEntriesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetTransitGatewayPrefixListReferences holds details about calls to the GetTransitGatewayPrefixListReferences method.
		GetTransitGatewayPrefixListReferences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetTransitGatewayPrefixListReferencesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetTransitGatewayRouteTableAssociations holds details about calls to the GetTransitGatewayRouteTableAssociations method.
		GetTransitGatewayRouteTableAssociations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetTransitGatewayRouteTableAssociationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetTransitGatewayRouteTablePropagations holds details about calls to the GetTransitGatewayRouteTablePropagations method.
		GetTransitGatewayRouteTablePropagations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetTransitGatewayRouteTablePropagationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetVpnConnectionDeviceSampleConfiguration holds details about calls to the GetVpnConnectionDeviceSampleConfiguration method.
		GetVpnConnectionDeviceSampleConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetVpnConnectionDeviceSampleConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// GetVpnConnectionDeviceTypes holds details about calls to the GetVpnConnectionDeviceTypes method.
		GetVpnConnectionDeviceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.GetVpnConnectionDeviceTypesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ImportClientVpnClientCertificateRevocationList holds details about calls to the ImportClientVpnClientCertificateRevocationList method.
		ImportClientVpnClientCertificateRevocationList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ImportClientVpnClientCertificateRevocationListInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ImportImage holds details about calls to the ImportImage method.
		ImportImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ImportImageInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ImportInstance holds details about calls to the ImportInstance method.
		ImportInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ImportInstanceInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ImportKeyPair holds details about calls to the ImportKeyPair method.
		ImportKeyPair []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ImportKeyPairInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ImportSnapshot holds details about calls to the ImportSnapshot method.
		ImportSnapshot []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ImportSnapshotInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ImportVolume holds details about calls to the ImportVolume method.
		ImportVolume []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ImportVolumeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ListImagesInRecycleBin holds details about calls to the ListImagesInRecycleBin method.
		ListImagesInRecycleBin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ListImagesInRecycleBinInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ListSnapshotsInRecycleBin holds details about calls to the ListSnapshotsInRecycleBin method.
		ListSnapshotsInRecycleBin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ListSnapshotsInRecycleBinInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyAddressAttribute holds details about calls to the ModifyAddressAttribute method.
		ModifyAddressAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyAddressAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyAvailabilityZoneGroup holds details about calls to the ModifyAvailabilityZoneGroup method.
		ModifyAvailabilityZoneGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyAvailabilityZoneGroupInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyCapacityReservation holds details about calls to the ModifyCapacityReservation method.
		ModifyCapacityReservation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyCapacityReservationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyCapacityReservationFleet holds details about calls to the ModifyCapacityReservationFleet method.
		ModifyCapacityReservationFleet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyCapacityReservationFleetInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyClientVpnEndpoint holds details about calls to the ModifyClientVpnEndpoint method.
		ModifyClientVpnEndpoint []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyClientVpnEndpointInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyDefaultCreditSpecification holds details about calls to the ModifyDefaultCreditSpecification method.
		ModifyDefaultCreditSpecification []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyDefaultCreditSpecificationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyEbsDefaultKmsKeyId holds details about calls to the ModifyEbsDefaultKmsKeyId method.
		ModifyEbsDefaultKmsKeyId []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyEbsDefaultKmsKeyIdInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyFleet holds details about calls to the ModifyFleet method.
		ModifyFleet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyFleetInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyFpgaImageAttribute holds details about calls to the ModifyFpgaImageAttribute method.
		ModifyFpgaImageAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyFpgaImageAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyHosts holds details about calls to the ModifyHosts method.
		ModifyHosts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyHostsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyIdFormat holds details about calls to the ModifyIdFormat method.
		ModifyIdFormat []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyIdFormatInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyIdentityIdFormat holds details about calls to the ModifyIdentityIdFormat method.
		ModifyIdentityIdFormat []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyIdentityIdFormatInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyImageAttribute holds details about calls to the ModifyImageAttribute method.
		ModifyImageAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyImageAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyInstanceAttribute holds details about calls to the ModifyInstanceAttribute method.
		ModifyInstanceAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyInstanceAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyInstanceCapacityReservationAttributes holds details about calls to the ModifyInstanceCapacityReservationAttributes method.
		ModifyInstanceCapacityReservationAttributes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyInstanceCapacityReservationAttributesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyInstanceCreditSpecification holds details about calls to the ModifyInstanceCreditSpecification method.
		ModifyInstanceCreditSpecification []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyInstanceCreditSpecificationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyInstanceEventStartTime holds details about calls to the ModifyInstanceEventStartTime method.
		ModifyInstanceEventStartTime []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyInstanceEventStartTimeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyInstanceEventWindow holds details about calls to the ModifyInstanceEventWindow method.
		ModifyInstanceEventWindow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyInstanceEventWindowInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyInstanceMaintenanceOptions holds details about calls to the ModifyInstanceMaintenanceOptions method.
		ModifyInstanceMaintenanceOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyInstanceMaintenanceOptionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyInstanceMetadataOptions holds details about calls to the ModifyInstanceMetadataOptions method.
		ModifyInstanceMetadataOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyInstanceMetadataOptionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyInstancePlacement holds details about calls to the ModifyInstancePlacement method.
		ModifyInstancePlacement []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyInstancePlacementInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyIpam holds details about calls to the ModifyIpam method.
		ModifyIpam []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyIpamInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyIpamPool holds details about calls to the ModifyIpamPool method.
		ModifyIpamPool []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyIpamPoolInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyIpamResourceCidr holds details about calls to the ModifyIpamResourceCidr method.
		ModifyIpamResourceCidr []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyIpamResourceCidrInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyIpamScope holds details about calls to the ModifyIpamScope method.
		ModifyIpamScope []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyIpamScopeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyLaunchTemplate holds details about calls to the ModifyLaunchTemplate method.
		ModifyLaunchTemplate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyLaunchTemplateInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyManagedPrefixList holds details about calls to the ModifyManagedPrefixList method.
		ModifyManagedPrefixList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyManagedPrefixListInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyNetworkInterfaceAttribute holds details about calls to the ModifyNetworkInterfaceAttribute method.
		ModifyNetworkInterfaceAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyNetworkInterfaceAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyPrivateDnsNameOptions holds details about calls to the ModifyPrivateDnsNameOptions method.
		ModifyPrivateDnsNameOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyPrivateDnsNameOptionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyReservedInstances holds details about calls to the ModifyReservedInstances method.
		ModifyReservedInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyReservedInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifySecurityGroupRules holds details about calls to the ModifySecurityGroupRules method.
		ModifySecurityGroupRules []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifySecurityGroupRulesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifySnapshotAttribute holds details about calls to the ModifySnapshotAttribute method.
		ModifySnapshotAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifySnapshotAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifySnapshotTier holds details about calls to the ModifySnapshotTier method.
		ModifySnapshotTier []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifySnapshotTierInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifySpotFleetRequest holds details about calls to the ModifySpotFleetRequest method.
		ModifySpotFleetRequest []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifySpotFleetRequestInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifySubnetAttribute holds details about calls to the ModifySubnetAttribute method.
		ModifySubnetAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifySubnetAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyTrafficMirrorFilterNetworkServices holds details about calls to the ModifyTrafficMirrorFilterNetworkServices method.
		ModifyTrafficMirrorFilterNetworkServices []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyTrafficMirrorFilterRule holds details about calls to the ModifyTrafficMirrorFilterRule method.
		ModifyTrafficMirrorFilterRule []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyTrafficMirrorFilterRuleInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyTrafficMirrorSession holds details about calls to the ModifyTrafficMirrorSession method.
		ModifyTrafficMirrorSession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyTrafficMirrorSessionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyTransitGateway holds details about calls to the ModifyTransitGateway method.
		ModifyTransitGateway []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyTransitGatewayInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyTransitGatewayPrefixListReference holds details about calls to the ModifyTransitGatewayPrefixListReference method.
		ModifyTransitGatewayPrefixListReference []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyTransitGatewayPrefixListReferenceInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyTransitGatewayVpcAttachment holds details about calls to the ModifyTransitGatewayVpcAttachment method.
		ModifyTransitGatewayVpcAttachment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyTransitGatewayVpcAttachmentInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyVolume holds details about calls to the ModifyVolume method.
		ModifyVolume []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyVolumeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyVolumeAttribute holds details about calls to the ModifyVolumeAttribute method.
		ModifyVolumeAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyVolumeAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyVpcAttribute holds details about calls to the ModifyVpcAttribute method.
		ModifyVpcAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyVpcAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyVpcEndpoint holds details about calls to the ModifyVpcEndpoint method.
		ModifyVpcEndpoint []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyVpcEndpointInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyVpcEndpointConnectionNotification holds details about calls to the ModifyVpcEndpointConnectionNotification method.
		ModifyVpcEndpointConnectionNotification []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyVpcEndpointConnectionNotificationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyVpcEndpointServiceConfiguration holds details about calls to the ModifyVpcEndpointServiceConfiguration method.
		ModifyVpcEndpointServiceConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyVpcEndpointServiceConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyVpcEndpointServicePayerResponsibility holds details about calls to the ModifyVpcEndpointServicePayerResponsibility method.
		ModifyVpcEndpointServicePayerResponsibility []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyVpcEndpointServicePayerResponsibilityInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyVpcEndpointServicePermissions holds details about calls to the ModifyVpcEndpointServicePermissions method.
		ModifyVpcEndpointServicePermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyVpcEndpointServicePermissionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyVpcPeeringConnectionOptions holds details about calls to the ModifyVpcPeeringConnectionOptions method.
		ModifyVpcPeeringConnectionOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyVpcPeeringConnectionOptionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyVpcTenancy holds details about calls to the ModifyVpcTenancy method.
		ModifyVpcTenancy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyVpcTenancyInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyVpnConnection holds details about calls to the ModifyVpnConnection method.
		ModifyVpnConnection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyVpnConnectionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyVpnConnectionOptions holds details about calls to the ModifyVpnConnectionOptions method.
		ModifyVpnConnectionOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyVpnConnectionOptionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyVpnTunnelCertificate holds details about calls to the ModifyVpnTunnelCertificate method.
		ModifyVpnTunnelCertificate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyVpnTunnelCertificateInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ModifyVpnTunnelOptions holds details about calls to the ModifyVpnTunnelOptions method.
		ModifyVpnTunnelOptions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ModifyVpnTunnelOptionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// MonitorInstances holds details about calls to the MonitorInstances method.
		MonitorInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.MonitorInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// MoveAddressToVpc holds details about calls to the MoveAddressToVpc method.
		MoveAddressToVpc []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.MoveAddressToVpcInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// MoveByoipCidrToIpam holds details about calls to the MoveByoipCidrToIpam method.
		MoveByoipCidrToIpam []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.MoveByoipCidrToIpamInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ProvisionByoipCidr holds details about calls to the ProvisionByoipCidr method.
		ProvisionByoipCidr []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ProvisionByoipCidrInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ProvisionIpamPoolCidr holds details about calls to the ProvisionIpamPoolCidr method.
		ProvisionIpamPoolCidr []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ProvisionIpamPoolCidrInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ProvisionPublicIpv4PoolCidr holds details about calls to the ProvisionPublicIpv4PoolCidr method.
		ProvisionPublicIpv4PoolCidr []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ProvisionPublicIpv4PoolCidrInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// PurchaseHostReservation holds details about calls to the PurchaseHostReservation method.
		PurchaseHostReservation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.PurchaseHostReservationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// PurchaseReservedInstancesOffering holds details about calls to the PurchaseReservedInstancesOffering method.
		PurchaseReservedInstancesOffering []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.PurchaseReservedInstancesOfferingInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// PurchaseScheduledInstances holds details about calls to the PurchaseScheduledInstances method.
		PurchaseScheduledInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.PurchaseScheduledInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RebootInstances holds details about calls to the RebootInstances method.
		RebootInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RebootInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RegisterImage holds details about calls to the RegisterImage method.
		RegisterImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RegisterImageInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RegisterInstanceEventNotificationAttributes holds details about calls to the RegisterInstanceEventNotificationAttributes method.
		RegisterInstanceEventNotificationAttributes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RegisterInstanceEventNotificationAttributesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RegisterTransitGatewayMulticastGroupMembers holds details about calls to the RegisterTransitGatewayMulticastGroupMembers method.
		RegisterTransitGatewayMulticastGroupMembers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RegisterTransitGatewayMulticastGroupMembersInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RegisterTransitGatewayMulticastGroupSources holds details about calls to the RegisterTransitGatewayMulticastGroupSources method.
		RegisterTransitGatewayMulticastGroupSources []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RejectTransitGatewayMulticastDomainAssociations holds details about calls to the RejectTransitGatewayMulticastDomainAssociations method.
		RejectTransitGatewayMulticastDomainAssociations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RejectTransitGatewayMulticastDomainAssociationsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RejectTransitGatewayPeeringAttachment holds details about calls to the RejectTransitGatewayPeeringAttachment method.
		RejectTransitGatewayPeeringAttachment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RejectTransitGatewayPeeringAttachmentInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RejectTransitGatewayVpcAttachment holds details about calls to the RejectTransitGatewayVpcAttachment method.
		RejectTransitGatewayVpcAttachment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RejectTransitGatewayVpcAttachmentInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RejectVpcEndpointConnections holds details about calls to the RejectVpcEndpointConnections method.
		RejectVpcEndpointConnections []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RejectVpcEndpointConnectionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RejectVpcPeeringConnection holds details about calls to the RejectVpcPeeringConnection method.
		RejectVpcPeeringConnection []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RejectVpcPeeringConnectionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ReleaseAddress holds details about calls to the ReleaseAddress method.
		ReleaseAddress []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ReleaseAddressInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ReleaseHosts holds details about calls to the ReleaseHosts method.
		ReleaseHosts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ReleaseHostsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ReleaseIpamPoolAllocation holds details about calls to the ReleaseIpamPoolAllocation method.
		ReleaseIpamPoolAllocation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ReleaseIpamPoolAllocationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ReplaceIamInstanceProfileAssociation holds details about calls to the ReplaceIamInstanceProfileAssociation method.
		ReplaceIamInstanceProfileAssociation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ReplaceIamInstanceProfileAssociationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ReplaceNetworkAclAssociation holds details about calls to the ReplaceNetworkAclAssociation method.
		ReplaceNetworkAclAssociation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ReplaceNetworkAclAssociationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ReplaceNetworkAclEntry holds details about calls to the ReplaceNetworkAclEntry method.
		ReplaceNetworkAclEntry []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ReplaceNetworkAclEntryInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ReplaceRoute holds details about calls to the ReplaceRoute method.
		ReplaceRoute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ReplaceRouteInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ReplaceRouteTableAssociation holds details about calls to the ReplaceRouteTableAssociation method.
		ReplaceRouteTableAssociation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ReplaceRouteTableAssociationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ReplaceTransitGatewayRoute holds details about calls to the ReplaceTransitGatewayRoute method.
		ReplaceTransitGatewayRoute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ReplaceTransitGatewayRouteInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ReportInstanceStatus holds details about calls to the ReportInstanceStatus method.
		ReportInstanceStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ReportInstanceStatusInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RequestSpotFleet holds details about calls to the RequestSpotFleet method.
		RequestSpotFleet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RequestSpotFleetInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RequestSpotInstances holds details about calls to the RequestSpotInstances method.
		RequestSpotInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RequestSpotInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ResetAddressAttribute holds details about calls to the ResetAddressAttribute method.
		ResetAddressAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ResetAddressAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ResetEbsDefaultKmsKeyId holds details about calls to the ResetEbsDefaultKmsKeyId method.
		ResetEbsDefaultKmsKeyId []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ResetEbsDefaultKmsKeyIdInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ResetFpgaImageAttribute holds details about calls to the ResetFpgaImageAttribute method.
		ResetFpgaImageAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ResetFpgaImageAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ResetImageAttribute holds details about calls to the ResetImageAttribute method.
		ResetImageAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ResetImageAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ResetInstanceAttribute holds details about calls to the ResetInstanceAttribute method.
		ResetInstanceAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ResetInstanceAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ResetNetworkInterfaceAttribute holds details about calls to the ResetNetworkInterfaceAttribute method.
		ResetNetworkInterfaceAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ResetNetworkInterfaceAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// ResetSnapshotAttribute holds details about calls to the ResetSnapshotAttribute method.
		ResetSnapshotAttribute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.ResetSnapshotAttributeInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RestoreAddressToClassic holds details about calls to the RestoreAddressToClassic method.
		RestoreAddressToClassic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RestoreAddressToClassicInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RestoreImageFromRecycleBin holds details about calls to the RestoreImageFromRecycleBin method.
		RestoreImageFromRecycleBin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RestoreImageFromRecycleBinInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RestoreManagedPrefixListVersion holds details about calls to the RestoreManagedPrefixListVersion method.
		RestoreManagedPrefixListVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RestoreManagedPrefixListVersionInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RestoreSnapshotFromRecycleBin holds details about calls to the RestoreSnapshotFromRecycleBin method.
		RestoreSnapshotFromRecycleBin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RestoreSnapshotFromRecycleBinInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RestoreSnapshotTier holds details about calls to the RestoreSnapshotTier method.
		RestoreSnapshotTier []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RestoreSnapshotTierInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RevokeClientVpnIngress holds details about calls to the RevokeClientVpnIngress method.
		RevokeClientVpnIngress []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RevokeClientVpnIngressInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RevokeSecurityGroupEgress holds details about calls to the RevokeSecurityGroupEgress method.
		RevokeSecurityGroupEgress []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RevokeSecurityGroupEgressInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RevokeSecurityGroupIngress holds details about calls to the RevokeSecurityGroupIngress method.
		RevokeSecurityGroupIngress []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RevokeSecurityGroupIngressInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RunInstances holds details about calls to the RunInstances method.
		RunInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RunInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// RunScheduledInstances holds details about calls to the RunScheduledInstances method.
		RunScheduledInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.RunScheduledInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// SearchLocalGatewayRoutes holds details about calls to the SearchLocalGatewayRoutes method.
		SearchLocalGatewayRoutes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.SearchLocalGatewayRoutesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// SearchTransitGatewayMulticastGroups holds details about calls to the SearchTransitGatewayMulticastGroups method.
		SearchTransitGatewayMulticastGroups []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.SearchTransitGatewayMulticastGroupsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// SearchTransitGatewayRoutes holds details about calls to the SearchTransitGatewayRoutes method.
		SearchTransitGatewayRoutes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.SearchTransitGatewayRoutesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// SendDiagnosticInterrupt holds details about calls to the SendDiagnosticInterrupt method.
		SendDiagnosticInterrupt []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.SendDiagnosticInterruptInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// StartInstances holds details about calls to the StartInstances method.
		StartInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.StartInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// StartNetworkInsightsAccessScopeAnalysis holds details about calls to the StartNetworkInsightsAccessScopeAnalysis method.
		StartNetworkInsightsAccessScopeAnalysis []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.StartNetworkInsightsAccessScopeAnalysisInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// StartNetworkInsightsAnalysis holds details about calls to the StartNetworkInsightsAnalysis method.
		StartNetworkInsightsAnalysis []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.StartNetworkInsightsAnalysisInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// StartVpcEndpointServicePrivateDnsVerification holds details about calls to the StartVpcEndpointServicePrivateDnsVerification method.
		StartVpcEndpointServicePrivateDnsVerification []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// StopInstances holds details about calls to the StopInstances method.
		StopInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.StopInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// TerminateClientVpnConnections holds details about calls to the TerminateClientVpnConnections method.
		TerminateClientVpnConnections []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.TerminateClientVpnConnectionsInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// TerminateInstances holds details about calls to the TerminateInstances method.
		TerminateInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.TerminateInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// UnassignIpv6Addresses holds details about calls to the UnassignIpv6Addresses method.
		UnassignIpv6Addresses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.UnassignIpv6AddressesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// UnassignPrivateIpAddresses holds details about calls to the UnassignPrivateIpAddresses method.
		UnassignPrivateIpAddresses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.UnassignPrivateIpAddressesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// UnmonitorInstances holds details about calls to the UnmonitorInstances method.
		UnmonitorInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.UnmonitorInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// UpdateSecurityGroupRuleDescriptionsEgress holds details about calls to the UpdateSecurityGroupRuleDescriptionsEgress method.
		UpdateSecurityGroupRuleDescriptionsEgress []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// UpdateSecurityGroupRuleDescriptionsIngress holds details about calls to the UpdateSecurityGroupRuleDescriptionsIngress method.
		UpdateSecurityGroupRuleDescriptionsIngress []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
		// WithdrawByoipCidr holds details about calls to the WithdrawByoipCidr method.
		WithdrawByoipCidr []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ec2.WithdrawByoipCidrInput
			// OptFns is the optFns argument value.
			OptFns []func(*ec2.Options)
		}
	}
	lockAcceptReservedInstancesExchangeQuote                            sync.RWMutex
	lockAcceptTransitGatewayMulticastDomainAssociations                 sync.RWMutex
	lockAcceptTransitGatewayPeeringAttachment                           sync.RWMutex
	lockAcceptTransitGatewayVpcAttachment                               sync.RWMutex
	lockAcceptVpcEndpointConnections                                    sync.RWMutex
	lockAcceptVpcPeeringConnection                                      sync.RWMutex
	lockAdvertiseByoipCidr                                              sync.RWMutex
	lockAllocateAddress                                                 sync.RWMutex
	lockAllocateHosts                                                   sync.RWMutex
	lockAllocateIpamPoolCidr                                            sync.RWMutex
	lockApplySecurityGroupsToClientVpnTargetNetwork                     sync.RWMutex
	lockAssignIpv6Addresses                                             sync.RWMutex
	lockAssignPrivateIpAddresses                                        sync.RWMutex
	lockAssociateAddress                                                sync.RWMutex
	lockAssociateClientVpnTargetNetwork                                 sync.RWMutex
	lockAssociateDhcpOptions                                            sync.RWMutex
	lockAssociateEnclaveCertificateIamRole                              sync.RWMutex
	lockAssociateIamInstanceProfile                                     sync.RWMutex
	lockAssociateInstanceEventWindow                                    sync.RWMutex
	lockAssociateRouteTable                                             sync.RWMutex
	lockAssociateSubnetCidrBlock                                        sync.RWMutex
	lockAssociateTransitGatewayMulticastDomain                          sync.RWMutex
	lockAssociateTransitGatewayPolicyTable                              sync.RWMutex
	lockAssociateTransitGatewayRouteTable                               sync.RWMutex
	lockAssociateTrunkInterface                                         sync.RWMutex
	lockAssociateVpcCidrBlock                                           sync.RWMutex
	lockAttachClassicLinkVpc                                            sync.RWMutex
	lockAttachInternetGateway                                           sync.RWMutex
	lockAttachNetworkInterface                                          sync.RWMutex
	lockAttachVolume                                                    sync.RWMutex
	lockAttachVpnGateway                                                sync.RWMutex
	lockAuthorizeClientVpnIngress                                       sync.RWMutex
	lockAuthorizeSecurityGroupEgress                                    sync.RWMutex
	lockAuthorizeSecurityGroupIngress                                   sync.RWMutex
	lockBundleInstance                                                  sync.RWMutex
	lockCancelBundleTask                                                sync.RWMutex
	lockCancelCapacityReservation                                       sync.RWMutex
	lockCancelCapacityReservationFleets                                 sync.RWMutex
	lockCancelConversionTask                                            sync.RWMutex
	lockCancelExportTask                                                sync.RWMutex
	lockCancelImportTask                                                sync.RWMutex
	lockCancelReservedInstancesListing                                  sync.RWMutex
	lockCancelSpotFleetRequests                                         sync.RWMutex
	lockCancelSpotInstanceRequests                                      sync.RWMutex
	lockConfirmProductInstance                                          sync.RWMutex
	lockCopyFpgaImage                                                   sync.RWMutex
	lockCopyImage                                                       sync.RWMutex
	lockCopySnapshot                                                    sync.RWMutex
	lockCreateCapacityReservation                                       sync.RWMutex
	lockCreateCapacityReservationFleet                                  sync.RWMutex
	lockCreateCarrierGateway                                            sync.RWMutex
	lockCreateClientVpnEndpoint                                         sync.RWMutex
	lockCreateClientVpnRoute                                            sync.RWMutex
	lockCreateCustomerGateway                                           sync.RWMutex
	lockCreateDefaultSubnet                                             sync.RWMutex
	lockCreateDefaultVpc                                                sync.RWMutex
	lockCreateDhcpOptions                                               sync.RWMutex
	lockCreateEgressOnlyInternetGateway                                 sync.RWMutex
	lockCreateFleet                                                     sync.RWMutex
	lockCreateFlowLogs                                                  sync.RWMutex
	lockCreateFpgaImage                                                 sync.RWMutex
	lockCreateImage                                                     sync.RWMutex
	lockCreateInstanceEventWindow                                       sync.RWMutex
	lockCreateInstanceExportTask                                        sync.RWMutex
	lockCreateInternetGateway                                           sync.RWMutex
	lockCreateIpam                                                      sync.RWMutex
	lockCreateIpamPool                                                  sync.RWMutex
	lockCreateIpamScope                                                 sync.RWMutex
	lockCreateKeyPair                                                   sync.RWMutex
	lockCreateLaunchTemplate                                            sync.RWMutex
	lockCreateLaunchTemplateVersion                                     sync.RWMutex
	lockCreateLocalGatewayRoute                                         sync.RWMutex
	lockCreateLocalGatewayRouteTableVpcAssociation                      sync.RWMutex
	lockCreateManagedPrefixList                                         sync.RWMutex
	lockCreateNatGateway                                                sync.RWMutex
	lockCreateNetworkAcl                                                sync.RWMutex
	lockCreateNetworkAclEntry                                           sync.RWMutex
	lockCreateNetworkInsightsAccessScope                                sync.RWMutex
	lockCreateNetworkInsightsPath                                       sync.RWMutex
	lockCreateNetworkInterface                                          sync.RWMutex
	lockCreateNetworkInterfacePermission                                sync.RWMutex
	lockCreatePlacementGroup                                            sync.RWMutex
	lockCreatePublicIpv4Pool                                            sync.RWMutex
	lockCreateReplaceRootVolumeTask                                     sync.RWMutex
	lockCreateReservedInstancesListing                                  sync.RWMutex
	lockCreateRestoreImageTask                                          sync.RWMutex
	lockCreateRoute                                                     sync.RWMutex
	lockCreateRouteTable                                                sync.RWMutex
	lockCreateSecurityGroup                                             sync.RWMutex
	lockCreateSnapshot                                                  sync.RWMutex
	lockCreateSnapshots                                                 sync.RWMutex
	lockCreateSpotDatafeedSubscription                                  sync.RWMutex
	lockCreateStoreImageTask                                            sync.RWMutex
	lockCreateSubnet                                                    sync.RWMutex
	lockCreateSubnetCidrReservation                                     sync.RWMutex
	lockCreateTags                                                      sync.RWMutex
	lockCreateTrafficMirrorFilter                                       sync.RWMutex
	lockCreateTrafficMirrorFilterRule                                   sync.RWMutex
	lockCreateTrafficMirrorSession                                      sync.RWMutex
	lockCreateTrafficMirrorTarget                                       sync.RWMutex
	lockCreateTransitGateway                                            sync.RWMutex
	lockCreateTransitGatewayConnect                                     sync.RWMutex
	lockCreateTransitGatewayConnectPeer                                 sync.RWMutex
	lockCreateTransitGatewayMulticastDomain                             sync.RWMutex
	lockCreateTransitGatewayPeeringAttachment                           sync.RWMutex
	lockCreateTransitGatewayPolicyTable                                 sync.RWMutex
	lockCreateTransitGatewayPrefixListReference                         sync.RWMutex
	lockCreateTransitGatewayRoute                                       sync.RWMutex
	lockCreateTransitGatewayRouteTable                                  sync.RWMutex
	lockCreateTransitGatewayRouteTableAnnouncement                      sync.RWMutex
	lockCreateTransitGatewayVpcAttachment                               sync.RWMutex
	lockCreateVolume                                                    sync.RWMutex
	lockCreateVpc                                                       sync.RWMutex
	lockCreateVpcEndpoint                                               sync.RWMutex
	lockCreateVpcEndpointConnectionNotification                         sync.RWMutex
	lockCreateVpcEndpointServiceConfiguration                           sync.RWMutex
	lockCreateVpcPeeringConnection                                      sync.RWMutex
	lockCreateVpnConnection                                             sync.RWMutex
	lockCreateVpnConnectionRoute                                        sync.RWMutex
	lockCreateVpnGateway                                                sync.RWMutex
	lockDeleteCarrierGateway                                            sync.RWMutex
	lockDeleteClientVpnEndpoint                                         sync.RWMutex
	lockDeleteClientVpnRoute                                            sync.RWMutex
	lockDeleteCustomerGateway                                           sync.RWMutex
	lockDeleteDhcpOptions                                               sync.RWMutex
	lockDeleteEgressOnlyInternetGateway                                 sync.RWMutex
	lockDeleteFleets                                                    sync.RWMutex
	lockDeleteFlowLogs                                                  sync.RWMutex
	lockDeleteFpgaImage                                                 sync.RWMutex
	lockDeleteInstanceEventWindow                                       sync.RWMutex
	lockDeleteInternetGateway                                           sync.RWMutex
	lockDeleteIpam                                                      sync.RWMutex
	lockDeleteIpamPool                                                  sync.RWMutex
	lockDeleteIpamScope                                                 sync.RWMutex
	lockDeleteKeyPair                                                   sync.RWMutex
	lockDeleteLaunchTemplate                                            sync.RWMutex
	lockDeleteLaunchTemplateVersions                                    sync.RWMutex
	lockDeleteLocalGatewayRoute                                         sync.RWMutex
	lockDeleteLocalGatewayRouteTableVpcAssociation                      sync.RWMutex
	lockDeleteManagedPrefixList                                         sync.RWMutex
	lockDeleteNatGateway                                                sync.RWMutex
	lockDeleteNetworkAcl                                                sync.RWMutex
	lockDeleteNetworkAclEntry                                           sync.RWMutex
	lockDeleteNetworkInsightsAccessScope                                sync.RWMutex
	lockDeleteNetworkInsightsAccessScopeAnalysis                        sync.RWMutex
	lockDeleteNetworkInsightsAnalysis                                   sync.RWMutex
	lockDeleteNetworkInsightsPath                                       sync.RWMutex
	lockDeleteNetworkInterface                                          sync.RWMutex
	lockDeleteNetworkInterfacePermission                                sync.RWMutex
	lockDeletePlacementGroup                                            sync.RWMutex
	lockDeletePublicIpv4Pool                                            sync.RWMutex
	lockDeleteQueuedReservedInstances                                   sync.RWMutex
	lockDeleteRoute                                                     sync.RWMutex
	lockDeleteRouteTable                                                sync.RWMutex
	lockDeleteSecurityGroup                                             sync.RWMutex
	lockDeleteSnapshot                                                  sync.RWMutex
	lockDeleteSpotDatafeedSubscription                                  sync.RWMutex
	lockDeleteSubnet                                                    sync.RWMutex
	lockDeleteSubnetCidrReservation                                     sync.RWMutex
	lockDeleteTags                                                      sync.RWMutex
	lockDeleteTrafficMirrorFilter                                       sync.RWMutex
	lockDeleteTrafficMirrorFilterRule                                   sync.RWMutex
	lockDeleteTrafficMirrorSession                                      sync.RWMutex
	lockDeleteTrafficMirrorTarget                                       sync.RWMutex
	lockDeleteTransitGateway                                            sync.RWMutex
	lockDeleteTransitGatewayConnect                                     sync.RWMutex
	lockDeleteTransitGatewayConnectPeer                                 sync.RWMutex
	lockDeleteTransitGatewayMulticastDomain                             sync.RWMutex
	lockDeleteTransitGatewayPeeringAttachment                           sync.RWMutex
	lockDeleteTransitGatewayPolicyTable                                 sync.RWMutex
	lockDeleteTransitGatewayPrefixListReference                         sync.RWMutex
	lockDeleteTransitGatewayRoute                                       sync.RWMutex
	lockDeleteTransitGatewayRouteTable                                  sync.RWMutex
	lockDeleteTransitGatewayRouteTableAnnouncement                      sync.RWMutex
	lockDeleteTransitGatewayVpcAttachment                               sync.RWMutex
	lockDeleteVolume                                                    sync.RWMutex
	lockDeleteVpc                                                       sync.RWMutex
	lockDeleteVpcEndpointConnectionNotifications                        sync.RWMutex
	lockDeleteVpcEndpointServiceConfigurations                          sync.RWMutex
	lockDeleteVpcEndpoints                                              sync.RWMutex
	lockDeleteVpcPeeringConnection                                      sync.RWMutex
	lockDeleteVpnConnection                                             sync.RWMutex
	lockDeleteVpnConnectionRoute                                        sync.RWMutex
	lockDeleteVpnGateway                                                sync.RWMutex
	lockDeprovisionByoipCidr                                            sync.RWMutex
	lockDeprovisionIpamPoolCidr                                         sync.RWMutex
	lockDeprovisionPublicIpv4PoolCidr                                   sync.RWMutex
	lockDeregisterImage                                                 sync.RWMutex
	lockDeregisterInstanceEventNotificationAttributes                   sync.RWMutex
	lockDeregisterTransitGatewayMulticastGroupMembers                   sync.RWMutex
	lockDeregisterTransitGatewayMulticastGroupSources                   sync.RWMutex
	lockDescribeAccountAttributes                                       sync.RWMutex
	lockDescribeAddresses                                               sync.RWMutex
	lockDescribeAddressesAttribute                                      sync.RWMutex
	lockDescribeAggregateIdFormat                                       sync.RWMutex
	lockDescribeAvailabilityZones                                       sync.RWMutex
	lockDescribeBundleTasks                                             sync.RWMutex
	lockDescribeByoipCidrs                                              sync.RWMutex
	lockDescribeCapacityReservationFleets                               sync.RWMutex
	lockDescribeCapacityReservations                                    sync.RWMutex
	lockDescribeCarrierGateways                                         sync.RWMutex
	lockDescribeClassicLinkInstances                                    sync.RWMutex
	lockDescribeClientVpnAuthorizationRules                             sync.RWMutex
	lockDescribeClientVpnConnections                                    sync.RWMutex
	lockDescribeClientVpnEndpoints                                      sync.RWMutex
	lockDescribeClientVpnRoutes                                         sync.RWMutex
	lockDescribeClientVpnTargetNetworks                                 sync.RWMutex
	lockDescribeCoipPools                                               sync.RWMutex
	lockDescribeConversionTasks                                         sync.RWMutex
	lockDescribeCustomerGateways                                        sync.RWMutex
	lockDescribeDhcpOptions                                             sync.RWMutex
	lockDescribeEgressOnlyInternetGateways                              sync.RWMutex
	lockDescribeElasticGpus                                             sync.RWMutex
	lockDescribeExportImageTasks                                        sync.RWMutex
	lockDescribeExportTasks                                             sync.RWMutex
	lockDescribeFastLaunchImages                                        sync.RWMutex
	lockDescribeFastSnapshotRestores                                    sync.RWMutex
	lockDescribeFleetHistory                                            sync.RWMutex
	lockDescribeFleetInstances                                          sync.RWMutex
	lockDescribeFleets                                                  sync.RWMutex
	lockDescribeFlowLogs                                                sync.RWMutex
	lockDescribeFpgaImageAttribute                                      sync.RWMutex
	lockDescribeFpgaImages                                              sync.RWMutex
	lockDescribeHostReservationOfferings                                sync.RWMutex
	lockDescribeHostReservations                                        sync.RWMutex
	lockDescribeHosts                                                   sync.RWMutex
	lockDescribeIamInstanceProfileAssociations                          sync.RWMutex
	lockDescribeIdFormat                                                sync.RWMutex
	lockDescribeIdentityIdFormat                                        sync.RWMutex
	lockDescribeImageAttribute                                          sync.RWMutex
	lockDescribeImages                                                  sync.RWMutex
	lockDescribeImportImageTasks                                        sync.RWMutex
	lockDescribeImportSnapshotTasks                                     sync.RWMutex
	lockDescribeInstanceAttribute                                       sync.RWMutex
	lockDescribeInstanceCreditSpecifications                            sync.RWMutex
	lockDescribeInstanceEventNotificationAttributes                     sync.RWMutex
	lockDescribeInstanceEventWindows                                    sync.RWMutex
	lockDescribeInstanceStatus                                          sync.RWMutex
	lockDescribeInstanceTypeOfferings                                   sync.RWMutex
	lockDescribeInstanceTypes                                           sync.RWMutex
	lockDescribeInstances                                               sync.RWMutex
	lockDescribeInternetGateways                                        sync.RWMutex
	lockDescribeIpamPools                                               sync.RWMutex
	lockDescribeIpamScopes                                              sync.RWMutex
	lockDescribeIpams                                                   sync.RWMutex
	lockDescribeIpv6Pools                                               sync.RWMutex
	lockDescribeKeyPairs                                                sync.RWMutex
	lockDescribeLaunchTemplateVersions                                  sync.RWMutex
	lockDescribeLaunchTemplates                                         sync.RWMutex
	lockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations sync.RWMutex
	lockDescribeLocalGatewayRouteTableVpcAssociations                   sync.RWMutex
	lockDescribeLocalGatewayRouteTables                                 sync.RWMutex
	lockDescribeLocalGatewayVirtualInterfaceGroups                      sync.RWMutex
	lockDescribeLocalGatewayVirtualInterfaces                           sync.RWMutex
	lockDescribeLocalGateways                                           sync.RWMutex
	lockDescribeManagedPrefixLists                                      sync.RWMutex
	lockDescribeMovingAddresses                                         sync.RWMutex
	lockDescribeNatGateways                                             sync.RWMutex
	lockDescribeNetworkAcls                                             sync.RWMutex
	lockDescribeNetworkInsightsAccessScopeAnalyses                      sync.RWMutex
	lockDescribeNetworkInsightsAccessScopes                             sync.RWMutex
	lockDescribeNetworkInsightsAnalyses                                 sync.RWMutex
	lockDescribeNetworkInsightsPaths                                    sync.RWMutex
	lockDescribeNetworkInterfaceAttribute                               sync.RWMutex
	lockDescribeNetworkInterfacePermissions                             sync.RWMutex
	lockDescribeNetworkInterfaces                                       sync.RWMutex
	lockDescribePlacementGroups                                         sync.RWMutex
	lockDescribePrefixLists                                             sync.RWMutex
	lockDescribePrincipalIdFormat                                       sync.RWMutex
	lockDescribePublicIpv4Pools                                         sync.RWMutex
	lockDescribeRegions                                                 sync.RWMutex
	lockDescribeReplaceRootVolumeTasks                                  sync.RWMutex
	lockDescribeReservedInstances                                       sync.RWMutex
	lockDescribeReservedInstancesListings                               sync.RWMutex
	lockDescribeReservedInstancesModifications                          sync.RWMutex
	lockDescribeReservedInstancesOfferings                              sync.RWMutex
	lockDescribeRouteTables                                             sync.RWMutex
	lockDescribeScheduledInstanceAvailability                           sync.RWMutex
	lockDescribeScheduledInstances                                      sync.RWMutex
	lockDescribeSecurityGroupReferences                                 sync.RWMutex
	lockDescribeSecurityGroupRules                                      sync.RWMutex
	lockDescribeSecurityGroups                                          sync.RWMutex
	lockDescribeSnapshotAttribute                                       sync.RWMutex
	lockDescribeSnapshotTierStatus                                      sync.RWMutex
	lockDescribeSnapshots                                               sync.RWMutex
	lockDescribeSpotDatafeedSubscription                                sync.RWMutex
	lockDescribeSpotFleetInstances                                      sync.RWMutex
	lockDescribeSpotFleetRequestHistory                                 sync.RWMutex
	lockDescribeSpotFleetRequests                                       sync.RWMutex
	lockDescribeSpotInstanceRequests                                    sync.RWMutex
	lockDescribeSpotPriceHistory                                        sync.RWMutex
	lockDescribeStaleSecurityGroups                                     sync.RWMutex
	lockDescribeStoreImageTasks                                         sync.RWMutex
	lockDescribeSubnets                                                 sync.RWMutex
	lockDescribeTags                                                    sync.RWMutex
	lockDescribeTrafficMirrorFilters                                    sync.RWMutex
	lockDescribeTrafficMirrorSessions                                   sync.RWMutex
	lockDescribeTrafficMirrorTargets                                    sync.RWMutex
	lockDescribeTransitGatewayAttachments                               sync.RWMutex
	lockDescribeTransitGatewayConnectPeers                              sync.RWMutex
	lockDescribeTransitGatewayConnects                                  sync.RWMutex
	lockDescribeTransitGatewayMulticastDomains                          sync.RWMutex
	lockDescribeTransitGatewayPeeringAttachments                        sync.RWMutex
	lockDescribeTransitGatewayPolicyTables                              sync.RWMutex
	lockDescribeTransitGatewayRouteTableAnnouncements                   sync.RWMutex
	lockDescribeTransitGatewayRouteTables                               sync.RWMutex
	lockDescribeTransitGatewayVpcAttachments                            sync.RWMutex
	lockDescribeTransitGateways                                         sync.RWMutex
	lockDescribeTrunkInterfaceAssociations                              sync.RWMutex
	lockDescribeVolumeAttribute                                         sync.RWMutex
	lockDescribeVolumeStatus                                            sync.RWMutex
	lockDescribeVolumes                                                 sync.RWMutex
	lockDescribeVolumesModifications                                    sync.RWMutex
	lockDescribeVpcAttribute                                            sync.RWMutex
	lockDescribeVpcClassicLink                                          sync.RWMutex
	lockDescribeVpcClassicLinkDnsSupport                                sync.RWMutex
	lockDescribeVpcEndpointConnectionNotifications                      sync.RWMutex
	lockDescribeVpcEndpointConnections                                  sync.RWMutex
	lockDescribeVpcEndpointServiceConfigurations                        sync.RWMutex
	lockDescribeVpcEndpointServicePermissions                           sync.RWMutex
	lockDescribeVpcEndpointServices                                     sync.RWMutex
	lockDescribeVpcEndpoints                                            sync.RWMutex
	lockDescribeVpcPeeringConnections                                   sync.RWMutex
	lockDescribeVpcs                                                    sync.RWMutex
	lockDescribeVpnConnections                                          sync.RWMutex
	lockDescribeVpnGateways                                             sync.RWMutex
	lockDetachClassicLinkVpc                                            sync.RWMutex
	lockDetachInternetGateway                                           sync.RWMutex
	lockDetachNetworkInterface                                          sync.RWMutex
	lockDetachVolume                                                    sync.RWMutex
	lockDetachVpnGateway                                                sync.RWMutex
	lockDisableEbsEncryptionByDefault                                   sync.RWMutex
	lockDisableFastLaunch                                               sync.RWMutex
	lockDisableFastSnapshotRestores                                     sync.RWMutex
	lockDisableImageDeprecation                                         sync.RWMutex
	lockDisableIpamOrganizationAdminAccount                             sync.RWMutex
	lockDisableSerialConsoleAccess                                      sync.RWMutex
	lockDisableTransitGatewayRouteTablePropagation                      sync.RWMutex
	lockDisableVgwRoutePropagation                                      sync.RWMutex
	lockDisableVpcClassicLink                                           sync.RWMutex
	lockDisableVpcClassicLinkDnsSupport                                 sync.RWMutex
	lockDisassociateAddress                                             sync.RWMutex
	lockDisassociateClientVpnTargetNetwork                              sync.RWMutex
	lockDisassociateEnclaveCertificateIamRole                           sync.RWMutex
	lockDisassociateIamInstanceProfile                                  sync.RWMutex
	lockDisassociateInstanceEventWindow                                 sync.RWMutex
	lockDisassociateRouteTable                                          sync.RWMutex
	lockDisassociateSubnetCidrBlock                                     sync.RWMutex
	lockDisassociateTransitGatewayMulticastDomain                       sync.RWMutex
	lockDisassociateTransitGatewayPolicyTable                           sync.RWMutex
	lockDisassociateTransitGatewayRouteTable                            sync.RWMutex
	lockDisassociateTrunkInterface                                      sync.RWMutex
	lockDisassociateVpcCidrBlock                                        sync.RWMutex
	lockEnableEbsEncryptionByDefault                                    sync.RWMutex
	lockEnableFastLaunch                                                sync.RWMutex
	lockEnableFastSnapshotRestores                                      sync.RWMutex
	lockEnableImageDeprecation                                          sync.RWMutex
	lockEnableIpamOrganizationAdminAccount                              sync.RWMutex
	lockEnableSerialConsoleAccess                                       sync.RWMutex
	lockEnableTransitGatewayRouteTablePropagation                       sync.RWMutex
	lockEnableVgwRoutePropagation                                       sync.RWMutex
	lockEnableVolumeIO                                                  sync.RWMutex
	lockEnableVpcClassicLink                                            sync.RWMutex
	lockEnableVpcClassicLinkDnsSupport                                  sync.RWMutex
	lockExportClientVpnClientCertificateRevocationList                  sync.RWMutex
	lockExportClientVpnClientConfiguration                              sync.RWMutex
	lockExportImage                                                     sync.RWMutex
	lockExportTransitGatewayRoutes                                      sync.RWMutex
	lockGetAssociatedEnclaveCertificateIamRoles                         sync.RWMutex
	lockGetAssociatedIpv6PoolCidrs                                      sync.RWMutex
	lockGetCapacityReservationUsage                                     sync.RWMutex
	lockGetCoipPoolUsage                                                sync.RWMutex
	lockGetConsoleOutput                                                sync.RWMutex
	lockGetConsoleScreenshot                                            sync.RWMutex
	lockGetDefaultCreditSpecification                                   sync.RWMutex
	lockGetEbsDefaultKmsKeyId                                           sync.RWMutex
	lockGetEbsEncryptionByDefault                                       sync.RWMutex
	lockGetFlowLogsIntegrationTemplate                                  sync.RWMutex
	lockGetGroupsForCapacityReservation                                 sync.RWMutex
	lockGetHostReservationPurchasePreview                               sync.RWMutex
	lockGetInstanceTypesFromInstanceRequirements                        sync.RWMutex
	lockGetInstanceUefiData                                             sync.RWMutex
	lockGetIpamAddressHistory                                           sync.RWMutex
	lockGetIpamPoolAllocations                                          sync.RWMutex
	lockGetIpamPoolCidrs                                                sync.RWMutex
	lockGetIpamResourceCidrs                                            sync.RWMutex
	lockGetLaunchTemplateData                                           sync.RWMutex
	lockGetManagedPrefixListAssociations                                sync.RWMutex
	lockGetManagedPrefixListEntries                                     sync.RWMutex
	lockGetNetworkInsightsAccessScopeAnalysisFindings                   sync.RWMutex
	lockGetNetworkInsightsAccessScopeContent                            sync.RWMutex
	lockGetPasswordData                                                 sync.RWMutex
	lockGetReservedInstancesExchangeQuote                               sync.RWMutex
	lockGetSerialConsoleAccessStatus                                    sync.RWMutex
	lockGetSpotPlacementScores                                          sync.RWMutex
	lockGetSubnetCidrReservations                                       sync.RWMutex
	lockGetTransitGatewayAttachmentPropagations                         sync.RWMutex
	lockGetTransitGatewayMulticastDomainAssociations                    sync.RWMutex
	lockGetTransitGatewayPolicyTableAssociations                        sync.RWMutex
	lockGetTransitGatewayPolicyTableEntries                             sync.RWMutex
	lockGetTransitGatewayPrefixListReferences                           sync.RWMutex
	lockGetTransitGatewayRouteTableAssociations                         sync.RWMutex
	lockGetTransitGatewayRouteTablePropagations                         sync.RWMutex
	lockGetVpnConnectionDeviceSampleConfiguration                       sync.RWMutex
	lockGetVpnConnectionDeviceTypes                                     sync.RWMutex
	lockImportClientVpnClientCertificateRevocationList                  sync.RWMutex
	lockImportImage                                                     sync.RWMutex
	lockImportInstance                                                  sync.RWMutex
	lockImportKeyPair                                                   sync.RWMutex
	lockImportSnapshot                                                  sync.RWMutex
	lockImportVolume                                                    sync.RWMutex
	lockListImagesInRecycleBin                                          sync.RWMutex
	lockListSnapshotsInRecycleBin                                       sync.RWMutex
	lockModifyAddressAttribute                                          sync.RWMutex
	lockModifyAvailabilityZoneGroup                                     sync.RWMutex
	lockModifyCapacityReservation                                       sync.RWMutex
	lockModifyCapacityReservationFleet                                  sync.RWMutex
	lockModifyClientVpnEndpoint                                         sync.RWMutex
	lockModifyDefaultCreditSpecification                                sync.RWMutex
	lockModifyEbsDefaultKmsKeyId                                        sync.RWMutex
	lockModifyFleet                                                     sync.RWMutex
	lockModifyFpgaImageAttribute                                        sync.RWMutex
	lockModifyHosts                                                     sync.RWMutex
	lockModifyIdFormat                                                  sync.RWMutex
	lockModifyIdentityIdFormat                                          sync.RWMutex
	lockModifyImageAttribute                                            sync.RWMutex
	lockModifyInstanceAttribute                                         sync.RWMutex
	lockModifyInstanceCapacityReservationAttributes                     sync.RWMutex
	lockModifyInstanceCreditSpecification                               sync.RWMutex
	lockModifyInstanceEventStartTime                                    sync.RWMutex
	lockModifyInstanceEventWindow                                       sync.RWMutex
	lockModifyInstanceMaintenanceOptions                                sync.RWMutex
	lockModifyInstanceMetadataOptions                                   sync.RWMutex
	lockModifyInstancePlacement                                         sync.RWMutex
	lockModifyIpam                                                      sync.RWMutex
	lockModifyIpamPool                                                  sync.RWMutex
	lockModifyIpamResourceCidr                                          sync.RWMutex
	lockModifyIpamScope                                                 sync.RWMutex
	lockModifyLaunchTemplate                                            sync.RWMutex
	lockModifyManagedPrefixList                                         sync.RWMutex
	lockModifyNetworkInterfaceAttribute                                 sync.RWMutex
	lockModifyPrivateDnsNameOptions                                     sync.RWMutex
	lockModifyReservedInstances                                         sync.RWMutex
	lockModifySecurityGroupRules                                        sync.RWMutex
	lockModifySnapshotAttribute                                         sync.RWMutex
	lockModifySnapshotTier                                              sync.RWMutex
	lockModifySpotFleetRequest                                          sync.RWMutex
	lockModifySubnetAttribute                                           sync.RWMutex
	lockModifyTrafficMirrorFilterNetworkServices                        sync.RWMutex
	lockModifyTrafficMirrorFilterRule                                   sync.RWMutex
	lockModifyTrafficMirrorSession                                      sync.RWMutex
	lockModifyTransitGateway                                            sync.RWMutex
	lockModifyTransitGatewayPrefixListReference                         sync.RWMutex
	lockModifyTransitGatewayVpcAttachment                               sync.RWMutex
	lockModifyVolume                                                    sync.RWMutex
	lockModifyVolumeAttribute                                           sync.RWMutex
	lockModifyVpcAttribute                                              sync.RWMutex
	lockModifyVpcEndpoint                                               sync.RWMutex
	lockModifyVpcEndpointConnectionNotification                         sync.RWMutex
	lockModifyVpcEndpointServiceConfiguration                           sync.RWMutex
	lockModifyVpcEndpointServicePayerResponsibility                     sync.RWMutex
	lockModifyVpcEndpointServicePermissions                             sync.RWMutex
	lockModifyVpcPeeringConnectionOptions                               sync.RWMutex
	lockModifyVpcTenancy                                                sync.RWMutex
	lockModifyVpnConnection                                             sync.RWMutex
	lockModifyVpnConnectionOptions                                      sync.RWMutex
	lockModifyVpnTunnelCertificate                                      sync.RWMutex
	lockModifyVpnTunnelOptions                                          sync.RWMutex
	lockMonitorInstances                                                sync.RWMutex
	lockMoveAddressToVpc                                                sync.RWMutex
	lockMoveByoipCidrToIpam                                             sync.RWMutex
	lockProvisionByoipCidr                                              sync.RWMutex
	lockProvisionIpamPoolCidr                                           sync.RWMutex
	lockProvisionPublicIpv4PoolCidr                                     sync.RWMutex
	lockPurchaseHostReservation                                         sync.RWMutex
	lockPurchaseReservedInstancesOffering                               sync.RWMutex
	lockPurchaseScheduledInstances                                      sync.RWMutex
	lockRebootInstances                                                 sync.RWMutex
	lockRegisterImage                                                   sync.RWMutex
	lockRegisterInstanceEventNotificationAttributes                     sync.RWMutex
	lockRegisterTransitGatewayMulticastGroupMembers                     sync.RWMutex
	lockRegisterTransitGatewayMulticastGroupSources                     sync.RWMutex
	lockRejectTransitGatewayMulticastDomainAssociations                 sync.RWMutex
	lockRejectTransitGatewayPeeringAttachment                           sync.RWMutex
	lockRejectTransitGatewayVpcAttachment                               sync.RWMutex
	lockRejectVpcEndpointConnections                                    sync.RWMutex
	lockRejectVpcPeeringConnection                                      sync.RWMutex
	lockReleaseAddress                                                  sync.RWMutex
	lockReleaseHosts                                                    sync.RWMutex
	lockReleaseIpamPoolAllocation                                       sync.RWMutex
	lockReplaceIamInstanceProfileAssociation                            sync.RWMutex
	lockReplaceNetworkAclAssociation                                    sync.RWMutex
	lockReplaceNetworkAclEntry                                          sync.RWMutex
	lockReplaceRoute                                                    sync.RWMutex
	lockReplaceRouteTableAssociation                                    sync.RWMutex
	lockReplaceTransitGatewayRoute                                      sync.RWMutex
	lockReportInstanceStatus                                            sync.RWMutex
	lockRequestSpotFleet                                                sync.RWMutex
	lockRequestSpotInstances                                            sync.RWMutex
	lockResetAddressAttribute                                           sync.RWMutex
	lockResetEbsDefaultKmsKeyId                                         sync.RWMutex
	lockResetFpgaImageAttribute                                         sync.RWMutex
	lockResetImageAttribute                                             sync.RWMutex
	lockResetInstanceAttribute                                          sync.RWMutex
	lockResetNetworkInterfaceAttribute                                  sync.RWMutex
	lockResetSnapshotAttribute                                          sync.RWMutex
	lockRestoreAddressToClassic                                         sync.RWMutex
	lockRestoreImageFromRecycleBin                                      sync.RWMutex
	lockRestoreManagedPrefixListVersion                                 sync.RWMutex
	lockRestoreSnapshotFromRecycleBin                                   sync.RWMutex
	lockRestoreSnapshotTier                                             sync.RWMutex
	lockRevokeClientVpnIngress                                          sync.RWMutex
	lockRevokeSecurityGroupEgress                                       sync.RWMutex
	lockRevokeSecurityGroupIngress                                      sync.RWMutex
	lockRunInstances                                                    sync.RWMutex
	lockRunScheduledInstances                                           sync.RWMutex
	lockSearchLocalGatewayRoutes                                        sync.RWMutex
	lockSearchTransitGatewayMulticastGroups                             sync.RWMutex
	lockSearchTransitGatewayRoutes                                      sync.RWMutex
	lockSendDiagnosticInterrupt                                         sync.RWMutex
	lockStartInstances                                                  sync.RWMutex
	lockStartNetworkInsightsAccessScopeAnalysis                         sync.RWMutex
	lockStartNetworkInsightsAnalysis                                    sync.RWMutex
	lockStartVpcEndpointServicePrivateDnsVerification                   sync.RWMutex
	lockStopInstances                                                   sync.RWMutex
	lockTerminateClientVpnConnections                                   sync.RWMutex
	lockTerminateInstances                                              sync.RWMutex
	lockUnassignIpv6Addresses                                           sync.RWMutex
	lockUnassignPrivateIpAddresses                                      sync.RWMutex
	lockUnmonitorInstances                                              sync.RWMutex
	lockUpdateSecurityGroupRuleDescriptionsEgress                       sync.RWMutex
	lockUpdateSecurityGroupRuleDescriptionsIngress                      sync.RWMutex
	lockWithdrawByoipCidr                                               sync.RWMutex
}

// AcceptReservedInstancesExchangeQuote calls AcceptReservedInstancesExchangeQuoteFunc.
func (mock *ClientMock) AcceptReservedInstancesExchangeQuote(ctx context.Context, params *ec2.AcceptReservedInstancesExchangeQuoteInput, optFns ...func(*ec2.Options)) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
	if mock.AcceptReservedInstancesExchangeQuoteFunc == nil {
		panic("ClientMock.AcceptReservedInstancesExchangeQuoteFunc: method is nil but Client.AcceptReservedInstancesExchangeQuote was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AcceptReservedInstancesExchangeQuoteInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAcceptReservedInstancesExchangeQuote.Lock()
	mock.calls.AcceptReservedInstancesExchangeQuote = append(mock.calls.AcceptReservedInstancesExchangeQuote, callInfo)
	mock.lockAcceptReservedInstancesExchangeQuote.Unlock()
	return mock.AcceptReservedInstancesExchangeQuoteFunc(ctx, params, optFns...)
}

// AcceptReservedInstancesExchangeQuoteCalls gets all the calls that were made to AcceptReservedInstancesExchangeQuote.
// Check the length with:
//     len(mockedClient.AcceptReservedInstancesExchangeQuoteCalls())
func (mock *ClientMock) AcceptReservedInstancesExchangeQuoteCalls() []struct {
	Ctx    context.Context
	Params *ec2.AcceptReservedInstancesExchangeQuoteInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AcceptReservedInstancesExchangeQuoteInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAcceptReservedInstancesExchangeQuote.RLock()
	calls = mock.calls.AcceptReservedInstancesExchangeQuote
	mock.lockAcceptReservedInstancesExchangeQuote.RUnlock()
	return calls
}

// AcceptTransitGatewayMulticastDomainAssociations calls AcceptTransitGatewayMulticastDomainAssociationsFunc.
func (mock *ClientMock) AcceptTransitGatewayMulticastDomainAssociations(ctx context.Context, params *ec2.AcceptTransitGatewayMulticastDomainAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.AcceptTransitGatewayMulticastDomainAssociationsOutput, error) {
	if mock.AcceptTransitGatewayMulticastDomainAssociationsFunc == nil {
		panic("ClientMock.AcceptTransitGatewayMulticastDomainAssociationsFunc: method is nil but Client.AcceptTransitGatewayMulticastDomainAssociations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AcceptTransitGatewayMulticastDomainAssociationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAcceptTransitGatewayMulticastDomainAssociations.Lock()
	mock.calls.AcceptTransitGatewayMulticastDomainAssociations = append(mock.calls.AcceptTransitGatewayMulticastDomainAssociations, callInfo)
	mock.lockAcceptTransitGatewayMulticastDomainAssociations.Unlock()
	return mock.AcceptTransitGatewayMulticastDomainAssociationsFunc(ctx, params, optFns...)
}

// AcceptTransitGatewayMulticastDomainAssociationsCalls gets all the calls that were made to AcceptTransitGatewayMulticastDomainAssociations.
// Check the length with:
//     len(mockedClient.AcceptTransitGatewayMulticastDomainAssociationsCalls())
func (mock *ClientMock) AcceptTransitGatewayMulticastDomainAssociationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.AcceptTransitGatewayMulticastDomainAssociationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AcceptTransitGatewayMulticastDomainAssociationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAcceptTransitGatewayMulticastDomainAssociations.RLock()
	calls = mock.calls.AcceptTransitGatewayMulticastDomainAssociations
	mock.lockAcceptTransitGatewayMulticastDomainAssociations.RUnlock()
	return calls
}

// AcceptTransitGatewayPeeringAttachment calls AcceptTransitGatewayPeeringAttachmentFunc.
func (mock *ClientMock) AcceptTransitGatewayPeeringAttachment(ctx context.Context, params *ec2.AcceptTransitGatewayPeeringAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error) {
	if mock.AcceptTransitGatewayPeeringAttachmentFunc == nil {
		panic("ClientMock.AcceptTransitGatewayPeeringAttachmentFunc: method is nil but Client.AcceptTransitGatewayPeeringAttachment was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AcceptTransitGatewayPeeringAttachmentInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAcceptTransitGatewayPeeringAttachment.Lock()
	mock.calls.AcceptTransitGatewayPeeringAttachment = append(mock.calls.AcceptTransitGatewayPeeringAttachment, callInfo)
	mock.lockAcceptTransitGatewayPeeringAttachment.Unlock()
	return mock.AcceptTransitGatewayPeeringAttachmentFunc(ctx, params, optFns...)
}

// AcceptTransitGatewayPeeringAttachmentCalls gets all the calls that were made to AcceptTransitGatewayPeeringAttachment.
// Check the length with:
//     len(mockedClient.AcceptTransitGatewayPeeringAttachmentCalls())
func (mock *ClientMock) AcceptTransitGatewayPeeringAttachmentCalls() []struct {
	Ctx    context.Context
	Params *ec2.AcceptTransitGatewayPeeringAttachmentInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AcceptTransitGatewayPeeringAttachmentInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAcceptTransitGatewayPeeringAttachment.RLock()
	calls = mock.calls.AcceptTransitGatewayPeeringAttachment
	mock.lockAcceptTransitGatewayPeeringAttachment.RUnlock()
	return calls
}

// AcceptTransitGatewayVpcAttachment calls AcceptTransitGatewayVpcAttachmentFunc.
func (mock *ClientMock) AcceptTransitGatewayVpcAttachment(ctx context.Context, params *ec2.AcceptTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
	if mock.AcceptTransitGatewayVpcAttachmentFunc == nil {
		panic("ClientMock.AcceptTransitGatewayVpcAttachmentFunc: method is nil but Client.AcceptTransitGatewayVpcAttachment was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AcceptTransitGatewayVpcAttachmentInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAcceptTransitGatewayVpcAttachment.Lock()
	mock.calls.AcceptTransitGatewayVpcAttachment = append(mock.calls.AcceptTransitGatewayVpcAttachment, callInfo)
	mock.lockAcceptTransitGatewayVpcAttachment.Unlock()
	return mock.AcceptTransitGatewayVpcAttachmentFunc(ctx, params, optFns...)
}

// AcceptTransitGatewayVpcAttachmentCalls gets all the calls that were made to AcceptTransitGatewayVpcAttachment.
// Check the length with:
//     len(mockedClient.AcceptTransitGatewayVpcAttachmentCalls())
func (mock *ClientMock) AcceptTransitGatewayVpcAttachmentCalls() []struct {
	Ctx    context.Context
	Params *ec2.AcceptTransitGatewayVpcAttachmentInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AcceptTransitGatewayVpcAttachmentInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAcceptTransitGatewayVpcAttachment.RLock()
	calls = mock.calls.AcceptTransitGatewayVpcAttachment
	mock.lockAcceptTransitGatewayVpcAttachment.RUnlock()
	return calls
}

// AcceptVpcEndpointConnections calls AcceptVpcEndpointConnectionsFunc.
func (mock *ClientMock) AcceptVpcEndpointConnections(ctx context.Context, params *ec2.AcceptVpcEndpointConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
	if mock.AcceptVpcEndpointConnectionsFunc == nil {
		panic("ClientMock.AcceptVpcEndpointConnectionsFunc: method is nil but Client.AcceptVpcEndpointConnections was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AcceptVpcEndpointConnectionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAcceptVpcEndpointConnections.Lock()
	mock.calls.AcceptVpcEndpointConnections = append(mock.calls.AcceptVpcEndpointConnections, callInfo)
	mock.lockAcceptVpcEndpointConnections.Unlock()
	return mock.AcceptVpcEndpointConnectionsFunc(ctx, params, optFns...)
}

// AcceptVpcEndpointConnectionsCalls gets all the calls that were made to AcceptVpcEndpointConnections.
// Check the length with:
//     len(mockedClient.AcceptVpcEndpointConnectionsCalls())
func (mock *ClientMock) AcceptVpcEndpointConnectionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.AcceptVpcEndpointConnectionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AcceptVpcEndpointConnectionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAcceptVpcEndpointConnections.RLock()
	calls = mock.calls.AcceptVpcEndpointConnections
	mock.lockAcceptVpcEndpointConnections.RUnlock()
	return calls
}

// AcceptVpcPeeringConnection calls AcceptVpcPeeringConnectionFunc.
func (mock *ClientMock) AcceptVpcPeeringConnection(ctx context.Context, params *ec2.AcceptVpcPeeringConnectionInput, optFns ...func(*ec2.Options)) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
	if mock.AcceptVpcPeeringConnectionFunc == nil {
		panic("ClientMock.AcceptVpcPeeringConnectionFunc: method is nil but Client.AcceptVpcPeeringConnection was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AcceptVpcPeeringConnectionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAcceptVpcPeeringConnection.Lock()
	mock.calls.AcceptVpcPeeringConnection = append(mock.calls.AcceptVpcPeeringConnection, callInfo)
	mock.lockAcceptVpcPeeringConnection.Unlock()
	return mock.AcceptVpcPeeringConnectionFunc(ctx, params, optFns...)
}

// AcceptVpcPeeringConnectionCalls gets all the calls that were made to AcceptVpcPeeringConnection.
// Check the length with:
//     len(mockedClient.AcceptVpcPeeringConnectionCalls())
func (mock *ClientMock) AcceptVpcPeeringConnectionCalls() []struct {
	Ctx    context.Context
	Params *ec2.AcceptVpcPeeringConnectionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AcceptVpcPeeringConnectionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAcceptVpcPeeringConnection.RLock()
	calls = mock.calls.AcceptVpcPeeringConnection
	mock.lockAcceptVpcPeeringConnection.RUnlock()
	return calls
}

// AdvertiseByoipCidr calls AdvertiseByoipCidrFunc.
func (mock *ClientMock) AdvertiseByoipCidr(ctx context.Context, params *ec2.AdvertiseByoipCidrInput, optFns ...func(*ec2.Options)) (*ec2.AdvertiseByoipCidrOutput, error) {
	if mock.AdvertiseByoipCidrFunc == nil {
		panic("ClientMock.AdvertiseByoipCidrFunc: method is nil but Client.AdvertiseByoipCidr was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AdvertiseByoipCidrInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAdvertiseByoipCidr.Lock()
	mock.calls.AdvertiseByoipCidr = append(mock.calls.AdvertiseByoipCidr, callInfo)
	mock.lockAdvertiseByoipCidr.Unlock()
	return mock.AdvertiseByoipCidrFunc(ctx, params, optFns...)
}

// AdvertiseByoipCidrCalls gets all the calls that were made to AdvertiseByoipCidr.
// Check the length with:
//     len(mockedClient.AdvertiseByoipCidrCalls())
func (mock *ClientMock) AdvertiseByoipCidrCalls() []struct {
	Ctx    context.Context
	Params *ec2.AdvertiseByoipCidrInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AdvertiseByoipCidrInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAdvertiseByoipCidr.RLock()
	calls = mock.calls.AdvertiseByoipCidr
	mock.lockAdvertiseByoipCidr.RUnlock()
	return calls
}

// AllocateAddress calls AllocateAddressFunc.
func (mock *ClientMock) AllocateAddress(ctx context.Context, params *ec2.AllocateAddressInput, optFns ...func(*ec2.Options)) (*ec2.AllocateAddressOutput, error) {
	if mock.AllocateAddressFunc == nil {
		panic("ClientMock.AllocateAddressFunc: method is nil but Client.AllocateAddress was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AllocateAddressInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAllocateAddress.Lock()
	mock.calls.AllocateAddress = append(mock.calls.AllocateAddress, callInfo)
	mock.lockAllocateAddress.Unlock()
	return mock.AllocateAddressFunc(ctx, params, optFns...)
}

// AllocateAddressCalls gets all the calls that were made to AllocateAddress.
// Check the length with:
//     len(mockedClient.AllocateAddressCalls())
func (mock *ClientMock) AllocateAddressCalls() []struct {
	Ctx    context.Context
	Params *ec2.AllocateAddressInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AllocateAddressInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAllocateAddress.RLock()
	calls = mock.calls.AllocateAddress
	mock.lockAllocateAddress.RUnlock()
	return calls
}

// AllocateHosts calls AllocateHostsFunc.
func (mock *ClientMock) AllocateHosts(ctx context.Context, params *ec2.AllocateHostsInput, optFns ...func(*ec2.Options)) (*ec2.AllocateHostsOutput, error) {
	if mock.AllocateHostsFunc == nil {
		panic("ClientMock.AllocateHostsFunc: method is nil but Client.AllocateHosts was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AllocateHostsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAllocateHosts.Lock()
	mock.calls.AllocateHosts = append(mock.calls.AllocateHosts, callInfo)
	mock.lockAllocateHosts.Unlock()
	return mock.AllocateHostsFunc(ctx, params, optFns...)
}

// AllocateHostsCalls gets all the calls that were made to AllocateHosts.
// Check the length with:
//     len(mockedClient.AllocateHostsCalls())
func (mock *ClientMock) AllocateHostsCalls() []struct {
	Ctx    context.Context
	Params *ec2.AllocateHostsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AllocateHostsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAllocateHosts.RLock()
	calls = mock.calls.AllocateHosts
	mock.lockAllocateHosts.RUnlock()
	return calls
}

// AllocateIpamPoolCidr calls AllocateIpamPoolCidrFunc.
func (mock *ClientMock) AllocateIpamPoolCidr(ctx context.Context, params *ec2.AllocateIpamPoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.AllocateIpamPoolCidrOutput, error) {
	if mock.AllocateIpamPoolCidrFunc == nil {
		panic("ClientMock.AllocateIpamPoolCidrFunc: method is nil but Client.AllocateIpamPoolCidr was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AllocateIpamPoolCidrInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAllocateIpamPoolCidr.Lock()
	mock.calls.AllocateIpamPoolCidr = append(mock.calls.AllocateIpamPoolCidr, callInfo)
	mock.lockAllocateIpamPoolCidr.Unlock()
	return mock.AllocateIpamPoolCidrFunc(ctx, params, optFns...)
}

// AllocateIpamPoolCidrCalls gets all the calls that were made to AllocateIpamPoolCidr.
// Check the length with:
//     len(mockedClient.AllocateIpamPoolCidrCalls())
func (mock *ClientMock) AllocateIpamPoolCidrCalls() []struct {
	Ctx    context.Context
	Params *ec2.AllocateIpamPoolCidrInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AllocateIpamPoolCidrInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAllocateIpamPoolCidr.RLock()
	calls = mock.calls.AllocateIpamPoolCidr
	mock.lockAllocateIpamPoolCidr.RUnlock()
	return calls
}

// ApplySecurityGroupsToClientVpnTargetNetwork calls ApplySecurityGroupsToClientVpnTargetNetworkFunc.
func (mock *ClientMock) ApplySecurityGroupsToClientVpnTargetNetwork(ctx context.Context, params *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, optFns ...func(*ec2.Options)) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
	if mock.ApplySecurityGroupsToClientVpnTargetNetworkFunc == nil {
		panic("ClientMock.ApplySecurityGroupsToClientVpnTargetNetworkFunc: method is nil but Client.ApplySecurityGroupsToClientVpnTargetNetwork was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockApplySecurityGroupsToClientVpnTargetNetwork.Lock()
	mock.calls.ApplySecurityGroupsToClientVpnTargetNetwork = append(mock.calls.ApplySecurityGroupsToClientVpnTargetNetwork, callInfo)
	mock.lockApplySecurityGroupsToClientVpnTargetNetwork.Unlock()
	return mock.ApplySecurityGroupsToClientVpnTargetNetworkFunc(ctx, params, optFns...)
}

// ApplySecurityGroupsToClientVpnTargetNetworkCalls gets all the calls that were made to ApplySecurityGroupsToClientVpnTargetNetwork.
// Check the length with:
//     len(mockedClient.ApplySecurityGroupsToClientVpnTargetNetworkCalls())
func (mock *ClientMock) ApplySecurityGroupsToClientVpnTargetNetworkCalls() []struct {
	Ctx    context.Context
	Params *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput
		OptFns []func(*ec2.Options)
	}
	mock.lockApplySecurityGroupsToClientVpnTargetNetwork.RLock()
	calls = mock.calls.ApplySecurityGroupsToClientVpnTargetNetwork
	mock.lockApplySecurityGroupsToClientVpnTargetNetwork.RUnlock()
	return calls
}

// AssignIpv6Addresses calls AssignIpv6AddressesFunc.
func (mock *ClientMock) AssignIpv6Addresses(ctx context.Context, params *ec2.AssignIpv6AddressesInput, optFns ...func(*ec2.Options)) (*ec2.AssignIpv6AddressesOutput, error) {
	if mock.AssignIpv6AddressesFunc == nil {
		panic("ClientMock.AssignIpv6AddressesFunc: method is nil but Client.AssignIpv6Addresses was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssignIpv6AddressesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssignIpv6Addresses.Lock()
	mock.calls.AssignIpv6Addresses = append(mock.calls.AssignIpv6Addresses, callInfo)
	mock.lockAssignIpv6Addresses.Unlock()
	return mock.AssignIpv6AddressesFunc(ctx, params, optFns...)
}

// AssignIpv6AddressesCalls gets all the calls that were made to AssignIpv6Addresses.
// Check the length with:
//     len(mockedClient.AssignIpv6AddressesCalls())
func (mock *ClientMock) AssignIpv6AddressesCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssignIpv6AddressesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssignIpv6AddressesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssignIpv6Addresses.RLock()
	calls = mock.calls.AssignIpv6Addresses
	mock.lockAssignIpv6Addresses.RUnlock()
	return calls
}

// AssignPrivateIpAddresses calls AssignPrivateIpAddressesFunc.
func (mock *ClientMock) AssignPrivateIpAddresses(ctx context.Context, params *ec2.AssignPrivateIpAddressesInput, optFns ...func(*ec2.Options)) (*ec2.AssignPrivateIpAddressesOutput, error) {
	if mock.AssignPrivateIpAddressesFunc == nil {
		panic("ClientMock.AssignPrivateIpAddressesFunc: method is nil but Client.AssignPrivateIpAddresses was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssignPrivateIpAddressesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssignPrivateIpAddresses.Lock()
	mock.calls.AssignPrivateIpAddresses = append(mock.calls.AssignPrivateIpAddresses, callInfo)
	mock.lockAssignPrivateIpAddresses.Unlock()
	return mock.AssignPrivateIpAddressesFunc(ctx, params, optFns...)
}

// AssignPrivateIpAddressesCalls gets all the calls that were made to AssignPrivateIpAddresses.
// Check the length with:
//     len(mockedClient.AssignPrivateIpAddressesCalls())
func (mock *ClientMock) AssignPrivateIpAddressesCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssignPrivateIpAddressesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssignPrivateIpAddressesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssignPrivateIpAddresses.RLock()
	calls = mock.calls.AssignPrivateIpAddresses
	mock.lockAssignPrivateIpAddresses.RUnlock()
	return calls
}

// AssociateAddress calls AssociateAddressFunc.
func (mock *ClientMock) AssociateAddress(ctx context.Context, params *ec2.AssociateAddressInput, optFns ...func(*ec2.Options)) (*ec2.AssociateAddressOutput, error) {
	if mock.AssociateAddressFunc == nil {
		panic("ClientMock.AssociateAddressFunc: method is nil but Client.AssociateAddress was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssociateAddressInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssociateAddress.Lock()
	mock.calls.AssociateAddress = append(mock.calls.AssociateAddress, callInfo)
	mock.lockAssociateAddress.Unlock()
	return mock.AssociateAddressFunc(ctx, params, optFns...)
}

// AssociateAddressCalls gets all the calls that were made to AssociateAddress.
// Check the length with:
//     len(mockedClient.AssociateAddressCalls())
func (mock *ClientMock) AssociateAddressCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssociateAddressInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssociateAddressInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssociateAddress.RLock()
	calls = mock.calls.AssociateAddress
	mock.lockAssociateAddress.RUnlock()
	return calls
}

// AssociateClientVpnTargetNetwork calls AssociateClientVpnTargetNetworkFunc.
func (mock *ClientMock) AssociateClientVpnTargetNetwork(ctx context.Context, params *ec2.AssociateClientVpnTargetNetworkInput, optFns ...func(*ec2.Options)) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
	if mock.AssociateClientVpnTargetNetworkFunc == nil {
		panic("ClientMock.AssociateClientVpnTargetNetworkFunc: method is nil but Client.AssociateClientVpnTargetNetwork was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssociateClientVpnTargetNetworkInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssociateClientVpnTargetNetwork.Lock()
	mock.calls.AssociateClientVpnTargetNetwork = append(mock.calls.AssociateClientVpnTargetNetwork, callInfo)
	mock.lockAssociateClientVpnTargetNetwork.Unlock()
	return mock.AssociateClientVpnTargetNetworkFunc(ctx, params, optFns...)
}

// AssociateClientVpnTargetNetworkCalls gets all the calls that were made to AssociateClientVpnTargetNetwork.
// Check the length with:
//     len(mockedClient.AssociateClientVpnTargetNetworkCalls())
func (mock *ClientMock) AssociateClientVpnTargetNetworkCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssociateClientVpnTargetNetworkInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssociateClientVpnTargetNetworkInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssociateClientVpnTargetNetwork.RLock()
	calls = mock.calls.AssociateClientVpnTargetNetwork
	mock.lockAssociateClientVpnTargetNetwork.RUnlock()
	return calls
}

// AssociateDhcpOptions calls AssociateDhcpOptionsFunc.
func (mock *ClientMock) AssociateDhcpOptions(ctx context.Context, params *ec2.AssociateDhcpOptionsInput, optFns ...func(*ec2.Options)) (*ec2.AssociateDhcpOptionsOutput, error) {
	if mock.AssociateDhcpOptionsFunc == nil {
		panic("ClientMock.AssociateDhcpOptionsFunc: method is nil but Client.AssociateDhcpOptions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssociateDhcpOptionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssociateDhcpOptions.Lock()
	mock.calls.AssociateDhcpOptions = append(mock.calls.AssociateDhcpOptions, callInfo)
	mock.lockAssociateDhcpOptions.Unlock()
	return mock.AssociateDhcpOptionsFunc(ctx, params, optFns...)
}

// AssociateDhcpOptionsCalls gets all the calls that were made to AssociateDhcpOptions.
// Check the length with:
//     len(mockedClient.AssociateDhcpOptionsCalls())
func (mock *ClientMock) AssociateDhcpOptionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssociateDhcpOptionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssociateDhcpOptionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssociateDhcpOptions.RLock()
	calls = mock.calls.AssociateDhcpOptions
	mock.lockAssociateDhcpOptions.RUnlock()
	return calls
}

// AssociateEnclaveCertificateIamRole calls AssociateEnclaveCertificateIamRoleFunc.
func (mock *ClientMock) AssociateEnclaveCertificateIamRole(ctx context.Context, params *ec2.AssociateEnclaveCertificateIamRoleInput, optFns ...func(*ec2.Options)) (*ec2.AssociateEnclaveCertificateIamRoleOutput, error) {
	if mock.AssociateEnclaveCertificateIamRoleFunc == nil {
		panic("ClientMock.AssociateEnclaveCertificateIamRoleFunc: method is nil but Client.AssociateEnclaveCertificateIamRole was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssociateEnclaveCertificateIamRoleInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssociateEnclaveCertificateIamRole.Lock()
	mock.calls.AssociateEnclaveCertificateIamRole = append(mock.calls.AssociateEnclaveCertificateIamRole, callInfo)
	mock.lockAssociateEnclaveCertificateIamRole.Unlock()
	return mock.AssociateEnclaveCertificateIamRoleFunc(ctx, params, optFns...)
}

// AssociateEnclaveCertificateIamRoleCalls gets all the calls that were made to AssociateEnclaveCertificateIamRole.
// Check the length with:
//     len(mockedClient.AssociateEnclaveCertificateIamRoleCalls())
func (mock *ClientMock) AssociateEnclaveCertificateIamRoleCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssociateEnclaveCertificateIamRoleInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssociateEnclaveCertificateIamRoleInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssociateEnclaveCertificateIamRole.RLock()
	calls = mock.calls.AssociateEnclaveCertificateIamRole
	mock.lockAssociateEnclaveCertificateIamRole.RUnlock()
	return calls
}

// AssociateIamInstanceProfile calls AssociateIamInstanceProfileFunc.
func (mock *ClientMock) AssociateIamInstanceProfile(ctx context.Context, params *ec2.AssociateIamInstanceProfileInput, optFns ...func(*ec2.Options)) (*ec2.AssociateIamInstanceProfileOutput, error) {
	if mock.AssociateIamInstanceProfileFunc == nil {
		panic("ClientMock.AssociateIamInstanceProfileFunc: method is nil but Client.AssociateIamInstanceProfile was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssociateIamInstanceProfileInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssociateIamInstanceProfile.Lock()
	mock.calls.AssociateIamInstanceProfile = append(mock.calls.AssociateIamInstanceProfile, callInfo)
	mock.lockAssociateIamInstanceProfile.Unlock()
	return mock.AssociateIamInstanceProfileFunc(ctx, params, optFns...)
}

// AssociateIamInstanceProfileCalls gets all the calls that were made to AssociateIamInstanceProfile.
// Check the length with:
//     len(mockedClient.AssociateIamInstanceProfileCalls())
func (mock *ClientMock) AssociateIamInstanceProfileCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssociateIamInstanceProfileInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssociateIamInstanceProfileInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssociateIamInstanceProfile.RLock()
	calls = mock.calls.AssociateIamInstanceProfile
	mock.lockAssociateIamInstanceProfile.RUnlock()
	return calls
}

// AssociateInstanceEventWindow calls AssociateInstanceEventWindowFunc.
func (mock *ClientMock) AssociateInstanceEventWindow(ctx context.Context, params *ec2.AssociateInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.AssociateInstanceEventWindowOutput, error) {
	if mock.AssociateInstanceEventWindowFunc == nil {
		panic("ClientMock.AssociateInstanceEventWindowFunc: method is nil but Client.AssociateInstanceEventWindow was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssociateInstanceEventWindowInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssociateInstanceEventWindow.Lock()
	mock.calls.AssociateInstanceEventWindow = append(mock.calls.AssociateInstanceEventWindow, callInfo)
	mock.lockAssociateInstanceEventWindow.Unlock()
	return mock.AssociateInstanceEventWindowFunc(ctx, params, optFns...)
}

// AssociateInstanceEventWindowCalls gets all the calls that were made to AssociateInstanceEventWindow.
// Check the length with:
//     len(mockedClient.AssociateInstanceEventWindowCalls())
func (mock *ClientMock) AssociateInstanceEventWindowCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssociateInstanceEventWindowInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssociateInstanceEventWindowInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssociateInstanceEventWindow.RLock()
	calls = mock.calls.AssociateInstanceEventWindow
	mock.lockAssociateInstanceEventWindow.RUnlock()
	return calls
}

// AssociateRouteTable calls AssociateRouteTableFunc.
func (mock *ClientMock) AssociateRouteTable(ctx context.Context, params *ec2.AssociateRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.AssociateRouteTableOutput, error) {
	if mock.AssociateRouteTableFunc == nil {
		panic("ClientMock.AssociateRouteTableFunc: method is nil but Client.AssociateRouteTable was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssociateRouteTableInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssociateRouteTable.Lock()
	mock.calls.AssociateRouteTable = append(mock.calls.AssociateRouteTable, callInfo)
	mock.lockAssociateRouteTable.Unlock()
	return mock.AssociateRouteTableFunc(ctx, params, optFns...)
}

// AssociateRouteTableCalls gets all the calls that were made to AssociateRouteTable.
// Check the length with:
//     len(mockedClient.AssociateRouteTableCalls())
func (mock *ClientMock) AssociateRouteTableCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssociateRouteTableInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssociateRouteTableInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssociateRouteTable.RLock()
	calls = mock.calls.AssociateRouteTable
	mock.lockAssociateRouteTable.RUnlock()
	return calls
}

// AssociateSubnetCidrBlock calls AssociateSubnetCidrBlockFunc.
func (mock *ClientMock) AssociateSubnetCidrBlock(ctx context.Context, params *ec2.AssociateSubnetCidrBlockInput, optFns ...func(*ec2.Options)) (*ec2.AssociateSubnetCidrBlockOutput, error) {
	if mock.AssociateSubnetCidrBlockFunc == nil {
		panic("ClientMock.AssociateSubnetCidrBlockFunc: method is nil but Client.AssociateSubnetCidrBlock was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssociateSubnetCidrBlockInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssociateSubnetCidrBlock.Lock()
	mock.calls.AssociateSubnetCidrBlock = append(mock.calls.AssociateSubnetCidrBlock, callInfo)
	mock.lockAssociateSubnetCidrBlock.Unlock()
	return mock.AssociateSubnetCidrBlockFunc(ctx, params, optFns...)
}

// AssociateSubnetCidrBlockCalls gets all the calls that were made to AssociateSubnetCidrBlock.
// Check the length with:
//     len(mockedClient.AssociateSubnetCidrBlockCalls())
func (mock *ClientMock) AssociateSubnetCidrBlockCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssociateSubnetCidrBlockInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssociateSubnetCidrBlockInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssociateSubnetCidrBlock.RLock()
	calls = mock.calls.AssociateSubnetCidrBlock
	mock.lockAssociateSubnetCidrBlock.RUnlock()
	return calls
}

// AssociateTransitGatewayMulticastDomain calls AssociateTransitGatewayMulticastDomainFunc.
func (mock *ClientMock) AssociateTransitGatewayMulticastDomain(ctx context.Context, params *ec2.AssociateTransitGatewayMulticastDomainInput, optFns ...func(*ec2.Options)) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error) {
	if mock.AssociateTransitGatewayMulticastDomainFunc == nil {
		panic("ClientMock.AssociateTransitGatewayMulticastDomainFunc: method is nil but Client.AssociateTransitGatewayMulticastDomain was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssociateTransitGatewayMulticastDomainInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssociateTransitGatewayMulticastDomain.Lock()
	mock.calls.AssociateTransitGatewayMulticastDomain = append(mock.calls.AssociateTransitGatewayMulticastDomain, callInfo)
	mock.lockAssociateTransitGatewayMulticastDomain.Unlock()
	return mock.AssociateTransitGatewayMulticastDomainFunc(ctx, params, optFns...)
}

// AssociateTransitGatewayMulticastDomainCalls gets all the calls that were made to AssociateTransitGatewayMulticastDomain.
// Check the length with:
//     len(mockedClient.AssociateTransitGatewayMulticastDomainCalls())
func (mock *ClientMock) AssociateTransitGatewayMulticastDomainCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssociateTransitGatewayMulticastDomainInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssociateTransitGatewayMulticastDomainInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssociateTransitGatewayMulticastDomain.RLock()
	calls = mock.calls.AssociateTransitGatewayMulticastDomain
	mock.lockAssociateTransitGatewayMulticastDomain.RUnlock()
	return calls
}

// AssociateTransitGatewayPolicyTable calls AssociateTransitGatewayPolicyTableFunc.
func (mock *ClientMock) AssociateTransitGatewayPolicyTable(ctx context.Context, params *ec2.AssociateTransitGatewayPolicyTableInput, optFns ...func(*ec2.Options)) (*ec2.AssociateTransitGatewayPolicyTableOutput, error) {
	if mock.AssociateTransitGatewayPolicyTableFunc == nil {
		panic("ClientMock.AssociateTransitGatewayPolicyTableFunc: method is nil but Client.AssociateTransitGatewayPolicyTable was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssociateTransitGatewayPolicyTableInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssociateTransitGatewayPolicyTable.Lock()
	mock.calls.AssociateTransitGatewayPolicyTable = append(mock.calls.AssociateTransitGatewayPolicyTable, callInfo)
	mock.lockAssociateTransitGatewayPolicyTable.Unlock()
	return mock.AssociateTransitGatewayPolicyTableFunc(ctx, params, optFns...)
}

// AssociateTransitGatewayPolicyTableCalls gets all the calls that were made to AssociateTransitGatewayPolicyTable.
// Check the length with:
//     len(mockedClient.AssociateTransitGatewayPolicyTableCalls())
func (mock *ClientMock) AssociateTransitGatewayPolicyTableCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssociateTransitGatewayPolicyTableInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssociateTransitGatewayPolicyTableInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssociateTransitGatewayPolicyTable.RLock()
	calls = mock.calls.AssociateTransitGatewayPolicyTable
	mock.lockAssociateTransitGatewayPolicyTable.RUnlock()
	return calls
}

// AssociateTransitGatewayRouteTable calls AssociateTransitGatewayRouteTableFunc.
func (mock *ClientMock) AssociateTransitGatewayRouteTable(ctx context.Context, params *ec2.AssociateTransitGatewayRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
	if mock.AssociateTransitGatewayRouteTableFunc == nil {
		panic("ClientMock.AssociateTransitGatewayRouteTableFunc: method is nil but Client.AssociateTransitGatewayRouteTable was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssociateTransitGatewayRouteTableInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssociateTransitGatewayRouteTable.Lock()
	mock.calls.AssociateTransitGatewayRouteTable = append(mock.calls.AssociateTransitGatewayRouteTable, callInfo)
	mock.lockAssociateTransitGatewayRouteTable.Unlock()
	return mock.AssociateTransitGatewayRouteTableFunc(ctx, params, optFns...)
}

// AssociateTransitGatewayRouteTableCalls gets all the calls that were made to AssociateTransitGatewayRouteTable.
// Check the length with:
//     len(mockedClient.AssociateTransitGatewayRouteTableCalls())
func (mock *ClientMock) AssociateTransitGatewayRouteTableCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssociateTransitGatewayRouteTableInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssociateTransitGatewayRouteTableInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssociateTransitGatewayRouteTable.RLock()
	calls = mock.calls.AssociateTransitGatewayRouteTable
	mock.lockAssociateTransitGatewayRouteTable.RUnlock()
	return calls
}

// AssociateTrunkInterface calls AssociateTrunkInterfaceFunc.
func (mock *ClientMock) AssociateTrunkInterface(ctx context.Context, params *ec2.AssociateTrunkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.AssociateTrunkInterfaceOutput, error) {
	if mock.AssociateTrunkInterfaceFunc == nil {
		panic("ClientMock.AssociateTrunkInterfaceFunc: method is nil but Client.AssociateTrunkInterface was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssociateTrunkInterfaceInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssociateTrunkInterface.Lock()
	mock.calls.AssociateTrunkInterface = append(mock.calls.AssociateTrunkInterface, callInfo)
	mock.lockAssociateTrunkInterface.Unlock()
	return mock.AssociateTrunkInterfaceFunc(ctx, params, optFns...)
}

// AssociateTrunkInterfaceCalls gets all the calls that were made to AssociateTrunkInterface.
// Check the length with:
//     len(mockedClient.AssociateTrunkInterfaceCalls())
func (mock *ClientMock) AssociateTrunkInterfaceCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssociateTrunkInterfaceInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssociateTrunkInterfaceInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssociateTrunkInterface.RLock()
	calls = mock.calls.AssociateTrunkInterface
	mock.lockAssociateTrunkInterface.RUnlock()
	return calls
}

// AssociateVpcCidrBlock calls AssociateVpcCidrBlockFunc.
func (mock *ClientMock) AssociateVpcCidrBlock(ctx context.Context, params *ec2.AssociateVpcCidrBlockInput, optFns ...func(*ec2.Options)) (*ec2.AssociateVpcCidrBlockOutput, error) {
	if mock.AssociateVpcCidrBlockFunc == nil {
		panic("ClientMock.AssociateVpcCidrBlockFunc: method is nil but Client.AssociateVpcCidrBlock was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AssociateVpcCidrBlockInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAssociateVpcCidrBlock.Lock()
	mock.calls.AssociateVpcCidrBlock = append(mock.calls.AssociateVpcCidrBlock, callInfo)
	mock.lockAssociateVpcCidrBlock.Unlock()
	return mock.AssociateVpcCidrBlockFunc(ctx, params, optFns...)
}

// AssociateVpcCidrBlockCalls gets all the calls that were made to AssociateVpcCidrBlock.
// Check the length with:
//     len(mockedClient.AssociateVpcCidrBlockCalls())
func (mock *ClientMock) AssociateVpcCidrBlockCalls() []struct {
	Ctx    context.Context
	Params *ec2.AssociateVpcCidrBlockInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AssociateVpcCidrBlockInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAssociateVpcCidrBlock.RLock()
	calls = mock.calls.AssociateVpcCidrBlock
	mock.lockAssociateVpcCidrBlock.RUnlock()
	return calls
}

// AttachClassicLinkVpc calls AttachClassicLinkVpcFunc.
func (mock *ClientMock) AttachClassicLinkVpc(ctx context.Context, params *ec2.AttachClassicLinkVpcInput, optFns ...func(*ec2.Options)) (*ec2.AttachClassicLinkVpcOutput, error) {
	if mock.AttachClassicLinkVpcFunc == nil {
		panic("ClientMock.AttachClassicLinkVpcFunc: method is nil but Client.AttachClassicLinkVpc was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AttachClassicLinkVpcInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAttachClassicLinkVpc.Lock()
	mock.calls.AttachClassicLinkVpc = append(mock.calls.AttachClassicLinkVpc, callInfo)
	mock.lockAttachClassicLinkVpc.Unlock()
	return mock.AttachClassicLinkVpcFunc(ctx, params, optFns...)
}

// AttachClassicLinkVpcCalls gets all the calls that were made to AttachClassicLinkVpc.
// Check the length with:
//     len(mockedClient.AttachClassicLinkVpcCalls())
func (mock *ClientMock) AttachClassicLinkVpcCalls() []struct {
	Ctx    context.Context
	Params *ec2.AttachClassicLinkVpcInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AttachClassicLinkVpcInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAttachClassicLinkVpc.RLock()
	calls = mock.calls.AttachClassicLinkVpc
	mock.lockAttachClassicLinkVpc.RUnlock()
	return calls
}

// AttachInternetGateway calls AttachInternetGatewayFunc.
func (mock *ClientMock) AttachInternetGateway(ctx context.Context, params *ec2.AttachInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.AttachInternetGatewayOutput, error) {
	if mock.AttachInternetGatewayFunc == nil {
		panic("ClientMock.AttachInternetGatewayFunc: method is nil but Client.AttachInternetGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AttachInternetGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAttachInternetGateway.Lock()
	mock.calls.AttachInternetGateway = append(mock.calls.AttachInternetGateway, callInfo)
	mock.lockAttachInternetGateway.Unlock()
	return mock.AttachInternetGatewayFunc(ctx, params, optFns...)
}

// AttachInternetGatewayCalls gets all the calls that were made to AttachInternetGateway.
// Check the length with:
//     len(mockedClient.AttachInternetGatewayCalls())
func (mock *ClientMock) AttachInternetGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.AttachInternetGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AttachInternetGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAttachInternetGateway.RLock()
	calls = mock.calls.AttachInternetGateway
	mock.lockAttachInternetGateway.RUnlock()
	return calls
}

// AttachNetworkInterface calls AttachNetworkInterfaceFunc.
func (mock *ClientMock) AttachNetworkInterface(ctx context.Context, params *ec2.AttachNetworkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.AttachNetworkInterfaceOutput, error) {
	if mock.AttachNetworkInterfaceFunc == nil {
		panic("ClientMock.AttachNetworkInterfaceFunc: method is nil but Client.AttachNetworkInterface was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AttachNetworkInterfaceInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAttachNetworkInterface.Lock()
	mock.calls.AttachNetworkInterface = append(mock.calls.AttachNetworkInterface, callInfo)
	mock.lockAttachNetworkInterface.Unlock()
	return mock.AttachNetworkInterfaceFunc(ctx, params, optFns...)
}

// AttachNetworkInterfaceCalls gets all the calls that were made to AttachNetworkInterface.
// Check the length with:
//     len(mockedClient.AttachNetworkInterfaceCalls())
func (mock *ClientMock) AttachNetworkInterfaceCalls() []struct {
	Ctx    context.Context
	Params *ec2.AttachNetworkInterfaceInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AttachNetworkInterfaceInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAttachNetworkInterface.RLock()
	calls = mock.calls.AttachNetworkInterface
	mock.lockAttachNetworkInterface.RUnlock()
	return calls
}

// AttachVolume calls AttachVolumeFunc.
func (mock *ClientMock) AttachVolume(ctx context.Context, params *ec2.AttachVolumeInput, optFns ...func(*ec2.Options)) (*ec2.AttachVolumeOutput, error) {
	if mock.AttachVolumeFunc == nil {
		panic("ClientMock.AttachVolumeFunc: method is nil but Client.AttachVolume was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AttachVolumeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAttachVolume.Lock()
	mock.calls.AttachVolume = append(mock.calls.AttachVolume, callInfo)
	mock.lockAttachVolume.Unlock()
	return mock.AttachVolumeFunc(ctx, params, optFns...)
}

// AttachVolumeCalls gets all the calls that were made to AttachVolume.
// Check the length with:
//     len(mockedClient.AttachVolumeCalls())
func (mock *ClientMock) AttachVolumeCalls() []struct {
	Ctx    context.Context
	Params *ec2.AttachVolumeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AttachVolumeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAttachVolume.RLock()
	calls = mock.calls.AttachVolume
	mock.lockAttachVolume.RUnlock()
	return calls
}

// AttachVpnGateway calls AttachVpnGatewayFunc.
func (mock *ClientMock) AttachVpnGateway(ctx context.Context, params *ec2.AttachVpnGatewayInput, optFns ...func(*ec2.Options)) (*ec2.AttachVpnGatewayOutput, error) {
	if mock.AttachVpnGatewayFunc == nil {
		panic("ClientMock.AttachVpnGatewayFunc: method is nil but Client.AttachVpnGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AttachVpnGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAttachVpnGateway.Lock()
	mock.calls.AttachVpnGateway = append(mock.calls.AttachVpnGateway, callInfo)
	mock.lockAttachVpnGateway.Unlock()
	return mock.AttachVpnGatewayFunc(ctx, params, optFns...)
}

// AttachVpnGatewayCalls gets all the calls that were made to AttachVpnGateway.
// Check the length with:
//     len(mockedClient.AttachVpnGatewayCalls())
func (mock *ClientMock) AttachVpnGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.AttachVpnGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AttachVpnGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAttachVpnGateway.RLock()
	calls = mock.calls.AttachVpnGateway
	mock.lockAttachVpnGateway.RUnlock()
	return calls
}

// AuthorizeClientVpnIngress calls AuthorizeClientVpnIngressFunc.
func (mock *ClientMock) AuthorizeClientVpnIngress(ctx context.Context, params *ec2.AuthorizeClientVpnIngressInput, optFns ...func(*ec2.Options)) (*ec2.AuthorizeClientVpnIngressOutput, error) {
	if mock.AuthorizeClientVpnIngressFunc == nil {
		panic("ClientMock.AuthorizeClientVpnIngressFunc: method is nil but Client.AuthorizeClientVpnIngress was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AuthorizeClientVpnIngressInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAuthorizeClientVpnIngress.Lock()
	mock.calls.AuthorizeClientVpnIngress = append(mock.calls.AuthorizeClientVpnIngress, callInfo)
	mock.lockAuthorizeClientVpnIngress.Unlock()
	return mock.AuthorizeClientVpnIngressFunc(ctx, params, optFns...)
}

// AuthorizeClientVpnIngressCalls gets all the calls that were made to AuthorizeClientVpnIngress.
// Check the length with:
//     len(mockedClient.AuthorizeClientVpnIngressCalls())
func (mock *ClientMock) AuthorizeClientVpnIngressCalls() []struct {
	Ctx    context.Context
	Params *ec2.AuthorizeClientVpnIngressInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AuthorizeClientVpnIngressInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAuthorizeClientVpnIngress.RLock()
	calls = mock.calls.AuthorizeClientVpnIngress
	mock.lockAuthorizeClientVpnIngress.RUnlock()
	return calls
}

// AuthorizeSecurityGroupEgress calls AuthorizeSecurityGroupEgressFunc.
func (mock *ClientMock) AuthorizeSecurityGroupEgress(ctx context.Context, params *ec2.AuthorizeSecurityGroupEgressInput, optFns ...func(*ec2.Options)) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	if mock.AuthorizeSecurityGroupEgressFunc == nil {
		panic("ClientMock.AuthorizeSecurityGroupEgressFunc: method is nil but Client.AuthorizeSecurityGroupEgress was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AuthorizeSecurityGroupEgressInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAuthorizeSecurityGroupEgress.Lock()
	mock.calls.AuthorizeSecurityGroupEgress = append(mock.calls.AuthorizeSecurityGroupEgress, callInfo)
	mock.lockAuthorizeSecurityGroupEgress.Unlock()
	return mock.AuthorizeSecurityGroupEgressFunc(ctx, params, optFns...)
}

// AuthorizeSecurityGroupEgressCalls gets all the calls that were made to AuthorizeSecurityGroupEgress.
// Check the length with:
//     len(mockedClient.AuthorizeSecurityGroupEgressCalls())
func (mock *ClientMock) AuthorizeSecurityGroupEgressCalls() []struct {
	Ctx    context.Context
	Params *ec2.AuthorizeSecurityGroupEgressInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AuthorizeSecurityGroupEgressInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAuthorizeSecurityGroupEgress.RLock()
	calls = mock.calls.AuthorizeSecurityGroupEgress
	mock.lockAuthorizeSecurityGroupEgress.RUnlock()
	return calls
}

// AuthorizeSecurityGroupIngress calls AuthorizeSecurityGroupIngressFunc.
func (mock *ClientMock) AuthorizeSecurityGroupIngress(ctx context.Context, params *ec2.AuthorizeSecurityGroupIngressInput, optFns ...func(*ec2.Options)) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	if mock.AuthorizeSecurityGroupIngressFunc == nil {
		panic("ClientMock.AuthorizeSecurityGroupIngressFunc: method is nil but Client.AuthorizeSecurityGroupIngress was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.AuthorizeSecurityGroupIngressInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockAuthorizeSecurityGroupIngress.Lock()
	mock.calls.AuthorizeSecurityGroupIngress = append(mock.calls.AuthorizeSecurityGroupIngress, callInfo)
	mock.lockAuthorizeSecurityGroupIngress.Unlock()
	return mock.AuthorizeSecurityGroupIngressFunc(ctx, params, optFns...)
}

// AuthorizeSecurityGroupIngressCalls gets all the calls that were made to AuthorizeSecurityGroupIngress.
// Check the length with:
//     len(mockedClient.AuthorizeSecurityGroupIngressCalls())
func (mock *ClientMock) AuthorizeSecurityGroupIngressCalls() []struct {
	Ctx    context.Context
	Params *ec2.AuthorizeSecurityGroupIngressInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.AuthorizeSecurityGroupIngressInput
		OptFns []func(*ec2.Options)
	}
	mock.lockAuthorizeSecurityGroupIngress.RLock()
	calls = mock.calls.AuthorizeSecurityGroupIngress
	mock.lockAuthorizeSecurityGroupIngress.RUnlock()
	return calls
}

// BundleInstance calls BundleInstanceFunc.
func (mock *ClientMock) BundleInstance(ctx context.Context, params *ec2.BundleInstanceInput, optFns ...func(*ec2.Options)) (*ec2.BundleInstanceOutput, error) {
	if mock.BundleInstanceFunc == nil {
		panic("ClientMock.BundleInstanceFunc: method is nil but Client.BundleInstance was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.BundleInstanceInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockBundleInstance.Lock()
	mock.calls.BundleInstance = append(mock.calls.BundleInstance, callInfo)
	mock.lockBundleInstance.Unlock()
	return mock.BundleInstanceFunc(ctx, params, optFns...)
}

// BundleInstanceCalls gets all the calls that were made to BundleInstance.
// Check the length with:
//     len(mockedClient.BundleInstanceCalls())
func (mock *ClientMock) BundleInstanceCalls() []struct {
	Ctx    context.Context
	Params *ec2.BundleInstanceInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.BundleInstanceInput
		OptFns []func(*ec2.Options)
	}
	mock.lockBundleInstance.RLock()
	calls = mock.calls.BundleInstance
	mock.lockBundleInstance.RUnlock()
	return calls
}

// CancelBundleTask calls CancelBundleTaskFunc.
func (mock *ClientMock) CancelBundleTask(ctx context.Context, params *ec2.CancelBundleTaskInput, optFns ...func(*ec2.Options)) (*ec2.CancelBundleTaskOutput, error) {
	if mock.CancelBundleTaskFunc == nil {
		panic("ClientMock.CancelBundleTaskFunc: method is nil but Client.CancelBundleTask was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CancelBundleTaskInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCancelBundleTask.Lock()
	mock.calls.CancelBundleTask = append(mock.calls.CancelBundleTask, callInfo)
	mock.lockCancelBundleTask.Unlock()
	return mock.CancelBundleTaskFunc(ctx, params, optFns...)
}

// CancelBundleTaskCalls gets all the calls that were made to CancelBundleTask.
// Check the length with:
//     len(mockedClient.CancelBundleTaskCalls())
func (mock *ClientMock) CancelBundleTaskCalls() []struct {
	Ctx    context.Context
	Params *ec2.CancelBundleTaskInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CancelBundleTaskInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCancelBundleTask.RLock()
	calls = mock.calls.CancelBundleTask
	mock.lockCancelBundleTask.RUnlock()
	return calls
}

// CancelCapacityReservation calls CancelCapacityReservationFunc.
func (mock *ClientMock) CancelCapacityReservation(ctx context.Context, params *ec2.CancelCapacityReservationInput, optFns ...func(*ec2.Options)) (*ec2.CancelCapacityReservationOutput, error) {
	if mock.CancelCapacityReservationFunc == nil {
		panic("ClientMock.CancelCapacityReservationFunc: method is nil but Client.CancelCapacityReservation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CancelCapacityReservationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCancelCapacityReservation.Lock()
	mock.calls.CancelCapacityReservation = append(mock.calls.CancelCapacityReservation, callInfo)
	mock.lockCancelCapacityReservation.Unlock()
	return mock.CancelCapacityReservationFunc(ctx, params, optFns...)
}

// CancelCapacityReservationCalls gets all the calls that were made to CancelCapacityReservation.
// Check the length with:
//     len(mockedClient.CancelCapacityReservationCalls())
func (mock *ClientMock) CancelCapacityReservationCalls() []struct {
	Ctx    context.Context
	Params *ec2.CancelCapacityReservationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CancelCapacityReservationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCancelCapacityReservation.RLock()
	calls = mock.calls.CancelCapacityReservation
	mock.lockCancelCapacityReservation.RUnlock()
	return calls
}

// CancelCapacityReservationFleets calls CancelCapacityReservationFleetsFunc.
func (mock *ClientMock) CancelCapacityReservationFleets(ctx context.Context, params *ec2.CancelCapacityReservationFleetsInput, optFns ...func(*ec2.Options)) (*ec2.CancelCapacityReservationFleetsOutput, error) {
	if mock.CancelCapacityReservationFleetsFunc == nil {
		panic("ClientMock.CancelCapacityReservationFleetsFunc: method is nil but Client.CancelCapacityReservationFleets was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CancelCapacityReservationFleetsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCancelCapacityReservationFleets.Lock()
	mock.calls.CancelCapacityReservationFleets = append(mock.calls.CancelCapacityReservationFleets, callInfo)
	mock.lockCancelCapacityReservationFleets.Unlock()
	return mock.CancelCapacityReservationFleetsFunc(ctx, params, optFns...)
}

// CancelCapacityReservationFleetsCalls gets all the calls that were made to CancelCapacityReservationFleets.
// Check the length with:
//     len(mockedClient.CancelCapacityReservationFleetsCalls())
func (mock *ClientMock) CancelCapacityReservationFleetsCalls() []struct {
	Ctx    context.Context
	Params *ec2.CancelCapacityReservationFleetsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CancelCapacityReservationFleetsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCancelCapacityReservationFleets.RLock()
	calls = mock.calls.CancelCapacityReservationFleets
	mock.lockCancelCapacityReservationFleets.RUnlock()
	return calls
}

// CancelConversionTask calls CancelConversionTaskFunc.
func (mock *ClientMock) CancelConversionTask(ctx context.Context, params *ec2.CancelConversionTaskInput, optFns ...func(*ec2.Options)) (*ec2.CancelConversionTaskOutput, error) {
	if mock.CancelConversionTaskFunc == nil {
		panic("ClientMock.CancelConversionTaskFunc: method is nil but Client.CancelConversionTask was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CancelConversionTaskInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCancelConversionTask.Lock()
	mock.calls.CancelConversionTask = append(mock.calls.CancelConversionTask, callInfo)
	mock.lockCancelConversionTask.Unlock()
	return mock.CancelConversionTaskFunc(ctx, params, optFns...)
}

// CancelConversionTaskCalls gets all the calls that were made to CancelConversionTask.
// Check the length with:
//     len(mockedClient.CancelConversionTaskCalls())
func (mock *ClientMock) CancelConversionTaskCalls() []struct {
	Ctx    context.Context
	Params *ec2.CancelConversionTaskInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CancelConversionTaskInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCancelConversionTask.RLock()
	calls = mock.calls.CancelConversionTask
	mock.lockCancelConversionTask.RUnlock()
	return calls
}

// CancelExportTask calls CancelExportTaskFunc.
func (mock *ClientMock) CancelExportTask(ctx context.Context, params *ec2.CancelExportTaskInput, optFns ...func(*ec2.Options)) (*ec2.CancelExportTaskOutput, error) {
	if mock.CancelExportTaskFunc == nil {
		panic("ClientMock.CancelExportTaskFunc: method is nil but Client.CancelExportTask was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CancelExportTaskInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCancelExportTask.Lock()
	mock.calls.CancelExportTask = append(mock.calls.CancelExportTask, callInfo)
	mock.lockCancelExportTask.Unlock()
	return mock.CancelExportTaskFunc(ctx, params, optFns...)
}

// CancelExportTaskCalls gets all the calls that were made to CancelExportTask.
// Check the length with:
//     len(mockedClient.CancelExportTaskCalls())
func (mock *ClientMock) CancelExportTaskCalls() []struct {
	Ctx    context.Context
	Params *ec2.CancelExportTaskInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CancelExportTaskInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCancelExportTask.RLock()
	calls = mock.calls.CancelExportTask
	mock.lockCancelExportTask.RUnlock()
	return calls
}

// CancelImportTask calls CancelImportTaskFunc.
func (mock *ClientMock) CancelImportTask(ctx context.Context, params *ec2.CancelImportTaskInput, optFns ...func(*ec2.Options)) (*ec2.CancelImportTaskOutput, error) {
	if mock.CancelImportTaskFunc == nil {
		panic("ClientMock.CancelImportTaskFunc: method is nil but Client.CancelImportTask was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CancelImportTaskInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCancelImportTask.Lock()
	mock.calls.CancelImportTask = append(mock.calls.CancelImportTask, callInfo)
	mock.lockCancelImportTask.Unlock()
	return mock.CancelImportTaskFunc(ctx, params, optFns...)
}

// CancelImportTaskCalls gets all the calls that were made to CancelImportTask.
// Check the length with:
//     len(mockedClient.CancelImportTaskCalls())
func (mock *ClientMock) CancelImportTaskCalls() []struct {
	Ctx    context.Context
	Params *ec2.CancelImportTaskInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CancelImportTaskInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCancelImportTask.RLock()
	calls = mock.calls.CancelImportTask
	mock.lockCancelImportTask.RUnlock()
	return calls
}

// CancelReservedInstancesListing calls CancelReservedInstancesListingFunc.
func (mock *ClientMock) CancelReservedInstancesListing(ctx context.Context, params *ec2.CancelReservedInstancesListingInput, optFns ...func(*ec2.Options)) (*ec2.CancelReservedInstancesListingOutput, error) {
	if mock.CancelReservedInstancesListingFunc == nil {
		panic("ClientMock.CancelReservedInstancesListingFunc: method is nil but Client.CancelReservedInstancesListing was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CancelReservedInstancesListingInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCancelReservedInstancesListing.Lock()
	mock.calls.CancelReservedInstancesListing = append(mock.calls.CancelReservedInstancesListing, callInfo)
	mock.lockCancelReservedInstancesListing.Unlock()
	return mock.CancelReservedInstancesListingFunc(ctx, params, optFns...)
}

// CancelReservedInstancesListingCalls gets all the calls that were made to CancelReservedInstancesListing.
// Check the length with:
//     len(mockedClient.CancelReservedInstancesListingCalls())
func (mock *ClientMock) CancelReservedInstancesListingCalls() []struct {
	Ctx    context.Context
	Params *ec2.CancelReservedInstancesListingInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CancelReservedInstancesListingInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCancelReservedInstancesListing.RLock()
	calls = mock.calls.CancelReservedInstancesListing
	mock.lockCancelReservedInstancesListing.RUnlock()
	return calls
}

// CancelSpotFleetRequests calls CancelSpotFleetRequestsFunc.
func (mock *ClientMock) CancelSpotFleetRequests(ctx context.Context, params *ec2.CancelSpotFleetRequestsInput, optFns ...func(*ec2.Options)) (*ec2.CancelSpotFleetRequestsOutput, error) {
	if mock.CancelSpotFleetRequestsFunc == nil {
		panic("ClientMock.CancelSpotFleetRequestsFunc: method is nil but Client.CancelSpotFleetRequests was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CancelSpotFleetRequestsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCancelSpotFleetRequests.Lock()
	mock.calls.CancelSpotFleetRequests = append(mock.calls.CancelSpotFleetRequests, callInfo)
	mock.lockCancelSpotFleetRequests.Unlock()
	return mock.CancelSpotFleetRequestsFunc(ctx, params, optFns...)
}

// CancelSpotFleetRequestsCalls gets all the calls that were made to CancelSpotFleetRequests.
// Check the length with:
//     len(mockedClient.CancelSpotFleetRequestsCalls())
func (mock *ClientMock) CancelSpotFleetRequestsCalls() []struct {
	Ctx    context.Context
	Params *ec2.CancelSpotFleetRequestsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CancelSpotFleetRequestsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCancelSpotFleetRequests.RLock()
	calls = mock.calls.CancelSpotFleetRequests
	mock.lockCancelSpotFleetRequests.RUnlock()
	return calls
}

// CancelSpotInstanceRequests calls CancelSpotInstanceRequestsFunc.
func (mock *ClientMock) CancelSpotInstanceRequests(ctx context.Context, params *ec2.CancelSpotInstanceRequestsInput, optFns ...func(*ec2.Options)) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	if mock.CancelSpotInstanceRequestsFunc == nil {
		panic("ClientMock.CancelSpotInstanceRequestsFunc: method is nil but Client.CancelSpotInstanceRequests was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CancelSpotInstanceRequestsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCancelSpotInstanceRequests.Lock()
	mock.calls.CancelSpotInstanceRequests = append(mock.calls.CancelSpotInstanceRequests, callInfo)
	mock.lockCancelSpotInstanceRequests.Unlock()
	return mock.CancelSpotInstanceRequestsFunc(ctx, params, optFns...)
}

// CancelSpotInstanceRequestsCalls gets all the calls that were made to CancelSpotInstanceRequests.
// Check the length with:
//     len(mockedClient.CancelSpotInstanceRequestsCalls())
func (mock *ClientMock) CancelSpotInstanceRequestsCalls() []struct {
	Ctx    context.Context
	Params *ec2.CancelSpotInstanceRequestsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CancelSpotInstanceRequestsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCancelSpotInstanceRequests.RLock()
	calls = mock.calls.CancelSpotInstanceRequests
	mock.lockCancelSpotInstanceRequests.RUnlock()
	return calls
}

// ConfirmProductInstance calls ConfirmProductInstanceFunc.
func (mock *ClientMock) ConfirmProductInstance(ctx context.Context, params *ec2.ConfirmProductInstanceInput, optFns ...func(*ec2.Options)) (*ec2.ConfirmProductInstanceOutput, error) {
	if mock.ConfirmProductInstanceFunc == nil {
		panic("ClientMock.ConfirmProductInstanceFunc: method is nil but Client.ConfirmProductInstance was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ConfirmProductInstanceInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockConfirmProductInstance.Lock()
	mock.calls.ConfirmProductInstance = append(mock.calls.ConfirmProductInstance, callInfo)
	mock.lockConfirmProductInstance.Unlock()
	return mock.ConfirmProductInstanceFunc(ctx, params, optFns...)
}

// ConfirmProductInstanceCalls gets all the calls that were made to ConfirmProductInstance.
// Check the length with:
//     len(mockedClient.ConfirmProductInstanceCalls())
func (mock *ClientMock) ConfirmProductInstanceCalls() []struct {
	Ctx    context.Context
	Params *ec2.ConfirmProductInstanceInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ConfirmProductInstanceInput
		OptFns []func(*ec2.Options)
	}
	mock.lockConfirmProductInstance.RLock()
	calls = mock.calls.ConfirmProductInstance
	mock.lockConfirmProductInstance.RUnlock()
	return calls
}

// CopyFpgaImage calls CopyFpgaImageFunc.
func (mock *ClientMock) CopyFpgaImage(ctx context.Context, params *ec2.CopyFpgaImageInput, optFns ...func(*ec2.Options)) (*ec2.CopyFpgaImageOutput, error) {
	if mock.CopyFpgaImageFunc == nil {
		panic("ClientMock.CopyFpgaImageFunc: method is nil but Client.CopyFpgaImage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CopyFpgaImageInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCopyFpgaImage.Lock()
	mock.calls.CopyFpgaImage = append(mock.calls.CopyFpgaImage, callInfo)
	mock.lockCopyFpgaImage.Unlock()
	return mock.CopyFpgaImageFunc(ctx, params, optFns...)
}

// CopyFpgaImageCalls gets all the calls that were made to CopyFpgaImage.
// Check the length with:
//     len(mockedClient.CopyFpgaImageCalls())
func (mock *ClientMock) CopyFpgaImageCalls() []struct {
	Ctx    context.Context
	Params *ec2.CopyFpgaImageInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CopyFpgaImageInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCopyFpgaImage.RLock()
	calls = mock.calls.CopyFpgaImage
	mock.lockCopyFpgaImage.RUnlock()
	return calls
}

// CopyImage calls CopyImageFunc.
func (mock *ClientMock) CopyImage(ctx context.Context, params *ec2.CopyImageInput, optFns ...func(*ec2.Options)) (*ec2.CopyImageOutput, error) {
	if mock.CopyImageFunc == nil {
		panic("ClientMock.CopyImageFunc: method is nil but Client.CopyImage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CopyImageInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCopyImage.Lock()
	mock.calls.CopyImage = append(mock.calls.CopyImage, callInfo)
	mock.lockCopyImage.Unlock()
	return mock.CopyImageFunc(ctx, params, optFns...)
}

// CopyImageCalls gets all the calls that were made to CopyImage.
// Check the length with:
//     len(mockedClient.CopyImageCalls())
func (mock *ClientMock) CopyImageCalls() []struct {
	Ctx    context.Context
	Params *ec2.CopyImageInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CopyImageInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCopyImage.RLock()
	calls = mock.calls.CopyImage
	mock.lockCopyImage.RUnlock()
	return calls
}

// CopySnapshot calls CopySnapshotFunc.
func (mock *ClientMock) CopySnapshot(ctx context.Context, params *ec2.CopySnapshotInput, optFns ...func(*ec2.Options)) (*ec2.CopySnapshotOutput, error) {
	if mock.CopySnapshotFunc == nil {
		panic("ClientMock.CopySnapshotFunc: method is nil but Client.CopySnapshot was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CopySnapshotInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCopySnapshot.Lock()
	mock.calls.CopySnapshot = append(mock.calls.CopySnapshot, callInfo)
	mock.lockCopySnapshot.Unlock()
	return mock.CopySnapshotFunc(ctx, params, optFns...)
}

// CopySnapshotCalls gets all the calls that were made to CopySnapshot.
// Check the length with:
//     len(mockedClient.CopySnapshotCalls())
func (mock *ClientMock) CopySnapshotCalls() []struct {
	Ctx    context.Context
	Params *ec2.CopySnapshotInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CopySnapshotInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCopySnapshot.RLock()
	calls = mock.calls.CopySnapshot
	mock.lockCopySnapshot.RUnlock()
	return calls
}

// CreateCapacityReservation calls CreateCapacityReservationFunc.
func (mock *ClientMock) CreateCapacityReservation(ctx context.Context, params *ec2.CreateCapacityReservationInput, optFns ...func(*ec2.Options)) (*ec2.CreateCapacityReservationOutput, error) {
	if mock.CreateCapacityReservationFunc == nil {
		panic("ClientMock.CreateCapacityReservationFunc: method is nil but Client.CreateCapacityReservation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateCapacityReservationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateCapacityReservation.Lock()
	mock.calls.CreateCapacityReservation = append(mock.calls.CreateCapacityReservation, callInfo)
	mock.lockCreateCapacityReservation.Unlock()
	return mock.CreateCapacityReservationFunc(ctx, params, optFns...)
}

// CreateCapacityReservationCalls gets all the calls that were made to CreateCapacityReservation.
// Check the length with:
//     len(mockedClient.CreateCapacityReservationCalls())
func (mock *ClientMock) CreateCapacityReservationCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateCapacityReservationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateCapacityReservationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateCapacityReservation.RLock()
	calls = mock.calls.CreateCapacityReservation
	mock.lockCreateCapacityReservation.RUnlock()
	return calls
}

// CreateCapacityReservationFleet calls CreateCapacityReservationFleetFunc.
func (mock *ClientMock) CreateCapacityReservationFleet(ctx context.Context, params *ec2.CreateCapacityReservationFleetInput, optFns ...func(*ec2.Options)) (*ec2.CreateCapacityReservationFleetOutput, error) {
	if mock.CreateCapacityReservationFleetFunc == nil {
		panic("ClientMock.CreateCapacityReservationFleetFunc: method is nil but Client.CreateCapacityReservationFleet was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateCapacityReservationFleetInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateCapacityReservationFleet.Lock()
	mock.calls.CreateCapacityReservationFleet = append(mock.calls.CreateCapacityReservationFleet, callInfo)
	mock.lockCreateCapacityReservationFleet.Unlock()
	return mock.CreateCapacityReservationFleetFunc(ctx, params, optFns...)
}

// CreateCapacityReservationFleetCalls gets all the calls that were made to CreateCapacityReservationFleet.
// Check the length with:
//     len(mockedClient.CreateCapacityReservationFleetCalls())
func (mock *ClientMock) CreateCapacityReservationFleetCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateCapacityReservationFleetInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateCapacityReservationFleetInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateCapacityReservationFleet.RLock()
	calls = mock.calls.CreateCapacityReservationFleet
	mock.lockCreateCapacityReservationFleet.RUnlock()
	return calls
}

// CreateCarrierGateway calls CreateCarrierGatewayFunc.
func (mock *ClientMock) CreateCarrierGateway(ctx context.Context, params *ec2.CreateCarrierGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateCarrierGatewayOutput, error) {
	if mock.CreateCarrierGatewayFunc == nil {
		panic("ClientMock.CreateCarrierGatewayFunc: method is nil but Client.CreateCarrierGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateCarrierGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateCarrierGateway.Lock()
	mock.calls.CreateCarrierGateway = append(mock.calls.CreateCarrierGateway, callInfo)
	mock.lockCreateCarrierGateway.Unlock()
	return mock.CreateCarrierGatewayFunc(ctx, params, optFns...)
}

// CreateCarrierGatewayCalls gets all the calls that were made to CreateCarrierGateway.
// Check the length with:
//     len(mockedClient.CreateCarrierGatewayCalls())
func (mock *ClientMock) CreateCarrierGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateCarrierGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateCarrierGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateCarrierGateway.RLock()
	calls = mock.calls.CreateCarrierGateway
	mock.lockCreateCarrierGateway.RUnlock()
	return calls
}

// CreateClientVpnEndpoint calls CreateClientVpnEndpointFunc.
func (mock *ClientMock) CreateClientVpnEndpoint(ctx context.Context, params *ec2.CreateClientVpnEndpointInput, optFns ...func(*ec2.Options)) (*ec2.CreateClientVpnEndpointOutput, error) {
	if mock.CreateClientVpnEndpointFunc == nil {
		panic("ClientMock.CreateClientVpnEndpointFunc: method is nil but Client.CreateClientVpnEndpoint was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateClientVpnEndpointInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateClientVpnEndpoint.Lock()
	mock.calls.CreateClientVpnEndpoint = append(mock.calls.CreateClientVpnEndpoint, callInfo)
	mock.lockCreateClientVpnEndpoint.Unlock()
	return mock.CreateClientVpnEndpointFunc(ctx, params, optFns...)
}

// CreateClientVpnEndpointCalls gets all the calls that were made to CreateClientVpnEndpoint.
// Check the length with:
//     len(mockedClient.CreateClientVpnEndpointCalls())
func (mock *ClientMock) CreateClientVpnEndpointCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateClientVpnEndpointInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateClientVpnEndpointInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateClientVpnEndpoint.RLock()
	calls = mock.calls.CreateClientVpnEndpoint
	mock.lockCreateClientVpnEndpoint.RUnlock()
	return calls
}

// CreateClientVpnRoute calls CreateClientVpnRouteFunc.
func (mock *ClientMock) CreateClientVpnRoute(ctx context.Context, params *ec2.CreateClientVpnRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateClientVpnRouteOutput, error) {
	if mock.CreateClientVpnRouteFunc == nil {
		panic("ClientMock.CreateClientVpnRouteFunc: method is nil but Client.CreateClientVpnRoute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateClientVpnRouteInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateClientVpnRoute.Lock()
	mock.calls.CreateClientVpnRoute = append(mock.calls.CreateClientVpnRoute, callInfo)
	mock.lockCreateClientVpnRoute.Unlock()
	return mock.CreateClientVpnRouteFunc(ctx, params, optFns...)
}

// CreateClientVpnRouteCalls gets all the calls that were made to CreateClientVpnRoute.
// Check the length with:
//     len(mockedClient.CreateClientVpnRouteCalls())
func (mock *ClientMock) CreateClientVpnRouteCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateClientVpnRouteInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateClientVpnRouteInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateClientVpnRoute.RLock()
	calls = mock.calls.CreateClientVpnRoute
	mock.lockCreateClientVpnRoute.RUnlock()
	return calls
}

// CreateCustomerGateway calls CreateCustomerGatewayFunc.
func (mock *ClientMock) CreateCustomerGateway(ctx context.Context, params *ec2.CreateCustomerGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateCustomerGatewayOutput, error) {
	if mock.CreateCustomerGatewayFunc == nil {
		panic("ClientMock.CreateCustomerGatewayFunc: method is nil but Client.CreateCustomerGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateCustomerGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateCustomerGateway.Lock()
	mock.calls.CreateCustomerGateway = append(mock.calls.CreateCustomerGateway, callInfo)
	mock.lockCreateCustomerGateway.Unlock()
	return mock.CreateCustomerGatewayFunc(ctx, params, optFns...)
}

// CreateCustomerGatewayCalls gets all the calls that were made to CreateCustomerGateway.
// Check the length with:
//     len(mockedClient.CreateCustomerGatewayCalls())
func (mock *ClientMock) CreateCustomerGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateCustomerGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateCustomerGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateCustomerGateway.RLock()
	calls = mock.calls.CreateCustomerGateway
	mock.lockCreateCustomerGateway.RUnlock()
	return calls
}

// CreateDefaultSubnet calls CreateDefaultSubnetFunc.
func (mock *ClientMock) CreateDefaultSubnet(ctx context.Context, params *ec2.CreateDefaultSubnetInput, optFns ...func(*ec2.Options)) (*ec2.CreateDefaultSubnetOutput, error) {
	if mock.CreateDefaultSubnetFunc == nil {
		panic("ClientMock.CreateDefaultSubnetFunc: method is nil but Client.CreateDefaultSubnet was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateDefaultSubnetInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateDefaultSubnet.Lock()
	mock.calls.CreateDefaultSubnet = append(mock.calls.CreateDefaultSubnet, callInfo)
	mock.lockCreateDefaultSubnet.Unlock()
	return mock.CreateDefaultSubnetFunc(ctx, params, optFns...)
}

// CreateDefaultSubnetCalls gets all the calls that were made to CreateDefaultSubnet.
// Check the length with:
//     len(mockedClient.CreateDefaultSubnetCalls())
func (mock *ClientMock) CreateDefaultSubnetCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateDefaultSubnetInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateDefaultSubnetInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateDefaultSubnet.RLock()
	calls = mock.calls.CreateDefaultSubnet
	mock.lockCreateDefaultSubnet.RUnlock()
	return calls
}

// CreateDefaultVpc calls CreateDefaultVpcFunc.
func (mock *ClientMock) CreateDefaultVpc(ctx context.Context, params *ec2.CreateDefaultVpcInput, optFns ...func(*ec2.Options)) (*ec2.CreateDefaultVpcOutput, error) {
	if mock.CreateDefaultVpcFunc == nil {
		panic("ClientMock.CreateDefaultVpcFunc: method is nil but Client.CreateDefaultVpc was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateDefaultVpcInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateDefaultVpc.Lock()
	mock.calls.CreateDefaultVpc = append(mock.calls.CreateDefaultVpc, callInfo)
	mock.lockCreateDefaultVpc.Unlock()
	return mock.CreateDefaultVpcFunc(ctx, params, optFns...)
}

// CreateDefaultVpcCalls gets all the calls that were made to CreateDefaultVpc.
// Check the length with:
//     len(mockedClient.CreateDefaultVpcCalls())
func (mock *ClientMock) CreateDefaultVpcCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateDefaultVpcInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateDefaultVpcInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateDefaultVpc.RLock()
	calls = mock.calls.CreateDefaultVpc
	mock.lockCreateDefaultVpc.RUnlock()
	return calls
}

// CreateDhcpOptions calls CreateDhcpOptionsFunc.
func (mock *ClientMock) CreateDhcpOptions(ctx context.Context, params *ec2.CreateDhcpOptionsInput, optFns ...func(*ec2.Options)) (*ec2.CreateDhcpOptionsOutput, error) {
	if mock.CreateDhcpOptionsFunc == nil {
		panic("ClientMock.CreateDhcpOptionsFunc: method is nil but Client.CreateDhcpOptions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateDhcpOptionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateDhcpOptions.Lock()
	mock.calls.CreateDhcpOptions = append(mock.calls.CreateDhcpOptions, callInfo)
	mock.lockCreateDhcpOptions.Unlock()
	return mock.CreateDhcpOptionsFunc(ctx, params, optFns...)
}

// CreateDhcpOptionsCalls gets all the calls that were made to CreateDhcpOptions.
// Check the length with:
//     len(mockedClient.CreateDhcpOptionsCalls())
func (mock *ClientMock) CreateDhcpOptionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateDhcpOptionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateDhcpOptionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateDhcpOptions.RLock()
	calls = mock.calls.CreateDhcpOptions
	mock.lockCreateDhcpOptions.RUnlock()
	return calls
}

// CreateEgressOnlyInternetGateway calls CreateEgressOnlyInternetGatewayFunc.
func (mock *ClientMock) CreateEgressOnlyInternetGateway(ctx context.Context, params *ec2.CreateEgressOnlyInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
	if mock.CreateEgressOnlyInternetGatewayFunc == nil {
		panic("ClientMock.CreateEgressOnlyInternetGatewayFunc: method is nil but Client.CreateEgressOnlyInternetGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateEgressOnlyInternetGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateEgressOnlyInternetGateway.Lock()
	mock.calls.CreateEgressOnlyInternetGateway = append(mock.calls.CreateEgressOnlyInternetGateway, callInfo)
	mock.lockCreateEgressOnlyInternetGateway.Unlock()
	return mock.CreateEgressOnlyInternetGatewayFunc(ctx, params, optFns...)
}

// CreateEgressOnlyInternetGatewayCalls gets all the calls that were made to CreateEgressOnlyInternetGateway.
// Check the length with:
//     len(mockedClient.CreateEgressOnlyInternetGatewayCalls())
func (mock *ClientMock) CreateEgressOnlyInternetGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateEgressOnlyInternetGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateEgressOnlyInternetGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateEgressOnlyInternetGateway.RLock()
	calls = mock.calls.CreateEgressOnlyInternetGateway
	mock.lockCreateEgressOnlyInternetGateway.RUnlock()
	return calls
}

// CreateFleet calls CreateFleetFunc.
func (mock *ClientMock) CreateFleet(ctx context.Context, params *ec2.CreateFleetInput, optFns ...func(*ec2.Options)) (*ec2.CreateFleetOutput, error) {
	if mock.CreateFleetFunc == nil {
		panic("ClientMock.CreateFleetFunc: method is nil but Client.CreateFleet was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateFleetInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateFleet.Lock()
	mock.calls.CreateFleet = append(mock.calls.CreateFleet, callInfo)
	mock.lockCreateFleet.Unlock()
	return mock.CreateFleetFunc(ctx, params, optFns...)
}

// CreateFleetCalls gets all the calls that were made to CreateFleet.
// Check the length with:
//     len(mockedClient.CreateFleetCalls())
func (mock *ClientMock) CreateFleetCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateFleetInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateFleetInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateFleet.RLock()
	calls = mock.calls.CreateFleet
	mock.lockCreateFleet.RUnlock()
	return calls
}

// CreateFlowLogs calls CreateFlowLogsFunc.
func (mock *ClientMock) CreateFlowLogs(ctx context.Context, params *ec2.CreateFlowLogsInput, optFns ...func(*ec2.Options)) (*ec2.CreateFlowLogsOutput, error) {
	if mock.CreateFlowLogsFunc == nil {
		panic("ClientMock.CreateFlowLogsFunc: method is nil but Client.CreateFlowLogs was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateFlowLogsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateFlowLogs.Lock()
	mock.calls.CreateFlowLogs = append(mock.calls.CreateFlowLogs, callInfo)
	mock.lockCreateFlowLogs.Unlock()
	return mock.CreateFlowLogsFunc(ctx, params, optFns...)
}

// CreateFlowLogsCalls gets all the calls that were made to CreateFlowLogs.
// Check the length with:
//     len(mockedClient.CreateFlowLogsCalls())
func (mock *ClientMock) CreateFlowLogsCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateFlowLogsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateFlowLogsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateFlowLogs.RLock()
	calls = mock.calls.CreateFlowLogs
	mock.lockCreateFlowLogs.RUnlock()
	return calls
}

// CreateFpgaImage calls CreateFpgaImageFunc.
func (mock *ClientMock) CreateFpgaImage(ctx context.Context, params *ec2.CreateFpgaImageInput, optFns ...func(*ec2.Options)) (*ec2.CreateFpgaImageOutput, error) {
	if mock.CreateFpgaImageFunc == nil {
		panic("ClientMock.CreateFpgaImageFunc: method is nil but Client.CreateFpgaImage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateFpgaImageInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateFpgaImage.Lock()
	mock.calls.CreateFpgaImage = append(mock.calls.CreateFpgaImage, callInfo)
	mock.lockCreateFpgaImage.Unlock()
	return mock.CreateFpgaImageFunc(ctx, params, optFns...)
}

// CreateFpgaImageCalls gets all the calls that were made to CreateFpgaImage.
// Check the length with:
//     len(mockedClient.CreateFpgaImageCalls())
func (mock *ClientMock) CreateFpgaImageCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateFpgaImageInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateFpgaImageInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateFpgaImage.RLock()
	calls = mock.calls.CreateFpgaImage
	mock.lockCreateFpgaImage.RUnlock()
	return calls
}

// CreateImage calls CreateImageFunc.
func (mock *ClientMock) CreateImage(ctx context.Context, params *ec2.CreateImageInput, optFns ...func(*ec2.Options)) (*ec2.CreateImageOutput, error) {
	if mock.CreateImageFunc == nil {
		panic("ClientMock.CreateImageFunc: method is nil but Client.CreateImage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateImageInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateImage.Lock()
	mock.calls.CreateImage = append(mock.calls.CreateImage, callInfo)
	mock.lockCreateImage.Unlock()
	return mock.CreateImageFunc(ctx, params, optFns...)
}

// CreateImageCalls gets all the calls that were made to CreateImage.
// Check the length with:
//     len(mockedClient.CreateImageCalls())
func (mock *ClientMock) CreateImageCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateImageInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateImageInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateImage.RLock()
	calls = mock.calls.CreateImage
	mock.lockCreateImage.RUnlock()
	return calls
}

// CreateInstanceEventWindow calls CreateInstanceEventWindowFunc.
func (mock *ClientMock) CreateInstanceEventWindow(ctx context.Context, params *ec2.CreateInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.CreateInstanceEventWindowOutput, error) {
	if mock.CreateInstanceEventWindowFunc == nil {
		panic("ClientMock.CreateInstanceEventWindowFunc: method is nil but Client.CreateInstanceEventWindow was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateInstanceEventWindowInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateInstanceEventWindow.Lock()
	mock.calls.CreateInstanceEventWindow = append(mock.calls.CreateInstanceEventWindow, callInfo)
	mock.lockCreateInstanceEventWindow.Unlock()
	return mock.CreateInstanceEventWindowFunc(ctx, params, optFns...)
}

// CreateInstanceEventWindowCalls gets all the calls that were made to CreateInstanceEventWindow.
// Check the length with:
//     len(mockedClient.CreateInstanceEventWindowCalls())
func (mock *ClientMock) CreateInstanceEventWindowCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateInstanceEventWindowInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateInstanceEventWindowInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateInstanceEventWindow.RLock()
	calls = mock.calls.CreateInstanceEventWindow
	mock.lockCreateInstanceEventWindow.RUnlock()
	return calls
}

// CreateInstanceExportTask calls CreateInstanceExportTaskFunc.
func (mock *ClientMock) CreateInstanceExportTask(ctx context.Context, params *ec2.CreateInstanceExportTaskInput, optFns ...func(*ec2.Options)) (*ec2.CreateInstanceExportTaskOutput, error) {
	if mock.CreateInstanceExportTaskFunc == nil {
		panic("ClientMock.CreateInstanceExportTaskFunc: method is nil but Client.CreateInstanceExportTask was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateInstanceExportTaskInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateInstanceExportTask.Lock()
	mock.calls.CreateInstanceExportTask = append(mock.calls.CreateInstanceExportTask, callInfo)
	mock.lockCreateInstanceExportTask.Unlock()
	return mock.CreateInstanceExportTaskFunc(ctx, params, optFns...)
}

// CreateInstanceExportTaskCalls gets all the calls that were made to CreateInstanceExportTask.
// Check the length with:
//     len(mockedClient.CreateInstanceExportTaskCalls())
func (mock *ClientMock) CreateInstanceExportTaskCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateInstanceExportTaskInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateInstanceExportTaskInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateInstanceExportTask.RLock()
	calls = mock.calls.CreateInstanceExportTask
	mock.lockCreateInstanceExportTask.RUnlock()
	return calls
}

// CreateInternetGateway calls CreateInternetGatewayFunc.
func (mock *ClientMock) CreateInternetGateway(ctx context.Context, params *ec2.CreateInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateInternetGatewayOutput, error) {
	if mock.CreateInternetGatewayFunc == nil {
		panic("ClientMock.CreateInternetGatewayFunc: method is nil but Client.CreateInternetGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateInternetGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateInternetGateway.Lock()
	mock.calls.CreateInternetGateway = append(mock.calls.CreateInternetGateway, callInfo)
	mock.lockCreateInternetGateway.Unlock()
	return mock.CreateInternetGatewayFunc(ctx, params, optFns...)
}

// CreateInternetGatewayCalls gets all the calls that were made to CreateInternetGateway.
// Check the length with:
//     len(mockedClient.CreateInternetGatewayCalls())
func (mock *ClientMock) CreateInternetGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateInternetGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateInternetGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateInternetGateway.RLock()
	calls = mock.calls.CreateInternetGateway
	mock.lockCreateInternetGateway.RUnlock()
	return calls
}

// CreateIpam calls CreateIpamFunc.
func (mock *ClientMock) CreateIpam(ctx context.Context, params *ec2.CreateIpamInput, optFns ...func(*ec2.Options)) (*ec2.CreateIpamOutput, error) {
	if mock.CreateIpamFunc == nil {
		panic("ClientMock.CreateIpamFunc: method is nil but Client.CreateIpam was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateIpamInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateIpam.Lock()
	mock.calls.CreateIpam = append(mock.calls.CreateIpam, callInfo)
	mock.lockCreateIpam.Unlock()
	return mock.CreateIpamFunc(ctx, params, optFns...)
}

// CreateIpamCalls gets all the calls that were made to CreateIpam.
// Check the length with:
//     len(mockedClient.CreateIpamCalls())
func (mock *ClientMock) CreateIpamCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateIpamInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateIpamInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateIpam.RLock()
	calls = mock.calls.CreateIpam
	mock.lockCreateIpam.RUnlock()
	return calls
}

// CreateIpamPool calls CreateIpamPoolFunc.
func (mock *ClientMock) CreateIpamPool(ctx context.Context, params *ec2.CreateIpamPoolInput, optFns ...func(*ec2.Options)) (*ec2.CreateIpamPoolOutput, error) {
	if mock.CreateIpamPoolFunc == nil {
		panic("ClientMock.CreateIpamPoolFunc: method is nil but Client.CreateIpamPool was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateIpamPoolInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateIpamPool.Lock()
	mock.calls.CreateIpamPool = append(mock.calls.CreateIpamPool, callInfo)
	mock.lockCreateIpamPool.Unlock()
	return mock.CreateIpamPoolFunc(ctx, params, optFns...)
}

// CreateIpamPoolCalls gets all the calls that were made to CreateIpamPool.
// Check the length with:
//     len(mockedClient.CreateIpamPoolCalls())
func (mock *ClientMock) CreateIpamPoolCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateIpamPoolInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateIpamPoolInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateIpamPool.RLock()
	calls = mock.calls.CreateIpamPool
	mock.lockCreateIpamPool.RUnlock()
	return calls
}

// CreateIpamScope calls CreateIpamScopeFunc.
func (mock *ClientMock) CreateIpamScope(ctx context.Context, params *ec2.CreateIpamScopeInput, optFns ...func(*ec2.Options)) (*ec2.CreateIpamScopeOutput, error) {
	if mock.CreateIpamScopeFunc == nil {
		panic("ClientMock.CreateIpamScopeFunc: method is nil but Client.CreateIpamScope was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateIpamScopeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateIpamScope.Lock()
	mock.calls.CreateIpamScope = append(mock.calls.CreateIpamScope, callInfo)
	mock.lockCreateIpamScope.Unlock()
	return mock.CreateIpamScopeFunc(ctx, params, optFns...)
}

// CreateIpamScopeCalls gets all the calls that were made to CreateIpamScope.
// Check the length with:
//     len(mockedClient.CreateIpamScopeCalls())
func (mock *ClientMock) CreateIpamScopeCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateIpamScopeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateIpamScopeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateIpamScope.RLock()
	calls = mock.calls.CreateIpamScope
	mock.lockCreateIpamScope.RUnlock()
	return calls
}

// CreateKeyPair calls CreateKeyPairFunc.
func (mock *ClientMock) CreateKeyPair(ctx context.Context, params *ec2.CreateKeyPairInput, optFns ...func(*ec2.Options)) (*ec2.CreateKeyPairOutput, error) {
	if mock.CreateKeyPairFunc == nil {
		panic("ClientMock.CreateKeyPairFunc: method is nil but Client.CreateKeyPair was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateKeyPairInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateKeyPair.Lock()
	mock.calls.CreateKeyPair = append(mock.calls.CreateKeyPair, callInfo)
	mock.lockCreateKeyPair.Unlock()
	return mock.CreateKeyPairFunc(ctx, params, optFns...)
}

// CreateKeyPairCalls gets all the calls that were made to CreateKeyPair.
// Check the length with:
//     len(mockedClient.CreateKeyPairCalls())
func (mock *ClientMock) CreateKeyPairCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateKeyPairInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateKeyPairInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateKeyPair.RLock()
	calls = mock.calls.CreateKeyPair
	mock.lockCreateKeyPair.RUnlock()
	return calls
}

// CreateLaunchTemplate calls CreateLaunchTemplateFunc.
func (mock *ClientMock) CreateLaunchTemplate(ctx context.Context, params *ec2.CreateLaunchTemplateInput, optFns ...func(*ec2.Options)) (*ec2.CreateLaunchTemplateOutput, error) {
	if mock.CreateLaunchTemplateFunc == nil {
		panic("ClientMock.CreateLaunchTemplateFunc: method is nil but Client.CreateLaunchTemplate was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateLaunchTemplateInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateLaunchTemplate.Lock()
	mock.calls.CreateLaunchTemplate = append(mock.calls.CreateLaunchTemplate, callInfo)
	mock.lockCreateLaunchTemplate.Unlock()
	return mock.CreateLaunchTemplateFunc(ctx, params, optFns...)
}

// CreateLaunchTemplateCalls gets all the calls that were made to CreateLaunchTemplate.
// Check the length with:
//     len(mockedClient.CreateLaunchTemplateCalls())
func (mock *ClientMock) CreateLaunchTemplateCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateLaunchTemplateInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateLaunchTemplateInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateLaunchTemplate.RLock()
	calls = mock.calls.CreateLaunchTemplate
	mock.lockCreateLaunchTemplate.RUnlock()
	return calls
}

// CreateLaunchTemplateVersion calls CreateLaunchTemplateVersionFunc.
func (mock *ClientMock) CreateLaunchTemplateVersion(ctx context.Context, params *ec2.CreateLaunchTemplateVersionInput, optFns ...func(*ec2.Options)) (*ec2.CreateLaunchTemplateVersionOutput, error) {
	if mock.CreateLaunchTemplateVersionFunc == nil {
		panic("ClientMock.CreateLaunchTemplateVersionFunc: method is nil but Client.CreateLaunchTemplateVersion was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateLaunchTemplateVersionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateLaunchTemplateVersion.Lock()
	mock.calls.CreateLaunchTemplateVersion = append(mock.calls.CreateLaunchTemplateVersion, callInfo)
	mock.lockCreateLaunchTemplateVersion.Unlock()
	return mock.CreateLaunchTemplateVersionFunc(ctx, params, optFns...)
}

// CreateLaunchTemplateVersionCalls gets all the calls that were made to CreateLaunchTemplateVersion.
// Check the length with:
//     len(mockedClient.CreateLaunchTemplateVersionCalls())
func (mock *ClientMock) CreateLaunchTemplateVersionCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateLaunchTemplateVersionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateLaunchTemplateVersionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateLaunchTemplateVersion.RLock()
	calls = mock.calls.CreateLaunchTemplateVersion
	mock.lockCreateLaunchTemplateVersion.RUnlock()
	return calls
}

// CreateLocalGatewayRoute calls CreateLocalGatewayRouteFunc.
func (mock *ClientMock) CreateLocalGatewayRoute(ctx context.Context, params *ec2.CreateLocalGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateLocalGatewayRouteOutput, error) {
	if mock.CreateLocalGatewayRouteFunc == nil {
		panic("ClientMock.CreateLocalGatewayRouteFunc: method is nil but Client.CreateLocalGatewayRoute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateLocalGatewayRouteInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateLocalGatewayRoute.Lock()
	mock.calls.CreateLocalGatewayRoute = append(mock.calls.CreateLocalGatewayRoute, callInfo)
	mock.lockCreateLocalGatewayRoute.Unlock()
	return mock.CreateLocalGatewayRouteFunc(ctx, params, optFns...)
}

// CreateLocalGatewayRouteCalls gets all the calls that were made to CreateLocalGatewayRoute.
// Check the length with:
//     len(mockedClient.CreateLocalGatewayRouteCalls())
func (mock *ClientMock) CreateLocalGatewayRouteCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateLocalGatewayRouteInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateLocalGatewayRouteInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateLocalGatewayRoute.RLock()
	calls = mock.calls.CreateLocalGatewayRoute
	mock.lockCreateLocalGatewayRoute.RUnlock()
	return calls
}

// CreateLocalGatewayRouteTableVpcAssociation calls CreateLocalGatewayRouteTableVpcAssociationFunc.
func (mock *ClientMock) CreateLocalGatewayRouteTableVpcAssociation(ctx context.Context, params *ec2.CreateLocalGatewayRouteTableVpcAssociationInput, optFns ...func(*ec2.Options)) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error) {
	if mock.CreateLocalGatewayRouteTableVpcAssociationFunc == nil {
		panic("ClientMock.CreateLocalGatewayRouteTableVpcAssociationFunc: method is nil but Client.CreateLocalGatewayRouteTableVpcAssociation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateLocalGatewayRouteTableVpcAssociation.Lock()
	mock.calls.CreateLocalGatewayRouteTableVpcAssociation = append(mock.calls.CreateLocalGatewayRouteTableVpcAssociation, callInfo)
	mock.lockCreateLocalGatewayRouteTableVpcAssociation.Unlock()
	return mock.CreateLocalGatewayRouteTableVpcAssociationFunc(ctx, params, optFns...)
}

// CreateLocalGatewayRouteTableVpcAssociationCalls gets all the calls that were made to CreateLocalGatewayRouteTableVpcAssociation.
// Check the length with:
//     len(mockedClient.CreateLocalGatewayRouteTableVpcAssociationCalls())
func (mock *ClientMock) CreateLocalGatewayRouteTableVpcAssociationCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateLocalGatewayRouteTableVpcAssociationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateLocalGatewayRouteTableVpcAssociation.RLock()
	calls = mock.calls.CreateLocalGatewayRouteTableVpcAssociation
	mock.lockCreateLocalGatewayRouteTableVpcAssociation.RUnlock()
	return calls
}

// CreateManagedPrefixList calls CreateManagedPrefixListFunc.
func (mock *ClientMock) CreateManagedPrefixList(ctx context.Context, params *ec2.CreateManagedPrefixListInput, optFns ...func(*ec2.Options)) (*ec2.CreateManagedPrefixListOutput, error) {
	if mock.CreateManagedPrefixListFunc == nil {
		panic("ClientMock.CreateManagedPrefixListFunc: method is nil but Client.CreateManagedPrefixList was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateManagedPrefixListInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateManagedPrefixList.Lock()
	mock.calls.CreateManagedPrefixList = append(mock.calls.CreateManagedPrefixList, callInfo)
	mock.lockCreateManagedPrefixList.Unlock()
	return mock.CreateManagedPrefixListFunc(ctx, params, optFns...)
}

// CreateManagedPrefixListCalls gets all the calls that were made to CreateManagedPrefixList.
// Check the length with:
//     len(mockedClient.CreateManagedPrefixListCalls())
func (mock *ClientMock) CreateManagedPrefixListCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateManagedPrefixListInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateManagedPrefixListInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateManagedPrefixList.RLock()
	calls = mock.calls.CreateManagedPrefixList
	mock.lockCreateManagedPrefixList.RUnlock()
	return calls
}

// CreateNatGateway calls CreateNatGatewayFunc.
func (mock *ClientMock) CreateNatGateway(ctx context.Context, params *ec2.CreateNatGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateNatGatewayOutput, error) {
	if mock.CreateNatGatewayFunc == nil {
		panic("ClientMock.CreateNatGatewayFunc: method is nil but Client.CreateNatGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateNatGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateNatGateway.Lock()
	mock.calls.CreateNatGateway = append(mock.calls.CreateNatGateway, callInfo)
	mock.lockCreateNatGateway.Unlock()
	return mock.CreateNatGatewayFunc(ctx, params, optFns...)
}

// CreateNatGatewayCalls gets all the calls that were made to CreateNatGateway.
// Check the length with:
//     len(mockedClient.CreateNatGatewayCalls())
func (mock *ClientMock) CreateNatGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateNatGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateNatGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateNatGateway.RLock()
	calls = mock.calls.CreateNatGateway
	mock.lockCreateNatGateway.RUnlock()
	return calls
}

// CreateNetworkAcl calls CreateNetworkAclFunc.
func (mock *ClientMock) CreateNetworkAcl(ctx context.Context, params *ec2.CreateNetworkAclInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkAclOutput, error) {
	if mock.CreateNetworkAclFunc == nil {
		panic("ClientMock.CreateNetworkAclFunc: method is nil but Client.CreateNetworkAcl was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateNetworkAclInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateNetworkAcl.Lock()
	mock.calls.CreateNetworkAcl = append(mock.calls.CreateNetworkAcl, callInfo)
	mock.lockCreateNetworkAcl.Unlock()
	return mock.CreateNetworkAclFunc(ctx, params, optFns...)
}

// CreateNetworkAclCalls gets all the calls that were made to CreateNetworkAcl.
// Check the length with:
//     len(mockedClient.CreateNetworkAclCalls())
func (mock *ClientMock) CreateNetworkAclCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateNetworkAclInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateNetworkAclInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateNetworkAcl.RLock()
	calls = mock.calls.CreateNetworkAcl
	mock.lockCreateNetworkAcl.RUnlock()
	return calls
}

// CreateNetworkAclEntry calls CreateNetworkAclEntryFunc.
func (mock *ClientMock) CreateNetworkAclEntry(ctx context.Context, params *ec2.CreateNetworkAclEntryInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkAclEntryOutput, error) {
	if mock.CreateNetworkAclEntryFunc == nil {
		panic("ClientMock.CreateNetworkAclEntryFunc: method is nil but Client.CreateNetworkAclEntry was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateNetworkAclEntryInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateNetworkAclEntry.Lock()
	mock.calls.CreateNetworkAclEntry = append(mock.calls.CreateNetworkAclEntry, callInfo)
	mock.lockCreateNetworkAclEntry.Unlock()
	return mock.CreateNetworkAclEntryFunc(ctx, params, optFns...)
}

// CreateNetworkAclEntryCalls gets all the calls that were made to CreateNetworkAclEntry.
// Check the length with:
//     len(mockedClient.CreateNetworkAclEntryCalls())
func (mock *ClientMock) CreateNetworkAclEntryCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateNetworkAclEntryInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateNetworkAclEntryInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateNetworkAclEntry.RLock()
	calls = mock.calls.CreateNetworkAclEntry
	mock.lockCreateNetworkAclEntry.RUnlock()
	return calls
}

// CreateNetworkInsightsAccessScope calls CreateNetworkInsightsAccessScopeFunc.
func (mock *ClientMock) CreateNetworkInsightsAccessScope(ctx context.Context, params *ec2.CreateNetworkInsightsAccessScopeInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkInsightsAccessScopeOutput, error) {
	if mock.CreateNetworkInsightsAccessScopeFunc == nil {
		panic("ClientMock.CreateNetworkInsightsAccessScopeFunc: method is nil but Client.CreateNetworkInsightsAccessScope was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateNetworkInsightsAccessScopeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateNetworkInsightsAccessScope.Lock()
	mock.calls.CreateNetworkInsightsAccessScope = append(mock.calls.CreateNetworkInsightsAccessScope, callInfo)
	mock.lockCreateNetworkInsightsAccessScope.Unlock()
	return mock.CreateNetworkInsightsAccessScopeFunc(ctx, params, optFns...)
}

// CreateNetworkInsightsAccessScopeCalls gets all the calls that were made to CreateNetworkInsightsAccessScope.
// Check the length with:
//     len(mockedClient.CreateNetworkInsightsAccessScopeCalls())
func (mock *ClientMock) CreateNetworkInsightsAccessScopeCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateNetworkInsightsAccessScopeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateNetworkInsightsAccessScopeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateNetworkInsightsAccessScope.RLock()
	calls = mock.calls.CreateNetworkInsightsAccessScope
	mock.lockCreateNetworkInsightsAccessScope.RUnlock()
	return calls
}

// CreateNetworkInsightsPath calls CreateNetworkInsightsPathFunc.
func (mock *ClientMock) CreateNetworkInsightsPath(ctx context.Context, params *ec2.CreateNetworkInsightsPathInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkInsightsPathOutput, error) {
	if mock.CreateNetworkInsightsPathFunc == nil {
		panic("ClientMock.CreateNetworkInsightsPathFunc: method is nil but Client.CreateNetworkInsightsPath was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateNetworkInsightsPathInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateNetworkInsightsPath.Lock()
	mock.calls.CreateNetworkInsightsPath = append(mock.calls.CreateNetworkInsightsPath, callInfo)
	mock.lockCreateNetworkInsightsPath.Unlock()
	return mock.CreateNetworkInsightsPathFunc(ctx, params, optFns...)
}

// CreateNetworkInsightsPathCalls gets all the calls that were made to CreateNetworkInsightsPath.
// Check the length with:
//     len(mockedClient.CreateNetworkInsightsPathCalls())
func (mock *ClientMock) CreateNetworkInsightsPathCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateNetworkInsightsPathInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateNetworkInsightsPathInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateNetworkInsightsPath.RLock()
	calls = mock.calls.CreateNetworkInsightsPath
	mock.lockCreateNetworkInsightsPath.RUnlock()
	return calls
}

// CreateNetworkInterface calls CreateNetworkInterfaceFunc.
func (mock *ClientMock) CreateNetworkInterface(ctx context.Context, params *ec2.CreateNetworkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkInterfaceOutput, error) {
	if mock.CreateNetworkInterfaceFunc == nil {
		panic("ClientMock.CreateNetworkInterfaceFunc: method is nil but Client.CreateNetworkInterface was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateNetworkInterfaceInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateNetworkInterface.Lock()
	mock.calls.CreateNetworkInterface = append(mock.calls.CreateNetworkInterface, callInfo)
	mock.lockCreateNetworkInterface.Unlock()
	return mock.CreateNetworkInterfaceFunc(ctx, params, optFns...)
}

// CreateNetworkInterfaceCalls gets all the calls that were made to CreateNetworkInterface.
// Check the length with:
//     len(mockedClient.CreateNetworkInterfaceCalls())
func (mock *ClientMock) CreateNetworkInterfaceCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateNetworkInterfaceInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateNetworkInterfaceInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateNetworkInterface.RLock()
	calls = mock.calls.CreateNetworkInterface
	mock.lockCreateNetworkInterface.RUnlock()
	return calls
}

// CreateNetworkInterfacePermission calls CreateNetworkInterfacePermissionFunc.
func (mock *ClientMock) CreateNetworkInterfacePermission(ctx context.Context, params *ec2.CreateNetworkInterfacePermissionInput, optFns ...func(*ec2.Options)) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
	if mock.CreateNetworkInterfacePermissionFunc == nil {
		panic("ClientMock.CreateNetworkInterfacePermissionFunc: method is nil but Client.CreateNetworkInterfacePermission was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateNetworkInterfacePermissionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateNetworkInterfacePermission.Lock()
	mock.calls.CreateNetworkInterfacePermission = append(mock.calls.CreateNetworkInterfacePermission, callInfo)
	mock.lockCreateNetworkInterfacePermission.Unlock()
	return mock.CreateNetworkInterfacePermissionFunc(ctx, params, optFns...)
}

// CreateNetworkInterfacePermissionCalls gets all the calls that were made to CreateNetworkInterfacePermission.
// Check the length with:
//     len(mockedClient.CreateNetworkInterfacePermissionCalls())
func (mock *ClientMock) CreateNetworkInterfacePermissionCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateNetworkInterfacePermissionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateNetworkInterfacePermissionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateNetworkInterfacePermission.RLock()
	calls = mock.calls.CreateNetworkInterfacePermission
	mock.lockCreateNetworkInterfacePermission.RUnlock()
	return calls
}

// CreatePlacementGroup calls CreatePlacementGroupFunc.
func (mock *ClientMock) CreatePlacementGroup(ctx context.Context, params *ec2.CreatePlacementGroupInput, optFns ...func(*ec2.Options)) (*ec2.CreatePlacementGroupOutput, error) {
	if mock.CreatePlacementGroupFunc == nil {
		panic("ClientMock.CreatePlacementGroupFunc: method is nil but Client.CreatePlacementGroup was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreatePlacementGroupInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreatePlacementGroup.Lock()
	mock.calls.CreatePlacementGroup = append(mock.calls.CreatePlacementGroup, callInfo)
	mock.lockCreatePlacementGroup.Unlock()
	return mock.CreatePlacementGroupFunc(ctx, params, optFns...)
}

// CreatePlacementGroupCalls gets all the calls that were made to CreatePlacementGroup.
// Check the length with:
//     len(mockedClient.CreatePlacementGroupCalls())
func (mock *ClientMock) CreatePlacementGroupCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreatePlacementGroupInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreatePlacementGroupInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreatePlacementGroup.RLock()
	calls = mock.calls.CreatePlacementGroup
	mock.lockCreatePlacementGroup.RUnlock()
	return calls
}

// CreatePublicIpv4Pool calls CreatePublicIpv4PoolFunc.
func (mock *ClientMock) CreatePublicIpv4Pool(ctx context.Context, params *ec2.CreatePublicIpv4PoolInput, optFns ...func(*ec2.Options)) (*ec2.CreatePublicIpv4PoolOutput, error) {
	if mock.CreatePublicIpv4PoolFunc == nil {
		panic("ClientMock.CreatePublicIpv4PoolFunc: method is nil but Client.CreatePublicIpv4Pool was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreatePublicIpv4PoolInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreatePublicIpv4Pool.Lock()
	mock.calls.CreatePublicIpv4Pool = append(mock.calls.CreatePublicIpv4Pool, callInfo)
	mock.lockCreatePublicIpv4Pool.Unlock()
	return mock.CreatePublicIpv4PoolFunc(ctx, params, optFns...)
}

// CreatePublicIpv4PoolCalls gets all the calls that were made to CreatePublicIpv4Pool.
// Check the length with:
//     len(mockedClient.CreatePublicIpv4PoolCalls())
func (mock *ClientMock) CreatePublicIpv4PoolCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreatePublicIpv4PoolInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreatePublicIpv4PoolInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreatePublicIpv4Pool.RLock()
	calls = mock.calls.CreatePublicIpv4Pool
	mock.lockCreatePublicIpv4Pool.RUnlock()
	return calls
}

// CreateReplaceRootVolumeTask calls CreateReplaceRootVolumeTaskFunc.
func (mock *ClientMock) CreateReplaceRootVolumeTask(ctx context.Context, params *ec2.CreateReplaceRootVolumeTaskInput, optFns ...func(*ec2.Options)) (*ec2.CreateReplaceRootVolumeTaskOutput, error) {
	if mock.CreateReplaceRootVolumeTaskFunc == nil {
		panic("ClientMock.CreateReplaceRootVolumeTaskFunc: method is nil but Client.CreateReplaceRootVolumeTask was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateReplaceRootVolumeTaskInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateReplaceRootVolumeTask.Lock()
	mock.calls.CreateReplaceRootVolumeTask = append(mock.calls.CreateReplaceRootVolumeTask, callInfo)
	mock.lockCreateReplaceRootVolumeTask.Unlock()
	return mock.CreateReplaceRootVolumeTaskFunc(ctx, params, optFns...)
}

// CreateReplaceRootVolumeTaskCalls gets all the calls that were made to CreateReplaceRootVolumeTask.
// Check the length with:
//     len(mockedClient.CreateReplaceRootVolumeTaskCalls())
func (mock *ClientMock) CreateReplaceRootVolumeTaskCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateReplaceRootVolumeTaskInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateReplaceRootVolumeTaskInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateReplaceRootVolumeTask.RLock()
	calls = mock.calls.CreateReplaceRootVolumeTask
	mock.lockCreateReplaceRootVolumeTask.RUnlock()
	return calls
}

// CreateReservedInstancesListing calls CreateReservedInstancesListingFunc.
func (mock *ClientMock) CreateReservedInstancesListing(ctx context.Context, params *ec2.CreateReservedInstancesListingInput, optFns ...func(*ec2.Options)) (*ec2.CreateReservedInstancesListingOutput, error) {
	if mock.CreateReservedInstancesListingFunc == nil {
		panic("ClientMock.CreateReservedInstancesListingFunc: method is nil but Client.CreateReservedInstancesListing was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateReservedInstancesListingInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateReservedInstancesListing.Lock()
	mock.calls.CreateReservedInstancesListing = append(mock.calls.CreateReservedInstancesListing, callInfo)
	mock.lockCreateReservedInstancesListing.Unlock()
	return mock.CreateReservedInstancesListingFunc(ctx, params, optFns...)
}

// CreateReservedInstancesListingCalls gets all the calls that were made to CreateReservedInstancesListing.
// Check the length with:
//     len(mockedClient.CreateReservedInstancesListingCalls())
func (mock *ClientMock) CreateReservedInstancesListingCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateReservedInstancesListingInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateReservedInstancesListingInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateReservedInstancesListing.RLock()
	calls = mock.calls.CreateReservedInstancesListing
	mock.lockCreateReservedInstancesListing.RUnlock()
	return calls
}

// CreateRestoreImageTask calls CreateRestoreImageTaskFunc.
func (mock *ClientMock) CreateRestoreImageTask(ctx context.Context, params *ec2.CreateRestoreImageTaskInput, optFns ...func(*ec2.Options)) (*ec2.CreateRestoreImageTaskOutput, error) {
	if mock.CreateRestoreImageTaskFunc == nil {
		panic("ClientMock.CreateRestoreImageTaskFunc: method is nil but Client.CreateRestoreImageTask was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateRestoreImageTaskInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateRestoreImageTask.Lock()
	mock.calls.CreateRestoreImageTask = append(mock.calls.CreateRestoreImageTask, callInfo)
	mock.lockCreateRestoreImageTask.Unlock()
	return mock.CreateRestoreImageTaskFunc(ctx, params, optFns...)
}

// CreateRestoreImageTaskCalls gets all the calls that were made to CreateRestoreImageTask.
// Check the length with:
//     len(mockedClient.CreateRestoreImageTaskCalls())
func (mock *ClientMock) CreateRestoreImageTaskCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateRestoreImageTaskInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateRestoreImageTaskInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateRestoreImageTask.RLock()
	calls = mock.calls.CreateRestoreImageTask
	mock.lockCreateRestoreImageTask.RUnlock()
	return calls
}

// CreateRoute calls CreateRouteFunc.
func (mock *ClientMock) CreateRoute(ctx context.Context, params *ec2.CreateRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateRouteOutput, error) {
	if mock.CreateRouteFunc == nil {
		panic("ClientMock.CreateRouteFunc: method is nil but Client.CreateRoute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateRouteInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateRoute.Lock()
	mock.calls.CreateRoute = append(mock.calls.CreateRoute, callInfo)
	mock.lockCreateRoute.Unlock()
	return mock.CreateRouteFunc(ctx, params, optFns...)
}

// CreateRouteCalls gets all the calls that were made to CreateRoute.
// Check the length with:
//     len(mockedClient.CreateRouteCalls())
func (mock *ClientMock) CreateRouteCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateRouteInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateRouteInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateRoute.RLock()
	calls = mock.calls.CreateRoute
	mock.lockCreateRoute.RUnlock()
	return calls
}

// CreateRouteTable calls CreateRouteTableFunc.
func (mock *ClientMock) CreateRouteTable(ctx context.Context, params *ec2.CreateRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.CreateRouteTableOutput, error) {
	if mock.CreateRouteTableFunc == nil {
		panic("ClientMock.CreateRouteTableFunc: method is nil but Client.CreateRouteTable was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateRouteTableInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateRouteTable.Lock()
	mock.calls.CreateRouteTable = append(mock.calls.CreateRouteTable, callInfo)
	mock.lockCreateRouteTable.Unlock()
	return mock.CreateRouteTableFunc(ctx, params, optFns...)
}

// CreateRouteTableCalls gets all the calls that were made to CreateRouteTable.
// Check the length with:
//     len(mockedClient.CreateRouteTableCalls())
func (mock *ClientMock) CreateRouteTableCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateRouteTableInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateRouteTableInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateRouteTable.RLock()
	calls = mock.calls.CreateRouteTable
	mock.lockCreateRouteTable.RUnlock()
	return calls
}

// CreateSecurityGroup calls CreateSecurityGroupFunc.
func (mock *ClientMock) CreateSecurityGroup(ctx context.Context, params *ec2.CreateSecurityGroupInput, optFns ...func(*ec2.Options)) (*ec2.CreateSecurityGroupOutput, error) {
	if mock.CreateSecurityGroupFunc == nil {
		panic("ClientMock.CreateSecurityGroupFunc: method is nil but Client.CreateSecurityGroup was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateSecurityGroupInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateSecurityGroup.Lock()
	mock.calls.CreateSecurityGroup = append(mock.calls.CreateSecurityGroup, callInfo)
	mock.lockCreateSecurityGroup.Unlock()
	return mock.CreateSecurityGroupFunc(ctx, params, optFns...)
}

// CreateSecurityGroupCalls gets all the calls that were made to CreateSecurityGroup.
// Check the length with:
//     len(mockedClient.CreateSecurityGroupCalls())
func (mock *ClientMock) CreateSecurityGroupCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateSecurityGroupInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateSecurityGroupInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateSecurityGroup.RLock()
	calls = mock.calls.CreateSecurityGroup
	mock.lockCreateSecurityGroup.RUnlock()
	return calls
}

// CreateSnapshot calls CreateSnapshotFunc.
func (mock *ClientMock) CreateSnapshot(ctx context.Context, params *ec2.CreateSnapshotInput, optFns ...func(*ec2.Options)) (*ec2.CreateSnapshotOutput, error) {
	if mock.CreateSnapshotFunc == nil {
		panic("ClientMock.CreateSnapshotFunc: method is nil but Client.CreateSnapshot was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateSnapshotInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateSnapshot.Lock()
	mock.calls.CreateSnapshot = append(mock.calls.CreateSnapshot, callInfo)
	mock.lockCreateSnapshot.Unlock()
	return mock.CreateSnapshotFunc(ctx, params, optFns...)
}

// CreateSnapshotCalls gets all the calls that were made to CreateSnapshot.
// Check the length with:
//     len(mockedClient.CreateSnapshotCalls())
func (mock *ClientMock) CreateSnapshotCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateSnapshotInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateSnapshotInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateSnapshot.RLock()
	calls = mock.calls.CreateSnapshot
	mock.lockCreateSnapshot.RUnlock()
	return calls
}

// CreateSnapshots calls CreateSnapshotsFunc.
func (mock *ClientMock) CreateSnapshots(ctx context.Context, params *ec2.CreateSnapshotsInput, optFns ...func(*ec2.Options)) (*ec2.CreateSnapshotsOutput, error) {
	if mock.CreateSnapshotsFunc == nil {
		panic("ClientMock.CreateSnapshotsFunc: method is nil but Client.CreateSnapshots was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateSnapshotsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateSnapshots.Lock()
	mock.calls.CreateSnapshots = append(mock.calls.CreateSnapshots, callInfo)
	mock.lockCreateSnapshots.Unlock()
	return mock.CreateSnapshotsFunc(ctx, params, optFns...)
}

// CreateSnapshotsCalls gets all the calls that were made to CreateSnapshots.
// Check the length with:
//     len(mockedClient.CreateSnapshotsCalls())
func (mock *ClientMock) CreateSnapshotsCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateSnapshotsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateSnapshotsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateSnapshots.RLock()
	calls = mock.calls.CreateSnapshots
	mock.lockCreateSnapshots.RUnlock()
	return calls
}

// CreateSpotDatafeedSubscription calls CreateSpotDatafeedSubscriptionFunc.
func (mock *ClientMock) CreateSpotDatafeedSubscription(ctx context.Context, params *ec2.CreateSpotDatafeedSubscriptionInput, optFns ...func(*ec2.Options)) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	if mock.CreateSpotDatafeedSubscriptionFunc == nil {
		panic("ClientMock.CreateSpotDatafeedSubscriptionFunc: method is nil but Client.CreateSpotDatafeedSubscription was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateSpotDatafeedSubscriptionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateSpotDatafeedSubscription.Lock()
	mock.calls.CreateSpotDatafeedSubscription = append(mock.calls.CreateSpotDatafeedSubscription, callInfo)
	mock.lockCreateSpotDatafeedSubscription.Unlock()
	return mock.CreateSpotDatafeedSubscriptionFunc(ctx, params, optFns...)
}

// CreateSpotDatafeedSubscriptionCalls gets all the calls that were made to CreateSpotDatafeedSubscription.
// Check the length with:
//     len(mockedClient.CreateSpotDatafeedSubscriptionCalls())
func (mock *ClientMock) CreateSpotDatafeedSubscriptionCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateSpotDatafeedSubscriptionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateSpotDatafeedSubscriptionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateSpotDatafeedSubscription.RLock()
	calls = mock.calls.CreateSpotDatafeedSubscription
	mock.lockCreateSpotDatafeedSubscription.RUnlock()
	return calls
}

// CreateStoreImageTask calls CreateStoreImageTaskFunc.
func (mock *ClientMock) CreateStoreImageTask(ctx context.Context, params *ec2.CreateStoreImageTaskInput, optFns ...func(*ec2.Options)) (*ec2.CreateStoreImageTaskOutput, error) {
	if mock.CreateStoreImageTaskFunc == nil {
		panic("ClientMock.CreateStoreImageTaskFunc: method is nil but Client.CreateStoreImageTask was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateStoreImageTaskInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateStoreImageTask.Lock()
	mock.calls.CreateStoreImageTask = append(mock.calls.CreateStoreImageTask, callInfo)
	mock.lockCreateStoreImageTask.Unlock()
	return mock.CreateStoreImageTaskFunc(ctx, params, optFns...)
}

// CreateStoreImageTaskCalls gets all the calls that were made to CreateStoreImageTask.
// Check the length with:
//     len(mockedClient.CreateStoreImageTaskCalls())
func (mock *ClientMock) CreateStoreImageTaskCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateStoreImageTaskInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateStoreImageTaskInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateStoreImageTask.RLock()
	calls = mock.calls.CreateStoreImageTask
	mock.lockCreateStoreImageTask.RUnlock()
	return calls
}

// CreateSubnet calls CreateSubnetFunc.
func (mock *ClientMock) CreateSubnet(ctx context.Context, params *ec2.CreateSubnetInput, optFns ...func(*ec2.Options)) (*ec2.CreateSubnetOutput, error) {
	if mock.CreateSubnetFunc == nil {
		panic("ClientMock.CreateSubnetFunc: method is nil but Client.CreateSubnet was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateSubnetInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateSubnet.Lock()
	mock.calls.CreateSubnet = append(mock.calls.CreateSubnet, callInfo)
	mock.lockCreateSubnet.Unlock()
	return mock.CreateSubnetFunc(ctx, params, optFns...)
}

// CreateSubnetCalls gets all the calls that were made to CreateSubnet.
// Check the length with:
//     len(mockedClient.CreateSubnetCalls())
func (mock *ClientMock) CreateSubnetCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateSubnetInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateSubnetInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateSubnet.RLock()
	calls = mock.calls.CreateSubnet
	mock.lockCreateSubnet.RUnlock()
	return calls
}

// CreateSubnetCidrReservation calls CreateSubnetCidrReservationFunc.
func (mock *ClientMock) CreateSubnetCidrReservation(ctx context.Context, params *ec2.CreateSubnetCidrReservationInput, optFns ...func(*ec2.Options)) (*ec2.CreateSubnetCidrReservationOutput, error) {
	if mock.CreateSubnetCidrReservationFunc == nil {
		panic("ClientMock.CreateSubnetCidrReservationFunc: method is nil but Client.CreateSubnetCidrReservation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateSubnetCidrReservationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateSubnetCidrReservation.Lock()
	mock.calls.CreateSubnetCidrReservation = append(mock.calls.CreateSubnetCidrReservation, callInfo)
	mock.lockCreateSubnetCidrReservation.Unlock()
	return mock.CreateSubnetCidrReservationFunc(ctx, params, optFns...)
}

// CreateSubnetCidrReservationCalls gets all the calls that were made to CreateSubnetCidrReservation.
// Check the length with:
//     len(mockedClient.CreateSubnetCidrReservationCalls())
func (mock *ClientMock) CreateSubnetCidrReservationCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateSubnetCidrReservationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateSubnetCidrReservationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateSubnetCidrReservation.RLock()
	calls = mock.calls.CreateSubnetCidrReservation
	mock.lockCreateSubnetCidrReservation.RUnlock()
	return calls
}

// CreateTags calls CreateTagsFunc.
func (mock *ClientMock) CreateTags(ctx context.Context, params *ec2.CreateTagsInput, optFns ...func(*ec2.Options)) (*ec2.CreateTagsOutput, error) {
	if mock.CreateTagsFunc == nil {
		panic("ClientMock.CreateTagsFunc: method is nil but Client.CreateTags was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTagsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTags.Lock()
	mock.calls.CreateTags = append(mock.calls.CreateTags, callInfo)
	mock.lockCreateTags.Unlock()
	return mock.CreateTagsFunc(ctx, params, optFns...)
}

// CreateTagsCalls gets all the calls that were made to CreateTags.
// Check the length with:
//     len(mockedClient.CreateTagsCalls())
func (mock *ClientMock) CreateTagsCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTagsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTagsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTags.RLock()
	calls = mock.calls.CreateTags
	mock.lockCreateTags.RUnlock()
	return calls
}

// CreateTrafficMirrorFilter calls CreateTrafficMirrorFilterFunc.
func (mock *ClientMock) CreateTrafficMirrorFilter(ctx context.Context, params *ec2.CreateTrafficMirrorFilterInput, optFns ...func(*ec2.Options)) (*ec2.CreateTrafficMirrorFilterOutput, error) {
	if mock.CreateTrafficMirrorFilterFunc == nil {
		panic("ClientMock.CreateTrafficMirrorFilterFunc: method is nil but Client.CreateTrafficMirrorFilter was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTrafficMirrorFilterInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTrafficMirrorFilter.Lock()
	mock.calls.CreateTrafficMirrorFilter = append(mock.calls.CreateTrafficMirrorFilter, callInfo)
	mock.lockCreateTrafficMirrorFilter.Unlock()
	return mock.CreateTrafficMirrorFilterFunc(ctx, params, optFns...)
}

// CreateTrafficMirrorFilterCalls gets all the calls that were made to CreateTrafficMirrorFilter.
// Check the length with:
//     len(mockedClient.CreateTrafficMirrorFilterCalls())
func (mock *ClientMock) CreateTrafficMirrorFilterCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTrafficMirrorFilterInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTrafficMirrorFilterInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTrafficMirrorFilter.RLock()
	calls = mock.calls.CreateTrafficMirrorFilter
	mock.lockCreateTrafficMirrorFilter.RUnlock()
	return calls
}

// CreateTrafficMirrorFilterRule calls CreateTrafficMirrorFilterRuleFunc.
func (mock *ClientMock) CreateTrafficMirrorFilterRule(ctx context.Context, params *ec2.CreateTrafficMirrorFilterRuleInput, optFns ...func(*ec2.Options)) (*ec2.CreateTrafficMirrorFilterRuleOutput, error) {
	if mock.CreateTrafficMirrorFilterRuleFunc == nil {
		panic("ClientMock.CreateTrafficMirrorFilterRuleFunc: method is nil but Client.CreateTrafficMirrorFilterRule was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTrafficMirrorFilterRuleInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTrafficMirrorFilterRule.Lock()
	mock.calls.CreateTrafficMirrorFilterRule = append(mock.calls.CreateTrafficMirrorFilterRule, callInfo)
	mock.lockCreateTrafficMirrorFilterRule.Unlock()
	return mock.CreateTrafficMirrorFilterRuleFunc(ctx, params, optFns...)
}

// CreateTrafficMirrorFilterRuleCalls gets all the calls that were made to CreateTrafficMirrorFilterRule.
// Check the length with:
//     len(mockedClient.CreateTrafficMirrorFilterRuleCalls())
func (mock *ClientMock) CreateTrafficMirrorFilterRuleCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTrafficMirrorFilterRuleInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTrafficMirrorFilterRuleInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTrafficMirrorFilterRule.RLock()
	calls = mock.calls.CreateTrafficMirrorFilterRule
	mock.lockCreateTrafficMirrorFilterRule.RUnlock()
	return calls
}

// CreateTrafficMirrorSession calls CreateTrafficMirrorSessionFunc.
func (mock *ClientMock) CreateTrafficMirrorSession(ctx context.Context, params *ec2.CreateTrafficMirrorSessionInput, optFns ...func(*ec2.Options)) (*ec2.CreateTrafficMirrorSessionOutput, error) {
	if mock.CreateTrafficMirrorSessionFunc == nil {
		panic("ClientMock.CreateTrafficMirrorSessionFunc: method is nil but Client.CreateTrafficMirrorSession was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTrafficMirrorSessionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTrafficMirrorSession.Lock()
	mock.calls.CreateTrafficMirrorSession = append(mock.calls.CreateTrafficMirrorSession, callInfo)
	mock.lockCreateTrafficMirrorSession.Unlock()
	return mock.CreateTrafficMirrorSessionFunc(ctx, params, optFns...)
}

// CreateTrafficMirrorSessionCalls gets all the calls that were made to CreateTrafficMirrorSession.
// Check the length with:
//     len(mockedClient.CreateTrafficMirrorSessionCalls())
func (mock *ClientMock) CreateTrafficMirrorSessionCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTrafficMirrorSessionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTrafficMirrorSessionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTrafficMirrorSession.RLock()
	calls = mock.calls.CreateTrafficMirrorSession
	mock.lockCreateTrafficMirrorSession.RUnlock()
	return calls
}

// CreateTrafficMirrorTarget calls CreateTrafficMirrorTargetFunc.
func (mock *ClientMock) CreateTrafficMirrorTarget(ctx context.Context, params *ec2.CreateTrafficMirrorTargetInput, optFns ...func(*ec2.Options)) (*ec2.CreateTrafficMirrorTargetOutput, error) {
	if mock.CreateTrafficMirrorTargetFunc == nil {
		panic("ClientMock.CreateTrafficMirrorTargetFunc: method is nil but Client.CreateTrafficMirrorTarget was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTrafficMirrorTargetInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTrafficMirrorTarget.Lock()
	mock.calls.CreateTrafficMirrorTarget = append(mock.calls.CreateTrafficMirrorTarget, callInfo)
	mock.lockCreateTrafficMirrorTarget.Unlock()
	return mock.CreateTrafficMirrorTargetFunc(ctx, params, optFns...)
}

// CreateTrafficMirrorTargetCalls gets all the calls that were made to CreateTrafficMirrorTarget.
// Check the length with:
//     len(mockedClient.CreateTrafficMirrorTargetCalls())
func (mock *ClientMock) CreateTrafficMirrorTargetCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTrafficMirrorTargetInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTrafficMirrorTargetInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTrafficMirrorTarget.RLock()
	calls = mock.calls.CreateTrafficMirrorTarget
	mock.lockCreateTrafficMirrorTarget.RUnlock()
	return calls
}

// CreateTransitGateway calls CreateTransitGatewayFunc.
func (mock *ClientMock) CreateTransitGateway(ctx context.Context, params *ec2.CreateTransitGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayOutput, error) {
	if mock.CreateTransitGatewayFunc == nil {
		panic("ClientMock.CreateTransitGatewayFunc: method is nil but Client.CreateTransitGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTransitGateway.Lock()
	mock.calls.CreateTransitGateway = append(mock.calls.CreateTransitGateway, callInfo)
	mock.lockCreateTransitGateway.Unlock()
	return mock.CreateTransitGatewayFunc(ctx, params, optFns...)
}

// CreateTransitGatewayCalls gets all the calls that were made to CreateTransitGateway.
// Check the length with:
//     len(mockedClient.CreateTransitGatewayCalls())
func (mock *ClientMock) CreateTransitGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTransitGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTransitGateway.RLock()
	calls = mock.calls.CreateTransitGateway
	mock.lockCreateTransitGateway.RUnlock()
	return calls
}

// CreateTransitGatewayConnect calls CreateTransitGatewayConnectFunc.
func (mock *ClientMock) CreateTransitGatewayConnect(ctx context.Context, params *ec2.CreateTransitGatewayConnectInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayConnectOutput, error) {
	if mock.CreateTransitGatewayConnectFunc == nil {
		panic("ClientMock.CreateTransitGatewayConnectFunc: method is nil but Client.CreateTransitGatewayConnect was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayConnectInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTransitGatewayConnect.Lock()
	mock.calls.CreateTransitGatewayConnect = append(mock.calls.CreateTransitGatewayConnect, callInfo)
	mock.lockCreateTransitGatewayConnect.Unlock()
	return mock.CreateTransitGatewayConnectFunc(ctx, params, optFns...)
}

// CreateTransitGatewayConnectCalls gets all the calls that were made to CreateTransitGatewayConnect.
// Check the length with:
//     len(mockedClient.CreateTransitGatewayConnectCalls())
func (mock *ClientMock) CreateTransitGatewayConnectCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTransitGatewayConnectInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayConnectInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTransitGatewayConnect.RLock()
	calls = mock.calls.CreateTransitGatewayConnect
	mock.lockCreateTransitGatewayConnect.RUnlock()
	return calls
}

// CreateTransitGatewayConnectPeer calls CreateTransitGatewayConnectPeerFunc.
func (mock *ClientMock) CreateTransitGatewayConnectPeer(ctx context.Context, params *ec2.CreateTransitGatewayConnectPeerInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayConnectPeerOutput, error) {
	if mock.CreateTransitGatewayConnectPeerFunc == nil {
		panic("ClientMock.CreateTransitGatewayConnectPeerFunc: method is nil but Client.CreateTransitGatewayConnectPeer was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayConnectPeerInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTransitGatewayConnectPeer.Lock()
	mock.calls.CreateTransitGatewayConnectPeer = append(mock.calls.CreateTransitGatewayConnectPeer, callInfo)
	mock.lockCreateTransitGatewayConnectPeer.Unlock()
	return mock.CreateTransitGatewayConnectPeerFunc(ctx, params, optFns...)
}

// CreateTransitGatewayConnectPeerCalls gets all the calls that were made to CreateTransitGatewayConnectPeer.
// Check the length with:
//     len(mockedClient.CreateTransitGatewayConnectPeerCalls())
func (mock *ClientMock) CreateTransitGatewayConnectPeerCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTransitGatewayConnectPeerInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayConnectPeerInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTransitGatewayConnectPeer.RLock()
	calls = mock.calls.CreateTransitGatewayConnectPeer
	mock.lockCreateTransitGatewayConnectPeer.RUnlock()
	return calls
}

// CreateTransitGatewayMulticastDomain calls CreateTransitGatewayMulticastDomainFunc.
func (mock *ClientMock) CreateTransitGatewayMulticastDomain(ctx context.Context, params *ec2.CreateTransitGatewayMulticastDomainInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayMulticastDomainOutput, error) {
	if mock.CreateTransitGatewayMulticastDomainFunc == nil {
		panic("ClientMock.CreateTransitGatewayMulticastDomainFunc: method is nil but Client.CreateTransitGatewayMulticastDomain was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayMulticastDomainInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTransitGatewayMulticastDomain.Lock()
	mock.calls.CreateTransitGatewayMulticastDomain = append(mock.calls.CreateTransitGatewayMulticastDomain, callInfo)
	mock.lockCreateTransitGatewayMulticastDomain.Unlock()
	return mock.CreateTransitGatewayMulticastDomainFunc(ctx, params, optFns...)
}

// CreateTransitGatewayMulticastDomainCalls gets all the calls that were made to CreateTransitGatewayMulticastDomain.
// Check the length with:
//     len(mockedClient.CreateTransitGatewayMulticastDomainCalls())
func (mock *ClientMock) CreateTransitGatewayMulticastDomainCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTransitGatewayMulticastDomainInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayMulticastDomainInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTransitGatewayMulticastDomain.RLock()
	calls = mock.calls.CreateTransitGatewayMulticastDomain
	mock.lockCreateTransitGatewayMulticastDomain.RUnlock()
	return calls
}

// CreateTransitGatewayPeeringAttachment calls CreateTransitGatewayPeeringAttachmentFunc.
func (mock *ClientMock) CreateTransitGatewayPeeringAttachment(ctx context.Context, params *ec2.CreateTransitGatewayPeeringAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error) {
	if mock.CreateTransitGatewayPeeringAttachmentFunc == nil {
		panic("ClientMock.CreateTransitGatewayPeeringAttachmentFunc: method is nil but Client.CreateTransitGatewayPeeringAttachment was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayPeeringAttachmentInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTransitGatewayPeeringAttachment.Lock()
	mock.calls.CreateTransitGatewayPeeringAttachment = append(mock.calls.CreateTransitGatewayPeeringAttachment, callInfo)
	mock.lockCreateTransitGatewayPeeringAttachment.Unlock()
	return mock.CreateTransitGatewayPeeringAttachmentFunc(ctx, params, optFns...)
}

// CreateTransitGatewayPeeringAttachmentCalls gets all the calls that were made to CreateTransitGatewayPeeringAttachment.
// Check the length with:
//     len(mockedClient.CreateTransitGatewayPeeringAttachmentCalls())
func (mock *ClientMock) CreateTransitGatewayPeeringAttachmentCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTransitGatewayPeeringAttachmentInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayPeeringAttachmentInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTransitGatewayPeeringAttachment.RLock()
	calls = mock.calls.CreateTransitGatewayPeeringAttachment
	mock.lockCreateTransitGatewayPeeringAttachment.RUnlock()
	return calls
}

// CreateTransitGatewayPolicyTable calls CreateTransitGatewayPolicyTableFunc.
func (mock *ClientMock) CreateTransitGatewayPolicyTable(ctx context.Context, params *ec2.CreateTransitGatewayPolicyTableInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayPolicyTableOutput, error) {
	if mock.CreateTransitGatewayPolicyTableFunc == nil {
		panic("ClientMock.CreateTransitGatewayPolicyTableFunc: method is nil but Client.CreateTransitGatewayPolicyTable was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayPolicyTableInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTransitGatewayPolicyTable.Lock()
	mock.calls.CreateTransitGatewayPolicyTable = append(mock.calls.CreateTransitGatewayPolicyTable, callInfo)
	mock.lockCreateTransitGatewayPolicyTable.Unlock()
	return mock.CreateTransitGatewayPolicyTableFunc(ctx, params, optFns...)
}

// CreateTransitGatewayPolicyTableCalls gets all the calls that were made to CreateTransitGatewayPolicyTable.
// Check the length with:
//     len(mockedClient.CreateTransitGatewayPolicyTableCalls())
func (mock *ClientMock) CreateTransitGatewayPolicyTableCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTransitGatewayPolicyTableInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayPolicyTableInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTransitGatewayPolicyTable.RLock()
	calls = mock.calls.CreateTransitGatewayPolicyTable
	mock.lockCreateTransitGatewayPolicyTable.RUnlock()
	return calls
}

// CreateTransitGatewayPrefixListReference calls CreateTransitGatewayPrefixListReferenceFunc.
func (mock *ClientMock) CreateTransitGatewayPrefixListReference(ctx context.Context, params *ec2.CreateTransitGatewayPrefixListReferenceInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayPrefixListReferenceOutput, error) {
	if mock.CreateTransitGatewayPrefixListReferenceFunc == nil {
		panic("ClientMock.CreateTransitGatewayPrefixListReferenceFunc: method is nil but Client.CreateTransitGatewayPrefixListReference was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayPrefixListReferenceInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTransitGatewayPrefixListReference.Lock()
	mock.calls.CreateTransitGatewayPrefixListReference = append(mock.calls.CreateTransitGatewayPrefixListReference, callInfo)
	mock.lockCreateTransitGatewayPrefixListReference.Unlock()
	return mock.CreateTransitGatewayPrefixListReferenceFunc(ctx, params, optFns...)
}

// CreateTransitGatewayPrefixListReferenceCalls gets all the calls that were made to CreateTransitGatewayPrefixListReference.
// Check the length with:
//     len(mockedClient.CreateTransitGatewayPrefixListReferenceCalls())
func (mock *ClientMock) CreateTransitGatewayPrefixListReferenceCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTransitGatewayPrefixListReferenceInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayPrefixListReferenceInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTransitGatewayPrefixListReference.RLock()
	calls = mock.calls.CreateTransitGatewayPrefixListReference
	mock.lockCreateTransitGatewayPrefixListReference.RUnlock()
	return calls
}

// CreateTransitGatewayRoute calls CreateTransitGatewayRouteFunc.
func (mock *ClientMock) CreateTransitGatewayRoute(ctx context.Context, params *ec2.CreateTransitGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayRouteOutput, error) {
	if mock.CreateTransitGatewayRouteFunc == nil {
		panic("ClientMock.CreateTransitGatewayRouteFunc: method is nil but Client.CreateTransitGatewayRoute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayRouteInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTransitGatewayRoute.Lock()
	mock.calls.CreateTransitGatewayRoute = append(mock.calls.CreateTransitGatewayRoute, callInfo)
	mock.lockCreateTransitGatewayRoute.Unlock()
	return mock.CreateTransitGatewayRouteFunc(ctx, params, optFns...)
}

// CreateTransitGatewayRouteCalls gets all the calls that were made to CreateTransitGatewayRoute.
// Check the length with:
//     len(mockedClient.CreateTransitGatewayRouteCalls())
func (mock *ClientMock) CreateTransitGatewayRouteCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTransitGatewayRouteInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayRouteInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTransitGatewayRoute.RLock()
	calls = mock.calls.CreateTransitGatewayRoute
	mock.lockCreateTransitGatewayRoute.RUnlock()
	return calls
}

// CreateTransitGatewayRouteTable calls CreateTransitGatewayRouteTableFunc.
func (mock *ClientMock) CreateTransitGatewayRouteTable(ctx context.Context, params *ec2.CreateTransitGatewayRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
	if mock.CreateTransitGatewayRouteTableFunc == nil {
		panic("ClientMock.CreateTransitGatewayRouteTableFunc: method is nil but Client.CreateTransitGatewayRouteTable was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayRouteTableInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTransitGatewayRouteTable.Lock()
	mock.calls.CreateTransitGatewayRouteTable = append(mock.calls.CreateTransitGatewayRouteTable, callInfo)
	mock.lockCreateTransitGatewayRouteTable.Unlock()
	return mock.CreateTransitGatewayRouteTableFunc(ctx, params, optFns...)
}

// CreateTransitGatewayRouteTableCalls gets all the calls that were made to CreateTransitGatewayRouteTable.
// Check the length with:
//     len(mockedClient.CreateTransitGatewayRouteTableCalls())
func (mock *ClientMock) CreateTransitGatewayRouteTableCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTransitGatewayRouteTableInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayRouteTableInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTransitGatewayRouteTable.RLock()
	calls = mock.calls.CreateTransitGatewayRouteTable
	mock.lockCreateTransitGatewayRouteTable.RUnlock()
	return calls
}

// CreateTransitGatewayRouteTableAnnouncement calls CreateTransitGatewayRouteTableAnnouncementFunc.
func (mock *ClientMock) CreateTransitGatewayRouteTableAnnouncement(ctx context.Context, params *ec2.CreateTransitGatewayRouteTableAnnouncementInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayRouteTableAnnouncementOutput, error) {
	if mock.CreateTransitGatewayRouteTableAnnouncementFunc == nil {
		panic("ClientMock.CreateTransitGatewayRouteTableAnnouncementFunc: method is nil but Client.CreateTransitGatewayRouteTableAnnouncement was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayRouteTableAnnouncementInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTransitGatewayRouteTableAnnouncement.Lock()
	mock.calls.CreateTransitGatewayRouteTableAnnouncement = append(mock.calls.CreateTransitGatewayRouteTableAnnouncement, callInfo)
	mock.lockCreateTransitGatewayRouteTableAnnouncement.Unlock()
	return mock.CreateTransitGatewayRouteTableAnnouncementFunc(ctx, params, optFns...)
}

// CreateTransitGatewayRouteTableAnnouncementCalls gets all the calls that were made to CreateTransitGatewayRouteTableAnnouncement.
// Check the length with:
//     len(mockedClient.CreateTransitGatewayRouteTableAnnouncementCalls())
func (mock *ClientMock) CreateTransitGatewayRouteTableAnnouncementCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTransitGatewayRouteTableAnnouncementInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayRouteTableAnnouncementInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTransitGatewayRouteTableAnnouncement.RLock()
	calls = mock.calls.CreateTransitGatewayRouteTableAnnouncement
	mock.lockCreateTransitGatewayRouteTableAnnouncement.RUnlock()
	return calls
}

// CreateTransitGatewayVpcAttachment calls CreateTransitGatewayVpcAttachmentFunc.
func (mock *ClientMock) CreateTransitGatewayVpcAttachment(ctx context.Context, params *ec2.CreateTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
	if mock.CreateTransitGatewayVpcAttachmentFunc == nil {
		panic("ClientMock.CreateTransitGatewayVpcAttachmentFunc: method is nil but Client.CreateTransitGatewayVpcAttachment was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayVpcAttachmentInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateTransitGatewayVpcAttachment.Lock()
	mock.calls.CreateTransitGatewayVpcAttachment = append(mock.calls.CreateTransitGatewayVpcAttachment, callInfo)
	mock.lockCreateTransitGatewayVpcAttachment.Unlock()
	return mock.CreateTransitGatewayVpcAttachmentFunc(ctx, params, optFns...)
}

// CreateTransitGatewayVpcAttachmentCalls gets all the calls that were made to CreateTransitGatewayVpcAttachment.
// Check the length with:
//     len(mockedClient.CreateTransitGatewayVpcAttachmentCalls())
func (mock *ClientMock) CreateTransitGatewayVpcAttachmentCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateTransitGatewayVpcAttachmentInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateTransitGatewayVpcAttachmentInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateTransitGatewayVpcAttachment.RLock()
	calls = mock.calls.CreateTransitGatewayVpcAttachment
	mock.lockCreateTransitGatewayVpcAttachment.RUnlock()
	return calls
}

// CreateVolume calls CreateVolumeFunc.
func (mock *ClientMock) CreateVolume(ctx context.Context, params *ec2.CreateVolumeInput, optFns ...func(*ec2.Options)) (*ec2.CreateVolumeOutput, error) {
	if mock.CreateVolumeFunc == nil {
		panic("ClientMock.CreateVolumeFunc: method is nil but Client.CreateVolume was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateVolumeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateVolume.Lock()
	mock.calls.CreateVolume = append(mock.calls.CreateVolume, callInfo)
	mock.lockCreateVolume.Unlock()
	return mock.CreateVolumeFunc(ctx, params, optFns...)
}

// CreateVolumeCalls gets all the calls that were made to CreateVolume.
// Check the length with:
//     len(mockedClient.CreateVolumeCalls())
func (mock *ClientMock) CreateVolumeCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateVolumeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateVolumeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateVolume.RLock()
	calls = mock.calls.CreateVolume
	mock.lockCreateVolume.RUnlock()
	return calls
}

// CreateVpc calls CreateVpcFunc.
func (mock *ClientMock) CreateVpc(ctx context.Context, params *ec2.CreateVpcInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcOutput, error) {
	if mock.CreateVpcFunc == nil {
		panic("ClientMock.CreateVpcFunc: method is nil but Client.CreateVpc was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateVpcInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateVpc.Lock()
	mock.calls.CreateVpc = append(mock.calls.CreateVpc, callInfo)
	mock.lockCreateVpc.Unlock()
	return mock.CreateVpcFunc(ctx, params, optFns...)
}

// CreateVpcCalls gets all the calls that were made to CreateVpc.
// Check the length with:
//     len(mockedClient.CreateVpcCalls())
func (mock *ClientMock) CreateVpcCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateVpcInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateVpcInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateVpc.RLock()
	calls = mock.calls.CreateVpc
	mock.lockCreateVpc.RUnlock()
	return calls
}

// CreateVpcEndpoint calls CreateVpcEndpointFunc.
func (mock *ClientMock) CreateVpcEndpoint(ctx context.Context, params *ec2.CreateVpcEndpointInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcEndpointOutput, error) {
	if mock.CreateVpcEndpointFunc == nil {
		panic("ClientMock.CreateVpcEndpointFunc: method is nil but Client.CreateVpcEndpoint was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateVpcEndpointInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateVpcEndpoint.Lock()
	mock.calls.CreateVpcEndpoint = append(mock.calls.CreateVpcEndpoint, callInfo)
	mock.lockCreateVpcEndpoint.Unlock()
	return mock.CreateVpcEndpointFunc(ctx, params, optFns...)
}

// CreateVpcEndpointCalls gets all the calls that were made to CreateVpcEndpoint.
// Check the length with:
//     len(mockedClient.CreateVpcEndpointCalls())
func (mock *ClientMock) CreateVpcEndpointCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateVpcEndpointInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateVpcEndpointInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateVpcEndpoint.RLock()
	calls = mock.calls.CreateVpcEndpoint
	mock.lockCreateVpcEndpoint.RUnlock()
	return calls
}

// CreateVpcEndpointConnectionNotification calls CreateVpcEndpointConnectionNotificationFunc.
func (mock *ClientMock) CreateVpcEndpointConnectionNotification(ctx context.Context, params *ec2.CreateVpcEndpointConnectionNotificationInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
	if mock.CreateVpcEndpointConnectionNotificationFunc == nil {
		panic("ClientMock.CreateVpcEndpointConnectionNotificationFunc: method is nil but Client.CreateVpcEndpointConnectionNotification was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateVpcEndpointConnectionNotificationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateVpcEndpointConnectionNotification.Lock()
	mock.calls.CreateVpcEndpointConnectionNotification = append(mock.calls.CreateVpcEndpointConnectionNotification, callInfo)
	mock.lockCreateVpcEndpointConnectionNotification.Unlock()
	return mock.CreateVpcEndpointConnectionNotificationFunc(ctx, params, optFns...)
}

// CreateVpcEndpointConnectionNotificationCalls gets all the calls that were made to CreateVpcEndpointConnectionNotification.
// Check the length with:
//     len(mockedClient.CreateVpcEndpointConnectionNotificationCalls())
func (mock *ClientMock) CreateVpcEndpointConnectionNotificationCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateVpcEndpointConnectionNotificationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateVpcEndpointConnectionNotificationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateVpcEndpointConnectionNotification.RLock()
	calls = mock.calls.CreateVpcEndpointConnectionNotification
	mock.lockCreateVpcEndpointConnectionNotification.RUnlock()
	return calls
}

// CreateVpcEndpointServiceConfiguration calls CreateVpcEndpointServiceConfigurationFunc.
func (mock *ClientMock) CreateVpcEndpointServiceConfiguration(ctx context.Context, params *ec2.CreateVpcEndpointServiceConfigurationInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
	if mock.CreateVpcEndpointServiceConfigurationFunc == nil {
		panic("ClientMock.CreateVpcEndpointServiceConfigurationFunc: method is nil but Client.CreateVpcEndpointServiceConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateVpcEndpointServiceConfigurationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateVpcEndpointServiceConfiguration.Lock()
	mock.calls.CreateVpcEndpointServiceConfiguration = append(mock.calls.CreateVpcEndpointServiceConfiguration, callInfo)
	mock.lockCreateVpcEndpointServiceConfiguration.Unlock()
	return mock.CreateVpcEndpointServiceConfigurationFunc(ctx, params, optFns...)
}

// CreateVpcEndpointServiceConfigurationCalls gets all the calls that were made to CreateVpcEndpointServiceConfiguration.
// Check the length with:
//     len(mockedClient.CreateVpcEndpointServiceConfigurationCalls())
func (mock *ClientMock) CreateVpcEndpointServiceConfigurationCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateVpcEndpointServiceConfigurationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateVpcEndpointServiceConfigurationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateVpcEndpointServiceConfiguration.RLock()
	calls = mock.calls.CreateVpcEndpointServiceConfiguration
	mock.lockCreateVpcEndpointServiceConfiguration.RUnlock()
	return calls
}

// CreateVpcPeeringConnection calls CreateVpcPeeringConnectionFunc.
func (mock *ClientMock) CreateVpcPeeringConnection(ctx context.Context, params *ec2.CreateVpcPeeringConnectionInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpcPeeringConnectionOutput, error) {
	if mock.CreateVpcPeeringConnectionFunc == nil {
		panic("ClientMock.CreateVpcPeeringConnectionFunc: method is nil but Client.CreateVpcPeeringConnection was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateVpcPeeringConnectionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateVpcPeeringConnection.Lock()
	mock.calls.CreateVpcPeeringConnection = append(mock.calls.CreateVpcPeeringConnection, callInfo)
	mock.lockCreateVpcPeeringConnection.Unlock()
	return mock.CreateVpcPeeringConnectionFunc(ctx, params, optFns...)
}

// CreateVpcPeeringConnectionCalls gets all the calls that were made to CreateVpcPeeringConnection.
// Check the length with:
//     len(mockedClient.CreateVpcPeeringConnectionCalls())
func (mock *ClientMock) CreateVpcPeeringConnectionCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateVpcPeeringConnectionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateVpcPeeringConnectionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateVpcPeeringConnection.RLock()
	calls = mock.calls.CreateVpcPeeringConnection
	mock.lockCreateVpcPeeringConnection.RUnlock()
	return calls
}

// CreateVpnConnection calls CreateVpnConnectionFunc.
func (mock *ClientMock) CreateVpnConnection(ctx context.Context, params *ec2.CreateVpnConnectionInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpnConnectionOutput, error) {
	if mock.CreateVpnConnectionFunc == nil {
		panic("ClientMock.CreateVpnConnectionFunc: method is nil but Client.CreateVpnConnection was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateVpnConnectionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateVpnConnection.Lock()
	mock.calls.CreateVpnConnection = append(mock.calls.CreateVpnConnection, callInfo)
	mock.lockCreateVpnConnection.Unlock()
	return mock.CreateVpnConnectionFunc(ctx, params, optFns...)
}

// CreateVpnConnectionCalls gets all the calls that were made to CreateVpnConnection.
// Check the length with:
//     len(mockedClient.CreateVpnConnectionCalls())
func (mock *ClientMock) CreateVpnConnectionCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateVpnConnectionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateVpnConnectionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateVpnConnection.RLock()
	calls = mock.calls.CreateVpnConnection
	mock.lockCreateVpnConnection.RUnlock()
	return calls
}

// CreateVpnConnectionRoute calls CreateVpnConnectionRouteFunc.
func (mock *ClientMock) CreateVpnConnectionRoute(ctx context.Context, params *ec2.CreateVpnConnectionRouteInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpnConnectionRouteOutput, error) {
	if mock.CreateVpnConnectionRouteFunc == nil {
		panic("ClientMock.CreateVpnConnectionRouteFunc: method is nil but Client.CreateVpnConnectionRoute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateVpnConnectionRouteInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateVpnConnectionRoute.Lock()
	mock.calls.CreateVpnConnectionRoute = append(mock.calls.CreateVpnConnectionRoute, callInfo)
	mock.lockCreateVpnConnectionRoute.Unlock()
	return mock.CreateVpnConnectionRouteFunc(ctx, params, optFns...)
}

// CreateVpnConnectionRouteCalls gets all the calls that were made to CreateVpnConnectionRoute.
// Check the length with:
//     len(mockedClient.CreateVpnConnectionRouteCalls())
func (mock *ClientMock) CreateVpnConnectionRouteCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateVpnConnectionRouteInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateVpnConnectionRouteInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateVpnConnectionRoute.RLock()
	calls = mock.calls.CreateVpnConnectionRoute
	mock.lockCreateVpnConnectionRoute.RUnlock()
	return calls
}

// CreateVpnGateway calls CreateVpnGatewayFunc.
func (mock *ClientMock) CreateVpnGateway(ctx context.Context, params *ec2.CreateVpnGatewayInput, optFns ...func(*ec2.Options)) (*ec2.CreateVpnGatewayOutput, error) {
	if mock.CreateVpnGatewayFunc == nil {
		panic("ClientMock.CreateVpnGatewayFunc: method is nil but Client.CreateVpnGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.CreateVpnGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockCreateVpnGateway.Lock()
	mock.calls.CreateVpnGateway = append(mock.calls.CreateVpnGateway, callInfo)
	mock.lockCreateVpnGateway.Unlock()
	return mock.CreateVpnGatewayFunc(ctx, params, optFns...)
}

// CreateVpnGatewayCalls gets all the calls that were made to CreateVpnGateway.
// Check the length with:
//     len(mockedClient.CreateVpnGatewayCalls())
func (mock *ClientMock) CreateVpnGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.CreateVpnGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.CreateVpnGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockCreateVpnGateway.RLock()
	calls = mock.calls.CreateVpnGateway
	mock.lockCreateVpnGateway.RUnlock()
	return calls
}

// DeleteCarrierGateway calls DeleteCarrierGatewayFunc.
func (mock *ClientMock) DeleteCarrierGateway(ctx context.Context, params *ec2.DeleteCarrierGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteCarrierGatewayOutput, error) {
	if mock.DeleteCarrierGatewayFunc == nil {
		panic("ClientMock.DeleteCarrierGatewayFunc: method is nil but Client.DeleteCarrierGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteCarrierGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteCarrierGateway.Lock()
	mock.calls.DeleteCarrierGateway = append(mock.calls.DeleteCarrierGateway, callInfo)
	mock.lockDeleteCarrierGateway.Unlock()
	return mock.DeleteCarrierGatewayFunc(ctx, params, optFns...)
}

// DeleteCarrierGatewayCalls gets all the calls that were made to DeleteCarrierGateway.
// Check the length with:
//     len(mockedClient.DeleteCarrierGatewayCalls())
func (mock *ClientMock) DeleteCarrierGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteCarrierGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteCarrierGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteCarrierGateway.RLock()
	calls = mock.calls.DeleteCarrierGateway
	mock.lockDeleteCarrierGateway.RUnlock()
	return calls
}

// DeleteClientVpnEndpoint calls DeleteClientVpnEndpointFunc.
func (mock *ClientMock) DeleteClientVpnEndpoint(ctx context.Context, params *ec2.DeleteClientVpnEndpointInput, optFns ...func(*ec2.Options)) (*ec2.DeleteClientVpnEndpointOutput, error) {
	if mock.DeleteClientVpnEndpointFunc == nil {
		panic("ClientMock.DeleteClientVpnEndpointFunc: method is nil but Client.DeleteClientVpnEndpoint was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteClientVpnEndpointInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteClientVpnEndpoint.Lock()
	mock.calls.DeleteClientVpnEndpoint = append(mock.calls.DeleteClientVpnEndpoint, callInfo)
	mock.lockDeleteClientVpnEndpoint.Unlock()
	return mock.DeleteClientVpnEndpointFunc(ctx, params, optFns...)
}

// DeleteClientVpnEndpointCalls gets all the calls that were made to DeleteClientVpnEndpoint.
// Check the length with:
//     len(mockedClient.DeleteClientVpnEndpointCalls())
func (mock *ClientMock) DeleteClientVpnEndpointCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteClientVpnEndpointInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteClientVpnEndpointInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteClientVpnEndpoint.RLock()
	calls = mock.calls.DeleteClientVpnEndpoint
	mock.lockDeleteClientVpnEndpoint.RUnlock()
	return calls
}

// DeleteClientVpnRoute calls DeleteClientVpnRouteFunc.
func (mock *ClientMock) DeleteClientVpnRoute(ctx context.Context, params *ec2.DeleteClientVpnRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteClientVpnRouteOutput, error) {
	if mock.DeleteClientVpnRouteFunc == nil {
		panic("ClientMock.DeleteClientVpnRouteFunc: method is nil but Client.DeleteClientVpnRoute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteClientVpnRouteInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteClientVpnRoute.Lock()
	mock.calls.DeleteClientVpnRoute = append(mock.calls.DeleteClientVpnRoute, callInfo)
	mock.lockDeleteClientVpnRoute.Unlock()
	return mock.DeleteClientVpnRouteFunc(ctx, params, optFns...)
}

// DeleteClientVpnRouteCalls gets all the calls that were made to DeleteClientVpnRoute.
// Check the length with:
//     len(mockedClient.DeleteClientVpnRouteCalls())
func (mock *ClientMock) DeleteClientVpnRouteCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteClientVpnRouteInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteClientVpnRouteInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteClientVpnRoute.RLock()
	calls = mock.calls.DeleteClientVpnRoute
	mock.lockDeleteClientVpnRoute.RUnlock()
	return calls
}

// DeleteCustomerGateway calls DeleteCustomerGatewayFunc.
func (mock *ClientMock) DeleteCustomerGateway(ctx context.Context, params *ec2.DeleteCustomerGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteCustomerGatewayOutput, error) {
	if mock.DeleteCustomerGatewayFunc == nil {
		panic("ClientMock.DeleteCustomerGatewayFunc: method is nil but Client.DeleteCustomerGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteCustomerGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteCustomerGateway.Lock()
	mock.calls.DeleteCustomerGateway = append(mock.calls.DeleteCustomerGateway, callInfo)
	mock.lockDeleteCustomerGateway.Unlock()
	return mock.DeleteCustomerGatewayFunc(ctx, params, optFns...)
}

// DeleteCustomerGatewayCalls gets all the calls that were made to DeleteCustomerGateway.
// Check the length with:
//     len(mockedClient.DeleteCustomerGatewayCalls())
func (mock *ClientMock) DeleteCustomerGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteCustomerGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteCustomerGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteCustomerGateway.RLock()
	calls = mock.calls.DeleteCustomerGateway
	mock.lockDeleteCustomerGateway.RUnlock()
	return calls
}

// DeleteDhcpOptions calls DeleteDhcpOptionsFunc.
func (mock *ClientMock) DeleteDhcpOptions(ctx context.Context, params *ec2.DeleteDhcpOptionsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteDhcpOptionsOutput, error) {
	if mock.DeleteDhcpOptionsFunc == nil {
		panic("ClientMock.DeleteDhcpOptionsFunc: method is nil but Client.DeleteDhcpOptions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteDhcpOptionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteDhcpOptions.Lock()
	mock.calls.DeleteDhcpOptions = append(mock.calls.DeleteDhcpOptions, callInfo)
	mock.lockDeleteDhcpOptions.Unlock()
	return mock.DeleteDhcpOptionsFunc(ctx, params, optFns...)
}

// DeleteDhcpOptionsCalls gets all the calls that were made to DeleteDhcpOptions.
// Check the length with:
//     len(mockedClient.DeleteDhcpOptionsCalls())
func (mock *ClientMock) DeleteDhcpOptionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteDhcpOptionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteDhcpOptionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteDhcpOptions.RLock()
	calls = mock.calls.DeleteDhcpOptions
	mock.lockDeleteDhcpOptions.RUnlock()
	return calls
}

// DeleteEgressOnlyInternetGateway calls DeleteEgressOnlyInternetGatewayFunc.
func (mock *ClientMock) DeleteEgressOnlyInternetGateway(ctx context.Context, params *ec2.DeleteEgressOnlyInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
	if mock.DeleteEgressOnlyInternetGatewayFunc == nil {
		panic("ClientMock.DeleteEgressOnlyInternetGatewayFunc: method is nil but Client.DeleteEgressOnlyInternetGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteEgressOnlyInternetGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteEgressOnlyInternetGateway.Lock()
	mock.calls.DeleteEgressOnlyInternetGateway = append(mock.calls.DeleteEgressOnlyInternetGateway, callInfo)
	mock.lockDeleteEgressOnlyInternetGateway.Unlock()
	return mock.DeleteEgressOnlyInternetGatewayFunc(ctx, params, optFns...)
}

// DeleteEgressOnlyInternetGatewayCalls gets all the calls that were made to DeleteEgressOnlyInternetGateway.
// Check the length with:
//     len(mockedClient.DeleteEgressOnlyInternetGatewayCalls())
func (mock *ClientMock) DeleteEgressOnlyInternetGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteEgressOnlyInternetGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteEgressOnlyInternetGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteEgressOnlyInternetGateway.RLock()
	calls = mock.calls.DeleteEgressOnlyInternetGateway
	mock.lockDeleteEgressOnlyInternetGateway.RUnlock()
	return calls
}

// DeleteFleets calls DeleteFleetsFunc.
func (mock *ClientMock) DeleteFleets(ctx context.Context, params *ec2.DeleteFleetsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteFleetsOutput, error) {
	if mock.DeleteFleetsFunc == nil {
		panic("ClientMock.DeleteFleetsFunc: method is nil but Client.DeleteFleets was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteFleetsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteFleets.Lock()
	mock.calls.DeleteFleets = append(mock.calls.DeleteFleets, callInfo)
	mock.lockDeleteFleets.Unlock()
	return mock.DeleteFleetsFunc(ctx, params, optFns...)
}

// DeleteFleetsCalls gets all the calls that were made to DeleteFleets.
// Check the length with:
//     len(mockedClient.DeleteFleetsCalls())
func (mock *ClientMock) DeleteFleetsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteFleetsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteFleetsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteFleets.RLock()
	calls = mock.calls.DeleteFleets
	mock.lockDeleteFleets.RUnlock()
	return calls
}

// DeleteFlowLogs calls DeleteFlowLogsFunc.
func (mock *ClientMock) DeleteFlowLogs(ctx context.Context, params *ec2.DeleteFlowLogsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteFlowLogsOutput, error) {
	if mock.DeleteFlowLogsFunc == nil {
		panic("ClientMock.DeleteFlowLogsFunc: method is nil but Client.DeleteFlowLogs was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteFlowLogsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteFlowLogs.Lock()
	mock.calls.DeleteFlowLogs = append(mock.calls.DeleteFlowLogs, callInfo)
	mock.lockDeleteFlowLogs.Unlock()
	return mock.DeleteFlowLogsFunc(ctx, params, optFns...)
}

// DeleteFlowLogsCalls gets all the calls that were made to DeleteFlowLogs.
// Check the length with:
//     len(mockedClient.DeleteFlowLogsCalls())
func (mock *ClientMock) DeleteFlowLogsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteFlowLogsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteFlowLogsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteFlowLogs.RLock()
	calls = mock.calls.DeleteFlowLogs
	mock.lockDeleteFlowLogs.RUnlock()
	return calls
}

// DeleteFpgaImage calls DeleteFpgaImageFunc.
func (mock *ClientMock) DeleteFpgaImage(ctx context.Context, params *ec2.DeleteFpgaImageInput, optFns ...func(*ec2.Options)) (*ec2.DeleteFpgaImageOutput, error) {
	if mock.DeleteFpgaImageFunc == nil {
		panic("ClientMock.DeleteFpgaImageFunc: method is nil but Client.DeleteFpgaImage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteFpgaImageInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteFpgaImage.Lock()
	mock.calls.DeleteFpgaImage = append(mock.calls.DeleteFpgaImage, callInfo)
	mock.lockDeleteFpgaImage.Unlock()
	return mock.DeleteFpgaImageFunc(ctx, params, optFns...)
}

// DeleteFpgaImageCalls gets all the calls that were made to DeleteFpgaImage.
// Check the length with:
//     len(mockedClient.DeleteFpgaImageCalls())
func (mock *ClientMock) DeleteFpgaImageCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteFpgaImageInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteFpgaImageInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteFpgaImage.RLock()
	calls = mock.calls.DeleteFpgaImage
	mock.lockDeleteFpgaImage.RUnlock()
	return calls
}

// DeleteInstanceEventWindow calls DeleteInstanceEventWindowFunc.
func (mock *ClientMock) DeleteInstanceEventWindow(ctx context.Context, params *ec2.DeleteInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.DeleteInstanceEventWindowOutput, error) {
	if mock.DeleteInstanceEventWindowFunc == nil {
		panic("ClientMock.DeleteInstanceEventWindowFunc: method is nil but Client.DeleteInstanceEventWindow was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteInstanceEventWindowInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteInstanceEventWindow.Lock()
	mock.calls.DeleteInstanceEventWindow = append(mock.calls.DeleteInstanceEventWindow, callInfo)
	mock.lockDeleteInstanceEventWindow.Unlock()
	return mock.DeleteInstanceEventWindowFunc(ctx, params, optFns...)
}

// DeleteInstanceEventWindowCalls gets all the calls that were made to DeleteInstanceEventWindow.
// Check the length with:
//     len(mockedClient.DeleteInstanceEventWindowCalls())
func (mock *ClientMock) DeleteInstanceEventWindowCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteInstanceEventWindowInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteInstanceEventWindowInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteInstanceEventWindow.RLock()
	calls = mock.calls.DeleteInstanceEventWindow
	mock.lockDeleteInstanceEventWindow.RUnlock()
	return calls
}

// DeleteInternetGateway calls DeleteInternetGatewayFunc.
func (mock *ClientMock) DeleteInternetGateway(ctx context.Context, params *ec2.DeleteInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteInternetGatewayOutput, error) {
	if mock.DeleteInternetGatewayFunc == nil {
		panic("ClientMock.DeleteInternetGatewayFunc: method is nil but Client.DeleteInternetGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteInternetGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteInternetGateway.Lock()
	mock.calls.DeleteInternetGateway = append(mock.calls.DeleteInternetGateway, callInfo)
	mock.lockDeleteInternetGateway.Unlock()
	return mock.DeleteInternetGatewayFunc(ctx, params, optFns...)
}

// DeleteInternetGatewayCalls gets all the calls that were made to DeleteInternetGateway.
// Check the length with:
//     len(mockedClient.DeleteInternetGatewayCalls())
func (mock *ClientMock) DeleteInternetGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteInternetGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteInternetGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteInternetGateway.RLock()
	calls = mock.calls.DeleteInternetGateway
	mock.lockDeleteInternetGateway.RUnlock()
	return calls
}

// DeleteIpam calls DeleteIpamFunc.
func (mock *ClientMock) DeleteIpam(ctx context.Context, params *ec2.DeleteIpamInput, optFns ...func(*ec2.Options)) (*ec2.DeleteIpamOutput, error) {
	if mock.DeleteIpamFunc == nil {
		panic("ClientMock.DeleteIpamFunc: method is nil but Client.DeleteIpam was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteIpamInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteIpam.Lock()
	mock.calls.DeleteIpam = append(mock.calls.DeleteIpam, callInfo)
	mock.lockDeleteIpam.Unlock()
	return mock.DeleteIpamFunc(ctx, params, optFns...)
}

// DeleteIpamCalls gets all the calls that were made to DeleteIpam.
// Check the length with:
//     len(mockedClient.DeleteIpamCalls())
func (mock *ClientMock) DeleteIpamCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteIpamInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteIpamInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteIpam.RLock()
	calls = mock.calls.DeleteIpam
	mock.lockDeleteIpam.RUnlock()
	return calls
}

// DeleteIpamPool calls DeleteIpamPoolFunc.
func (mock *ClientMock) DeleteIpamPool(ctx context.Context, params *ec2.DeleteIpamPoolInput, optFns ...func(*ec2.Options)) (*ec2.DeleteIpamPoolOutput, error) {
	if mock.DeleteIpamPoolFunc == nil {
		panic("ClientMock.DeleteIpamPoolFunc: method is nil but Client.DeleteIpamPool was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteIpamPoolInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteIpamPool.Lock()
	mock.calls.DeleteIpamPool = append(mock.calls.DeleteIpamPool, callInfo)
	mock.lockDeleteIpamPool.Unlock()
	return mock.DeleteIpamPoolFunc(ctx, params, optFns...)
}

// DeleteIpamPoolCalls gets all the calls that were made to DeleteIpamPool.
// Check the length with:
//     len(mockedClient.DeleteIpamPoolCalls())
func (mock *ClientMock) DeleteIpamPoolCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteIpamPoolInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteIpamPoolInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteIpamPool.RLock()
	calls = mock.calls.DeleteIpamPool
	mock.lockDeleteIpamPool.RUnlock()
	return calls
}

// DeleteIpamScope calls DeleteIpamScopeFunc.
func (mock *ClientMock) DeleteIpamScope(ctx context.Context, params *ec2.DeleteIpamScopeInput, optFns ...func(*ec2.Options)) (*ec2.DeleteIpamScopeOutput, error) {
	if mock.DeleteIpamScopeFunc == nil {
		panic("ClientMock.DeleteIpamScopeFunc: method is nil but Client.DeleteIpamScope was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteIpamScopeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteIpamScope.Lock()
	mock.calls.DeleteIpamScope = append(mock.calls.DeleteIpamScope, callInfo)
	mock.lockDeleteIpamScope.Unlock()
	return mock.DeleteIpamScopeFunc(ctx, params, optFns...)
}

// DeleteIpamScopeCalls gets all the calls that were made to DeleteIpamScope.
// Check the length with:
//     len(mockedClient.DeleteIpamScopeCalls())
func (mock *ClientMock) DeleteIpamScopeCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteIpamScopeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteIpamScopeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteIpamScope.RLock()
	calls = mock.calls.DeleteIpamScope
	mock.lockDeleteIpamScope.RUnlock()
	return calls
}

// DeleteKeyPair calls DeleteKeyPairFunc.
func (mock *ClientMock) DeleteKeyPair(ctx context.Context, params *ec2.DeleteKeyPairInput, optFns ...func(*ec2.Options)) (*ec2.DeleteKeyPairOutput, error) {
	if mock.DeleteKeyPairFunc == nil {
		panic("ClientMock.DeleteKeyPairFunc: method is nil but Client.DeleteKeyPair was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteKeyPairInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteKeyPair.Lock()
	mock.calls.DeleteKeyPair = append(mock.calls.DeleteKeyPair, callInfo)
	mock.lockDeleteKeyPair.Unlock()
	return mock.DeleteKeyPairFunc(ctx, params, optFns...)
}

// DeleteKeyPairCalls gets all the calls that were made to DeleteKeyPair.
// Check the length with:
//     len(mockedClient.DeleteKeyPairCalls())
func (mock *ClientMock) DeleteKeyPairCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteKeyPairInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteKeyPairInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteKeyPair.RLock()
	calls = mock.calls.DeleteKeyPair
	mock.lockDeleteKeyPair.RUnlock()
	return calls
}

// DeleteLaunchTemplate calls DeleteLaunchTemplateFunc.
func (mock *ClientMock) DeleteLaunchTemplate(ctx context.Context, params *ec2.DeleteLaunchTemplateInput, optFns ...func(*ec2.Options)) (*ec2.DeleteLaunchTemplateOutput, error) {
	if mock.DeleteLaunchTemplateFunc == nil {
		panic("ClientMock.DeleteLaunchTemplateFunc: method is nil but Client.DeleteLaunchTemplate was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteLaunchTemplateInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteLaunchTemplate.Lock()
	mock.calls.DeleteLaunchTemplate = append(mock.calls.DeleteLaunchTemplate, callInfo)
	mock.lockDeleteLaunchTemplate.Unlock()
	return mock.DeleteLaunchTemplateFunc(ctx, params, optFns...)
}

// DeleteLaunchTemplateCalls gets all the calls that were made to DeleteLaunchTemplate.
// Check the length with:
//     len(mockedClient.DeleteLaunchTemplateCalls())
func (mock *ClientMock) DeleteLaunchTemplateCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteLaunchTemplateInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteLaunchTemplateInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteLaunchTemplate.RLock()
	calls = mock.calls.DeleteLaunchTemplate
	mock.lockDeleteLaunchTemplate.RUnlock()
	return calls
}

// DeleteLaunchTemplateVersions calls DeleteLaunchTemplateVersionsFunc.
func (mock *ClientMock) DeleteLaunchTemplateVersions(ctx context.Context, params *ec2.DeleteLaunchTemplateVersionsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
	if mock.DeleteLaunchTemplateVersionsFunc == nil {
		panic("ClientMock.DeleteLaunchTemplateVersionsFunc: method is nil but Client.DeleteLaunchTemplateVersions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteLaunchTemplateVersionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteLaunchTemplateVersions.Lock()
	mock.calls.DeleteLaunchTemplateVersions = append(mock.calls.DeleteLaunchTemplateVersions, callInfo)
	mock.lockDeleteLaunchTemplateVersions.Unlock()
	return mock.DeleteLaunchTemplateVersionsFunc(ctx, params, optFns...)
}

// DeleteLaunchTemplateVersionsCalls gets all the calls that were made to DeleteLaunchTemplateVersions.
// Check the length with:
//     len(mockedClient.DeleteLaunchTemplateVersionsCalls())
func (mock *ClientMock) DeleteLaunchTemplateVersionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteLaunchTemplateVersionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteLaunchTemplateVersionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteLaunchTemplateVersions.RLock()
	calls = mock.calls.DeleteLaunchTemplateVersions
	mock.lockDeleteLaunchTemplateVersions.RUnlock()
	return calls
}

// DeleteLocalGatewayRoute calls DeleteLocalGatewayRouteFunc.
func (mock *ClientMock) DeleteLocalGatewayRoute(ctx context.Context, params *ec2.DeleteLocalGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteLocalGatewayRouteOutput, error) {
	if mock.DeleteLocalGatewayRouteFunc == nil {
		panic("ClientMock.DeleteLocalGatewayRouteFunc: method is nil but Client.DeleteLocalGatewayRoute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteLocalGatewayRouteInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteLocalGatewayRoute.Lock()
	mock.calls.DeleteLocalGatewayRoute = append(mock.calls.DeleteLocalGatewayRoute, callInfo)
	mock.lockDeleteLocalGatewayRoute.Unlock()
	return mock.DeleteLocalGatewayRouteFunc(ctx, params, optFns...)
}

// DeleteLocalGatewayRouteCalls gets all the calls that were made to DeleteLocalGatewayRoute.
// Check the length with:
//     len(mockedClient.DeleteLocalGatewayRouteCalls())
func (mock *ClientMock) DeleteLocalGatewayRouteCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteLocalGatewayRouteInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteLocalGatewayRouteInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteLocalGatewayRoute.RLock()
	calls = mock.calls.DeleteLocalGatewayRoute
	mock.lockDeleteLocalGatewayRoute.RUnlock()
	return calls
}

// DeleteLocalGatewayRouteTableVpcAssociation calls DeleteLocalGatewayRouteTableVpcAssociationFunc.
func (mock *ClientMock) DeleteLocalGatewayRouteTableVpcAssociation(ctx context.Context, params *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput, optFns ...func(*ec2.Options)) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error) {
	if mock.DeleteLocalGatewayRouteTableVpcAssociationFunc == nil {
		panic("ClientMock.DeleteLocalGatewayRouteTableVpcAssociationFunc: method is nil but Client.DeleteLocalGatewayRouteTableVpcAssociation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteLocalGatewayRouteTableVpcAssociation.Lock()
	mock.calls.DeleteLocalGatewayRouteTableVpcAssociation = append(mock.calls.DeleteLocalGatewayRouteTableVpcAssociation, callInfo)
	mock.lockDeleteLocalGatewayRouteTableVpcAssociation.Unlock()
	return mock.DeleteLocalGatewayRouteTableVpcAssociationFunc(ctx, params, optFns...)
}

// DeleteLocalGatewayRouteTableVpcAssociationCalls gets all the calls that were made to DeleteLocalGatewayRouteTableVpcAssociation.
// Check the length with:
//     len(mockedClient.DeleteLocalGatewayRouteTableVpcAssociationCalls())
func (mock *ClientMock) DeleteLocalGatewayRouteTableVpcAssociationCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteLocalGatewayRouteTableVpcAssociation.RLock()
	calls = mock.calls.DeleteLocalGatewayRouteTableVpcAssociation
	mock.lockDeleteLocalGatewayRouteTableVpcAssociation.RUnlock()
	return calls
}

// DeleteManagedPrefixList calls DeleteManagedPrefixListFunc.
func (mock *ClientMock) DeleteManagedPrefixList(ctx context.Context, params *ec2.DeleteManagedPrefixListInput, optFns ...func(*ec2.Options)) (*ec2.DeleteManagedPrefixListOutput, error) {
	if mock.DeleteManagedPrefixListFunc == nil {
		panic("ClientMock.DeleteManagedPrefixListFunc: method is nil but Client.DeleteManagedPrefixList was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteManagedPrefixListInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteManagedPrefixList.Lock()
	mock.calls.DeleteManagedPrefixList = append(mock.calls.DeleteManagedPrefixList, callInfo)
	mock.lockDeleteManagedPrefixList.Unlock()
	return mock.DeleteManagedPrefixListFunc(ctx, params, optFns...)
}

// DeleteManagedPrefixListCalls gets all the calls that were made to DeleteManagedPrefixList.
// Check the length with:
//     len(mockedClient.DeleteManagedPrefixListCalls())
func (mock *ClientMock) DeleteManagedPrefixListCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteManagedPrefixListInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteManagedPrefixListInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteManagedPrefixList.RLock()
	calls = mock.calls.DeleteManagedPrefixList
	mock.lockDeleteManagedPrefixList.RUnlock()
	return calls
}

// DeleteNatGateway calls DeleteNatGatewayFunc.
func (mock *ClientMock) DeleteNatGateway(ctx context.Context, params *ec2.DeleteNatGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNatGatewayOutput, error) {
	if mock.DeleteNatGatewayFunc == nil {
		panic("ClientMock.DeleteNatGatewayFunc: method is nil but Client.DeleteNatGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteNatGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteNatGateway.Lock()
	mock.calls.DeleteNatGateway = append(mock.calls.DeleteNatGateway, callInfo)
	mock.lockDeleteNatGateway.Unlock()
	return mock.DeleteNatGatewayFunc(ctx, params, optFns...)
}

// DeleteNatGatewayCalls gets all the calls that were made to DeleteNatGateway.
// Check the length with:
//     len(mockedClient.DeleteNatGatewayCalls())
func (mock *ClientMock) DeleteNatGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteNatGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteNatGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteNatGateway.RLock()
	calls = mock.calls.DeleteNatGateway
	mock.lockDeleteNatGateway.RUnlock()
	return calls
}

// DeleteNetworkAcl calls DeleteNetworkAclFunc.
func (mock *ClientMock) DeleteNetworkAcl(ctx context.Context, params *ec2.DeleteNetworkAclInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkAclOutput, error) {
	if mock.DeleteNetworkAclFunc == nil {
		panic("ClientMock.DeleteNetworkAclFunc: method is nil but Client.DeleteNetworkAcl was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkAclInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteNetworkAcl.Lock()
	mock.calls.DeleteNetworkAcl = append(mock.calls.DeleteNetworkAcl, callInfo)
	mock.lockDeleteNetworkAcl.Unlock()
	return mock.DeleteNetworkAclFunc(ctx, params, optFns...)
}

// DeleteNetworkAclCalls gets all the calls that were made to DeleteNetworkAcl.
// Check the length with:
//     len(mockedClient.DeleteNetworkAclCalls())
func (mock *ClientMock) DeleteNetworkAclCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteNetworkAclInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkAclInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteNetworkAcl.RLock()
	calls = mock.calls.DeleteNetworkAcl
	mock.lockDeleteNetworkAcl.RUnlock()
	return calls
}

// DeleteNetworkAclEntry calls DeleteNetworkAclEntryFunc.
func (mock *ClientMock) DeleteNetworkAclEntry(ctx context.Context, params *ec2.DeleteNetworkAclEntryInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkAclEntryOutput, error) {
	if mock.DeleteNetworkAclEntryFunc == nil {
		panic("ClientMock.DeleteNetworkAclEntryFunc: method is nil but Client.DeleteNetworkAclEntry was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkAclEntryInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteNetworkAclEntry.Lock()
	mock.calls.DeleteNetworkAclEntry = append(mock.calls.DeleteNetworkAclEntry, callInfo)
	mock.lockDeleteNetworkAclEntry.Unlock()
	return mock.DeleteNetworkAclEntryFunc(ctx, params, optFns...)
}

// DeleteNetworkAclEntryCalls gets all the calls that were made to DeleteNetworkAclEntry.
// Check the length with:
//     len(mockedClient.DeleteNetworkAclEntryCalls())
func (mock *ClientMock) DeleteNetworkAclEntryCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteNetworkAclEntryInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkAclEntryInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteNetworkAclEntry.RLock()
	calls = mock.calls.DeleteNetworkAclEntry
	mock.lockDeleteNetworkAclEntry.RUnlock()
	return calls
}

// DeleteNetworkInsightsAccessScope calls DeleteNetworkInsightsAccessScopeFunc.
func (mock *ClientMock) DeleteNetworkInsightsAccessScope(ctx context.Context, params *ec2.DeleteNetworkInsightsAccessScopeInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInsightsAccessScopeOutput, error) {
	if mock.DeleteNetworkInsightsAccessScopeFunc == nil {
		panic("ClientMock.DeleteNetworkInsightsAccessScopeFunc: method is nil but Client.DeleteNetworkInsightsAccessScope was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkInsightsAccessScopeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteNetworkInsightsAccessScope.Lock()
	mock.calls.DeleteNetworkInsightsAccessScope = append(mock.calls.DeleteNetworkInsightsAccessScope, callInfo)
	mock.lockDeleteNetworkInsightsAccessScope.Unlock()
	return mock.DeleteNetworkInsightsAccessScopeFunc(ctx, params, optFns...)
}

// DeleteNetworkInsightsAccessScopeCalls gets all the calls that were made to DeleteNetworkInsightsAccessScope.
// Check the length with:
//     len(mockedClient.DeleteNetworkInsightsAccessScopeCalls())
func (mock *ClientMock) DeleteNetworkInsightsAccessScopeCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteNetworkInsightsAccessScopeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkInsightsAccessScopeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteNetworkInsightsAccessScope.RLock()
	calls = mock.calls.DeleteNetworkInsightsAccessScope
	mock.lockDeleteNetworkInsightsAccessScope.RUnlock()
	return calls
}

// DeleteNetworkInsightsAccessScopeAnalysis calls DeleteNetworkInsightsAccessScopeAnalysisFunc.
func (mock *ClientMock) DeleteNetworkInsightsAccessScopeAnalysis(ctx context.Context, params *ec2.DeleteNetworkInsightsAccessScopeAnalysisInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInsightsAccessScopeAnalysisOutput, error) {
	if mock.DeleteNetworkInsightsAccessScopeAnalysisFunc == nil {
		panic("ClientMock.DeleteNetworkInsightsAccessScopeAnalysisFunc: method is nil but Client.DeleteNetworkInsightsAccessScopeAnalysis was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkInsightsAccessScopeAnalysisInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteNetworkInsightsAccessScopeAnalysis.Lock()
	mock.calls.DeleteNetworkInsightsAccessScopeAnalysis = append(mock.calls.DeleteNetworkInsightsAccessScopeAnalysis, callInfo)
	mock.lockDeleteNetworkInsightsAccessScopeAnalysis.Unlock()
	return mock.DeleteNetworkInsightsAccessScopeAnalysisFunc(ctx, params, optFns...)
}

// DeleteNetworkInsightsAccessScopeAnalysisCalls gets all the calls that were made to DeleteNetworkInsightsAccessScopeAnalysis.
// Check the length with:
//     len(mockedClient.DeleteNetworkInsightsAccessScopeAnalysisCalls())
func (mock *ClientMock) DeleteNetworkInsightsAccessScopeAnalysisCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteNetworkInsightsAccessScopeAnalysisInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkInsightsAccessScopeAnalysisInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteNetworkInsightsAccessScopeAnalysis.RLock()
	calls = mock.calls.DeleteNetworkInsightsAccessScopeAnalysis
	mock.lockDeleteNetworkInsightsAccessScopeAnalysis.RUnlock()
	return calls
}

// DeleteNetworkInsightsAnalysis calls DeleteNetworkInsightsAnalysisFunc.
func (mock *ClientMock) DeleteNetworkInsightsAnalysis(ctx context.Context, params *ec2.DeleteNetworkInsightsAnalysisInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInsightsAnalysisOutput, error) {
	if mock.DeleteNetworkInsightsAnalysisFunc == nil {
		panic("ClientMock.DeleteNetworkInsightsAnalysisFunc: method is nil but Client.DeleteNetworkInsightsAnalysis was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkInsightsAnalysisInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteNetworkInsightsAnalysis.Lock()
	mock.calls.DeleteNetworkInsightsAnalysis = append(mock.calls.DeleteNetworkInsightsAnalysis, callInfo)
	mock.lockDeleteNetworkInsightsAnalysis.Unlock()
	return mock.DeleteNetworkInsightsAnalysisFunc(ctx, params, optFns...)
}

// DeleteNetworkInsightsAnalysisCalls gets all the calls that were made to DeleteNetworkInsightsAnalysis.
// Check the length with:
//     len(mockedClient.DeleteNetworkInsightsAnalysisCalls())
func (mock *ClientMock) DeleteNetworkInsightsAnalysisCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteNetworkInsightsAnalysisInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkInsightsAnalysisInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteNetworkInsightsAnalysis.RLock()
	calls = mock.calls.DeleteNetworkInsightsAnalysis
	mock.lockDeleteNetworkInsightsAnalysis.RUnlock()
	return calls
}

// DeleteNetworkInsightsPath calls DeleteNetworkInsightsPathFunc.
func (mock *ClientMock) DeleteNetworkInsightsPath(ctx context.Context, params *ec2.DeleteNetworkInsightsPathInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInsightsPathOutput, error) {
	if mock.DeleteNetworkInsightsPathFunc == nil {
		panic("ClientMock.DeleteNetworkInsightsPathFunc: method is nil but Client.DeleteNetworkInsightsPath was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkInsightsPathInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteNetworkInsightsPath.Lock()
	mock.calls.DeleteNetworkInsightsPath = append(mock.calls.DeleteNetworkInsightsPath, callInfo)
	mock.lockDeleteNetworkInsightsPath.Unlock()
	return mock.DeleteNetworkInsightsPathFunc(ctx, params, optFns...)
}

// DeleteNetworkInsightsPathCalls gets all the calls that were made to DeleteNetworkInsightsPath.
// Check the length with:
//     len(mockedClient.DeleteNetworkInsightsPathCalls())
func (mock *ClientMock) DeleteNetworkInsightsPathCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteNetworkInsightsPathInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkInsightsPathInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteNetworkInsightsPath.RLock()
	calls = mock.calls.DeleteNetworkInsightsPath
	mock.lockDeleteNetworkInsightsPath.RUnlock()
	return calls
}

// DeleteNetworkInterface calls DeleteNetworkInterfaceFunc.
func (mock *ClientMock) DeleteNetworkInterface(ctx context.Context, params *ec2.DeleteNetworkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInterfaceOutput, error) {
	if mock.DeleteNetworkInterfaceFunc == nil {
		panic("ClientMock.DeleteNetworkInterfaceFunc: method is nil but Client.DeleteNetworkInterface was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkInterfaceInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteNetworkInterface.Lock()
	mock.calls.DeleteNetworkInterface = append(mock.calls.DeleteNetworkInterface, callInfo)
	mock.lockDeleteNetworkInterface.Unlock()
	return mock.DeleteNetworkInterfaceFunc(ctx, params, optFns...)
}

// DeleteNetworkInterfaceCalls gets all the calls that were made to DeleteNetworkInterface.
// Check the length with:
//     len(mockedClient.DeleteNetworkInterfaceCalls())
func (mock *ClientMock) DeleteNetworkInterfaceCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteNetworkInterfaceInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkInterfaceInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteNetworkInterface.RLock()
	calls = mock.calls.DeleteNetworkInterface
	mock.lockDeleteNetworkInterface.RUnlock()
	return calls
}

// DeleteNetworkInterfacePermission calls DeleteNetworkInterfacePermissionFunc.
func (mock *ClientMock) DeleteNetworkInterfacePermission(ctx context.Context, params *ec2.DeleteNetworkInterfacePermissionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
	if mock.DeleteNetworkInterfacePermissionFunc == nil {
		panic("ClientMock.DeleteNetworkInterfacePermissionFunc: method is nil but Client.DeleteNetworkInterfacePermission was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkInterfacePermissionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteNetworkInterfacePermission.Lock()
	mock.calls.DeleteNetworkInterfacePermission = append(mock.calls.DeleteNetworkInterfacePermission, callInfo)
	mock.lockDeleteNetworkInterfacePermission.Unlock()
	return mock.DeleteNetworkInterfacePermissionFunc(ctx, params, optFns...)
}

// DeleteNetworkInterfacePermissionCalls gets all the calls that were made to DeleteNetworkInterfacePermission.
// Check the length with:
//     len(mockedClient.DeleteNetworkInterfacePermissionCalls())
func (mock *ClientMock) DeleteNetworkInterfacePermissionCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteNetworkInterfacePermissionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteNetworkInterfacePermissionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteNetworkInterfacePermission.RLock()
	calls = mock.calls.DeleteNetworkInterfacePermission
	mock.lockDeleteNetworkInterfacePermission.RUnlock()
	return calls
}

// DeletePlacementGroup calls DeletePlacementGroupFunc.
func (mock *ClientMock) DeletePlacementGroup(ctx context.Context, params *ec2.DeletePlacementGroupInput, optFns ...func(*ec2.Options)) (*ec2.DeletePlacementGroupOutput, error) {
	if mock.DeletePlacementGroupFunc == nil {
		panic("ClientMock.DeletePlacementGroupFunc: method is nil but Client.DeletePlacementGroup was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeletePlacementGroupInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeletePlacementGroup.Lock()
	mock.calls.DeletePlacementGroup = append(mock.calls.DeletePlacementGroup, callInfo)
	mock.lockDeletePlacementGroup.Unlock()
	return mock.DeletePlacementGroupFunc(ctx, params, optFns...)
}

// DeletePlacementGroupCalls gets all the calls that were made to DeletePlacementGroup.
// Check the length with:
//     len(mockedClient.DeletePlacementGroupCalls())
func (mock *ClientMock) DeletePlacementGroupCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeletePlacementGroupInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeletePlacementGroupInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeletePlacementGroup.RLock()
	calls = mock.calls.DeletePlacementGroup
	mock.lockDeletePlacementGroup.RUnlock()
	return calls
}

// DeletePublicIpv4Pool calls DeletePublicIpv4PoolFunc.
func (mock *ClientMock) DeletePublicIpv4Pool(ctx context.Context, params *ec2.DeletePublicIpv4PoolInput, optFns ...func(*ec2.Options)) (*ec2.DeletePublicIpv4PoolOutput, error) {
	if mock.DeletePublicIpv4PoolFunc == nil {
		panic("ClientMock.DeletePublicIpv4PoolFunc: method is nil but Client.DeletePublicIpv4Pool was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeletePublicIpv4PoolInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeletePublicIpv4Pool.Lock()
	mock.calls.DeletePublicIpv4Pool = append(mock.calls.DeletePublicIpv4Pool, callInfo)
	mock.lockDeletePublicIpv4Pool.Unlock()
	return mock.DeletePublicIpv4PoolFunc(ctx, params, optFns...)
}

// DeletePublicIpv4PoolCalls gets all the calls that were made to DeletePublicIpv4Pool.
// Check the length with:
//     len(mockedClient.DeletePublicIpv4PoolCalls())
func (mock *ClientMock) DeletePublicIpv4PoolCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeletePublicIpv4PoolInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeletePublicIpv4PoolInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeletePublicIpv4Pool.RLock()
	calls = mock.calls.DeletePublicIpv4Pool
	mock.lockDeletePublicIpv4Pool.RUnlock()
	return calls
}

// DeleteQueuedReservedInstances calls DeleteQueuedReservedInstancesFunc.
func (mock *ClientMock) DeleteQueuedReservedInstances(ctx context.Context, params *ec2.DeleteQueuedReservedInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DeleteQueuedReservedInstancesOutput, error) {
	if mock.DeleteQueuedReservedInstancesFunc == nil {
		panic("ClientMock.DeleteQueuedReservedInstancesFunc: method is nil but Client.DeleteQueuedReservedInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteQueuedReservedInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteQueuedReservedInstances.Lock()
	mock.calls.DeleteQueuedReservedInstances = append(mock.calls.DeleteQueuedReservedInstances, callInfo)
	mock.lockDeleteQueuedReservedInstances.Unlock()
	return mock.DeleteQueuedReservedInstancesFunc(ctx, params, optFns...)
}

// DeleteQueuedReservedInstancesCalls gets all the calls that were made to DeleteQueuedReservedInstances.
// Check the length with:
//     len(mockedClient.DeleteQueuedReservedInstancesCalls())
func (mock *ClientMock) DeleteQueuedReservedInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteQueuedReservedInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteQueuedReservedInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteQueuedReservedInstances.RLock()
	calls = mock.calls.DeleteQueuedReservedInstances
	mock.lockDeleteQueuedReservedInstances.RUnlock()
	return calls
}

// DeleteRoute calls DeleteRouteFunc.
func (mock *ClientMock) DeleteRoute(ctx context.Context, params *ec2.DeleteRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteRouteOutput, error) {
	if mock.DeleteRouteFunc == nil {
		panic("ClientMock.DeleteRouteFunc: method is nil but Client.DeleteRoute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteRouteInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteRoute.Lock()
	mock.calls.DeleteRoute = append(mock.calls.DeleteRoute, callInfo)
	mock.lockDeleteRoute.Unlock()
	return mock.DeleteRouteFunc(ctx, params, optFns...)
}

// DeleteRouteCalls gets all the calls that were made to DeleteRoute.
// Check the length with:
//     len(mockedClient.DeleteRouteCalls())
func (mock *ClientMock) DeleteRouteCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteRouteInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteRouteInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteRoute.RLock()
	calls = mock.calls.DeleteRoute
	mock.lockDeleteRoute.RUnlock()
	return calls
}

// DeleteRouteTable calls DeleteRouteTableFunc.
func (mock *ClientMock) DeleteRouteTable(ctx context.Context, params *ec2.DeleteRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.DeleteRouteTableOutput, error) {
	if mock.DeleteRouteTableFunc == nil {
		panic("ClientMock.DeleteRouteTableFunc: method is nil but Client.DeleteRouteTable was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteRouteTableInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteRouteTable.Lock()
	mock.calls.DeleteRouteTable = append(mock.calls.DeleteRouteTable, callInfo)
	mock.lockDeleteRouteTable.Unlock()
	return mock.DeleteRouteTableFunc(ctx, params, optFns...)
}

// DeleteRouteTableCalls gets all the calls that were made to DeleteRouteTable.
// Check the length with:
//     len(mockedClient.DeleteRouteTableCalls())
func (mock *ClientMock) DeleteRouteTableCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteRouteTableInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteRouteTableInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteRouteTable.RLock()
	calls = mock.calls.DeleteRouteTable
	mock.lockDeleteRouteTable.RUnlock()
	return calls
}

// DeleteSecurityGroup calls DeleteSecurityGroupFunc.
func (mock *ClientMock) DeleteSecurityGroup(ctx context.Context, params *ec2.DeleteSecurityGroupInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSecurityGroupOutput, error) {
	if mock.DeleteSecurityGroupFunc == nil {
		panic("ClientMock.DeleteSecurityGroupFunc: method is nil but Client.DeleteSecurityGroup was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteSecurityGroupInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteSecurityGroup.Lock()
	mock.calls.DeleteSecurityGroup = append(mock.calls.DeleteSecurityGroup, callInfo)
	mock.lockDeleteSecurityGroup.Unlock()
	return mock.DeleteSecurityGroupFunc(ctx, params, optFns...)
}

// DeleteSecurityGroupCalls gets all the calls that were made to DeleteSecurityGroup.
// Check the length with:
//     len(mockedClient.DeleteSecurityGroupCalls())
func (mock *ClientMock) DeleteSecurityGroupCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteSecurityGroupInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteSecurityGroupInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteSecurityGroup.RLock()
	calls = mock.calls.DeleteSecurityGroup
	mock.lockDeleteSecurityGroup.RUnlock()
	return calls
}

// DeleteSnapshot calls DeleteSnapshotFunc.
func (mock *ClientMock) DeleteSnapshot(ctx context.Context, params *ec2.DeleteSnapshotInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSnapshotOutput, error) {
	if mock.DeleteSnapshotFunc == nil {
		panic("ClientMock.DeleteSnapshotFunc: method is nil but Client.DeleteSnapshot was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteSnapshotInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteSnapshot.Lock()
	mock.calls.DeleteSnapshot = append(mock.calls.DeleteSnapshot, callInfo)
	mock.lockDeleteSnapshot.Unlock()
	return mock.DeleteSnapshotFunc(ctx, params, optFns...)
}

// DeleteSnapshotCalls gets all the calls that were made to DeleteSnapshot.
// Check the length with:
//     len(mockedClient.DeleteSnapshotCalls())
func (mock *ClientMock) DeleteSnapshotCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteSnapshotInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteSnapshotInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteSnapshot.RLock()
	calls = mock.calls.DeleteSnapshot
	mock.lockDeleteSnapshot.RUnlock()
	return calls
}

// DeleteSpotDatafeedSubscription calls DeleteSpotDatafeedSubscriptionFunc.
func (mock *ClientMock) DeleteSpotDatafeedSubscription(ctx context.Context, params *ec2.DeleteSpotDatafeedSubscriptionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	if mock.DeleteSpotDatafeedSubscriptionFunc == nil {
		panic("ClientMock.DeleteSpotDatafeedSubscriptionFunc: method is nil but Client.DeleteSpotDatafeedSubscription was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteSpotDatafeedSubscriptionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteSpotDatafeedSubscription.Lock()
	mock.calls.DeleteSpotDatafeedSubscription = append(mock.calls.DeleteSpotDatafeedSubscription, callInfo)
	mock.lockDeleteSpotDatafeedSubscription.Unlock()
	return mock.DeleteSpotDatafeedSubscriptionFunc(ctx, params, optFns...)
}

// DeleteSpotDatafeedSubscriptionCalls gets all the calls that were made to DeleteSpotDatafeedSubscription.
// Check the length with:
//     len(mockedClient.DeleteSpotDatafeedSubscriptionCalls())
func (mock *ClientMock) DeleteSpotDatafeedSubscriptionCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteSpotDatafeedSubscriptionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteSpotDatafeedSubscriptionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteSpotDatafeedSubscription.RLock()
	calls = mock.calls.DeleteSpotDatafeedSubscription
	mock.lockDeleteSpotDatafeedSubscription.RUnlock()
	return calls
}

// DeleteSubnet calls DeleteSubnetFunc.
func (mock *ClientMock) DeleteSubnet(ctx context.Context, params *ec2.DeleteSubnetInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSubnetOutput, error) {
	if mock.DeleteSubnetFunc == nil {
		panic("ClientMock.DeleteSubnetFunc: method is nil but Client.DeleteSubnet was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteSubnetInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteSubnet.Lock()
	mock.calls.DeleteSubnet = append(mock.calls.DeleteSubnet, callInfo)
	mock.lockDeleteSubnet.Unlock()
	return mock.DeleteSubnetFunc(ctx, params, optFns...)
}

// DeleteSubnetCalls gets all the calls that were made to DeleteSubnet.
// Check the length with:
//     len(mockedClient.DeleteSubnetCalls())
func (mock *ClientMock) DeleteSubnetCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteSubnetInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteSubnetInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteSubnet.RLock()
	calls = mock.calls.DeleteSubnet
	mock.lockDeleteSubnet.RUnlock()
	return calls
}

// DeleteSubnetCidrReservation calls DeleteSubnetCidrReservationFunc.
func (mock *ClientMock) DeleteSubnetCidrReservation(ctx context.Context, params *ec2.DeleteSubnetCidrReservationInput, optFns ...func(*ec2.Options)) (*ec2.DeleteSubnetCidrReservationOutput, error) {
	if mock.DeleteSubnetCidrReservationFunc == nil {
		panic("ClientMock.DeleteSubnetCidrReservationFunc: method is nil but Client.DeleteSubnetCidrReservation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteSubnetCidrReservationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteSubnetCidrReservation.Lock()
	mock.calls.DeleteSubnetCidrReservation = append(mock.calls.DeleteSubnetCidrReservation, callInfo)
	mock.lockDeleteSubnetCidrReservation.Unlock()
	return mock.DeleteSubnetCidrReservationFunc(ctx, params, optFns...)
}

// DeleteSubnetCidrReservationCalls gets all the calls that were made to DeleteSubnetCidrReservation.
// Check the length with:
//     len(mockedClient.DeleteSubnetCidrReservationCalls())
func (mock *ClientMock) DeleteSubnetCidrReservationCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteSubnetCidrReservationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteSubnetCidrReservationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteSubnetCidrReservation.RLock()
	calls = mock.calls.DeleteSubnetCidrReservation
	mock.lockDeleteSubnetCidrReservation.RUnlock()
	return calls
}

// DeleteTags calls DeleteTagsFunc.
func (mock *ClientMock) DeleteTags(ctx context.Context, params *ec2.DeleteTagsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTagsOutput, error) {
	if mock.DeleteTagsFunc == nil {
		panic("ClientMock.DeleteTagsFunc: method is nil but Client.DeleteTags was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTagsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTags.Lock()
	mock.calls.DeleteTags = append(mock.calls.DeleteTags, callInfo)
	mock.lockDeleteTags.Unlock()
	return mock.DeleteTagsFunc(ctx, params, optFns...)
}

// DeleteTagsCalls gets all the calls that were made to DeleteTags.
// Check the length with:
//     len(mockedClient.DeleteTagsCalls())
func (mock *ClientMock) DeleteTagsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTagsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTagsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTags.RLock()
	calls = mock.calls.DeleteTags
	mock.lockDeleteTags.RUnlock()
	return calls
}

// DeleteTrafficMirrorFilter calls DeleteTrafficMirrorFilterFunc.
func (mock *ClientMock) DeleteTrafficMirrorFilter(ctx context.Context, params *ec2.DeleteTrafficMirrorFilterInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTrafficMirrorFilterOutput, error) {
	if mock.DeleteTrafficMirrorFilterFunc == nil {
		panic("ClientMock.DeleteTrafficMirrorFilterFunc: method is nil but Client.DeleteTrafficMirrorFilter was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTrafficMirrorFilterInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTrafficMirrorFilter.Lock()
	mock.calls.DeleteTrafficMirrorFilter = append(mock.calls.DeleteTrafficMirrorFilter, callInfo)
	mock.lockDeleteTrafficMirrorFilter.Unlock()
	return mock.DeleteTrafficMirrorFilterFunc(ctx, params, optFns...)
}

// DeleteTrafficMirrorFilterCalls gets all the calls that were made to DeleteTrafficMirrorFilter.
// Check the length with:
//     len(mockedClient.DeleteTrafficMirrorFilterCalls())
func (mock *ClientMock) DeleteTrafficMirrorFilterCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTrafficMirrorFilterInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTrafficMirrorFilterInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTrafficMirrorFilter.RLock()
	calls = mock.calls.DeleteTrafficMirrorFilter
	mock.lockDeleteTrafficMirrorFilter.RUnlock()
	return calls
}

// DeleteTrafficMirrorFilterRule calls DeleteTrafficMirrorFilterRuleFunc.
func (mock *ClientMock) DeleteTrafficMirrorFilterRule(ctx context.Context, params *ec2.DeleteTrafficMirrorFilterRuleInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error) {
	if mock.DeleteTrafficMirrorFilterRuleFunc == nil {
		panic("ClientMock.DeleteTrafficMirrorFilterRuleFunc: method is nil but Client.DeleteTrafficMirrorFilterRule was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTrafficMirrorFilterRuleInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTrafficMirrorFilterRule.Lock()
	mock.calls.DeleteTrafficMirrorFilterRule = append(mock.calls.DeleteTrafficMirrorFilterRule, callInfo)
	mock.lockDeleteTrafficMirrorFilterRule.Unlock()
	return mock.DeleteTrafficMirrorFilterRuleFunc(ctx, params, optFns...)
}

// DeleteTrafficMirrorFilterRuleCalls gets all the calls that were made to DeleteTrafficMirrorFilterRule.
// Check the length with:
//     len(mockedClient.DeleteTrafficMirrorFilterRuleCalls())
func (mock *ClientMock) DeleteTrafficMirrorFilterRuleCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTrafficMirrorFilterRuleInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTrafficMirrorFilterRuleInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTrafficMirrorFilterRule.RLock()
	calls = mock.calls.DeleteTrafficMirrorFilterRule
	mock.lockDeleteTrafficMirrorFilterRule.RUnlock()
	return calls
}

// DeleteTrafficMirrorSession calls DeleteTrafficMirrorSessionFunc.
func (mock *ClientMock) DeleteTrafficMirrorSession(ctx context.Context, params *ec2.DeleteTrafficMirrorSessionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTrafficMirrorSessionOutput, error) {
	if mock.DeleteTrafficMirrorSessionFunc == nil {
		panic("ClientMock.DeleteTrafficMirrorSessionFunc: method is nil but Client.DeleteTrafficMirrorSession was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTrafficMirrorSessionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTrafficMirrorSession.Lock()
	mock.calls.DeleteTrafficMirrorSession = append(mock.calls.DeleteTrafficMirrorSession, callInfo)
	mock.lockDeleteTrafficMirrorSession.Unlock()
	return mock.DeleteTrafficMirrorSessionFunc(ctx, params, optFns...)
}

// DeleteTrafficMirrorSessionCalls gets all the calls that were made to DeleteTrafficMirrorSession.
// Check the length with:
//     len(mockedClient.DeleteTrafficMirrorSessionCalls())
func (mock *ClientMock) DeleteTrafficMirrorSessionCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTrafficMirrorSessionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTrafficMirrorSessionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTrafficMirrorSession.RLock()
	calls = mock.calls.DeleteTrafficMirrorSession
	mock.lockDeleteTrafficMirrorSession.RUnlock()
	return calls
}

// DeleteTrafficMirrorTarget calls DeleteTrafficMirrorTargetFunc.
func (mock *ClientMock) DeleteTrafficMirrorTarget(ctx context.Context, params *ec2.DeleteTrafficMirrorTargetInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTrafficMirrorTargetOutput, error) {
	if mock.DeleteTrafficMirrorTargetFunc == nil {
		panic("ClientMock.DeleteTrafficMirrorTargetFunc: method is nil but Client.DeleteTrafficMirrorTarget was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTrafficMirrorTargetInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTrafficMirrorTarget.Lock()
	mock.calls.DeleteTrafficMirrorTarget = append(mock.calls.DeleteTrafficMirrorTarget, callInfo)
	mock.lockDeleteTrafficMirrorTarget.Unlock()
	return mock.DeleteTrafficMirrorTargetFunc(ctx, params, optFns...)
}

// DeleteTrafficMirrorTargetCalls gets all the calls that were made to DeleteTrafficMirrorTarget.
// Check the length with:
//     len(mockedClient.DeleteTrafficMirrorTargetCalls())
func (mock *ClientMock) DeleteTrafficMirrorTargetCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTrafficMirrorTargetInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTrafficMirrorTargetInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTrafficMirrorTarget.RLock()
	calls = mock.calls.DeleteTrafficMirrorTarget
	mock.lockDeleteTrafficMirrorTarget.RUnlock()
	return calls
}

// DeleteTransitGateway calls DeleteTransitGatewayFunc.
func (mock *ClientMock) DeleteTransitGateway(ctx context.Context, params *ec2.DeleteTransitGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayOutput, error) {
	if mock.DeleteTransitGatewayFunc == nil {
		panic("ClientMock.DeleteTransitGatewayFunc: method is nil but Client.DeleteTransitGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTransitGateway.Lock()
	mock.calls.DeleteTransitGateway = append(mock.calls.DeleteTransitGateway, callInfo)
	mock.lockDeleteTransitGateway.Unlock()
	return mock.DeleteTransitGatewayFunc(ctx, params, optFns...)
}

// DeleteTransitGatewayCalls gets all the calls that were made to DeleteTransitGateway.
// Check the length with:
//     len(mockedClient.DeleteTransitGatewayCalls())
func (mock *ClientMock) DeleteTransitGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTransitGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTransitGateway.RLock()
	calls = mock.calls.DeleteTransitGateway
	mock.lockDeleteTransitGateway.RUnlock()
	return calls
}

// DeleteTransitGatewayConnect calls DeleteTransitGatewayConnectFunc.
func (mock *ClientMock) DeleteTransitGatewayConnect(ctx context.Context, params *ec2.DeleteTransitGatewayConnectInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayConnectOutput, error) {
	if mock.DeleteTransitGatewayConnectFunc == nil {
		panic("ClientMock.DeleteTransitGatewayConnectFunc: method is nil but Client.DeleteTransitGatewayConnect was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayConnectInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTransitGatewayConnect.Lock()
	mock.calls.DeleteTransitGatewayConnect = append(mock.calls.DeleteTransitGatewayConnect, callInfo)
	mock.lockDeleteTransitGatewayConnect.Unlock()
	return mock.DeleteTransitGatewayConnectFunc(ctx, params, optFns...)
}

// DeleteTransitGatewayConnectCalls gets all the calls that were made to DeleteTransitGatewayConnect.
// Check the length with:
//     len(mockedClient.DeleteTransitGatewayConnectCalls())
func (mock *ClientMock) DeleteTransitGatewayConnectCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTransitGatewayConnectInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayConnectInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTransitGatewayConnect.RLock()
	calls = mock.calls.DeleteTransitGatewayConnect
	mock.lockDeleteTransitGatewayConnect.RUnlock()
	return calls
}

// DeleteTransitGatewayConnectPeer calls DeleteTransitGatewayConnectPeerFunc.
func (mock *ClientMock) DeleteTransitGatewayConnectPeer(ctx context.Context, params *ec2.DeleteTransitGatewayConnectPeerInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayConnectPeerOutput, error) {
	if mock.DeleteTransitGatewayConnectPeerFunc == nil {
		panic("ClientMock.DeleteTransitGatewayConnectPeerFunc: method is nil but Client.DeleteTransitGatewayConnectPeer was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayConnectPeerInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTransitGatewayConnectPeer.Lock()
	mock.calls.DeleteTransitGatewayConnectPeer = append(mock.calls.DeleteTransitGatewayConnectPeer, callInfo)
	mock.lockDeleteTransitGatewayConnectPeer.Unlock()
	return mock.DeleteTransitGatewayConnectPeerFunc(ctx, params, optFns...)
}

// DeleteTransitGatewayConnectPeerCalls gets all the calls that were made to DeleteTransitGatewayConnectPeer.
// Check the length with:
//     len(mockedClient.DeleteTransitGatewayConnectPeerCalls())
func (mock *ClientMock) DeleteTransitGatewayConnectPeerCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTransitGatewayConnectPeerInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayConnectPeerInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTransitGatewayConnectPeer.RLock()
	calls = mock.calls.DeleteTransitGatewayConnectPeer
	mock.lockDeleteTransitGatewayConnectPeer.RUnlock()
	return calls
}

// DeleteTransitGatewayMulticastDomain calls DeleteTransitGatewayMulticastDomainFunc.
func (mock *ClientMock) DeleteTransitGatewayMulticastDomain(ctx context.Context, params *ec2.DeleteTransitGatewayMulticastDomainInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error) {
	if mock.DeleteTransitGatewayMulticastDomainFunc == nil {
		panic("ClientMock.DeleteTransitGatewayMulticastDomainFunc: method is nil but Client.DeleteTransitGatewayMulticastDomain was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayMulticastDomainInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTransitGatewayMulticastDomain.Lock()
	mock.calls.DeleteTransitGatewayMulticastDomain = append(mock.calls.DeleteTransitGatewayMulticastDomain, callInfo)
	mock.lockDeleteTransitGatewayMulticastDomain.Unlock()
	return mock.DeleteTransitGatewayMulticastDomainFunc(ctx, params, optFns...)
}

// DeleteTransitGatewayMulticastDomainCalls gets all the calls that were made to DeleteTransitGatewayMulticastDomain.
// Check the length with:
//     len(mockedClient.DeleteTransitGatewayMulticastDomainCalls())
func (mock *ClientMock) DeleteTransitGatewayMulticastDomainCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTransitGatewayMulticastDomainInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayMulticastDomainInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTransitGatewayMulticastDomain.RLock()
	calls = mock.calls.DeleteTransitGatewayMulticastDomain
	mock.lockDeleteTransitGatewayMulticastDomain.RUnlock()
	return calls
}

// DeleteTransitGatewayPeeringAttachment calls DeleteTransitGatewayPeeringAttachmentFunc.
func (mock *ClientMock) DeleteTransitGatewayPeeringAttachment(ctx context.Context, params *ec2.DeleteTransitGatewayPeeringAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error) {
	if mock.DeleteTransitGatewayPeeringAttachmentFunc == nil {
		panic("ClientMock.DeleteTransitGatewayPeeringAttachmentFunc: method is nil but Client.DeleteTransitGatewayPeeringAttachment was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayPeeringAttachmentInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTransitGatewayPeeringAttachment.Lock()
	mock.calls.DeleteTransitGatewayPeeringAttachment = append(mock.calls.DeleteTransitGatewayPeeringAttachment, callInfo)
	mock.lockDeleteTransitGatewayPeeringAttachment.Unlock()
	return mock.DeleteTransitGatewayPeeringAttachmentFunc(ctx, params, optFns...)
}

// DeleteTransitGatewayPeeringAttachmentCalls gets all the calls that were made to DeleteTransitGatewayPeeringAttachment.
// Check the length with:
//     len(mockedClient.DeleteTransitGatewayPeeringAttachmentCalls())
func (mock *ClientMock) DeleteTransitGatewayPeeringAttachmentCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTransitGatewayPeeringAttachmentInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayPeeringAttachmentInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTransitGatewayPeeringAttachment.RLock()
	calls = mock.calls.DeleteTransitGatewayPeeringAttachment
	mock.lockDeleteTransitGatewayPeeringAttachment.RUnlock()
	return calls
}

// DeleteTransitGatewayPolicyTable calls DeleteTransitGatewayPolicyTableFunc.
func (mock *ClientMock) DeleteTransitGatewayPolicyTable(ctx context.Context, params *ec2.DeleteTransitGatewayPolicyTableInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayPolicyTableOutput, error) {
	if mock.DeleteTransitGatewayPolicyTableFunc == nil {
		panic("ClientMock.DeleteTransitGatewayPolicyTableFunc: method is nil but Client.DeleteTransitGatewayPolicyTable was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayPolicyTableInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTransitGatewayPolicyTable.Lock()
	mock.calls.DeleteTransitGatewayPolicyTable = append(mock.calls.DeleteTransitGatewayPolicyTable, callInfo)
	mock.lockDeleteTransitGatewayPolicyTable.Unlock()
	return mock.DeleteTransitGatewayPolicyTableFunc(ctx, params, optFns...)
}

// DeleteTransitGatewayPolicyTableCalls gets all the calls that were made to DeleteTransitGatewayPolicyTable.
// Check the length with:
//     len(mockedClient.DeleteTransitGatewayPolicyTableCalls())
func (mock *ClientMock) DeleteTransitGatewayPolicyTableCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTransitGatewayPolicyTableInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayPolicyTableInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTransitGatewayPolicyTable.RLock()
	calls = mock.calls.DeleteTransitGatewayPolicyTable
	mock.lockDeleteTransitGatewayPolicyTable.RUnlock()
	return calls
}

// DeleteTransitGatewayPrefixListReference calls DeleteTransitGatewayPrefixListReferenceFunc.
func (mock *ClientMock) DeleteTransitGatewayPrefixListReference(ctx context.Context, params *ec2.DeleteTransitGatewayPrefixListReferenceInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayPrefixListReferenceOutput, error) {
	if mock.DeleteTransitGatewayPrefixListReferenceFunc == nil {
		panic("ClientMock.DeleteTransitGatewayPrefixListReferenceFunc: method is nil but Client.DeleteTransitGatewayPrefixListReference was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayPrefixListReferenceInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTransitGatewayPrefixListReference.Lock()
	mock.calls.DeleteTransitGatewayPrefixListReference = append(mock.calls.DeleteTransitGatewayPrefixListReference, callInfo)
	mock.lockDeleteTransitGatewayPrefixListReference.Unlock()
	return mock.DeleteTransitGatewayPrefixListReferenceFunc(ctx, params, optFns...)
}

// DeleteTransitGatewayPrefixListReferenceCalls gets all the calls that were made to DeleteTransitGatewayPrefixListReference.
// Check the length with:
//     len(mockedClient.DeleteTransitGatewayPrefixListReferenceCalls())
func (mock *ClientMock) DeleteTransitGatewayPrefixListReferenceCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTransitGatewayPrefixListReferenceInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayPrefixListReferenceInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTransitGatewayPrefixListReference.RLock()
	calls = mock.calls.DeleteTransitGatewayPrefixListReference
	mock.lockDeleteTransitGatewayPrefixListReference.RUnlock()
	return calls
}

// DeleteTransitGatewayRoute calls DeleteTransitGatewayRouteFunc.
func (mock *ClientMock) DeleteTransitGatewayRoute(ctx context.Context, params *ec2.DeleteTransitGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayRouteOutput, error) {
	if mock.DeleteTransitGatewayRouteFunc == nil {
		panic("ClientMock.DeleteTransitGatewayRouteFunc: method is nil but Client.DeleteTransitGatewayRoute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayRouteInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTransitGatewayRoute.Lock()
	mock.calls.DeleteTransitGatewayRoute = append(mock.calls.DeleteTransitGatewayRoute, callInfo)
	mock.lockDeleteTransitGatewayRoute.Unlock()
	return mock.DeleteTransitGatewayRouteFunc(ctx, params, optFns...)
}

// DeleteTransitGatewayRouteCalls gets all the calls that were made to DeleteTransitGatewayRoute.
// Check the length with:
//     len(mockedClient.DeleteTransitGatewayRouteCalls())
func (mock *ClientMock) DeleteTransitGatewayRouteCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTransitGatewayRouteInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayRouteInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTransitGatewayRoute.RLock()
	calls = mock.calls.DeleteTransitGatewayRoute
	mock.lockDeleteTransitGatewayRoute.RUnlock()
	return calls
}

// DeleteTransitGatewayRouteTable calls DeleteTransitGatewayRouteTableFunc.
func (mock *ClientMock) DeleteTransitGatewayRouteTable(ctx context.Context, params *ec2.DeleteTransitGatewayRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
	if mock.DeleteTransitGatewayRouteTableFunc == nil {
		panic("ClientMock.DeleteTransitGatewayRouteTableFunc: method is nil but Client.DeleteTransitGatewayRouteTable was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayRouteTableInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTransitGatewayRouteTable.Lock()
	mock.calls.DeleteTransitGatewayRouteTable = append(mock.calls.DeleteTransitGatewayRouteTable, callInfo)
	mock.lockDeleteTransitGatewayRouteTable.Unlock()
	return mock.DeleteTransitGatewayRouteTableFunc(ctx, params, optFns...)
}

// DeleteTransitGatewayRouteTableCalls gets all the calls that were made to DeleteTransitGatewayRouteTable.
// Check the length with:
//     len(mockedClient.DeleteTransitGatewayRouteTableCalls())
func (mock *ClientMock) DeleteTransitGatewayRouteTableCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTransitGatewayRouteTableInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayRouteTableInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTransitGatewayRouteTable.RLock()
	calls = mock.calls.DeleteTransitGatewayRouteTable
	mock.lockDeleteTransitGatewayRouteTable.RUnlock()
	return calls
}

// DeleteTransitGatewayRouteTableAnnouncement calls DeleteTransitGatewayRouteTableAnnouncementFunc.
func (mock *ClientMock) DeleteTransitGatewayRouteTableAnnouncement(ctx context.Context, params *ec2.DeleteTransitGatewayRouteTableAnnouncementInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayRouteTableAnnouncementOutput, error) {
	if mock.DeleteTransitGatewayRouteTableAnnouncementFunc == nil {
		panic("ClientMock.DeleteTransitGatewayRouteTableAnnouncementFunc: method is nil but Client.DeleteTransitGatewayRouteTableAnnouncement was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayRouteTableAnnouncementInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTransitGatewayRouteTableAnnouncement.Lock()
	mock.calls.DeleteTransitGatewayRouteTableAnnouncement = append(mock.calls.DeleteTransitGatewayRouteTableAnnouncement, callInfo)
	mock.lockDeleteTransitGatewayRouteTableAnnouncement.Unlock()
	return mock.DeleteTransitGatewayRouteTableAnnouncementFunc(ctx, params, optFns...)
}

// DeleteTransitGatewayRouteTableAnnouncementCalls gets all the calls that were made to DeleteTransitGatewayRouteTableAnnouncement.
// Check the length with:
//     len(mockedClient.DeleteTransitGatewayRouteTableAnnouncementCalls())
func (mock *ClientMock) DeleteTransitGatewayRouteTableAnnouncementCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTransitGatewayRouteTableAnnouncementInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayRouteTableAnnouncementInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTransitGatewayRouteTableAnnouncement.RLock()
	calls = mock.calls.DeleteTransitGatewayRouteTableAnnouncement
	mock.lockDeleteTransitGatewayRouteTableAnnouncement.RUnlock()
	return calls
}

// DeleteTransitGatewayVpcAttachment calls DeleteTransitGatewayVpcAttachmentFunc.
func (mock *ClientMock) DeleteTransitGatewayVpcAttachment(ctx context.Context, params *ec2.DeleteTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
	if mock.DeleteTransitGatewayVpcAttachmentFunc == nil {
		panic("ClientMock.DeleteTransitGatewayVpcAttachmentFunc: method is nil but Client.DeleteTransitGatewayVpcAttachment was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayVpcAttachmentInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteTransitGatewayVpcAttachment.Lock()
	mock.calls.DeleteTransitGatewayVpcAttachment = append(mock.calls.DeleteTransitGatewayVpcAttachment, callInfo)
	mock.lockDeleteTransitGatewayVpcAttachment.Unlock()
	return mock.DeleteTransitGatewayVpcAttachmentFunc(ctx, params, optFns...)
}

// DeleteTransitGatewayVpcAttachmentCalls gets all the calls that were made to DeleteTransitGatewayVpcAttachment.
// Check the length with:
//     len(mockedClient.DeleteTransitGatewayVpcAttachmentCalls())
func (mock *ClientMock) DeleteTransitGatewayVpcAttachmentCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteTransitGatewayVpcAttachmentInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteTransitGatewayVpcAttachmentInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteTransitGatewayVpcAttachment.RLock()
	calls = mock.calls.DeleteTransitGatewayVpcAttachment
	mock.lockDeleteTransitGatewayVpcAttachment.RUnlock()
	return calls
}

// DeleteVolume calls DeleteVolumeFunc.
func (mock *ClientMock) DeleteVolume(ctx context.Context, params *ec2.DeleteVolumeInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVolumeOutput, error) {
	if mock.DeleteVolumeFunc == nil {
		panic("ClientMock.DeleteVolumeFunc: method is nil but Client.DeleteVolume was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteVolumeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteVolume.Lock()
	mock.calls.DeleteVolume = append(mock.calls.DeleteVolume, callInfo)
	mock.lockDeleteVolume.Unlock()
	return mock.DeleteVolumeFunc(ctx, params, optFns...)
}

// DeleteVolumeCalls gets all the calls that were made to DeleteVolume.
// Check the length with:
//     len(mockedClient.DeleteVolumeCalls())
func (mock *ClientMock) DeleteVolumeCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteVolumeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteVolumeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteVolume.RLock()
	calls = mock.calls.DeleteVolume
	mock.lockDeleteVolume.RUnlock()
	return calls
}

// DeleteVpc calls DeleteVpcFunc.
func (mock *ClientMock) DeleteVpc(ctx context.Context, params *ec2.DeleteVpcInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcOutput, error) {
	if mock.DeleteVpcFunc == nil {
		panic("ClientMock.DeleteVpcFunc: method is nil but Client.DeleteVpc was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteVpcInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteVpc.Lock()
	mock.calls.DeleteVpc = append(mock.calls.DeleteVpc, callInfo)
	mock.lockDeleteVpc.Unlock()
	return mock.DeleteVpcFunc(ctx, params, optFns...)
}

// DeleteVpcCalls gets all the calls that were made to DeleteVpc.
// Check the length with:
//     len(mockedClient.DeleteVpcCalls())
func (mock *ClientMock) DeleteVpcCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteVpcInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteVpcInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteVpc.RLock()
	calls = mock.calls.DeleteVpc
	mock.lockDeleteVpc.RUnlock()
	return calls
}

// DeleteVpcEndpointConnectionNotifications calls DeleteVpcEndpointConnectionNotificationsFunc.
func (mock *ClientMock) DeleteVpcEndpointConnectionNotifications(ctx context.Context, params *ec2.DeleteVpcEndpointConnectionNotificationsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
	if mock.DeleteVpcEndpointConnectionNotificationsFunc == nil {
		panic("ClientMock.DeleteVpcEndpointConnectionNotificationsFunc: method is nil but Client.DeleteVpcEndpointConnectionNotifications was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteVpcEndpointConnectionNotificationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteVpcEndpointConnectionNotifications.Lock()
	mock.calls.DeleteVpcEndpointConnectionNotifications = append(mock.calls.DeleteVpcEndpointConnectionNotifications, callInfo)
	mock.lockDeleteVpcEndpointConnectionNotifications.Unlock()
	return mock.DeleteVpcEndpointConnectionNotificationsFunc(ctx, params, optFns...)
}

// DeleteVpcEndpointConnectionNotificationsCalls gets all the calls that were made to DeleteVpcEndpointConnectionNotifications.
// Check the length with:
//     len(mockedClient.DeleteVpcEndpointConnectionNotificationsCalls())
func (mock *ClientMock) DeleteVpcEndpointConnectionNotificationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteVpcEndpointConnectionNotificationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteVpcEndpointConnectionNotificationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteVpcEndpointConnectionNotifications.RLock()
	calls = mock.calls.DeleteVpcEndpointConnectionNotifications
	mock.lockDeleteVpcEndpointConnectionNotifications.RUnlock()
	return calls
}

// DeleteVpcEndpointServiceConfigurations calls DeleteVpcEndpointServiceConfigurationsFunc.
func (mock *ClientMock) DeleteVpcEndpointServiceConfigurations(ctx context.Context, params *ec2.DeleteVpcEndpointServiceConfigurationsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
	if mock.DeleteVpcEndpointServiceConfigurationsFunc == nil {
		panic("ClientMock.DeleteVpcEndpointServiceConfigurationsFunc: method is nil but Client.DeleteVpcEndpointServiceConfigurations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteVpcEndpointServiceConfigurationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteVpcEndpointServiceConfigurations.Lock()
	mock.calls.DeleteVpcEndpointServiceConfigurations = append(mock.calls.DeleteVpcEndpointServiceConfigurations, callInfo)
	mock.lockDeleteVpcEndpointServiceConfigurations.Unlock()
	return mock.DeleteVpcEndpointServiceConfigurationsFunc(ctx, params, optFns...)
}

// DeleteVpcEndpointServiceConfigurationsCalls gets all the calls that were made to DeleteVpcEndpointServiceConfigurations.
// Check the length with:
//     len(mockedClient.DeleteVpcEndpointServiceConfigurationsCalls())
func (mock *ClientMock) DeleteVpcEndpointServiceConfigurationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteVpcEndpointServiceConfigurationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteVpcEndpointServiceConfigurationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteVpcEndpointServiceConfigurations.RLock()
	calls = mock.calls.DeleteVpcEndpointServiceConfigurations
	mock.lockDeleteVpcEndpointServiceConfigurations.RUnlock()
	return calls
}

// DeleteVpcEndpoints calls DeleteVpcEndpointsFunc.
func (mock *ClientMock) DeleteVpcEndpoints(ctx context.Context, params *ec2.DeleteVpcEndpointsInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcEndpointsOutput, error) {
	if mock.DeleteVpcEndpointsFunc == nil {
		panic("ClientMock.DeleteVpcEndpointsFunc: method is nil but Client.DeleteVpcEndpoints was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteVpcEndpointsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteVpcEndpoints.Lock()
	mock.calls.DeleteVpcEndpoints = append(mock.calls.DeleteVpcEndpoints, callInfo)
	mock.lockDeleteVpcEndpoints.Unlock()
	return mock.DeleteVpcEndpointsFunc(ctx, params, optFns...)
}

// DeleteVpcEndpointsCalls gets all the calls that were made to DeleteVpcEndpoints.
// Check the length with:
//     len(mockedClient.DeleteVpcEndpointsCalls())
func (mock *ClientMock) DeleteVpcEndpointsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteVpcEndpointsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteVpcEndpointsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteVpcEndpoints.RLock()
	calls = mock.calls.DeleteVpcEndpoints
	mock.lockDeleteVpcEndpoints.RUnlock()
	return calls
}

// DeleteVpcPeeringConnection calls DeleteVpcPeeringConnectionFunc.
func (mock *ClientMock) DeleteVpcPeeringConnection(ctx context.Context, params *ec2.DeleteVpcPeeringConnectionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
	if mock.DeleteVpcPeeringConnectionFunc == nil {
		panic("ClientMock.DeleteVpcPeeringConnectionFunc: method is nil but Client.DeleteVpcPeeringConnection was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteVpcPeeringConnectionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteVpcPeeringConnection.Lock()
	mock.calls.DeleteVpcPeeringConnection = append(mock.calls.DeleteVpcPeeringConnection, callInfo)
	mock.lockDeleteVpcPeeringConnection.Unlock()
	return mock.DeleteVpcPeeringConnectionFunc(ctx, params, optFns...)
}

// DeleteVpcPeeringConnectionCalls gets all the calls that were made to DeleteVpcPeeringConnection.
// Check the length with:
//     len(mockedClient.DeleteVpcPeeringConnectionCalls())
func (mock *ClientMock) DeleteVpcPeeringConnectionCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteVpcPeeringConnectionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteVpcPeeringConnectionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteVpcPeeringConnection.RLock()
	calls = mock.calls.DeleteVpcPeeringConnection
	mock.lockDeleteVpcPeeringConnection.RUnlock()
	return calls
}

// DeleteVpnConnection calls DeleteVpnConnectionFunc.
func (mock *ClientMock) DeleteVpnConnection(ctx context.Context, params *ec2.DeleteVpnConnectionInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpnConnectionOutput, error) {
	if mock.DeleteVpnConnectionFunc == nil {
		panic("ClientMock.DeleteVpnConnectionFunc: method is nil but Client.DeleteVpnConnection was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteVpnConnectionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteVpnConnection.Lock()
	mock.calls.DeleteVpnConnection = append(mock.calls.DeleteVpnConnection, callInfo)
	mock.lockDeleteVpnConnection.Unlock()
	return mock.DeleteVpnConnectionFunc(ctx, params, optFns...)
}

// DeleteVpnConnectionCalls gets all the calls that were made to DeleteVpnConnection.
// Check the length with:
//     len(mockedClient.DeleteVpnConnectionCalls())
func (mock *ClientMock) DeleteVpnConnectionCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteVpnConnectionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteVpnConnectionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteVpnConnection.RLock()
	calls = mock.calls.DeleteVpnConnection
	mock.lockDeleteVpnConnection.RUnlock()
	return calls
}

// DeleteVpnConnectionRoute calls DeleteVpnConnectionRouteFunc.
func (mock *ClientMock) DeleteVpnConnectionRoute(ctx context.Context, params *ec2.DeleteVpnConnectionRouteInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpnConnectionRouteOutput, error) {
	if mock.DeleteVpnConnectionRouteFunc == nil {
		panic("ClientMock.DeleteVpnConnectionRouteFunc: method is nil but Client.DeleteVpnConnectionRoute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteVpnConnectionRouteInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteVpnConnectionRoute.Lock()
	mock.calls.DeleteVpnConnectionRoute = append(mock.calls.DeleteVpnConnectionRoute, callInfo)
	mock.lockDeleteVpnConnectionRoute.Unlock()
	return mock.DeleteVpnConnectionRouteFunc(ctx, params, optFns...)
}

// DeleteVpnConnectionRouteCalls gets all the calls that were made to DeleteVpnConnectionRoute.
// Check the length with:
//     len(mockedClient.DeleteVpnConnectionRouteCalls())
func (mock *ClientMock) DeleteVpnConnectionRouteCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteVpnConnectionRouteInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteVpnConnectionRouteInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteVpnConnectionRoute.RLock()
	calls = mock.calls.DeleteVpnConnectionRoute
	mock.lockDeleteVpnConnectionRoute.RUnlock()
	return calls
}

// DeleteVpnGateway calls DeleteVpnGatewayFunc.
func (mock *ClientMock) DeleteVpnGateway(ctx context.Context, params *ec2.DeleteVpnGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DeleteVpnGatewayOutput, error) {
	if mock.DeleteVpnGatewayFunc == nil {
		panic("ClientMock.DeleteVpnGatewayFunc: method is nil but Client.DeleteVpnGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeleteVpnGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeleteVpnGateway.Lock()
	mock.calls.DeleteVpnGateway = append(mock.calls.DeleteVpnGateway, callInfo)
	mock.lockDeleteVpnGateway.Unlock()
	return mock.DeleteVpnGatewayFunc(ctx, params, optFns...)
}

// DeleteVpnGatewayCalls gets all the calls that were made to DeleteVpnGateway.
// Check the length with:
//     len(mockedClient.DeleteVpnGatewayCalls())
func (mock *ClientMock) DeleteVpnGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeleteVpnGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeleteVpnGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeleteVpnGateway.RLock()
	calls = mock.calls.DeleteVpnGateway
	mock.lockDeleteVpnGateway.RUnlock()
	return calls
}

// DeprovisionByoipCidr calls DeprovisionByoipCidrFunc.
func (mock *ClientMock) DeprovisionByoipCidr(ctx context.Context, params *ec2.DeprovisionByoipCidrInput, optFns ...func(*ec2.Options)) (*ec2.DeprovisionByoipCidrOutput, error) {
	if mock.DeprovisionByoipCidrFunc == nil {
		panic("ClientMock.DeprovisionByoipCidrFunc: method is nil but Client.DeprovisionByoipCidr was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeprovisionByoipCidrInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeprovisionByoipCidr.Lock()
	mock.calls.DeprovisionByoipCidr = append(mock.calls.DeprovisionByoipCidr, callInfo)
	mock.lockDeprovisionByoipCidr.Unlock()
	return mock.DeprovisionByoipCidrFunc(ctx, params, optFns...)
}

// DeprovisionByoipCidrCalls gets all the calls that were made to DeprovisionByoipCidr.
// Check the length with:
//     len(mockedClient.DeprovisionByoipCidrCalls())
func (mock *ClientMock) DeprovisionByoipCidrCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeprovisionByoipCidrInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeprovisionByoipCidrInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeprovisionByoipCidr.RLock()
	calls = mock.calls.DeprovisionByoipCidr
	mock.lockDeprovisionByoipCidr.RUnlock()
	return calls
}

// DeprovisionIpamPoolCidr calls DeprovisionIpamPoolCidrFunc.
func (mock *ClientMock) DeprovisionIpamPoolCidr(ctx context.Context, params *ec2.DeprovisionIpamPoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.DeprovisionIpamPoolCidrOutput, error) {
	if mock.DeprovisionIpamPoolCidrFunc == nil {
		panic("ClientMock.DeprovisionIpamPoolCidrFunc: method is nil but Client.DeprovisionIpamPoolCidr was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeprovisionIpamPoolCidrInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeprovisionIpamPoolCidr.Lock()
	mock.calls.DeprovisionIpamPoolCidr = append(mock.calls.DeprovisionIpamPoolCidr, callInfo)
	mock.lockDeprovisionIpamPoolCidr.Unlock()
	return mock.DeprovisionIpamPoolCidrFunc(ctx, params, optFns...)
}

// DeprovisionIpamPoolCidrCalls gets all the calls that were made to DeprovisionIpamPoolCidr.
// Check the length with:
//     len(mockedClient.DeprovisionIpamPoolCidrCalls())
func (mock *ClientMock) DeprovisionIpamPoolCidrCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeprovisionIpamPoolCidrInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeprovisionIpamPoolCidrInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeprovisionIpamPoolCidr.RLock()
	calls = mock.calls.DeprovisionIpamPoolCidr
	mock.lockDeprovisionIpamPoolCidr.RUnlock()
	return calls
}

// DeprovisionPublicIpv4PoolCidr calls DeprovisionPublicIpv4PoolCidrFunc.
func (mock *ClientMock) DeprovisionPublicIpv4PoolCidr(ctx context.Context, params *ec2.DeprovisionPublicIpv4PoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.DeprovisionPublicIpv4PoolCidrOutput, error) {
	if mock.DeprovisionPublicIpv4PoolCidrFunc == nil {
		panic("ClientMock.DeprovisionPublicIpv4PoolCidrFunc: method is nil but Client.DeprovisionPublicIpv4PoolCidr was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeprovisionPublicIpv4PoolCidrInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeprovisionPublicIpv4PoolCidr.Lock()
	mock.calls.DeprovisionPublicIpv4PoolCidr = append(mock.calls.DeprovisionPublicIpv4PoolCidr, callInfo)
	mock.lockDeprovisionPublicIpv4PoolCidr.Unlock()
	return mock.DeprovisionPublicIpv4PoolCidrFunc(ctx, params, optFns...)
}

// DeprovisionPublicIpv4PoolCidrCalls gets all the calls that were made to DeprovisionPublicIpv4PoolCidr.
// Check the length with:
//     len(mockedClient.DeprovisionPublicIpv4PoolCidrCalls())
func (mock *ClientMock) DeprovisionPublicIpv4PoolCidrCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeprovisionPublicIpv4PoolCidrInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeprovisionPublicIpv4PoolCidrInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeprovisionPublicIpv4PoolCidr.RLock()
	calls = mock.calls.DeprovisionPublicIpv4PoolCidr
	mock.lockDeprovisionPublicIpv4PoolCidr.RUnlock()
	return calls
}

// DeregisterImage calls DeregisterImageFunc.
func (mock *ClientMock) DeregisterImage(ctx context.Context, params *ec2.DeregisterImageInput, optFns ...func(*ec2.Options)) (*ec2.DeregisterImageOutput, error) {
	if mock.DeregisterImageFunc == nil {
		panic("ClientMock.DeregisterImageFunc: method is nil but Client.DeregisterImage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeregisterImageInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeregisterImage.Lock()
	mock.calls.DeregisterImage = append(mock.calls.DeregisterImage, callInfo)
	mock.lockDeregisterImage.Unlock()
	return mock.DeregisterImageFunc(ctx, params, optFns...)
}

// DeregisterImageCalls gets all the calls that were made to DeregisterImage.
// Check the length with:
//     len(mockedClient.DeregisterImageCalls())
func (mock *ClientMock) DeregisterImageCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeregisterImageInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeregisterImageInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeregisterImage.RLock()
	calls = mock.calls.DeregisterImage
	mock.lockDeregisterImage.RUnlock()
	return calls
}

// DeregisterInstanceEventNotificationAttributes calls DeregisterInstanceEventNotificationAttributesFunc.
func (mock *ClientMock) DeregisterInstanceEventNotificationAttributes(ctx context.Context, params *ec2.DeregisterInstanceEventNotificationAttributesInput, optFns ...func(*ec2.Options)) (*ec2.DeregisterInstanceEventNotificationAttributesOutput, error) {
	if mock.DeregisterInstanceEventNotificationAttributesFunc == nil {
		panic("ClientMock.DeregisterInstanceEventNotificationAttributesFunc: method is nil but Client.DeregisterInstanceEventNotificationAttributes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeregisterInstanceEventNotificationAttributesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeregisterInstanceEventNotificationAttributes.Lock()
	mock.calls.DeregisterInstanceEventNotificationAttributes = append(mock.calls.DeregisterInstanceEventNotificationAttributes, callInfo)
	mock.lockDeregisterInstanceEventNotificationAttributes.Unlock()
	return mock.DeregisterInstanceEventNotificationAttributesFunc(ctx, params, optFns...)
}

// DeregisterInstanceEventNotificationAttributesCalls gets all the calls that were made to DeregisterInstanceEventNotificationAttributes.
// Check the length with:
//     len(mockedClient.DeregisterInstanceEventNotificationAttributesCalls())
func (mock *ClientMock) DeregisterInstanceEventNotificationAttributesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeregisterInstanceEventNotificationAttributesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeregisterInstanceEventNotificationAttributesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeregisterInstanceEventNotificationAttributes.RLock()
	calls = mock.calls.DeregisterInstanceEventNotificationAttributes
	mock.lockDeregisterInstanceEventNotificationAttributes.RUnlock()
	return calls
}

// DeregisterTransitGatewayMulticastGroupMembers calls DeregisterTransitGatewayMulticastGroupMembersFunc.
func (mock *ClientMock) DeregisterTransitGatewayMulticastGroupMembers(ctx context.Context, params *ec2.DeregisterTransitGatewayMulticastGroupMembersInput, optFns ...func(*ec2.Options)) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error) {
	if mock.DeregisterTransitGatewayMulticastGroupMembersFunc == nil {
		panic("ClientMock.DeregisterTransitGatewayMulticastGroupMembersFunc: method is nil but Client.DeregisterTransitGatewayMulticastGroupMembers was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeregisterTransitGatewayMulticastGroupMembers.Lock()
	mock.calls.DeregisterTransitGatewayMulticastGroupMembers = append(mock.calls.DeregisterTransitGatewayMulticastGroupMembers, callInfo)
	mock.lockDeregisterTransitGatewayMulticastGroupMembers.Unlock()
	return mock.DeregisterTransitGatewayMulticastGroupMembersFunc(ctx, params, optFns...)
}

// DeregisterTransitGatewayMulticastGroupMembersCalls gets all the calls that were made to DeregisterTransitGatewayMulticastGroupMembers.
// Check the length with:
//     len(mockedClient.DeregisterTransitGatewayMulticastGroupMembersCalls())
func (mock *ClientMock) DeregisterTransitGatewayMulticastGroupMembersCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeregisterTransitGatewayMulticastGroupMembersInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeregisterTransitGatewayMulticastGroupMembers.RLock()
	calls = mock.calls.DeregisterTransitGatewayMulticastGroupMembers
	mock.lockDeregisterTransitGatewayMulticastGroupMembers.RUnlock()
	return calls
}

// DeregisterTransitGatewayMulticastGroupSources calls DeregisterTransitGatewayMulticastGroupSourcesFunc.
func (mock *ClientMock) DeregisterTransitGatewayMulticastGroupSources(ctx context.Context, params *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput, optFns ...func(*ec2.Options)) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error) {
	if mock.DeregisterTransitGatewayMulticastGroupSourcesFunc == nil {
		panic("ClientMock.DeregisterTransitGatewayMulticastGroupSourcesFunc: method is nil but Client.DeregisterTransitGatewayMulticastGroupSources was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDeregisterTransitGatewayMulticastGroupSources.Lock()
	mock.calls.DeregisterTransitGatewayMulticastGroupSources = append(mock.calls.DeregisterTransitGatewayMulticastGroupSources, callInfo)
	mock.lockDeregisterTransitGatewayMulticastGroupSources.Unlock()
	return mock.DeregisterTransitGatewayMulticastGroupSourcesFunc(ctx, params, optFns...)
}

// DeregisterTransitGatewayMulticastGroupSourcesCalls gets all the calls that were made to DeregisterTransitGatewayMulticastGroupSources.
// Check the length with:
//     len(mockedClient.DeregisterTransitGatewayMulticastGroupSourcesCalls())
func (mock *ClientMock) DeregisterTransitGatewayMulticastGroupSourcesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDeregisterTransitGatewayMulticastGroupSources.RLock()
	calls = mock.calls.DeregisterTransitGatewayMulticastGroupSources
	mock.lockDeregisterTransitGatewayMulticastGroupSources.RUnlock()
	return calls
}

// DescribeAccountAttributes calls DescribeAccountAttributesFunc.
func (mock *ClientMock) DescribeAccountAttributes(ctx context.Context, params *ec2.DescribeAccountAttributesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAccountAttributesOutput, error) {
	if mock.DescribeAccountAttributesFunc == nil {
		panic("ClientMock.DescribeAccountAttributesFunc: method is nil but Client.DescribeAccountAttributes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeAccountAttributesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeAccountAttributes.Lock()
	mock.calls.DescribeAccountAttributes = append(mock.calls.DescribeAccountAttributes, callInfo)
	mock.lockDescribeAccountAttributes.Unlock()
	return mock.DescribeAccountAttributesFunc(ctx, params, optFns...)
}

// DescribeAccountAttributesCalls gets all the calls that were made to DescribeAccountAttributes.
// Check the length with:
//     len(mockedClient.DescribeAccountAttributesCalls())
func (mock *ClientMock) DescribeAccountAttributesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeAccountAttributesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeAccountAttributesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeAccountAttributes.RLock()
	calls = mock.calls.DescribeAccountAttributes
	mock.lockDescribeAccountAttributes.RUnlock()
	return calls
}

// DescribeAddresses calls DescribeAddressesFunc.
func (mock *ClientMock) DescribeAddresses(ctx context.Context, params *ec2.DescribeAddressesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAddressesOutput, error) {
	if mock.DescribeAddressesFunc == nil {
		panic("ClientMock.DescribeAddressesFunc: method is nil but Client.DescribeAddresses was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeAddressesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeAddresses.Lock()
	mock.calls.DescribeAddresses = append(mock.calls.DescribeAddresses, callInfo)
	mock.lockDescribeAddresses.Unlock()
	return mock.DescribeAddressesFunc(ctx, params, optFns...)
}

// DescribeAddressesCalls gets all the calls that were made to DescribeAddresses.
// Check the length with:
//     len(mockedClient.DescribeAddressesCalls())
func (mock *ClientMock) DescribeAddressesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeAddressesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeAddressesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeAddresses.RLock()
	calls = mock.calls.DescribeAddresses
	mock.lockDescribeAddresses.RUnlock()
	return calls
}

// DescribeAddressesAttribute calls DescribeAddressesAttributeFunc.
func (mock *ClientMock) DescribeAddressesAttribute(ctx context.Context, params *ec2.DescribeAddressesAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAddressesAttributeOutput, error) {
	if mock.DescribeAddressesAttributeFunc == nil {
		panic("ClientMock.DescribeAddressesAttributeFunc: method is nil but Client.DescribeAddressesAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeAddressesAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeAddressesAttribute.Lock()
	mock.calls.DescribeAddressesAttribute = append(mock.calls.DescribeAddressesAttribute, callInfo)
	mock.lockDescribeAddressesAttribute.Unlock()
	return mock.DescribeAddressesAttributeFunc(ctx, params, optFns...)
}

// DescribeAddressesAttributeCalls gets all the calls that were made to DescribeAddressesAttribute.
// Check the length with:
//     len(mockedClient.DescribeAddressesAttributeCalls())
func (mock *ClientMock) DescribeAddressesAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeAddressesAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeAddressesAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeAddressesAttribute.RLock()
	calls = mock.calls.DescribeAddressesAttribute
	mock.lockDescribeAddressesAttribute.RUnlock()
	return calls
}

// DescribeAggregateIdFormat calls DescribeAggregateIdFormatFunc.
func (mock *ClientMock) DescribeAggregateIdFormat(ctx context.Context, params *ec2.DescribeAggregateIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAggregateIdFormatOutput, error) {
	if mock.DescribeAggregateIdFormatFunc == nil {
		panic("ClientMock.DescribeAggregateIdFormatFunc: method is nil but Client.DescribeAggregateIdFormat was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeAggregateIdFormatInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeAggregateIdFormat.Lock()
	mock.calls.DescribeAggregateIdFormat = append(mock.calls.DescribeAggregateIdFormat, callInfo)
	mock.lockDescribeAggregateIdFormat.Unlock()
	return mock.DescribeAggregateIdFormatFunc(ctx, params, optFns...)
}

// DescribeAggregateIdFormatCalls gets all the calls that were made to DescribeAggregateIdFormat.
// Check the length with:
//     len(mockedClient.DescribeAggregateIdFormatCalls())
func (mock *ClientMock) DescribeAggregateIdFormatCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeAggregateIdFormatInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeAggregateIdFormatInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeAggregateIdFormat.RLock()
	calls = mock.calls.DescribeAggregateIdFormat
	mock.lockDescribeAggregateIdFormat.RUnlock()
	return calls
}

// DescribeAvailabilityZones calls DescribeAvailabilityZonesFunc.
func (mock *ClientMock) DescribeAvailabilityZones(ctx context.Context, params *ec2.DescribeAvailabilityZonesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeAvailabilityZonesOutput, error) {
	if mock.DescribeAvailabilityZonesFunc == nil {
		panic("ClientMock.DescribeAvailabilityZonesFunc: method is nil but Client.DescribeAvailabilityZones was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeAvailabilityZonesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeAvailabilityZones.Lock()
	mock.calls.DescribeAvailabilityZones = append(mock.calls.DescribeAvailabilityZones, callInfo)
	mock.lockDescribeAvailabilityZones.Unlock()
	return mock.DescribeAvailabilityZonesFunc(ctx, params, optFns...)
}

// DescribeAvailabilityZonesCalls gets all the calls that were made to DescribeAvailabilityZones.
// Check the length with:
//     len(mockedClient.DescribeAvailabilityZonesCalls())
func (mock *ClientMock) DescribeAvailabilityZonesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeAvailabilityZonesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeAvailabilityZonesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeAvailabilityZones.RLock()
	calls = mock.calls.DescribeAvailabilityZones
	mock.lockDescribeAvailabilityZones.RUnlock()
	return calls
}

// DescribeBundleTasks calls DescribeBundleTasksFunc.
func (mock *ClientMock) DescribeBundleTasks(ctx context.Context, params *ec2.DescribeBundleTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeBundleTasksOutput, error) {
	if mock.DescribeBundleTasksFunc == nil {
		panic("ClientMock.DescribeBundleTasksFunc: method is nil but Client.DescribeBundleTasks was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeBundleTasksInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeBundleTasks.Lock()
	mock.calls.DescribeBundleTasks = append(mock.calls.DescribeBundleTasks, callInfo)
	mock.lockDescribeBundleTasks.Unlock()
	return mock.DescribeBundleTasksFunc(ctx, params, optFns...)
}

// DescribeBundleTasksCalls gets all the calls that were made to DescribeBundleTasks.
// Check the length with:
//     len(mockedClient.DescribeBundleTasksCalls())
func (mock *ClientMock) DescribeBundleTasksCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeBundleTasksInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeBundleTasksInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeBundleTasks.RLock()
	calls = mock.calls.DescribeBundleTasks
	mock.lockDescribeBundleTasks.RUnlock()
	return calls
}

// DescribeByoipCidrs calls DescribeByoipCidrsFunc.
func (mock *ClientMock) DescribeByoipCidrs(ctx context.Context, params *ec2.DescribeByoipCidrsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeByoipCidrsOutput, error) {
	if mock.DescribeByoipCidrsFunc == nil {
		panic("ClientMock.DescribeByoipCidrsFunc: method is nil but Client.DescribeByoipCidrs was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeByoipCidrsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeByoipCidrs.Lock()
	mock.calls.DescribeByoipCidrs = append(mock.calls.DescribeByoipCidrs, callInfo)
	mock.lockDescribeByoipCidrs.Unlock()
	return mock.DescribeByoipCidrsFunc(ctx, params, optFns...)
}

// DescribeByoipCidrsCalls gets all the calls that were made to DescribeByoipCidrs.
// Check the length with:
//     len(mockedClient.DescribeByoipCidrsCalls())
func (mock *ClientMock) DescribeByoipCidrsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeByoipCidrsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeByoipCidrsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeByoipCidrs.RLock()
	calls = mock.calls.DescribeByoipCidrs
	mock.lockDescribeByoipCidrs.RUnlock()
	return calls
}

// DescribeCapacityReservationFleets calls DescribeCapacityReservationFleetsFunc.
func (mock *ClientMock) DescribeCapacityReservationFleets(ctx context.Context, params *ec2.DescribeCapacityReservationFleetsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCapacityReservationFleetsOutput, error) {
	if mock.DescribeCapacityReservationFleetsFunc == nil {
		panic("ClientMock.DescribeCapacityReservationFleetsFunc: method is nil but Client.DescribeCapacityReservationFleets was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeCapacityReservationFleetsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeCapacityReservationFleets.Lock()
	mock.calls.DescribeCapacityReservationFleets = append(mock.calls.DescribeCapacityReservationFleets, callInfo)
	mock.lockDescribeCapacityReservationFleets.Unlock()
	return mock.DescribeCapacityReservationFleetsFunc(ctx, params, optFns...)
}

// DescribeCapacityReservationFleetsCalls gets all the calls that were made to DescribeCapacityReservationFleets.
// Check the length with:
//     len(mockedClient.DescribeCapacityReservationFleetsCalls())
func (mock *ClientMock) DescribeCapacityReservationFleetsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeCapacityReservationFleetsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeCapacityReservationFleetsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeCapacityReservationFleets.RLock()
	calls = mock.calls.DescribeCapacityReservationFleets
	mock.lockDescribeCapacityReservationFleets.RUnlock()
	return calls
}

// DescribeCapacityReservations calls DescribeCapacityReservationsFunc.
func (mock *ClientMock) DescribeCapacityReservations(ctx context.Context, params *ec2.DescribeCapacityReservationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCapacityReservationsOutput, error) {
	if mock.DescribeCapacityReservationsFunc == nil {
		panic("ClientMock.DescribeCapacityReservationsFunc: method is nil but Client.DescribeCapacityReservations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeCapacityReservationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeCapacityReservations.Lock()
	mock.calls.DescribeCapacityReservations = append(mock.calls.DescribeCapacityReservations, callInfo)
	mock.lockDescribeCapacityReservations.Unlock()
	return mock.DescribeCapacityReservationsFunc(ctx, params, optFns...)
}

// DescribeCapacityReservationsCalls gets all the calls that were made to DescribeCapacityReservations.
// Check the length with:
//     len(mockedClient.DescribeCapacityReservationsCalls())
func (mock *ClientMock) DescribeCapacityReservationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeCapacityReservationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeCapacityReservationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeCapacityReservations.RLock()
	calls = mock.calls.DescribeCapacityReservations
	mock.lockDescribeCapacityReservations.RUnlock()
	return calls
}

// DescribeCarrierGateways calls DescribeCarrierGatewaysFunc.
func (mock *ClientMock) DescribeCarrierGateways(ctx context.Context, params *ec2.DescribeCarrierGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCarrierGatewaysOutput, error) {
	if mock.DescribeCarrierGatewaysFunc == nil {
		panic("ClientMock.DescribeCarrierGatewaysFunc: method is nil but Client.DescribeCarrierGateways was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeCarrierGatewaysInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeCarrierGateways.Lock()
	mock.calls.DescribeCarrierGateways = append(mock.calls.DescribeCarrierGateways, callInfo)
	mock.lockDescribeCarrierGateways.Unlock()
	return mock.DescribeCarrierGatewaysFunc(ctx, params, optFns...)
}

// DescribeCarrierGatewaysCalls gets all the calls that were made to DescribeCarrierGateways.
// Check the length with:
//     len(mockedClient.DescribeCarrierGatewaysCalls())
func (mock *ClientMock) DescribeCarrierGatewaysCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeCarrierGatewaysInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeCarrierGatewaysInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeCarrierGateways.RLock()
	calls = mock.calls.DescribeCarrierGateways
	mock.lockDescribeCarrierGateways.RUnlock()
	return calls
}

// DescribeClassicLinkInstances calls DescribeClassicLinkInstancesFunc.
func (mock *ClientMock) DescribeClassicLinkInstances(ctx context.Context, params *ec2.DescribeClassicLinkInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	if mock.DescribeClassicLinkInstancesFunc == nil {
		panic("ClientMock.DescribeClassicLinkInstancesFunc: method is nil but Client.DescribeClassicLinkInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeClassicLinkInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeClassicLinkInstances.Lock()
	mock.calls.DescribeClassicLinkInstances = append(mock.calls.DescribeClassicLinkInstances, callInfo)
	mock.lockDescribeClassicLinkInstances.Unlock()
	return mock.DescribeClassicLinkInstancesFunc(ctx, params, optFns...)
}

// DescribeClassicLinkInstancesCalls gets all the calls that were made to DescribeClassicLinkInstances.
// Check the length with:
//     len(mockedClient.DescribeClassicLinkInstancesCalls())
func (mock *ClientMock) DescribeClassicLinkInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeClassicLinkInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeClassicLinkInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeClassicLinkInstances.RLock()
	calls = mock.calls.DescribeClassicLinkInstances
	mock.lockDescribeClassicLinkInstances.RUnlock()
	return calls
}

// DescribeClientVpnAuthorizationRules calls DescribeClientVpnAuthorizationRulesFunc.
func (mock *ClientMock) DescribeClientVpnAuthorizationRules(ctx context.Context, params *ec2.DescribeClientVpnAuthorizationRulesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
	if mock.DescribeClientVpnAuthorizationRulesFunc == nil {
		panic("ClientMock.DescribeClientVpnAuthorizationRulesFunc: method is nil but Client.DescribeClientVpnAuthorizationRules was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeClientVpnAuthorizationRulesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeClientVpnAuthorizationRules.Lock()
	mock.calls.DescribeClientVpnAuthorizationRules = append(mock.calls.DescribeClientVpnAuthorizationRules, callInfo)
	mock.lockDescribeClientVpnAuthorizationRules.Unlock()
	return mock.DescribeClientVpnAuthorizationRulesFunc(ctx, params, optFns...)
}

// DescribeClientVpnAuthorizationRulesCalls gets all the calls that were made to DescribeClientVpnAuthorizationRules.
// Check the length with:
//     len(mockedClient.DescribeClientVpnAuthorizationRulesCalls())
func (mock *ClientMock) DescribeClientVpnAuthorizationRulesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeClientVpnAuthorizationRulesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeClientVpnAuthorizationRulesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeClientVpnAuthorizationRules.RLock()
	calls = mock.calls.DescribeClientVpnAuthorizationRules
	mock.lockDescribeClientVpnAuthorizationRules.RUnlock()
	return calls
}

// DescribeClientVpnConnections calls DescribeClientVpnConnectionsFunc.
func (mock *ClientMock) DescribeClientVpnConnections(ctx context.Context, params *ec2.DescribeClientVpnConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnConnectionsOutput, error) {
	if mock.DescribeClientVpnConnectionsFunc == nil {
		panic("ClientMock.DescribeClientVpnConnectionsFunc: method is nil but Client.DescribeClientVpnConnections was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeClientVpnConnectionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeClientVpnConnections.Lock()
	mock.calls.DescribeClientVpnConnections = append(mock.calls.DescribeClientVpnConnections, callInfo)
	mock.lockDescribeClientVpnConnections.Unlock()
	return mock.DescribeClientVpnConnectionsFunc(ctx, params, optFns...)
}

// DescribeClientVpnConnectionsCalls gets all the calls that were made to DescribeClientVpnConnections.
// Check the length with:
//     len(mockedClient.DescribeClientVpnConnectionsCalls())
func (mock *ClientMock) DescribeClientVpnConnectionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeClientVpnConnectionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeClientVpnConnectionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeClientVpnConnections.RLock()
	calls = mock.calls.DescribeClientVpnConnections
	mock.lockDescribeClientVpnConnections.RUnlock()
	return calls
}

// DescribeClientVpnEndpoints calls DescribeClientVpnEndpointsFunc.
func (mock *ClientMock) DescribeClientVpnEndpoints(ctx context.Context, params *ec2.DescribeClientVpnEndpointsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnEndpointsOutput, error) {
	if mock.DescribeClientVpnEndpointsFunc == nil {
		panic("ClientMock.DescribeClientVpnEndpointsFunc: method is nil but Client.DescribeClientVpnEndpoints was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeClientVpnEndpointsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeClientVpnEndpoints.Lock()
	mock.calls.DescribeClientVpnEndpoints = append(mock.calls.DescribeClientVpnEndpoints, callInfo)
	mock.lockDescribeClientVpnEndpoints.Unlock()
	return mock.DescribeClientVpnEndpointsFunc(ctx, params, optFns...)
}

// DescribeClientVpnEndpointsCalls gets all the calls that were made to DescribeClientVpnEndpoints.
// Check the length with:
//     len(mockedClient.DescribeClientVpnEndpointsCalls())
func (mock *ClientMock) DescribeClientVpnEndpointsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeClientVpnEndpointsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeClientVpnEndpointsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeClientVpnEndpoints.RLock()
	calls = mock.calls.DescribeClientVpnEndpoints
	mock.lockDescribeClientVpnEndpoints.RUnlock()
	return calls
}

// DescribeClientVpnRoutes calls DescribeClientVpnRoutesFunc.
func (mock *ClientMock) DescribeClientVpnRoutes(ctx context.Context, params *ec2.DescribeClientVpnRoutesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnRoutesOutput, error) {
	if mock.DescribeClientVpnRoutesFunc == nil {
		panic("ClientMock.DescribeClientVpnRoutesFunc: method is nil but Client.DescribeClientVpnRoutes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeClientVpnRoutesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeClientVpnRoutes.Lock()
	mock.calls.DescribeClientVpnRoutes = append(mock.calls.DescribeClientVpnRoutes, callInfo)
	mock.lockDescribeClientVpnRoutes.Unlock()
	return mock.DescribeClientVpnRoutesFunc(ctx, params, optFns...)
}

// DescribeClientVpnRoutesCalls gets all the calls that were made to DescribeClientVpnRoutes.
// Check the length with:
//     len(mockedClient.DescribeClientVpnRoutesCalls())
func (mock *ClientMock) DescribeClientVpnRoutesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeClientVpnRoutesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeClientVpnRoutesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeClientVpnRoutes.RLock()
	calls = mock.calls.DescribeClientVpnRoutes
	mock.lockDescribeClientVpnRoutes.RUnlock()
	return calls
}

// DescribeClientVpnTargetNetworks calls DescribeClientVpnTargetNetworksFunc.
func (mock *ClientMock) DescribeClientVpnTargetNetworks(ctx context.Context, params *ec2.DescribeClientVpnTargetNetworksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
	if mock.DescribeClientVpnTargetNetworksFunc == nil {
		panic("ClientMock.DescribeClientVpnTargetNetworksFunc: method is nil but Client.DescribeClientVpnTargetNetworks was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeClientVpnTargetNetworksInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeClientVpnTargetNetworks.Lock()
	mock.calls.DescribeClientVpnTargetNetworks = append(mock.calls.DescribeClientVpnTargetNetworks, callInfo)
	mock.lockDescribeClientVpnTargetNetworks.Unlock()
	return mock.DescribeClientVpnTargetNetworksFunc(ctx, params, optFns...)
}

// DescribeClientVpnTargetNetworksCalls gets all the calls that were made to DescribeClientVpnTargetNetworks.
// Check the length with:
//     len(mockedClient.DescribeClientVpnTargetNetworksCalls())
func (mock *ClientMock) DescribeClientVpnTargetNetworksCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeClientVpnTargetNetworksInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeClientVpnTargetNetworksInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeClientVpnTargetNetworks.RLock()
	calls = mock.calls.DescribeClientVpnTargetNetworks
	mock.lockDescribeClientVpnTargetNetworks.RUnlock()
	return calls
}

// DescribeCoipPools calls DescribeCoipPoolsFunc.
func (mock *ClientMock) DescribeCoipPools(ctx context.Context, params *ec2.DescribeCoipPoolsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCoipPoolsOutput, error) {
	if mock.DescribeCoipPoolsFunc == nil {
		panic("ClientMock.DescribeCoipPoolsFunc: method is nil but Client.DescribeCoipPools was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeCoipPoolsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeCoipPools.Lock()
	mock.calls.DescribeCoipPools = append(mock.calls.DescribeCoipPools, callInfo)
	mock.lockDescribeCoipPools.Unlock()
	return mock.DescribeCoipPoolsFunc(ctx, params, optFns...)
}

// DescribeCoipPoolsCalls gets all the calls that were made to DescribeCoipPools.
// Check the length with:
//     len(mockedClient.DescribeCoipPoolsCalls())
func (mock *ClientMock) DescribeCoipPoolsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeCoipPoolsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeCoipPoolsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeCoipPools.RLock()
	calls = mock.calls.DescribeCoipPools
	mock.lockDescribeCoipPools.RUnlock()
	return calls
}

// DescribeConversionTasks calls DescribeConversionTasksFunc.
func (mock *ClientMock) DescribeConversionTasks(ctx context.Context, params *ec2.DescribeConversionTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeConversionTasksOutput, error) {
	if mock.DescribeConversionTasksFunc == nil {
		panic("ClientMock.DescribeConversionTasksFunc: method is nil but Client.DescribeConversionTasks was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeConversionTasksInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeConversionTasks.Lock()
	mock.calls.DescribeConversionTasks = append(mock.calls.DescribeConversionTasks, callInfo)
	mock.lockDescribeConversionTasks.Unlock()
	return mock.DescribeConversionTasksFunc(ctx, params, optFns...)
}

// DescribeConversionTasksCalls gets all the calls that were made to DescribeConversionTasks.
// Check the length with:
//     len(mockedClient.DescribeConversionTasksCalls())
func (mock *ClientMock) DescribeConversionTasksCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeConversionTasksInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeConversionTasksInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeConversionTasks.RLock()
	calls = mock.calls.DescribeConversionTasks
	mock.lockDescribeConversionTasks.RUnlock()
	return calls
}

// DescribeCustomerGateways calls DescribeCustomerGatewaysFunc.
func (mock *ClientMock) DescribeCustomerGateways(ctx context.Context, params *ec2.DescribeCustomerGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeCustomerGatewaysOutput, error) {
	if mock.DescribeCustomerGatewaysFunc == nil {
		panic("ClientMock.DescribeCustomerGatewaysFunc: method is nil but Client.DescribeCustomerGateways was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeCustomerGatewaysInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeCustomerGateways.Lock()
	mock.calls.DescribeCustomerGateways = append(mock.calls.DescribeCustomerGateways, callInfo)
	mock.lockDescribeCustomerGateways.Unlock()
	return mock.DescribeCustomerGatewaysFunc(ctx, params, optFns...)
}

// DescribeCustomerGatewaysCalls gets all the calls that were made to DescribeCustomerGateways.
// Check the length with:
//     len(mockedClient.DescribeCustomerGatewaysCalls())
func (mock *ClientMock) DescribeCustomerGatewaysCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeCustomerGatewaysInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeCustomerGatewaysInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeCustomerGateways.RLock()
	calls = mock.calls.DescribeCustomerGateways
	mock.lockDescribeCustomerGateways.RUnlock()
	return calls
}

// DescribeDhcpOptions calls DescribeDhcpOptionsFunc.
func (mock *ClientMock) DescribeDhcpOptions(ctx context.Context, params *ec2.DescribeDhcpOptionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeDhcpOptionsOutput, error) {
	if mock.DescribeDhcpOptionsFunc == nil {
		panic("ClientMock.DescribeDhcpOptionsFunc: method is nil but Client.DescribeDhcpOptions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeDhcpOptionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeDhcpOptions.Lock()
	mock.calls.DescribeDhcpOptions = append(mock.calls.DescribeDhcpOptions, callInfo)
	mock.lockDescribeDhcpOptions.Unlock()
	return mock.DescribeDhcpOptionsFunc(ctx, params, optFns...)
}

// DescribeDhcpOptionsCalls gets all the calls that were made to DescribeDhcpOptions.
// Check the length with:
//     len(mockedClient.DescribeDhcpOptionsCalls())
func (mock *ClientMock) DescribeDhcpOptionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeDhcpOptionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeDhcpOptionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeDhcpOptions.RLock()
	calls = mock.calls.DescribeDhcpOptions
	mock.lockDescribeDhcpOptions.RUnlock()
	return calls
}

// DescribeEgressOnlyInternetGateways calls DescribeEgressOnlyInternetGatewaysFunc.
func (mock *ClientMock) DescribeEgressOnlyInternetGateways(ctx context.Context, params *ec2.DescribeEgressOnlyInternetGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
	if mock.DescribeEgressOnlyInternetGatewaysFunc == nil {
		panic("ClientMock.DescribeEgressOnlyInternetGatewaysFunc: method is nil but Client.DescribeEgressOnlyInternetGateways was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeEgressOnlyInternetGatewaysInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeEgressOnlyInternetGateways.Lock()
	mock.calls.DescribeEgressOnlyInternetGateways = append(mock.calls.DescribeEgressOnlyInternetGateways, callInfo)
	mock.lockDescribeEgressOnlyInternetGateways.Unlock()
	return mock.DescribeEgressOnlyInternetGatewaysFunc(ctx, params, optFns...)
}

// DescribeEgressOnlyInternetGatewaysCalls gets all the calls that were made to DescribeEgressOnlyInternetGateways.
// Check the length with:
//     len(mockedClient.DescribeEgressOnlyInternetGatewaysCalls())
func (mock *ClientMock) DescribeEgressOnlyInternetGatewaysCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeEgressOnlyInternetGatewaysInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeEgressOnlyInternetGatewaysInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeEgressOnlyInternetGateways.RLock()
	calls = mock.calls.DescribeEgressOnlyInternetGateways
	mock.lockDescribeEgressOnlyInternetGateways.RUnlock()
	return calls
}

// DescribeElasticGpus calls DescribeElasticGpusFunc.
func (mock *ClientMock) DescribeElasticGpus(ctx context.Context, params *ec2.DescribeElasticGpusInput, optFns ...func(*ec2.Options)) (*ec2.DescribeElasticGpusOutput, error) {
	if mock.DescribeElasticGpusFunc == nil {
		panic("ClientMock.DescribeElasticGpusFunc: method is nil but Client.DescribeElasticGpus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeElasticGpusInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeElasticGpus.Lock()
	mock.calls.DescribeElasticGpus = append(mock.calls.DescribeElasticGpus, callInfo)
	mock.lockDescribeElasticGpus.Unlock()
	return mock.DescribeElasticGpusFunc(ctx, params, optFns...)
}

// DescribeElasticGpusCalls gets all the calls that were made to DescribeElasticGpus.
// Check the length with:
//     len(mockedClient.DescribeElasticGpusCalls())
func (mock *ClientMock) DescribeElasticGpusCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeElasticGpusInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeElasticGpusInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeElasticGpus.RLock()
	calls = mock.calls.DescribeElasticGpus
	mock.lockDescribeElasticGpus.RUnlock()
	return calls
}

// DescribeExportImageTasks calls DescribeExportImageTasksFunc.
func (mock *ClientMock) DescribeExportImageTasks(ctx context.Context, params *ec2.DescribeExportImageTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeExportImageTasksOutput, error) {
	if mock.DescribeExportImageTasksFunc == nil {
		panic("ClientMock.DescribeExportImageTasksFunc: method is nil but Client.DescribeExportImageTasks was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeExportImageTasksInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeExportImageTasks.Lock()
	mock.calls.DescribeExportImageTasks = append(mock.calls.DescribeExportImageTasks, callInfo)
	mock.lockDescribeExportImageTasks.Unlock()
	return mock.DescribeExportImageTasksFunc(ctx, params, optFns...)
}

// DescribeExportImageTasksCalls gets all the calls that were made to DescribeExportImageTasks.
// Check the length with:
//     len(mockedClient.DescribeExportImageTasksCalls())
func (mock *ClientMock) DescribeExportImageTasksCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeExportImageTasksInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeExportImageTasksInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeExportImageTasks.RLock()
	calls = mock.calls.DescribeExportImageTasks
	mock.lockDescribeExportImageTasks.RUnlock()
	return calls
}

// DescribeExportTasks calls DescribeExportTasksFunc.
func (mock *ClientMock) DescribeExportTasks(ctx context.Context, params *ec2.DescribeExportTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeExportTasksOutput, error) {
	if mock.DescribeExportTasksFunc == nil {
		panic("ClientMock.DescribeExportTasksFunc: method is nil but Client.DescribeExportTasks was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeExportTasksInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeExportTasks.Lock()
	mock.calls.DescribeExportTasks = append(mock.calls.DescribeExportTasks, callInfo)
	mock.lockDescribeExportTasks.Unlock()
	return mock.DescribeExportTasksFunc(ctx, params, optFns...)
}

// DescribeExportTasksCalls gets all the calls that were made to DescribeExportTasks.
// Check the length with:
//     len(mockedClient.DescribeExportTasksCalls())
func (mock *ClientMock) DescribeExportTasksCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeExportTasksInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeExportTasksInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeExportTasks.RLock()
	calls = mock.calls.DescribeExportTasks
	mock.lockDescribeExportTasks.RUnlock()
	return calls
}

// DescribeFastLaunchImages calls DescribeFastLaunchImagesFunc.
func (mock *ClientMock) DescribeFastLaunchImages(ctx context.Context, params *ec2.DescribeFastLaunchImagesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFastLaunchImagesOutput, error) {
	if mock.DescribeFastLaunchImagesFunc == nil {
		panic("ClientMock.DescribeFastLaunchImagesFunc: method is nil but Client.DescribeFastLaunchImages was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeFastLaunchImagesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeFastLaunchImages.Lock()
	mock.calls.DescribeFastLaunchImages = append(mock.calls.DescribeFastLaunchImages, callInfo)
	mock.lockDescribeFastLaunchImages.Unlock()
	return mock.DescribeFastLaunchImagesFunc(ctx, params, optFns...)
}

// DescribeFastLaunchImagesCalls gets all the calls that were made to DescribeFastLaunchImages.
// Check the length with:
//     len(mockedClient.DescribeFastLaunchImagesCalls())
func (mock *ClientMock) DescribeFastLaunchImagesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeFastLaunchImagesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeFastLaunchImagesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeFastLaunchImages.RLock()
	calls = mock.calls.DescribeFastLaunchImages
	mock.lockDescribeFastLaunchImages.RUnlock()
	return calls
}

// DescribeFastSnapshotRestores calls DescribeFastSnapshotRestoresFunc.
func (mock *ClientMock) DescribeFastSnapshotRestores(ctx context.Context, params *ec2.DescribeFastSnapshotRestoresInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFastSnapshotRestoresOutput, error) {
	if mock.DescribeFastSnapshotRestoresFunc == nil {
		panic("ClientMock.DescribeFastSnapshotRestoresFunc: method is nil but Client.DescribeFastSnapshotRestores was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeFastSnapshotRestoresInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeFastSnapshotRestores.Lock()
	mock.calls.DescribeFastSnapshotRestores = append(mock.calls.DescribeFastSnapshotRestores, callInfo)
	mock.lockDescribeFastSnapshotRestores.Unlock()
	return mock.DescribeFastSnapshotRestoresFunc(ctx, params, optFns...)
}

// DescribeFastSnapshotRestoresCalls gets all the calls that were made to DescribeFastSnapshotRestores.
// Check the length with:
//     len(mockedClient.DescribeFastSnapshotRestoresCalls())
func (mock *ClientMock) DescribeFastSnapshotRestoresCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeFastSnapshotRestoresInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeFastSnapshotRestoresInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeFastSnapshotRestores.RLock()
	calls = mock.calls.DescribeFastSnapshotRestores
	mock.lockDescribeFastSnapshotRestores.RUnlock()
	return calls
}

// DescribeFleetHistory calls DescribeFleetHistoryFunc.
func (mock *ClientMock) DescribeFleetHistory(ctx context.Context, params *ec2.DescribeFleetHistoryInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFleetHistoryOutput, error) {
	if mock.DescribeFleetHistoryFunc == nil {
		panic("ClientMock.DescribeFleetHistoryFunc: method is nil but Client.DescribeFleetHistory was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeFleetHistoryInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeFleetHistory.Lock()
	mock.calls.DescribeFleetHistory = append(mock.calls.DescribeFleetHistory, callInfo)
	mock.lockDescribeFleetHistory.Unlock()
	return mock.DescribeFleetHistoryFunc(ctx, params, optFns...)
}

// DescribeFleetHistoryCalls gets all the calls that were made to DescribeFleetHistory.
// Check the length with:
//     len(mockedClient.DescribeFleetHistoryCalls())
func (mock *ClientMock) DescribeFleetHistoryCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeFleetHistoryInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeFleetHistoryInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeFleetHistory.RLock()
	calls = mock.calls.DescribeFleetHistory
	mock.lockDescribeFleetHistory.RUnlock()
	return calls
}

// DescribeFleetInstances calls DescribeFleetInstancesFunc.
func (mock *ClientMock) DescribeFleetInstances(ctx context.Context, params *ec2.DescribeFleetInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFleetInstancesOutput, error) {
	if mock.DescribeFleetInstancesFunc == nil {
		panic("ClientMock.DescribeFleetInstancesFunc: method is nil but Client.DescribeFleetInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeFleetInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeFleetInstances.Lock()
	mock.calls.DescribeFleetInstances = append(mock.calls.DescribeFleetInstances, callInfo)
	mock.lockDescribeFleetInstances.Unlock()
	return mock.DescribeFleetInstancesFunc(ctx, params, optFns...)
}

// DescribeFleetInstancesCalls gets all the calls that were made to DescribeFleetInstances.
// Check the length with:
//     len(mockedClient.DescribeFleetInstancesCalls())
func (mock *ClientMock) DescribeFleetInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeFleetInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeFleetInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeFleetInstances.RLock()
	calls = mock.calls.DescribeFleetInstances
	mock.lockDescribeFleetInstances.RUnlock()
	return calls
}

// DescribeFleets calls DescribeFleetsFunc.
func (mock *ClientMock) DescribeFleets(ctx context.Context, params *ec2.DescribeFleetsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFleetsOutput, error) {
	if mock.DescribeFleetsFunc == nil {
		panic("ClientMock.DescribeFleetsFunc: method is nil but Client.DescribeFleets was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeFleetsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeFleets.Lock()
	mock.calls.DescribeFleets = append(mock.calls.DescribeFleets, callInfo)
	mock.lockDescribeFleets.Unlock()
	return mock.DescribeFleetsFunc(ctx, params, optFns...)
}

// DescribeFleetsCalls gets all the calls that were made to DescribeFleets.
// Check the length with:
//     len(mockedClient.DescribeFleetsCalls())
func (mock *ClientMock) DescribeFleetsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeFleetsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeFleetsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeFleets.RLock()
	calls = mock.calls.DescribeFleets
	mock.lockDescribeFleets.RUnlock()
	return calls
}

// DescribeFlowLogs calls DescribeFlowLogsFunc.
func (mock *ClientMock) DescribeFlowLogs(ctx context.Context, params *ec2.DescribeFlowLogsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFlowLogsOutput, error) {
	if mock.DescribeFlowLogsFunc == nil {
		panic("ClientMock.DescribeFlowLogsFunc: method is nil but Client.DescribeFlowLogs was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeFlowLogsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeFlowLogs.Lock()
	mock.calls.DescribeFlowLogs = append(mock.calls.DescribeFlowLogs, callInfo)
	mock.lockDescribeFlowLogs.Unlock()
	return mock.DescribeFlowLogsFunc(ctx, params, optFns...)
}

// DescribeFlowLogsCalls gets all the calls that were made to DescribeFlowLogs.
// Check the length with:
//     len(mockedClient.DescribeFlowLogsCalls())
func (mock *ClientMock) DescribeFlowLogsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeFlowLogsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeFlowLogsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeFlowLogs.RLock()
	calls = mock.calls.DescribeFlowLogs
	mock.lockDescribeFlowLogs.RUnlock()
	return calls
}

// DescribeFpgaImageAttribute calls DescribeFpgaImageAttributeFunc.
func (mock *ClientMock) DescribeFpgaImageAttribute(ctx context.Context, params *ec2.DescribeFpgaImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFpgaImageAttributeOutput, error) {
	if mock.DescribeFpgaImageAttributeFunc == nil {
		panic("ClientMock.DescribeFpgaImageAttributeFunc: method is nil but Client.DescribeFpgaImageAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeFpgaImageAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeFpgaImageAttribute.Lock()
	mock.calls.DescribeFpgaImageAttribute = append(mock.calls.DescribeFpgaImageAttribute, callInfo)
	mock.lockDescribeFpgaImageAttribute.Unlock()
	return mock.DescribeFpgaImageAttributeFunc(ctx, params, optFns...)
}

// DescribeFpgaImageAttributeCalls gets all the calls that were made to DescribeFpgaImageAttribute.
// Check the length with:
//     len(mockedClient.DescribeFpgaImageAttributeCalls())
func (mock *ClientMock) DescribeFpgaImageAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeFpgaImageAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeFpgaImageAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeFpgaImageAttribute.RLock()
	calls = mock.calls.DescribeFpgaImageAttribute
	mock.lockDescribeFpgaImageAttribute.RUnlock()
	return calls
}

// DescribeFpgaImages calls DescribeFpgaImagesFunc.
func (mock *ClientMock) DescribeFpgaImages(ctx context.Context, params *ec2.DescribeFpgaImagesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeFpgaImagesOutput, error) {
	if mock.DescribeFpgaImagesFunc == nil {
		panic("ClientMock.DescribeFpgaImagesFunc: method is nil but Client.DescribeFpgaImages was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeFpgaImagesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeFpgaImages.Lock()
	mock.calls.DescribeFpgaImages = append(mock.calls.DescribeFpgaImages, callInfo)
	mock.lockDescribeFpgaImages.Unlock()
	return mock.DescribeFpgaImagesFunc(ctx, params, optFns...)
}

// DescribeFpgaImagesCalls gets all the calls that were made to DescribeFpgaImages.
// Check the length with:
//     len(mockedClient.DescribeFpgaImagesCalls())
func (mock *ClientMock) DescribeFpgaImagesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeFpgaImagesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeFpgaImagesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeFpgaImages.RLock()
	calls = mock.calls.DescribeFpgaImages
	mock.lockDescribeFpgaImages.RUnlock()
	return calls
}

// DescribeHostReservationOfferings calls DescribeHostReservationOfferingsFunc.
func (mock *ClientMock) DescribeHostReservationOfferings(ctx context.Context, params *ec2.DescribeHostReservationOfferingsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeHostReservationOfferingsOutput, error) {
	if mock.DescribeHostReservationOfferingsFunc == nil {
		panic("ClientMock.DescribeHostReservationOfferingsFunc: method is nil but Client.DescribeHostReservationOfferings was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeHostReservationOfferingsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeHostReservationOfferings.Lock()
	mock.calls.DescribeHostReservationOfferings = append(mock.calls.DescribeHostReservationOfferings, callInfo)
	mock.lockDescribeHostReservationOfferings.Unlock()
	return mock.DescribeHostReservationOfferingsFunc(ctx, params, optFns...)
}

// DescribeHostReservationOfferingsCalls gets all the calls that were made to DescribeHostReservationOfferings.
// Check the length with:
//     len(mockedClient.DescribeHostReservationOfferingsCalls())
func (mock *ClientMock) DescribeHostReservationOfferingsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeHostReservationOfferingsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeHostReservationOfferingsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeHostReservationOfferings.RLock()
	calls = mock.calls.DescribeHostReservationOfferings
	mock.lockDescribeHostReservationOfferings.RUnlock()
	return calls
}

// DescribeHostReservations calls DescribeHostReservationsFunc.
func (mock *ClientMock) DescribeHostReservations(ctx context.Context, params *ec2.DescribeHostReservationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeHostReservationsOutput, error) {
	if mock.DescribeHostReservationsFunc == nil {
		panic("ClientMock.DescribeHostReservationsFunc: method is nil but Client.DescribeHostReservations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeHostReservationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeHostReservations.Lock()
	mock.calls.DescribeHostReservations = append(mock.calls.DescribeHostReservations, callInfo)
	mock.lockDescribeHostReservations.Unlock()
	return mock.DescribeHostReservationsFunc(ctx, params, optFns...)
}

// DescribeHostReservationsCalls gets all the calls that were made to DescribeHostReservations.
// Check the length with:
//     len(mockedClient.DescribeHostReservationsCalls())
func (mock *ClientMock) DescribeHostReservationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeHostReservationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeHostReservationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeHostReservations.RLock()
	calls = mock.calls.DescribeHostReservations
	mock.lockDescribeHostReservations.RUnlock()
	return calls
}

// DescribeHosts calls DescribeHostsFunc.
func (mock *ClientMock) DescribeHosts(ctx context.Context, params *ec2.DescribeHostsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeHostsOutput, error) {
	if mock.DescribeHostsFunc == nil {
		panic("ClientMock.DescribeHostsFunc: method is nil but Client.DescribeHosts was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeHostsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeHosts.Lock()
	mock.calls.DescribeHosts = append(mock.calls.DescribeHosts, callInfo)
	mock.lockDescribeHosts.Unlock()
	return mock.DescribeHostsFunc(ctx, params, optFns...)
}

// DescribeHostsCalls gets all the calls that were made to DescribeHosts.
// Check the length with:
//     len(mockedClient.DescribeHostsCalls())
func (mock *ClientMock) DescribeHostsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeHostsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeHostsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeHosts.RLock()
	calls = mock.calls.DescribeHosts
	mock.lockDescribeHosts.RUnlock()
	return calls
}

// DescribeIamInstanceProfileAssociations calls DescribeIamInstanceProfileAssociationsFunc.
func (mock *ClientMock) DescribeIamInstanceProfileAssociations(ctx context.Context, params *ec2.DescribeIamInstanceProfileAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
	if mock.DescribeIamInstanceProfileAssociationsFunc == nil {
		panic("ClientMock.DescribeIamInstanceProfileAssociationsFunc: method is nil but Client.DescribeIamInstanceProfileAssociations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeIamInstanceProfileAssociationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeIamInstanceProfileAssociations.Lock()
	mock.calls.DescribeIamInstanceProfileAssociations = append(mock.calls.DescribeIamInstanceProfileAssociations, callInfo)
	mock.lockDescribeIamInstanceProfileAssociations.Unlock()
	return mock.DescribeIamInstanceProfileAssociationsFunc(ctx, params, optFns...)
}

// DescribeIamInstanceProfileAssociationsCalls gets all the calls that were made to DescribeIamInstanceProfileAssociations.
// Check the length with:
//     len(mockedClient.DescribeIamInstanceProfileAssociationsCalls())
func (mock *ClientMock) DescribeIamInstanceProfileAssociationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeIamInstanceProfileAssociationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeIamInstanceProfileAssociationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeIamInstanceProfileAssociations.RLock()
	calls = mock.calls.DescribeIamInstanceProfileAssociations
	mock.lockDescribeIamInstanceProfileAssociations.RUnlock()
	return calls
}

// DescribeIdFormat calls DescribeIdFormatFunc.
func (mock *ClientMock) DescribeIdFormat(ctx context.Context, params *ec2.DescribeIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIdFormatOutput, error) {
	if mock.DescribeIdFormatFunc == nil {
		panic("ClientMock.DescribeIdFormatFunc: method is nil but Client.DescribeIdFormat was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeIdFormatInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeIdFormat.Lock()
	mock.calls.DescribeIdFormat = append(mock.calls.DescribeIdFormat, callInfo)
	mock.lockDescribeIdFormat.Unlock()
	return mock.DescribeIdFormatFunc(ctx, params, optFns...)
}

// DescribeIdFormatCalls gets all the calls that were made to DescribeIdFormat.
// Check the length with:
//     len(mockedClient.DescribeIdFormatCalls())
func (mock *ClientMock) DescribeIdFormatCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeIdFormatInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeIdFormatInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeIdFormat.RLock()
	calls = mock.calls.DescribeIdFormat
	mock.lockDescribeIdFormat.RUnlock()
	return calls
}

// DescribeIdentityIdFormat calls DescribeIdentityIdFormatFunc.
func (mock *ClientMock) DescribeIdentityIdFormat(ctx context.Context, params *ec2.DescribeIdentityIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIdentityIdFormatOutput, error) {
	if mock.DescribeIdentityIdFormatFunc == nil {
		panic("ClientMock.DescribeIdentityIdFormatFunc: method is nil but Client.DescribeIdentityIdFormat was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeIdentityIdFormatInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeIdentityIdFormat.Lock()
	mock.calls.DescribeIdentityIdFormat = append(mock.calls.DescribeIdentityIdFormat, callInfo)
	mock.lockDescribeIdentityIdFormat.Unlock()
	return mock.DescribeIdentityIdFormatFunc(ctx, params, optFns...)
}

// DescribeIdentityIdFormatCalls gets all the calls that were made to DescribeIdentityIdFormat.
// Check the length with:
//     len(mockedClient.DescribeIdentityIdFormatCalls())
func (mock *ClientMock) DescribeIdentityIdFormatCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeIdentityIdFormatInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeIdentityIdFormatInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeIdentityIdFormat.RLock()
	calls = mock.calls.DescribeIdentityIdFormat
	mock.lockDescribeIdentityIdFormat.RUnlock()
	return calls
}

// DescribeImageAttribute calls DescribeImageAttributeFunc.
func (mock *ClientMock) DescribeImageAttribute(ctx context.Context, params *ec2.DescribeImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeImageAttributeOutput, error) {
	if mock.DescribeImageAttributeFunc == nil {
		panic("ClientMock.DescribeImageAttributeFunc: method is nil but Client.DescribeImageAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeImageAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeImageAttribute.Lock()
	mock.calls.DescribeImageAttribute = append(mock.calls.DescribeImageAttribute, callInfo)
	mock.lockDescribeImageAttribute.Unlock()
	return mock.DescribeImageAttributeFunc(ctx, params, optFns...)
}

// DescribeImageAttributeCalls gets all the calls that were made to DescribeImageAttribute.
// Check the length with:
//     len(mockedClient.DescribeImageAttributeCalls())
func (mock *ClientMock) DescribeImageAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeImageAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeImageAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeImageAttribute.RLock()
	calls = mock.calls.DescribeImageAttribute
	mock.lockDescribeImageAttribute.RUnlock()
	return calls
}

// DescribeImages calls DescribeImagesFunc.
func (mock *ClientMock) DescribeImages(ctx context.Context, params *ec2.DescribeImagesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeImagesOutput, error) {
	if mock.DescribeImagesFunc == nil {
		panic("ClientMock.DescribeImagesFunc: method is nil but Client.DescribeImages was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeImagesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeImages.Lock()
	mock.calls.DescribeImages = append(mock.calls.DescribeImages, callInfo)
	mock.lockDescribeImages.Unlock()
	return mock.DescribeImagesFunc(ctx, params, optFns...)
}

// DescribeImagesCalls gets all the calls that were made to DescribeImages.
// Check the length with:
//     len(mockedClient.DescribeImagesCalls())
func (mock *ClientMock) DescribeImagesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeImagesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeImagesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeImages.RLock()
	calls = mock.calls.DescribeImages
	mock.lockDescribeImages.RUnlock()
	return calls
}

// DescribeImportImageTasks calls DescribeImportImageTasksFunc.
func (mock *ClientMock) DescribeImportImageTasks(ctx context.Context, params *ec2.DescribeImportImageTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeImportImageTasksOutput, error) {
	if mock.DescribeImportImageTasksFunc == nil {
		panic("ClientMock.DescribeImportImageTasksFunc: method is nil but Client.DescribeImportImageTasks was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeImportImageTasksInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeImportImageTasks.Lock()
	mock.calls.DescribeImportImageTasks = append(mock.calls.DescribeImportImageTasks, callInfo)
	mock.lockDescribeImportImageTasks.Unlock()
	return mock.DescribeImportImageTasksFunc(ctx, params, optFns...)
}

// DescribeImportImageTasksCalls gets all the calls that were made to DescribeImportImageTasks.
// Check the length with:
//     len(mockedClient.DescribeImportImageTasksCalls())
func (mock *ClientMock) DescribeImportImageTasksCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeImportImageTasksInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeImportImageTasksInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeImportImageTasks.RLock()
	calls = mock.calls.DescribeImportImageTasks
	mock.lockDescribeImportImageTasks.RUnlock()
	return calls
}

// DescribeImportSnapshotTasks calls DescribeImportSnapshotTasksFunc.
func (mock *ClientMock) DescribeImportSnapshotTasks(ctx context.Context, params *ec2.DescribeImportSnapshotTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	if mock.DescribeImportSnapshotTasksFunc == nil {
		panic("ClientMock.DescribeImportSnapshotTasksFunc: method is nil but Client.DescribeImportSnapshotTasks was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeImportSnapshotTasksInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeImportSnapshotTasks.Lock()
	mock.calls.DescribeImportSnapshotTasks = append(mock.calls.DescribeImportSnapshotTasks, callInfo)
	mock.lockDescribeImportSnapshotTasks.Unlock()
	return mock.DescribeImportSnapshotTasksFunc(ctx, params, optFns...)
}

// DescribeImportSnapshotTasksCalls gets all the calls that were made to DescribeImportSnapshotTasks.
// Check the length with:
//     len(mockedClient.DescribeImportSnapshotTasksCalls())
func (mock *ClientMock) DescribeImportSnapshotTasksCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeImportSnapshotTasksInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeImportSnapshotTasksInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeImportSnapshotTasks.RLock()
	calls = mock.calls.DescribeImportSnapshotTasks
	mock.lockDescribeImportSnapshotTasks.RUnlock()
	return calls
}

// DescribeInstanceAttribute calls DescribeInstanceAttributeFunc.
func (mock *ClientMock) DescribeInstanceAttribute(ctx context.Context, params *ec2.DescribeInstanceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceAttributeOutput, error) {
	if mock.DescribeInstanceAttributeFunc == nil {
		panic("ClientMock.DescribeInstanceAttributeFunc: method is nil but Client.DescribeInstanceAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeInstanceAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeInstanceAttribute.Lock()
	mock.calls.DescribeInstanceAttribute = append(mock.calls.DescribeInstanceAttribute, callInfo)
	mock.lockDescribeInstanceAttribute.Unlock()
	return mock.DescribeInstanceAttributeFunc(ctx, params, optFns...)
}

// DescribeInstanceAttributeCalls gets all the calls that were made to DescribeInstanceAttribute.
// Check the length with:
//     len(mockedClient.DescribeInstanceAttributeCalls())
func (mock *ClientMock) DescribeInstanceAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeInstanceAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeInstanceAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeInstanceAttribute.RLock()
	calls = mock.calls.DescribeInstanceAttribute
	mock.lockDescribeInstanceAttribute.RUnlock()
	return calls
}

// DescribeInstanceCreditSpecifications calls DescribeInstanceCreditSpecificationsFunc.
func (mock *ClientMock) DescribeInstanceCreditSpecifications(ctx context.Context, params *ec2.DescribeInstanceCreditSpecificationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
	if mock.DescribeInstanceCreditSpecificationsFunc == nil {
		panic("ClientMock.DescribeInstanceCreditSpecificationsFunc: method is nil but Client.DescribeInstanceCreditSpecifications was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeInstanceCreditSpecificationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeInstanceCreditSpecifications.Lock()
	mock.calls.DescribeInstanceCreditSpecifications = append(mock.calls.DescribeInstanceCreditSpecifications, callInfo)
	mock.lockDescribeInstanceCreditSpecifications.Unlock()
	return mock.DescribeInstanceCreditSpecificationsFunc(ctx, params, optFns...)
}

// DescribeInstanceCreditSpecificationsCalls gets all the calls that were made to DescribeInstanceCreditSpecifications.
// Check the length with:
//     len(mockedClient.DescribeInstanceCreditSpecificationsCalls())
func (mock *ClientMock) DescribeInstanceCreditSpecificationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeInstanceCreditSpecificationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeInstanceCreditSpecificationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeInstanceCreditSpecifications.RLock()
	calls = mock.calls.DescribeInstanceCreditSpecifications
	mock.lockDescribeInstanceCreditSpecifications.RUnlock()
	return calls
}

// DescribeInstanceEventNotificationAttributes calls DescribeInstanceEventNotificationAttributesFunc.
func (mock *ClientMock) DescribeInstanceEventNotificationAttributes(ctx context.Context, params *ec2.DescribeInstanceEventNotificationAttributesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceEventNotificationAttributesOutput, error) {
	if mock.DescribeInstanceEventNotificationAttributesFunc == nil {
		panic("ClientMock.DescribeInstanceEventNotificationAttributesFunc: method is nil but Client.DescribeInstanceEventNotificationAttributes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeInstanceEventNotificationAttributesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeInstanceEventNotificationAttributes.Lock()
	mock.calls.DescribeInstanceEventNotificationAttributes = append(mock.calls.DescribeInstanceEventNotificationAttributes, callInfo)
	mock.lockDescribeInstanceEventNotificationAttributes.Unlock()
	return mock.DescribeInstanceEventNotificationAttributesFunc(ctx, params, optFns...)
}

// DescribeInstanceEventNotificationAttributesCalls gets all the calls that were made to DescribeInstanceEventNotificationAttributes.
// Check the length with:
//     len(mockedClient.DescribeInstanceEventNotificationAttributesCalls())
func (mock *ClientMock) DescribeInstanceEventNotificationAttributesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeInstanceEventNotificationAttributesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeInstanceEventNotificationAttributesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeInstanceEventNotificationAttributes.RLock()
	calls = mock.calls.DescribeInstanceEventNotificationAttributes
	mock.lockDescribeInstanceEventNotificationAttributes.RUnlock()
	return calls
}

// DescribeInstanceEventWindows calls DescribeInstanceEventWindowsFunc.
func (mock *ClientMock) DescribeInstanceEventWindows(ctx context.Context, params *ec2.DescribeInstanceEventWindowsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceEventWindowsOutput, error) {
	if mock.DescribeInstanceEventWindowsFunc == nil {
		panic("ClientMock.DescribeInstanceEventWindowsFunc: method is nil but Client.DescribeInstanceEventWindows was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeInstanceEventWindowsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeInstanceEventWindows.Lock()
	mock.calls.DescribeInstanceEventWindows = append(mock.calls.DescribeInstanceEventWindows, callInfo)
	mock.lockDescribeInstanceEventWindows.Unlock()
	return mock.DescribeInstanceEventWindowsFunc(ctx, params, optFns...)
}

// DescribeInstanceEventWindowsCalls gets all the calls that were made to DescribeInstanceEventWindows.
// Check the length with:
//     len(mockedClient.DescribeInstanceEventWindowsCalls())
func (mock *ClientMock) DescribeInstanceEventWindowsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeInstanceEventWindowsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeInstanceEventWindowsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeInstanceEventWindows.RLock()
	calls = mock.calls.DescribeInstanceEventWindows
	mock.lockDescribeInstanceEventWindows.RUnlock()
	return calls
}

// DescribeInstanceStatus calls DescribeInstanceStatusFunc.
func (mock *ClientMock) DescribeInstanceStatus(ctx context.Context, params *ec2.DescribeInstanceStatusInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceStatusOutput, error) {
	if mock.DescribeInstanceStatusFunc == nil {
		panic("ClientMock.DescribeInstanceStatusFunc: method is nil but Client.DescribeInstanceStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeInstanceStatusInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeInstanceStatus.Lock()
	mock.calls.DescribeInstanceStatus = append(mock.calls.DescribeInstanceStatus, callInfo)
	mock.lockDescribeInstanceStatus.Unlock()
	return mock.DescribeInstanceStatusFunc(ctx, params, optFns...)
}

// DescribeInstanceStatusCalls gets all the calls that were made to DescribeInstanceStatus.
// Check the length with:
//     len(mockedClient.DescribeInstanceStatusCalls())
func (mock *ClientMock) DescribeInstanceStatusCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeInstanceStatusInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeInstanceStatusInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeInstanceStatus.RLock()
	calls = mock.calls.DescribeInstanceStatus
	mock.lockDescribeInstanceStatus.RUnlock()
	return calls
}

// DescribeInstanceTypeOfferings calls DescribeInstanceTypeOfferingsFunc.
func (mock *ClientMock) DescribeInstanceTypeOfferings(ctx context.Context, params *ec2.DescribeInstanceTypeOfferingsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {
	if mock.DescribeInstanceTypeOfferingsFunc == nil {
		panic("ClientMock.DescribeInstanceTypeOfferingsFunc: method is nil but Client.DescribeInstanceTypeOfferings was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeInstanceTypeOfferingsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeInstanceTypeOfferings.Lock()
	mock.calls.DescribeInstanceTypeOfferings = append(mock.calls.DescribeInstanceTypeOfferings, callInfo)
	mock.lockDescribeInstanceTypeOfferings.Unlock()
	return mock.DescribeInstanceTypeOfferingsFunc(ctx, params, optFns...)
}

// DescribeInstanceTypeOfferingsCalls gets all the calls that were made to DescribeInstanceTypeOfferings.
// Check the length with:
//     len(mockedClient.DescribeInstanceTypeOfferingsCalls())
func (mock *ClientMock) DescribeInstanceTypeOfferingsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeInstanceTypeOfferingsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeInstanceTypeOfferingsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeInstanceTypeOfferings.RLock()
	calls = mock.calls.DescribeInstanceTypeOfferings
	mock.lockDescribeInstanceTypeOfferings.RUnlock()
	return calls
}

// DescribeInstanceTypes calls DescribeInstanceTypesFunc.
func (mock *ClientMock) DescribeInstanceTypes(ctx context.Context, params *ec2.DescribeInstanceTypesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstanceTypesOutput, error) {
	if mock.DescribeInstanceTypesFunc == nil {
		panic("ClientMock.DescribeInstanceTypesFunc: method is nil but Client.DescribeInstanceTypes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeInstanceTypesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeInstanceTypes.Lock()
	mock.calls.DescribeInstanceTypes = append(mock.calls.DescribeInstanceTypes, callInfo)
	mock.lockDescribeInstanceTypes.Unlock()
	return mock.DescribeInstanceTypesFunc(ctx, params, optFns...)
}

// DescribeInstanceTypesCalls gets all the calls that were made to DescribeInstanceTypes.
// Check the length with:
//     len(mockedClient.DescribeInstanceTypesCalls())
func (mock *ClientMock) DescribeInstanceTypesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeInstanceTypesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeInstanceTypesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeInstanceTypes.RLock()
	calls = mock.calls.DescribeInstanceTypes
	mock.lockDescribeInstanceTypes.RUnlock()
	return calls
}

// DescribeInstances calls DescribeInstancesFunc.
func (mock *ClientMock) DescribeInstances(ctx context.Context, params *ec2.DescribeInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error) {
	if mock.DescribeInstancesFunc == nil {
		panic("ClientMock.DescribeInstancesFunc: method is nil but Client.DescribeInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeInstances.Lock()
	mock.calls.DescribeInstances = append(mock.calls.DescribeInstances, callInfo)
	mock.lockDescribeInstances.Unlock()
	return mock.DescribeInstancesFunc(ctx, params, optFns...)
}

// DescribeInstancesCalls gets all the calls that were made to DescribeInstances.
// Check the length with:
//     len(mockedClient.DescribeInstancesCalls())
func (mock *ClientMock) DescribeInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeInstances.RLock()
	calls = mock.calls.DescribeInstances
	mock.lockDescribeInstances.RUnlock()
	return calls
}

// DescribeInternetGateways calls DescribeInternetGatewaysFunc.
func (mock *ClientMock) DescribeInternetGateways(ctx context.Context, params *ec2.DescribeInternetGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeInternetGatewaysOutput, error) {
	if mock.DescribeInternetGatewaysFunc == nil {
		panic("ClientMock.DescribeInternetGatewaysFunc: method is nil but Client.DescribeInternetGateways was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeInternetGatewaysInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeInternetGateways.Lock()
	mock.calls.DescribeInternetGateways = append(mock.calls.DescribeInternetGateways, callInfo)
	mock.lockDescribeInternetGateways.Unlock()
	return mock.DescribeInternetGatewaysFunc(ctx, params, optFns...)
}

// DescribeInternetGatewaysCalls gets all the calls that were made to DescribeInternetGateways.
// Check the length with:
//     len(mockedClient.DescribeInternetGatewaysCalls())
func (mock *ClientMock) DescribeInternetGatewaysCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeInternetGatewaysInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeInternetGatewaysInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeInternetGateways.RLock()
	calls = mock.calls.DescribeInternetGateways
	mock.lockDescribeInternetGateways.RUnlock()
	return calls
}

// DescribeIpamPools calls DescribeIpamPoolsFunc.
func (mock *ClientMock) DescribeIpamPools(ctx context.Context, params *ec2.DescribeIpamPoolsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIpamPoolsOutput, error) {
	if mock.DescribeIpamPoolsFunc == nil {
		panic("ClientMock.DescribeIpamPoolsFunc: method is nil but Client.DescribeIpamPools was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeIpamPoolsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeIpamPools.Lock()
	mock.calls.DescribeIpamPools = append(mock.calls.DescribeIpamPools, callInfo)
	mock.lockDescribeIpamPools.Unlock()
	return mock.DescribeIpamPoolsFunc(ctx, params, optFns...)
}

// DescribeIpamPoolsCalls gets all the calls that were made to DescribeIpamPools.
// Check the length with:
//     len(mockedClient.DescribeIpamPoolsCalls())
func (mock *ClientMock) DescribeIpamPoolsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeIpamPoolsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeIpamPoolsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeIpamPools.RLock()
	calls = mock.calls.DescribeIpamPools
	mock.lockDescribeIpamPools.RUnlock()
	return calls
}

// DescribeIpamScopes calls DescribeIpamScopesFunc.
func (mock *ClientMock) DescribeIpamScopes(ctx context.Context, params *ec2.DescribeIpamScopesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIpamScopesOutput, error) {
	if mock.DescribeIpamScopesFunc == nil {
		panic("ClientMock.DescribeIpamScopesFunc: method is nil but Client.DescribeIpamScopes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeIpamScopesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeIpamScopes.Lock()
	mock.calls.DescribeIpamScopes = append(mock.calls.DescribeIpamScopes, callInfo)
	mock.lockDescribeIpamScopes.Unlock()
	return mock.DescribeIpamScopesFunc(ctx, params, optFns...)
}

// DescribeIpamScopesCalls gets all the calls that were made to DescribeIpamScopes.
// Check the length with:
//     len(mockedClient.DescribeIpamScopesCalls())
func (mock *ClientMock) DescribeIpamScopesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeIpamScopesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeIpamScopesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeIpamScopes.RLock()
	calls = mock.calls.DescribeIpamScopes
	mock.lockDescribeIpamScopes.RUnlock()
	return calls
}

// DescribeIpams calls DescribeIpamsFunc.
func (mock *ClientMock) DescribeIpams(ctx context.Context, params *ec2.DescribeIpamsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIpamsOutput, error) {
	if mock.DescribeIpamsFunc == nil {
		panic("ClientMock.DescribeIpamsFunc: method is nil but Client.DescribeIpams was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeIpamsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeIpams.Lock()
	mock.calls.DescribeIpams = append(mock.calls.DescribeIpams, callInfo)
	mock.lockDescribeIpams.Unlock()
	return mock.DescribeIpamsFunc(ctx, params, optFns...)
}

// DescribeIpamsCalls gets all the calls that were made to DescribeIpams.
// Check the length with:
//     len(mockedClient.DescribeIpamsCalls())
func (mock *ClientMock) DescribeIpamsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeIpamsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeIpamsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeIpams.RLock()
	calls = mock.calls.DescribeIpams
	mock.lockDescribeIpams.RUnlock()
	return calls
}

// DescribeIpv6Pools calls DescribeIpv6PoolsFunc.
func (mock *ClientMock) DescribeIpv6Pools(ctx context.Context, params *ec2.DescribeIpv6PoolsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeIpv6PoolsOutput, error) {
	if mock.DescribeIpv6PoolsFunc == nil {
		panic("ClientMock.DescribeIpv6PoolsFunc: method is nil but Client.DescribeIpv6Pools was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeIpv6PoolsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeIpv6Pools.Lock()
	mock.calls.DescribeIpv6Pools = append(mock.calls.DescribeIpv6Pools, callInfo)
	mock.lockDescribeIpv6Pools.Unlock()
	return mock.DescribeIpv6PoolsFunc(ctx, params, optFns...)
}

// DescribeIpv6PoolsCalls gets all the calls that were made to DescribeIpv6Pools.
// Check the length with:
//     len(mockedClient.DescribeIpv6PoolsCalls())
func (mock *ClientMock) DescribeIpv6PoolsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeIpv6PoolsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeIpv6PoolsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeIpv6Pools.RLock()
	calls = mock.calls.DescribeIpv6Pools
	mock.lockDescribeIpv6Pools.RUnlock()
	return calls
}

// DescribeKeyPairs calls DescribeKeyPairsFunc.
func (mock *ClientMock) DescribeKeyPairs(ctx context.Context, params *ec2.DescribeKeyPairsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeKeyPairsOutput, error) {
	if mock.DescribeKeyPairsFunc == nil {
		panic("ClientMock.DescribeKeyPairsFunc: method is nil but Client.DescribeKeyPairs was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeKeyPairsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeKeyPairs.Lock()
	mock.calls.DescribeKeyPairs = append(mock.calls.DescribeKeyPairs, callInfo)
	mock.lockDescribeKeyPairs.Unlock()
	return mock.DescribeKeyPairsFunc(ctx, params, optFns...)
}

// DescribeKeyPairsCalls gets all the calls that were made to DescribeKeyPairs.
// Check the length with:
//     len(mockedClient.DescribeKeyPairsCalls())
func (mock *ClientMock) DescribeKeyPairsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeKeyPairsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeKeyPairsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeKeyPairs.RLock()
	calls = mock.calls.DescribeKeyPairs
	mock.lockDescribeKeyPairs.RUnlock()
	return calls
}

// DescribeLaunchTemplateVersions calls DescribeLaunchTemplateVersionsFunc.
func (mock *ClientMock) DescribeLaunchTemplateVersions(ctx context.Context, params *ec2.DescribeLaunchTemplateVersionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
	if mock.DescribeLaunchTemplateVersionsFunc == nil {
		panic("ClientMock.DescribeLaunchTemplateVersionsFunc: method is nil but Client.DescribeLaunchTemplateVersions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeLaunchTemplateVersionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeLaunchTemplateVersions.Lock()
	mock.calls.DescribeLaunchTemplateVersions = append(mock.calls.DescribeLaunchTemplateVersions, callInfo)
	mock.lockDescribeLaunchTemplateVersions.Unlock()
	return mock.DescribeLaunchTemplateVersionsFunc(ctx, params, optFns...)
}

// DescribeLaunchTemplateVersionsCalls gets all the calls that were made to DescribeLaunchTemplateVersions.
// Check the length with:
//     len(mockedClient.DescribeLaunchTemplateVersionsCalls())
func (mock *ClientMock) DescribeLaunchTemplateVersionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeLaunchTemplateVersionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeLaunchTemplateVersionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeLaunchTemplateVersions.RLock()
	calls = mock.calls.DescribeLaunchTemplateVersions
	mock.lockDescribeLaunchTemplateVersions.RUnlock()
	return calls
}

// DescribeLaunchTemplates calls DescribeLaunchTemplatesFunc.
func (mock *ClientMock) DescribeLaunchTemplates(ctx context.Context, params *ec2.DescribeLaunchTemplatesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLaunchTemplatesOutput, error) {
	if mock.DescribeLaunchTemplatesFunc == nil {
		panic("ClientMock.DescribeLaunchTemplatesFunc: method is nil but Client.DescribeLaunchTemplates was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeLaunchTemplatesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeLaunchTemplates.Lock()
	mock.calls.DescribeLaunchTemplates = append(mock.calls.DescribeLaunchTemplates, callInfo)
	mock.lockDescribeLaunchTemplates.Unlock()
	return mock.DescribeLaunchTemplatesFunc(ctx, params, optFns...)
}

// DescribeLaunchTemplatesCalls gets all the calls that were made to DescribeLaunchTemplates.
// Check the length with:
//     len(mockedClient.DescribeLaunchTemplatesCalls())
func (mock *ClientMock) DescribeLaunchTemplatesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeLaunchTemplatesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeLaunchTemplatesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeLaunchTemplates.RLock()
	calls = mock.calls.DescribeLaunchTemplates
	mock.lockDescribeLaunchTemplates.RUnlock()
	return calls
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations calls DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFunc.
func (mock *ClientMock) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(ctx context.Context, params *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {
	if mock.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFunc == nil {
		panic("ClientMock.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFunc: method is nil but Client.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.Lock()
	mock.calls.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations = append(mock.calls.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations, callInfo)
	mock.lockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.Unlock()
	return mock.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFunc(ctx, params, optFns...)
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCalls gets all the calls that were made to DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.
// Check the length with:
//     len(mockedClient.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCalls())
func (mock *ClientMock) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.RLock()
	calls = mock.calls.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
	mock.lockDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations.RUnlock()
	return calls
}

// DescribeLocalGatewayRouteTableVpcAssociations calls DescribeLocalGatewayRouteTableVpcAssociationsFunc.
func (mock *ClientMock) DescribeLocalGatewayRouteTableVpcAssociations(ctx context.Context, params *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {
	if mock.DescribeLocalGatewayRouteTableVpcAssociationsFunc == nil {
		panic("ClientMock.DescribeLocalGatewayRouteTableVpcAssociationsFunc: method is nil but Client.DescribeLocalGatewayRouteTableVpcAssociations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeLocalGatewayRouteTableVpcAssociations.Lock()
	mock.calls.DescribeLocalGatewayRouteTableVpcAssociations = append(mock.calls.DescribeLocalGatewayRouteTableVpcAssociations, callInfo)
	mock.lockDescribeLocalGatewayRouteTableVpcAssociations.Unlock()
	return mock.DescribeLocalGatewayRouteTableVpcAssociationsFunc(ctx, params, optFns...)
}

// DescribeLocalGatewayRouteTableVpcAssociationsCalls gets all the calls that were made to DescribeLocalGatewayRouteTableVpcAssociations.
// Check the length with:
//     len(mockedClient.DescribeLocalGatewayRouteTableVpcAssociationsCalls())
func (mock *ClientMock) DescribeLocalGatewayRouteTableVpcAssociationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeLocalGatewayRouteTableVpcAssociations.RLock()
	calls = mock.calls.DescribeLocalGatewayRouteTableVpcAssociations
	mock.lockDescribeLocalGatewayRouteTableVpcAssociations.RUnlock()
	return calls
}

// DescribeLocalGatewayRouteTables calls DescribeLocalGatewayRouteTablesFunc.
func (mock *ClientMock) DescribeLocalGatewayRouteTables(ctx context.Context, params *ec2.DescribeLocalGatewayRouteTablesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {
	if mock.DescribeLocalGatewayRouteTablesFunc == nil {
		panic("ClientMock.DescribeLocalGatewayRouteTablesFunc: method is nil but Client.DescribeLocalGatewayRouteTables was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeLocalGatewayRouteTablesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeLocalGatewayRouteTables.Lock()
	mock.calls.DescribeLocalGatewayRouteTables = append(mock.calls.DescribeLocalGatewayRouteTables, callInfo)
	mock.lockDescribeLocalGatewayRouteTables.Unlock()
	return mock.DescribeLocalGatewayRouteTablesFunc(ctx, params, optFns...)
}

// DescribeLocalGatewayRouteTablesCalls gets all the calls that were made to DescribeLocalGatewayRouteTables.
// Check the length with:
//     len(mockedClient.DescribeLocalGatewayRouteTablesCalls())
func (mock *ClientMock) DescribeLocalGatewayRouteTablesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeLocalGatewayRouteTablesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeLocalGatewayRouteTablesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeLocalGatewayRouteTables.RLock()
	calls = mock.calls.DescribeLocalGatewayRouteTables
	mock.lockDescribeLocalGatewayRouteTables.RUnlock()
	return calls
}

// DescribeLocalGatewayVirtualInterfaceGroups calls DescribeLocalGatewayVirtualInterfaceGroupsFunc.
func (mock *ClientMock) DescribeLocalGatewayVirtualInterfaceGroups(ctx context.Context, params *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {
	if mock.DescribeLocalGatewayVirtualInterfaceGroupsFunc == nil {
		panic("ClientMock.DescribeLocalGatewayVirtualInterfaceGroupsFunc: method is nil but Client.DescribeLocalGatewayVirtualInterfaceGroups was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeLocalGatewayVirtualInterfaceGroups.Lock()
	mock.calls.DescribeLocalGatewayVirtualInterfaceGroups = append(mock.calls.DescribeLocalGatewayVirtualInterfaceGroups, callInfo)
	mock.lockDescribeLocalGatewayVirtualInterfaceGroups.Unlock()
	return mock.DescribeLocalGatewayVirtualInterfaceGroupsFunc(ctx, params, optFns...)
}

// DescribeLocalGatewayVirtualInterfaceGroupsCalls gets all the calls that were made to DescribeLocalGatewayVirtualInterfaceGroups.
// Check the length with:
//     len(mockedClient.DescribeLocalGatewayVirtualInterfaceGroupsCalls())
func (mock *ClientMock) DescribeLocalGatewayVirtualInterfaceGroupsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeLocalGatewayVirtualInterfaceGroups.RLock()
	calls = mock.calls.DescribeLocalGatewayVirtualInterfaceGroups
	mock.lockDescribeLocalGatewayVirtualInterfaceGroups.RUnlock()
	return calls
}

// DescribeLocalGatewayVirtualInterfaces calls DescribeLocalGatewayVirtualInterfacesFunc.
func (mock *ClientMock) DescribeLocalGatewayVirtualInterfaces(ctx context.Context, params *ec2.DescribeLocalGatewayVirtualInterfacesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {
	if mock.DescribeLocalGatewayVirtualInterfacesFunc == nil {
		panic("ClientMock.DescribeLocalGatewayVirtualInterfacesFunc: method is nil but Client.DescribeLocalGatewayVirtualInterfaces was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeLocalGatewayVirtualInterfacesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeLocalGatewayVirtualInterfaces.Lock()
	mock.calls.DescribeLocalGatewayVirtualInterfaces = append(mock.calls.DescribeLocalGatewayVirtualInterfaces, callInfo)
	mock.lockDescribeLocalGatewayVirtualInterfaces.Unlock()
	return mock.DescribeLocalGatewayVirtualInterfacesFunc(ctx, params, optFns...)
}

// DescribeLocalGatewayVirtualInterfacesCalls gets all the calls that were made to DescribeLocalGatewayVirtualInterfaces.
// Check the length with:
//     len(mockedClient.DescribeLocalGatewayVirtualInterfacesCalls())
func (mock *ClientMock) DescribeLocalGatewayVirtualInterfacesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeLocalGatewayVirtualInterfacesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeLocalGatewayVirtualInterfacesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeLocalGatewayVirtualInterfaces.RLock()
	calls = mock.calls.DescribeLocalGatewayVirtualInterfaces
	mock.lockDescribeLocalGatewayVirtualInterfaces.RUnlock()
	return calls
}

// DescribeLocalGateways calls DescribeLocalGatewaysFunc.
func (mock *ClientMock) DescribeLocalGateways(ctx context.Context, params *ec2.DescribeLocalGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeLocalGatewaysOutput, error) {
	if mock.DescribeLocalGatewaysFunc == nil {
		panic("ClientMock.DescribeLocalGatewaysFunc: method is nil but Client.DescribeLocalGateways was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeLocalGatewaysInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeLocalGateways.Lock()
	mock.calls.DescribeLocalGateways = append(mock.calls.DescribeLocalGateways, callInfo)
	mock.lockDescribeLocalGateways.Unlock()
	return mock.DescribeLocalGatewaysFunc(ctx, params, optFns...)
}

// DescribeLocalGatewaysCalls gets all the calls that were made to DescribeLocalGateways.
// Check the length with:
//     len(mockedClient.DescribeLocalGatewaysCalls())
func (mock *ClientMock) DescribeLocalGatewaysCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeLocalGatewaysInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeLocalGatewaysInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeLocalGateways.RLock()
	calls = mock.calls.DescribeLocalGateways
	mock.lockDescribeLocalGateways.RUnlock()
	return calls
}

// DescribeManagedPrefixLists calls DescribeManagedPrefixListsFunc.
func (mock *ClientMock) DescribeManagedPrefixLists(ctx context.Context, params *ec2.DescribeManagedPrefixListsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeManagedPrefixListsOutput, error) {
	if mock.DescribeManagedPrefixListsFunc == nil {
		panic("ClientMock.DescribeManagedPrefixListsFunc: method is nil but Client.DescribeManagedPrefixLists was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeManagedPrefixListsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeManagedPrefixLists.Lock()
	mock.calls.DescribeManagedPrefixLists = append(mock.calls.DescribeManagedPrefixLists, callInfo)
	mock.lockDescribeManagedPrefixLists.Unlock()
	return mock.DescribeManagedPrefixListsFunc(ctx, params, optFns...)
}

// DescribeManagedPrefixListsCalls gets all the calls that were made to DescribeManagedPrefixLists.
// Check the length with:
//     len(mockedClient.DescribeManagedPrefixListsCalls())
func (mock *ClientMock) DescribeManagedPrefixListsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeManagedPrefixListsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeManagedPrefixListsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeManagedPrefixLists.RLock()
	calls = mock.calls.DescribeManagedPrefixLists
	mock.lockDescribeManagedPrefixLists.RUnlock()
	return calls
}

// DescribeMovingAddresses calls DescribeMovingAddressesFunc.
func (mock *ClientMock) DescribeMovingAddresses(ctx context.Context, params *ec2.DescribeMovingAddressesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeMovingAddressesOutput, error) {
	if mock.DescribeMovingAddressesFunc == nil {
		panic("ClientMock.DescribeMovingAddressesFunc: method is nil but Client.DescribeMovingAddresses was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeMovingAddressesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeMovingAddresses.Lock()
	mock.calls.DescribeMovingAddresses = append(mock.calls.DescribeMovingAddresses, callInfo)
	mock.lockDescribeMovingAddresses.Unlock()
	return mock.DescribeMovingAddressesFunc(ctx, params, optFns...)
}

// DescribeMovingAddressesCalls gets all the calls that were made to DescribeMovingAddresses.
// Check the length with:
//     len(mockedClient.DescribeMovingAddressesCalls())
func (mock *ClientMock) DescribeMovingAddressesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeMovingAddressesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeMovingAddressesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeMovingAddresses.RLock()
	calls = mock.calls.DescribeMovingAddresses
	mock.lockDescribeMovingAddresses.RUnlock()
	return calls
}

// DescribeNatGateways calls DescribeNatGatewaysFunc.
func (mock *ClientMock) DescribeNatGateways(ctx context.Context, params *ec2.DescribeNatGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNatGatewaysOutput, error) {
	if mock.DescribeNatGatewaysFunc == nil {
		panic("ClientMock.DescribeNatGatewaysFunc: method is nil but Client.DescribeNatGateways was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeNatGatewaysInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeNatGateways.Lock()
	mock.calls.DescribeNatGateways = append(mock.calls.DescribeNatGateways, callInfo)
	mock.lockDescribeNatGateways.Unlock()
	return mock.DescribeNatGatewaysFunc(ctx, params, optFns...)
}

// DescribeNatGatewaysCalls gets all the calls that were made to DescribeNatGateways.
// Check the length with:
//     len(mockedClient.DescribeNatGatewaysCalls())
func (mock *ClientMock) DescribeNatGatewaysCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeNatGatewaysInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeNatGatewaysInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeNatGateways.RLock()
	calls = mock.calls.DescribeNatGateways
	mock.lockDescribeNatGateways.RUnlock()
	return calls
}

// DescribeNetworkAcls calls DescribeNetworkAclsFunc.
func (mock *ClientMock) DescribeNetworkAcls(ctx context.Context, params *ec2.DescribeNetworkAclsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkAclsOutput, error) {
	if mock.DescribeNetworkAclsFunc == nil {
		panic("ClientMock.DescribeNetworkAclsFunc: method is nil but Client.DescribeNetworkAcls was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkAclsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeNetworkAcls.Lock()
	mock.calls.DescribeNetworkAcls = append(mock.calls.DescribeNetworkAcls, callInfo)
	mock.lockDescribeNetworkAcls.Unlock()
	return mock.DescribeNetworkAclsFunc(ctx, params, optFns...)
}

// DescribeNetworkAclsCalls gets all the calls that were made to DescribeNetworkAcls.
// Check the length with:
//     len(mockedClient.DescribeNetworkAclsCalls())
func (mock *ClientMock) DescribeNetworkAclsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeNetworkAclsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkAclsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeNetworkAcls.RLock()
	calls = mock.calls.DescribeNetworkAcls
	mock.lockDescribeNetworkAcls.RUnlock()
	return calls
}

// DescribeNetworkInsightsAccessScopeAnalyses calls DescribeNetworkInsightsAccessScopeAnalysesFunc.
func (mock *ClientMock) DescribeNetworkInsightsAccessScopeAnalyses(ctx context.Context, params *ec2.DescribeNetworkInsightsAccessScopeAnalysesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsAccessScopeAnalysesOutput, error) {
	if mock.DescribeNetworkInsightsAccessScopeAnalysesFunc == nil {
		panic("ClientMock.DescribeNetworkInsightsAccessScopeAnalysesFunc: method is nil but Client.DescribeNetworkInsightsAccessScopeAnalyses was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkInsightsAccessScopeAnalysesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeNetworkInsightsAccessScopeAnalyses.Lock()
	mock.calls.DescribeNetworkInsightsAccessScopeAnalyses = append(mock.calls.DescribeNetworkInsightsAccessScopeAnalyses, callInfo)
	mock.lockDescribeNetworkInsightsAccessScopeAnalyses.Unlock()
	return mock.DescribeNetworkInsightsAccessScopeAnalysesFunc(ctx, params, optFns...)
}

// DescribeNetworkInsightsAccessScopeAnalysesCalls gets all the calls that were made to DescribeNetworkInsightsAccessScopeAnalyses.
// Check the length with:
//     len(mockedClient.DescribeNetworkInsightsAccessScopeAnalysesCalls())
func (mock *ClientMock) DescribeNetworkInsightsAccessScopeAnalysesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeNetworkInsightsAccessScopeAnalysesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkInsightsAccessScopeAnalysesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeNetworkInsightsAccessScopeAnalyses.RLock()
	calls = mock.calls.DescribeNetworkInsightsAccessScopeAnalyses
	mock.lockDescribeNetworkInsightsAccessScopeAnalyses.RUnlock()
	return calls
}

// DescribeNetworkInsightsAccessScopes calls DescribeNetworkInsightsAccessScopesFunc.
func (mock *ClientMock) DescribeNetworkInsightsAccessScopes(ctx context.Context, params *ec2.DescribeNetworkInsightsAccessScopesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsAccessScopesOutput, error) {
	if mock.DescribeNetworkInsightsAccessScopesFunc == nil {
		panic("ClientMock.DescribeNetworkInsightsAccessScopesFunc: method is nil but Client.DescribeNetworkInsightsAccessScopes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkInsightsAccessScopesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeNetworkInsightsAccessScopes.Lock()
	mock.calls.DescribeNetworkInsightsAccessScopes = append(mock.calls.DescribeNetworkInsightsAccessScopes, callInfo)
	mock.lockDescribeNetworkInsightsAccessScopes.Unlock()
	return mock.DescribeNetworkInsightsAccessScopesFunc(ctx, params, optFns...)
}

// DescribeNetworkInsightsAccessScopesCalls gets all the calls that were made to DescribeNetworkInsightsAccessScopes.
// Check the length with:
//     len(mockedClient.DescribeNetworkInsightsAccessScopesCalls())
func (mock *ClientMock) DescribeNetworkInsightsAccessScopesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeNetworkInsightsAccessScopesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkInsightsAccessScopesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeNetworkInsightsAccessScopes.RLock()
	calls = mock.calls.DescribeNetworkInsightsAccessScopes
	mock.lockDescribeNetworkInsightsAccessScopes.RUnlock()
	return calls
}

// DescribeNetworkInsightsAnalyses calls DescribeNetworkInsightsAnalysesFunc.
func (mock *ClientMock) DescribeNetworkInsightsAnalyses(ctx context.Context, params *ec2.DescribeNetworkInsightsAnalysesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsAnalysesOutput, error) {
	if mock.DescribeNetworkInsightsAnalysesFunc == nil {
		panic("ClientMock.DescribeNetworkInsightsAnalysesFunc: method is nil but Client.DescribeNetworkInsightsAnalyses was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkInsightsAnalysesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeNetworkInsightsAnalyses.Lock()
	mock.calls.DescribeNetworkInsightsAnalyses = append(mock.calls.DescribeNetworkInsightsAnalyses, callInfo)
	mock.lockDescribeNetworkInsightsAnalyses.Unlock()
	return mock.DescribeNetworkInsightsAnalysesFunc(ctx, params, optFns...)
}

// DescribeNetworkInsightsAnalysesCalls gets all the calls that were made to DescribeNetworkInsightsAnalyses.
// Check the length with:
//     len(mockedClient.DescribeNetworkInsightsAnalysesCalls())
func (mock *ClientMock) DescribeNetworkInsightsAnalysesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeNetworkInsightsAnalysesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkInsightsAnalysesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeNetworkInsightsAnalyses.RLock()
	calls = mock.calls.DescribeNetworkInsightsAnalyses
	mock.lockDescribeNetworkInsightsAnalyses.RUnlock()
	return calls
}

// DescribeNetworkInsightsPaths calls DescribeNetworkInsightsPathsFunc.
func (mock *ClientMock) DescribeNetworkInsightsPaths(ctx context.Context, params *ec2.DescribeNetworkInsightsPathsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInsightsPathsOutput, error) {
	if mock.DescribeNetworkInsightsPathsFunc == nil {
		panic("ClientMock.DescribeNetworkInsightsPathsFunc: method is nil but Client.DescribeNetworkInsightsPaths was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkInsightsPathsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeNetworkInsightsPaths.Lock()
	mock.calls.DescribeNetworkInsightsPaths = append(mock.calls.DescribeNetworkInsightsPaths, callInfo)
	mock.lockDescribeNetworkInsightsPaths.Unlock()
	return mock.DescribeNetworkInsightsPathsFunc(ctx, params, optFns...)
}

// DescribeNetworkInsightsPathsCalls gets all the calls that were made to DescribeNetworkInsightsPaths.
// Check the length with:
//     len(mockedClient.DescribeNetworkInsightsPathsCalls())
func (mock *ClientMock) DescribeNetworkInsightsPathsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeNetworkInsightsPathsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkInsightsPathsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeNetworkInsightsPaths.RLock()
	calls = mock.calls.DescribeNetworkInsightsPaths
	mock.lockDescribeNetworkInsightsPaths.RUnlock()
	return calls
}

// DescribeNetworkInterfaceAttribute calls DescribeNetworkInterfaceAttributeFunc.
func (mock *ClientMock) DescribeNetworkInterfaceAttribute(ctx context.Context, params *ec2.DescribeNetworkInterfaceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	if mock.DescribeNetworkInterfaceAttributeFunc == nil {
		panic("ClientMock.DescribeNetworkInterfaceAttributeFunc: method is nil but Client.DescribeNetworkInterfaceAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkInterfaceAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeNetworkInterfaceAttribute.Lock()
	mock.calls.DescribeNetworkInterfaceAttribute = append(mock.calls.DescribeNetworkInterfaceAttribute, callInfo)
	mock.lockDescribeNetworkInterfaceAttribute.Unlock()
	return mock.DescribeNetworkInterfaceAttributeFunc(ctx, params, optFns...)
}

// DescribeNetworkInterfaceAttributeCalls gets all the calls that were made to DescribeNetworkInterfaceAttribute.
// Check the length with:
//     len(mockedClient.DescribeNetworkInterfaceAttributeCalls())
func (mock *ClientMock) DescribeNetworkInterfaceAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeNetworkInterfaceAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkInterfaceAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeNetworkInterfaceAttribute.RLock()
	calls = mock.calls.DescribeNetworkInterfaceAttribute
	mock.lockDescribeNetworkInterfaceAttribute.RUnlock()
	return calls
}

// DescribeNetworkInterfacePermissions calls DescribeNetworkInterfacePermissionsFunc.
func (mock *ClientMock) DescribeNetworkInterfacePermissions(ctx context.Context, params *ec2.DescribeNetworkInterfacePermissionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
	if mock.DescribeNetworkInterfacePermissionsFunc == nil {
		panic("ClientMock.DescribeNetworkInterfacePermissionsFunc: method is nil but Client.DescribeNetworkInterfacePermissions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkInterfacePermissionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeNetworkInterfacePermissions.Lock()
	mock.calls.DescribeNetworkInterfacePermissions = append(mock.calls.DescribeNetworkInterfacePermissions, callInfo)
	mock.lockDescribeNetworkInterfacePermissions.Unlock()
	return mock.DescribeNetworkInterfacePermissionsFunc(ctx, params, optFns...)
}

// DescribeNetworkInterfacePermissionsCalls gets all the calls that were made to DescribeNetworkInterfacePermissions.
// Check the length with:
//     len(mockedClient.DescribeNetworkInterfacePermissionsCalls())
func (mock *ClientMock) DescribeNetworkInterfacePermissionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeNetworkInterfacePermissionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkInterfacePermissionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeNetworkInterfacePermissions.RLock()
	calls = mock.calls.DescribeNetworkInterfacePermissions
	mock.lockDescribeNetworkInterfacePermissions.RUnlock()
	return calls
}

// DescribeNetworkInterfaces calls DescribeNetworkInterfacesFunc.
func (mock *ClientMock) DescribeNetworkInterfaces(ctx context.Context, params *ec2.DescribeNetworkInterfacesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeNetworkInterfacesOutput, error) {
	if mock.DescribeNetworkInterfacesFunc == nil {
		panic("ClientMock.DescribeNetworkInterfacesFunc: method is nil but Client.DescribeNetworkInterfaces was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkInterfacesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeNetworkInterfaces.Lock()
	mock.calls.DescribeNetworkInterfaces = append(mock.calls.DescribeNetworkInterfaces, callInfo)
	mock.lockDescribeNetworkInterfaces.Unlock()
	return mock.DescribeNetworkInterfacesFunc(ctx, params, optFns...)
}

// DescribeNetworkInterfacesCalls gets all the calls that were made to DescribeNetworkInterfaces.
// Check the length with:
//     len(mockedClient.DescribeNetworkInterfacesCalls())
func (mock *ClientMock) DescribeNetworkInterfacesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeNetworkInterfacesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeNetworkInterfacesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeNetworkInterfaces.RLock()
	calls = mock.calls.DescribeNetworkInterfaces
	mock.lockDescribeNetworkInterfaces.RUnlock()
	return calls
}

// DescribePlacementGroups calls DescribePlacementGroupsFunc.
func (mock *ClientMock) DescribePlacementGroups(ctx context.Context, params *ec2.DescribePlacementGroupsInput, optFns ...func(*ec2.Options)) (*ec2.DescribePlacementGroupsOutput, error) {
	if mock.DescribePlacementGroupsFunc == nil {
		panic("ClientMock.DescribePlacementGroupsFunc: method is nil but Client.DescribePlacementGroups was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribePlacementGroupsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribePlacementGroups.Lock()
	mock.calls.DescribePlacementGroups = append(mock.calls.DescribePlacementGroups, callInfo)
	mock.lockDescribePlacementGroups.Unlock()
	return mock.DescribePlacementGroupsFunc(ctx, params, optFns...)
}

// DescribePlacementGroupsCalls gets all the calls that were made to DescribePlacementGroups.
// Check the length with:
//     len(mockedClient.DescribePlacementGroupsCalls())
func (mock *ClientMock) DescribePlacementGroupsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribePlacementGroupsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribePlacementGroupsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribePlacementGroups.RLock()
	calls = mock.calls.DescribePlacementGroups
	mock.lockDescribePlacementGroups.RUnlock()
	return calls
}

// DescribePrefixLists calls DescribePrefixListsFunc.
func (mock *ClientMock) DescribePrefixLists(ctx context.Context, params *ec2.DescribePrefixListsInput, optFns ...func(*ec2.Options)) (*ec2.DescribePrefixListsOutput, error) {
	if mock.DescribePrefixListsFunc == nil {
		panic("ClientMock.DescribePrefixListsFunc: method is nil but Client.DescribePrefixLists was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribePrefixListsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribePrefixLists.Lock()
	mock.calls.DescribePrefixLists = append(mock.calls.DescribePrefixLists, callInfo)
	mock.lockDescribePrefixLists.Unlock()
	return mock.DescribePrefixListsFunc(ctx, params, optFns...)
}

// DescribePrefixListsCalls gets all the calls that were made to DescribePrefixLists.
// Check the length with:
//     len(mockedClient.DescribePrefixListsCalls())
func (mock *ClientMock) DescribePrefixListsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribePrefixListsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribePrefixListsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribePrefixLists.RLock()
	calls = mock.calls.DescribePrefixLists
	mock.lockDescribePrefixLists.RUnlock()
	return calls
}

// DescribePrincipalIdFormat calls DescribePrincipalIdFormatFunc.
func (mock *ClientMock) DescribePrincipalIdFormat(ctx context.Context, params *ec2.DescribePrincipalIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.DescribePrincipalIdFormatOutput, error) {
	if mock.DescribePrincipalIdFormatFunc == nil {
		panic("ClientMock.DescribePrincipalIdFormatFunc: method is nil but Client.DescribePrincipalIdFormat was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribePrincipalIdFormatInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribePrincipalIdFormat.Lock()
	mock.calls.DescribePrincipalIdFormat = append(mock.calls.DescribePrincipalIdFormat, callInfo)
	mock.lockDescribePrincipalIdFormat.Unlock()
	return mock.DescribePrincipalIdFormatFunc(ctx, params, optFns...)
}

// DescribePrincipalIdFormatCalls gets all the calls that were made to DescribePrincipalIdFormat.
// Check the length with:
//     len(mockedClient.DescribePrincipalIdFormatCalls())
func (mock *ClientMock) DescribePrincipalIdFormatCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribePrincipalIdFormatInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribePrincipalIdFormatInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribePrincipalIdFormat.RLock()
	calls = mock.calls.DescribePrincipalIdFormat
	mock.lockDescribePrincipalIdFormat.RUnlock()
	return calls
}

// DescribePublicIpv4Pools calls DescribePublicIpv4PoolsFunc.
func (mock *ClientMock) DescribePublicIpv4Pools(ctx context.Context, params *ec2.DescribePublicIpv4PoolsInput, optFns ...func(*ec2.Options)) (*ec2.DescribePublicIpv4PoolsOutput, error) {
	if mock.DescribePublicIpv4PoolsFunc == nil {
		panic("ClientMock.DescribePublicIpv4PoolsFunc: method is nil but Client.DescribePublicIpv4Pools was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribePublicIpv4PoolsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribePublicIpv4Pools.Lock()
	mock.calls.DescribePublicIpv4Pools = append(mock.calls.DescribePublicIpv4Pools, callInfo)
	mock.lockDescribePublicIpv4Pools.Unlock()
	return mock.DescribePublicIpv4PoolsFunc(ctx, params, optFns...)
}

// DescribePublicIpv4PoolsCalls gets all the calls that were made to DescribePublicIpv4Pools.
// Check the length with:
//     len(mockedClient.DescribePublicIpv4PoolsCalls())
func (mock *ClientMock) DescribePublicIpv4PoolsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribePublicIpv4PoolsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribePublicIpv4PoolsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribePublicIpv4Pools.RLock()
	calls = mock.calls.DescribePublicIpv4Pools
	mock.lockDescribePublicIpv4Pools.RUnlock()
	return calls
}

// DescribeRegions calls DescribeRegionsFunc.
func (mock *ClientMock) DescribeRegions(ctx context.Context, params *ec2.DescribeRegionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeRegionsOutput, error) {
	if mock.DescribeRegionsFunc == nil {
		panic("ClientMock.DescribeRegionsFunc: method is nil but Client.DescribeRegions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeRegionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeRegions.Lock()
	mock.calls.DescribeRegions = append(mock.calls.DescribeRegions, callInfo)
	mock.lockDescribeRegions.Unlock()
	return mock.DescribeRegionsFunc(ctx, params, optFns...)
}

// DescribeRegionsCalls gets all the calls that were made to DescribeRegions.
// Check the length with:
//     len(mockedClient.DescribeRegionsCalls())
func (mock *ClientMock) DescribeRegionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeRegionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeRegionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeRegions.RLock()
	calls = mock.calls.DescribeRegions
	mock.lockDescribeRegions.RUnlock()
	return calls
}

// DescribeReplaceRootVolumeTasks calls DescribeReplaceRootVolumeTasksFunc.
func (mock *ClientMock) DescribeReplaceRootVolumeTasks(ctx context.Context, params *ec2.DescribeReplaceRootVolumeTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReplaceRootVolumeTasksOutput, error) {
	if mock.DescribeReplaceRootVolumeTasksFunc == nil {
		panic("ClientMock.DescribeReplaceRootVolumeTasksFunc: method is nil but Client.DescribeReplaceRootVolumeTasks was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeReplaceRootVolumeTasksInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeReplaceRootVolumeTasks.Lock()
	mock.calls.DescribeReplaceRootVolumeTasks = append(mock.calls.DescribeReplaceRootVolumeTasks, callInfo)
	mock.lockDescribeReplaceRootVolumeTasks.Unlock()
	return mock.DescribeReplaceRootVolumeTasksFunc(ctx, params, optFns...)
}

// DescribeReplaceRootVolumeTasksCalls gets all the calls that were made to DescribeReplaceRootVolumeTasks.
// Check the length with:
//     len(mockedClient.DescribeReplaceRootVolumeTasksCalls())
func (mock *ClientMock) DescribeReplaceRootVolumeTasksCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeReplaceRootVolumeTasksInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeReplaceRootVolumeTasksInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeReplaceRootVolumeTasks.RLock()
	calls = mock.calls.DescribeReplaceRootVolumeTasks
	mock.lockDescribeReplaceRootVolumeTasks.RUnlock()
	return calls
}

// DescribeReservedInstances calls DescribeReservedInstancesFunc.
func (mock *ClientMock) DescribeReservedInstances(ctx context.Context, params *ec2.DescribeReservedInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesOutput, error) {
	if mock.DescribeReservedInstancesFunc == nil {
		panic("ClientMock.DescribeReservedInstancesFunc: method is nil but Client.DescribeReservedInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeReservedInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeReservedInstances.Lock()
	mock.calls.DescribeReservedInstances = append(mock.calls.DescribeReservedInstances, callInfo)
	mock.lockDescribeReservedInstances.Unlock()
	return mock.DescribeReservedInstancesFunc(ctx, params, optFns...)
}

// DescribeReservedInstancesCalls gets all the calls that were made to DescribeReservedInstances.
// Check the length with:
//     len(mockedClient.DescribeReservedInstancesCalls())
func (mock *ClientMock) DescribeReservedInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeReservedInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeReservedInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeReservedInstances.RLock()
	calls = mock.calls.DescribeReservedInstances
	mock.lockDescribeReservedInstances.RUnlock()
	return calls
}

// DescribeReservedInstancesListings calls DescribeReservedInstancesListingsFunc.
func (mock *ClientMock) DescribeReservedInstancesListings(ctx context.Context, params *ec2.DescribeReservedInstancesListingsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	if mock.DescribeReservedInstancesListingsFunc == nil {
		panic("ClientMock.DescribeReservedInstancesListingsFunc: method is nil but Client.DescribeReservedInstancesListings was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeReservedInstancesListingsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeReservedInstancesListings.Lock()
	mock.calls.DescribeReservedInstancesListings = append(mock.calls.DescribeReservedInstancesListings, callInfo)
	mock.lockDescribeReservedInstancesListings.Unlock()
	return mock.DescribeReservedInstancesListingsFunc(ctx, params, optFns...)
}

// DescribeReservedInstancesListingsCalls gets all the calls that were made to DescribeReservedInstancesListings.
// Check the length with:
//     len(mockedClient.DescribeReservedInstancesListingsCalls())
func (mock *ClientMock) DescribeReservedInstancesListingsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeReservedInstancesListingsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeReservedInstancesListingsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeReservedInstancesListings.RLock()
	calls = mock.calls.DescribeReservedInstancesListings
	mock.lockDescribeReservedInstancesListings.RUnlock()
	return calls
}

// DescribeReservedInstancesModifications calls DescribeReservedInstancesModificationsFunc.
func (mock *ClientMock) DescribeReservedInstancesModifications(ctx context.Context, params *ec2.DescribeReservedInstancesModificationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	if mock.DescribeReservedInstancesModificationsFunc == nil {
		panic("ClientMock.DescribeReservedInstancesModificationsFunc: method is nil but Client.DescribeReservedInstancesModifications was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeReservedInstancesModificationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeReservedInstancesModifications.Lock()
	mock.calls.DescribeReservedInstancesModifications = append(mock.calls.DescribeReservedInstancesModifications, callInfo)
	mock.lockDescribeReservedInstancesModifications.Unlock()
	return mock.DescribeReservedInstancesModificationsFunc(ctx, params, optFns...)
}

// DescribeReservedInstancesModificationsCalls gets all the calls that were made to DescribeReservedInstancesModifications.
// Check the length with:
//     len(mockedClient.DescribeReservedInstancesModificationsCalls())
func (mock *ClientMock) DescribeReservedInstancesModificationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeReservedInstancesModificationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeReservedInstancesModificationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeReservedInstancesModifications.RLock()
	calls = mock.calls.DescribeReservedInstancesModifications
	mock.lockDescribeReservedInstancesModifications.RUnlock()
	return calls
}

// DescribeReservedInstancesOfferings calls DescribeReservedInstancesOfferingsFunc.
func (mock *ClientMock) DescribeReservedInstancesOfferings(ctx context.Context, params *ec2.DescribeReservedInstancesOfferingsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	if mock.DescribeReservedInstancesOfferingsFunc == nil {
		panic("ClientMock.DescribeReservedInstancesOfferingsFunc: method is nil but Client.DescribeReservedInstancesOfferings was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeReservedInstancesOfferingsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeReservedInstancesOfferings.Lock()
	mock.calls.DescribeReservedInstancesOfferings = append(mock.calls.DescribeReservedInstancesOfferings, callInfo)
	mock.lockDescribeReservedInstancesOfferings.Unlock()
	return mock.DescribeReservedInstancesOfferingsFunc(ctx, params, optFns...)
}

// DescribeReservedInstancesOfferingsCalls gets all the calls that were made to DescribeReservedInstancesOfferings.
// Check the length with:
//     len(mockedClient.DescribeReservedInstancesOfferingsCalls())
func (mock *ClientMock) DescribeReservedInstancesOfferingsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeReservedInstancesOfferingsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeReservedInstancesOfferingsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeReservedInstancesOfferings.RLock()
	calls = mock.calls.DescribeReservedInstancesOfferings
	mock.lockDescribeReservedInstancesOfferings.RUnlock()
	return calls
}

// DescribeRouteTables calls DescribeRouteTablesFunc.
func (mock *ClientMock) DescribeRouteTables(ctx context.Context, params *ec2.DescribeRouteTablesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeRouteTablesOutput, error) {
	if mock.DescribeRouteTablesFunc == nil {
		panic("ClientMock.DescribeRouteTablesFunc: method is nil but Client.DescribeRouteTables was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeRouteTablesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeRouteTables.Lock()
	mock.calls.DescribeRouteTables = append(mock.calls.DescribeRouteTables, callInfo)
	mock.lockDescribeRouteTables.Unlock()
	return mock.DescribeRouteTablesFunc(ctx, params, optFns...)
}

// DescribeRouteTablesCalls gets all the calls that were made to DescribeRouteTables.
// Check the length with:
//     len(mockedClient.DescribeRouteTablesCalls())
func (mock *ClientMock) DescribeRouteTablesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeRouteTablesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeRouteTablesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeRouteTables.RLock()
	calls = mock.calls.DescribeRouteTables
	mock.lockDescribeRouteTables.RUnlock()
	return calls
}

// DescribeScheduledInstanceAvailability calls DescribeScheduledInstanceAvailabilityFunc.
func (mock *ClientMock) DescribeScheduledInstanceAvailability(ctx context.Context, params *ec2.DescribeScheduledInstanceAvailabilityInput, optFns ...func(*ec2.Options)) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
	if mock.DescribeScheduledInstanceAvailabilityFunc == nil {
		panic("ClientMock.DescribeScheduledInstanceAvailabilityFunc: method is nil but Client.DescribeScheduledInstanceAvailability was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeScheduledInstanceAvailabilityInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeScheduledInstanceAvailability.Lock()
	mock.calls.DescribeScheduledInstanceAvailability = append(mock.calls.DescribeScheduledInstanceAvailability, callInfo)
	mock.lockDescribeScheduledInstanceAvailability.Unlock()
	return mock.DescribeScheduledInstanceAvailabilityFunc(ctx, params, optFns...)
}

// DescribeScheduledInstanceAvailabilityCalls gets all the calls that were made to DescribeScheduledInstanceAvailability.
// Check the length with:
//     len(mockedClient.DescribeScheduledInstanceAvailabilityCalls())
func (mock *ClientMock) DescribeScheduledInstanceAvailabilityCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeScheduledInstanceAvailabilityInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeScheduledInstanceAvailabilityInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeScheduledInstanceAvailability.RLock()
	calls = mock.calls.DescribeScheduledInstanceAvailability
	mock.lockDescribeScheduledInstanceAvailability.RUnlock()
	return calls
}

// DescribeScheduledInstances calls DescribeScheduledInstancesFunc.
func (mock *ClientMock) DescribeScheduledInstances(ctx context.Context, params *ec2.DescribeScheduledInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeScheduledInstancesOutput, error) {
	if mock.DescribeScheduledInstancesFunc == nil {
		panic("ClientMock.DescribeScheduledInstancesFunc: method is nil but Client.DescribeScheduledInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeScheduledInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeScheduledInstances.Lock()
	mock.calls.DescribeScheduledInstances = append(mock.calls.DescribeScheduledInstances, callInfo)
	mock.lockDescribeScheduledInstances.Unlock()
	return mock.DescribeScheduledInstancesFunc(ctx, params, optFns...)
}

// DescribeScheduledInstancesCalls gets all the calls that were made to DescribeScheduledInstances.
// Check the length with:
//     len(mockedClient.DescribeScheduledInstancesCalls())
func (mock *ClientMock) DescribeScheduledInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeScheduledInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeScheduledInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeScheduledInstances.RLock()
	calls = mock.calls.DescribeScheduledInstances
	mock.lockDescribeScheduledInstances.RUnlock()
	return calls
}

// DescribeSecurityGroupReferences calls DescribeSecurityGroupReferencesFunc.
func (mock *ClientMock) DescribeSecurityGroupReferences(ctx context.Context, params *ec2.DescribeSecurityGroupReferencesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
	if mock.DescribeSecurityGroupReferencesFunc == nil {
		panic("ClientMock.DescribeSecurityGroupReferencesFunc: method is nil but Client.DescribeSecurityGroupReferences was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeSecurityGroupReferencesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSecurityGroupReferences.Lock()
	mock.calls.DescribeSecurityGroupReferences = append(mock.calls.DescribeSecurityGroupReferences, callInfo)
	mock.lockDescribeSecurityGroupReferences.Unlock()
	return mock.DescribeSecurityGroupReferencesFunc(ctx, params, optFns...)
}

// DescribeSecurityGroupReferencesCalls gets all the calls that were made to DescribeSecurityGroupReferences.
// Check the length with:
//     len(mockedClient.DescribeSecurityGroupReferencesCalls())
func (mock *ClientMock) DescribeSecurityGroupReferencesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeSecurityGroupReferencesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeSecurityGroupReferencesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeSecurityGroupReferences.RLock()
	calls = mock.calls.DescribeSecurityGroupReferences
	mock.lockDescribeSecurityGroupReferences.RUnlock()
	return calls
}

// DescribeSecurityGroupRules calls DescribeSecurityGroupRulesFunc.
func (mock *ClientMock) DescribeSecurityGroupRules(ctx context.Context, params *ec2.DescribeSecurityGroupRulesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupRulesOutput, error) {
	if mock.DescribeSecurityGroupRulesFunc == nil {
		panic("ClientMock.DescribeSecurityGroupRulesFunc: method is nil but Client.DescribeSecurityGroupRules was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeSecurityGroupRulesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSecurityGroupRules.Lock()
	mock.calls.DescribeSecurityGroupRules = append(mock.calls.DescribeSecurityGroupRules, callInfo)
	mock.lockDescribeSecurityGroupRules.Unlock()
	return mock.DescribeSecurityGroupRulesFunc(ctx, params, optFns...)
}

// DescribeSecurityGroupRulesCalls gets all the calls that were made to DescribeSecurityGroupRules.
// Check the length with:
//     len(mockedClient.DescribeSecurityGroupRulesCalls())
func (mock *ClientMock) DescribeSecurityGroupRulesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeSecurityGroupRulesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeSecurityGroupRulesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeSecurityGroupRules.RLock()
	calls = mock.calls.DescribeSecurityGroupRules
	mock.lockDescribeSecurityGroupRules.RUnlock()
	return calls
}

// DescribeSecurityGroups calls DescribeSecurityGroupsFunc.
func (mock *ClientMock) DescribeSecurityGroups(ctx context.Context, params *ec2.DescribeSecurityGroupsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSecurityGroupsOutput, error) {
	if mock.DescribeSecurityGroupsFunc == nil {
		panic("ClientMock.DescribeSecurityGroupsFunc: method is nil but Client.DescribeSecurityGroups was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeSecurityGroupsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSecurityGroups.Lock()
	mock.calls.DescribeSecurityGroups = append(mock.calls.DescribeSecurityGroups, callInfo)
	mock.lockDescribeSecurityGroups.Unlock()
	return mock.DescribeSecurityGroupsFunc(ctx, params, optFns...)
}

// DescribeSecurityGroupsCalls gets all the calls that were made to DescribeSecurityGroups.
// Check the length with:
//     len(mockedClient.DescribeSecurityGroupsCalls())
func (mock *ClientMock) DescribeSecurityGroupsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeSecurityGroupsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeSecurityGroupsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeSecurityGroups.RLock()
	calls = mock.calls.DescribeSecurityGroups
	mock.lockDescribeSecurityGroups.RUnlock()
	return calls
}

// DescribeSnapshotAttribute calls DescribeSnapshotAttributeFunc.
func (mock *ClientMock) DescribeSnapshotAttribute(ctx context.Context, params *ec2.DescribeSnapshotAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSnapshotAttributeOutput, error) {
	if mock.DescribeSnapshotAttributeFunc == nil {
		panic("ClientMock.DescribeSnapshotAttributeFunc: method is nil but Client.DescribeSnapshotAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeSnapshotAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSnapshotAttribute.Lock()
	mock.calls.DescribeSnapshotAttribute = append(mock.calls.DescribeSnapshotAttribute, callInfo)
	mock.lockDescribeSnapshotAttribute.Unlock()
	return mock.DescribeSnapshotAttributeFunc(ctx, params, optFns...)
}

// DescribeSnapshotAttributeCalls gets all the calls that were made to DescribeSnapshotAttribute.
// Check the length with:
//     len(mockedClient.DescribeSnapshotAttributeCalls())
func (mock *ClientMock) DescribeSnapshotAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeSnapshotAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeSnapshotAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeSnapshotAttribute.RLock()
	calls = mock.calls.DescribeSnapshotAttribute
	mock.lockDescribeSnapshotAttribute.RUnlock()
	return calls
}

// DescribeSnapshotTierStatus calls DescribeSnapshotTierStatusFunc.
func (mock *ClientMock) DescribeSnapshotTierStatus(ctx context.Context, params *ec2.DescribeSnapshotTierStatusInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSnapshotTierStatusOutput, error) {
	if mock.DescribeSnapshotTierStatusFunc == nil {
		panic("ClientMock.DescribeSnapshotTierStatusFunc: method is nil but Client.DescribeSnapshotTierStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeSnapshotTierStatusInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSnapshotTierStatus.Lock()
	mock.calls.DescribeSnapshotTierStatus = append(mock.calls.DescribeSnapshotTierStatus, callInfo)
	mock.lockDescribeSnapshotTierStatus.Unlock()
	return mock.DescribeSnapshotTierStatusFunc(ctx, params, optFns...)
}

// DescribeSnapshotTierStatusCalls gets all the calls that were made to DescribeSnapshotTierStatus.
// Check the length with:
//     len(mockedClient.DescribeSnapshotTierStatusCalls())
func (mock *ClientMock) DescribeSnapshotTierStatusCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeSnapshotTierStatusInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeSnapshotTierStatusInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeSnapshotTierStatus.RLock()
	calls = mock.calls.DescribeSnapshotTierStatus
	mock.lockDescribeSnapshotTierStatus.RUnlock()
	return calls
}

// DescribeSnapshots calls DescribeSnapshotsFunc.
func (mock *ClientMock) DescribeSnapshots(ctx context.Context, params *ec2.DescribeSnapshotsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSnapshotsOutput, error) {
	if mock.DescribeSnapshotsFunc == nil {
		panic("ClientMock.DescribeSnapshotsFunc: method is nil but Client.DescribeSnapshots was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeSnapshotsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSnapshots.Lock()
	mock.calls.DescribeSnapshots = append(mock.calls.DescribeSnapshots, callInfo)
	mock.lockDescribeSnapshots.Unlock()
	return mock.DescribeSnapshotsFunc(ctx, params, optFns...)
}

// DescribeSnapshotsCalls gets all the calls that were made to DescribeSnapshots.
// Check the length with:
//     len(mockedClient.DescribeSnapshotsCalls())
func (mock *ClientMock) DescribeSnapshotsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeSnapshotsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeSnapshotsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeSnapshots.RLock()
	calls = mock.calls.DescribeSnapshots
	mock.lockDescribeSnapshots.RUnlock()
	return calls
}

// DescribeSpotDatafeedSubscription calls DescribeSpotDatafeedSubscriptionFunc.
func (mock *ClientMock) DescribeSpotDatafeedSubscription(ctx context.Context, params *ec2.DescribeSpotDatafeedSubscriptionInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	if mock.DescribeSpotDatafeedSubscriptionFunc == nil {
		panic("ClientMock.DescribeSpotDatafeedSubscriptionFunc: method is nil but Client.DescribeSpotDatafeedSubscription was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeSpotDatafeedSubscriptionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSpotDatafeedSubscription.Lock()
	mock.calls.DescribeSpotDatafeedSubscription = append(mock.calls.DescribeSpotDatafeedSubscription, callInfo)
	mock.lockDescribeSpotDatafeedSubscription.Unlock()
	return mock.DescribeSpotDatafeedSubscriptionFunc(ctx, params, optFns...)
}

// DescribeSpotDatafeedSubscriptionCalls gets all the calls that were made to DescribeSpotDatafeedSubscription.
// Check the length with:
//     len(mockedClient.DescribeSpotDatafeedSubscriptionCalls())
func (mock *ClientMock) DescribeSpotDatafeedSubscriptionCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeSpotDatafeedSubscriptionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeSpotDatafeedSubscriptionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeSpotDatafeedSubscription.RLock()
	calls = mock.calls.DescribeSpotDatafeedSubscription
	mock.lockDescribeSpotDatafeedSubscription.RUnlock()
	return calls
}

// DescribeSpotFleetInstances calls DescribeSpotFleetInstancesFunc.
func (mock *ClientMock) DescribeSpotFleetInstances(ctx context.Context, params *ec2.DescribeSpotFleetInstancesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	if mock.DescribeSpotFleetInstancesFunc == nil {
		panic("ClientMock.DescribeSpotFleetInstancesFunc: method is nil but Client.DescribeSpotFleetInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeSpotFleetInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSpotFleetInstances.Lock()
	mock.calls.DescribeSpotFleetInstances = append(mock.calls.DescribeSpotFleetInstances, callInfo)
	mock.lockDescribeSpotFleetInstances.Unlock()
	return mock.DescribeSpotFleetInstancesFunc(ctx, params, optFns...)
}

// DescribeSpotFleetInstancesCalls gets all the calls that were made to DescribeSpotFleetInstances.
// Check the length with:
//     len(mockedClient.DescribeSpotFleetInstancesCalls())
func (mock *ClientMock) DescribeSpotFleetInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeSpotFleetInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeSpotFleetInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeSpotFleetInstances.RLock()
	calls = mock.calls.DescribeSpotFleetInstances
	mock.lockDescribeSpotFleetInstances.RUnlock()
	return calls
}

// DescribeSpotFleetRequestHistory calls DescribeSpotFleetRequestHistoryFunc.
func (mock *ClientMock) DescribeSpotFleetRequestHistory(ctx context.Context, params *ec2.DescribeSpotFleetRequestHistoryInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	if mock.DescribeSpotFleetRequestHistoryFunc == nil {
		panic("ClientMock.DescribeSpotFleetRequestHistoryFunc: method is nil but Client.DescribeSpotFleetRequestHistory was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeSpotFleetRequestHistoryInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSpotFleetRequestHistory.Lock()
	mock.calls.DescribeSpotFleetRequestHistory = append(mock.calls.DescribeSpotFleetRequestHistory, callInfo)
	mock.lockDescribeSpotFleetRequestHistory.Unlock()
	return mock.DescribeSpotFleetRequestHistoryFunc(ctx, params, optFns...)
}

// DescribeSpotFleetRequestHistoryCalls gets all the calls that were made to DescribeSpotFleetRequestHistory.
// Check the length with:
//     len(mockedClient.DescribeSpotFleetRequestHistoryCalls())
func (mock *ClientMock) DescribeSpotFleetRequestHistoryCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeSpotFleetRequestHistoryInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeSpotFleetRequestHistoryInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeSpotFleetRequestHistory.RLock()
	calls = mock.calls.DescribeSpotFleetRequestHistory
	mock.lockDescribeSpotFleetRequestHistory.RUnlock()
	return calls
}

// DescribeSpotFleetRequests calls DescribeSpotFleetRequestsFunc.
func (mock *ClientMock) DescribeSpotFleetRequests(ctx context.Context, params *ec2.DescribeSpotFleetRequestsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	if mock.DescribeSpotFleetRequestsFunc == nil {
		panic("ClientMock.DescribeSpotFleetRequestsFunc: method is nil but Client.DescribeSpotFleetRequests was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeSpotFleetRequestsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSpotFleetRequests.Lock()
	mock.calls.DescribeSpotFleetRequests = append(mock.calls.DescribeSpotFleetRequests, callInfo)
	mock.lockDescribeSpotFleetRequests.Unlock()
	return mock.DescribeSpotFleetRequestsFunc(ctx, params, optFns...)
}

// DescribeSpotFleetRequestsCalls gets all the calls that were made to DescribeSpotFleetRequests.
// Check the length with:
//     len(mockedClient.DescribeSpotFleetRequestsCalls())
func (mock *ClientMock) DescribeSpotFleetRequestsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeSpotFleetRequestsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeSpotFleetRequestsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeSpotFleetRequests.RLock()
	calls = mock.calls.DescribeSpotFleetRequests
	mock.lockDescribeSpotFleetRequests.RUnlock()
	return calls
}

// DescribeSpotInstanceRequests calls DescribeSpotInstanceRequestsFunc.
func (mock *ClientMock) DescribeSpotInstanceRequests(ctx context.Context, params *ec2.DescribeSpotInstanceRequestsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	if mock.DescribeSpotInstanceRequestsFunc == nil {
		panic("ClientMock.DescribeSpotInstanceRequestsFunc: method is nil but Client.DescribeSpotInstanceRequests was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeSpotInstanceRequestsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSpotInstanceRequests.Lock()
	mock.calls.DescribeSpotInstanceRequests = append(mock.calls.DescribeSpotInstanceRequests, callInfo)
	mock.lockDescribeSpotInstanceRequests.Unlock()
	return mock.DescribeSpotInstanceRequestsFunc(ctx, params, optFns...)
}

// DescribeSpotInstanceRequestsCalls gets all the calls that were made to DescribeSpotInstanceRequests.
// Check the length with:
//     len(mockedClient.DescribeSpotInstanceRequestsCalls())
func (mock *ClientMock) DescribeSpotInstanceRequestsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeSpotInstanceRequestsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeSpotInstanceRequestsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeSpotInstanceRequests.RLock()
	calls = mock.calls.DescribeSpotInstanceRequests
	mock.lockDescribeSpotInstanceRequests.RUnlock()
	return calls
}

// DescribeSpotPriceHistory calls DescribeSpotPriceHistoryFunc.
func (mock *ClientMock) DescribeSpotPriceHistory(ctx context.Context, params *ec2.DescribeSpotPriceHistoryInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	if mock.DescribeSpotPriceHistoryFunc == nil {
		panic("ClientMock.DescribeSpotPriceHistoryFunc: method is nil but Client.DescribeSpotPriceHistory was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeSpotPriceHistoryInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSpotPriceHistory.Lock()
	mock.calls.DescribeSpotPriceHistory = append(mock.calls.DescribeSpotPriceHistory, callInfo)
	mock.lockDescribeSpotPriceHistory.Unlock()
	return mock.DescribeSpotPriceHistoryFunc(ctx, params, optFns...)
}

// DescribeSpotPriceHistoryCalls gets all the calls that were made to DescribeSpotPriceHistory.
// Check the length with:
//     len(mockedClient.DescribeSpotPriceHistoryCalls())
func (mock *ClientMock) DescribeSpotPriceHistoryCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeSpotPriceHistoryInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeSpotPriceHistoryInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeSpotPriceHistory.RLock()
	calls = mock.calls.DescribeSpotPriceHistory
	mock.lockDescribeSpotPriceHistory.RUnlock()
	return calls
}

// DescribeStaleSecurityGroups calls DescribeStaleSecurityGroupsFunc.
func (mock *ClientMock) DescribeStaleSecurityGroups(ctx context.Context, params *ec2.DescribeStaleSecurityGroupsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
	if mock.DescribeStaleSecurityGroupsFunc == nil {
		panic("ClientMock.DescribeStaleSecurityGroupsFunc: method is nil but Client.DescribeStaleSecurityGroups was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeStaleSecurityGroupsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeStaleSecurityGroups.Lock()
	mock.calls.DescribeStaleSecurityGroups = append(mock.calls.DescribeStaleSecurityGroups, callInfo)
	mock.lockDescribeStaleSecurityGroups.Unlock()
	return mock.DescribeStaleSecurityGroupsFunc(ctx, params, optFns...)
}

// DescribeStaleSecurityGroupsCalls gets all the calls that were made to DescribeStaleSecurityGroups.
// Check the length with:
//     len(mockedClient.DescribeStaleSecurityGroupsCalls())
func (mock *ClientMock) DescribeStaleSecurityGroupsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeStaleSecurityGroupsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeStaleSecurityGroupsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeStaleSecurityGroups.RLock()
	calls = mock.calls.DescribeStaleSecurityGroups
	mock.lockDescribeStaleSecurityGroups.RUnlock()
	return calls
}

// DescribeStoreImageTasks calls DescribeStoreImageTasksFunc.
func (mock *ClientMock) DescribeStoreImageTasks(ctx context.Context, params *ec2.DescribeStoreImageTasksInput, optFns ...func(*ec2.Options)) (*ec2.DescribeStoreImageTasksOutput, error) {
	if mock.DescribeStoreImageTasksFunc == nil {
		panic("ClientMock.DescribeStoreImageTasksFunc: method is nil but Client.DescribeStoreImageTasks was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeStoreImageTasksInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeStoreImageTasks.Lock()
	mock.calls.DescribeStoreImageTasks = append(mock.calls.DescribeStoreImageTasks, callInfo)
	mock.lockDescribeStoreImageTasks.Unlock()
	return mock.DescribeStoreImageTasksFunc(ctx, params, optFns...)
}

// DescribeStoreImageTasksCalls gets all the calls that were made to DescribeStoreImageTasks.
// Check the length with:
//     len(mockedClient.DescribeStoreImageTasksCalls())
func (mock *ClientMock) DescribeStoreImageTasksCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeStoreImageTasksInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeStoreImageTasksInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeStoreImageTasks.RLock()
	calls = mock.calls.DescribeStoreImageTasks
	mock.lockDescribeStoreImageTasks.RUnlock()
	return calls
}

// DescribeSubnets calls DescribeSubnetsFunc.
func (mock *ClientMock) DescribeSubnets(ctx context.Context, params *ec2.DescribeSubnetsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeSubnetsOutput, error) {
	if mock.DescribeSubnetsFunc == nil {
		panic("ClientMock.DescribeSubnetsFunc: method is nil but Client.DescribeSubnets was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeSubnetsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeSubnets.Lock()
	mock.calls.DescribeSubnets = append(mock.calls.DescribeSubnets, callInfo)
	mock.lockDescribeSubnets.Unlock()
	return mock.DescribeSubnetsFunc(ctx, params, optFns...)
}

// DescribeSubnetsCalls gets all the calls that were made to DescribeSubnets.
// Check the length with:
//     len(mockedClient.DescribeSubnetsCalls())
func (mock *ClientMock) DescribeSubnetsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeSubnetsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeSubnetsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeSubnets.RLock()
	calls = mock.calls.DescribeSubnets
	mock.lockDescribeSubnets.RUnlock()
	return calls
}

// DescribeTags calls DescribeTagsFunc.
func (mock *ClientMock) DescribeTags(ctx context.Context, params *ec2.DescribeTagsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTagsOutput, error) {
	if mock.DescribeTagsFunc == nil {
		panic("ClientMock.DescribeTagsFunc: method is nil but Client.DescribeTags was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTagsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTags.Lock()
	mock.calls.DescribeTags = append(mock.calls.DescribeTags, callInfo)
	mock.lockDescribeTags.Unlock()
	return mock.DescribeTagsFunc(ctx, params, optFns...)
}

// DescribeTagsCalls gets all the calls that were made to DescribeTags.
// Check the length with:
//     len(mockedClient.DescribeTagsCalls())
func (mock *ClientMock) DescribeTagsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTagsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTagsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTags.RLock()
	calls = mock.calls.DescribeTags
	mock.lockDescribeTags.RUnlock()
	return calls
}

// DescribeTrafficMirrorFilters calls DescribeTrafficMirrorFiltersFunc.
func (mock *ClientMock) DescribeTrafficMirrorFilters(ctx context.Context, params *ec2.DescribeTrafficMirrorFiltersInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {
	if mock.DescribeTrafficMirrorFiltersFunc == nil {
		panic("ClientMock.DescribeTrafficMirrorFiltersFunc: method is nil but Client.DescribeTrafficMirrorFilters was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTrafficMirrorFiltersInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTrafficMirrorFilters.Lock()
	mock.calls.DescribeTrafficMirrorFilters = append(mock.calls.DescribeTrafficMirrorFilters, callInfo)
	mock.lockDescribeTrafficMirrorFilters.Unlock()
	return mock.DescribeTrafficMirrorFiltersFunc(ctx, params, optFns...)
}

// DescribeTrafficMirrorFiltersCalls gets all the calls that were made to DescribeTrafficMirrorFilters.
// Check the length with:
//     len(mockedClient.DescribeTrafficMirrorFiltersCalls())
func (mock *ClientMock) DescribeTrafficMirrorFiltersCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTrafficMirrorFiltersInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTrafficMirrorFiltersInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTrafficMirrorFilters.RLock()
	calls = mock.calls.DescribeTrafficMirrorFilters
	mock.lockDescribeTrafficMirrorFilters.RUnlock()
	return calls
}

// DescribeTrafficMirrorSessions calls DescribeTrafficMirrorSessionsFunc.
func (mock *ClientMock) DescribeTrafficMirrorSessions(ctx context.Context, params *ec2.DescribeTrafficMirrorSessionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {
	if mock.DescribeTrafficMirrorSessionsFunc == nil {
		panic("ClientMock.DescribeTrafficMirrorSessionsFunc: method is nil but Client.DescribeTrafficMirrorSessions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTrafficMirrorSessionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTrafficMirrorSessions.Lock()
	mock.calls.DescribeTrafficMirrorSessions = append(mock.calls.DescribeTrafficMirrorSessions, callInfo)
	mock.lockDescribeTrafficMirrorSessions.Unlock()
	return mock.DescribeTrafficMirrorSessionsFunc(ctx, params, optFns...)
}

// DescribeTrafficMirrorSessionsCalls gets all the calls that were made to DescribeTrafficMirrorSessions.
// Check the length with:
//     len(mockedClient.DescribeTrafficMirrorSessionsCalls())
func (mock *ClientMock) DescribeTrafficMirrorSessionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTrafficMirrorSessionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTrafficMirrorSessionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTrafficMirrorSessions.RLock()
	calls = mock.calls.DescribeTrafficMirrorSessions
	mock.lockDescribeTrafficMirrorSessions.RUnlock()
	return calls
}

// DescribeTrafficMirrorTargets calls DescribeTrafficMirrorTargetsFunc.
func (mock *ClientMock) DescribeTrafficMirrorTargets(ctx context.Context, params *ec2.DescribeTrafficMirrorTargetsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {
	if mock.DescribeTrafficMirrorTargetsFunc == nil {
		panic("ClientMock.DescribeTrafficMirrorTargetsFunc: method is nil but Client.DescribeTrafficMirrorTargets was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTrafficMirrorTargetsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTrafficMirrorTargets.Lock()
	mock.calls.DescribeTrafficMirrorTargets = append(mock.calls.DescribeTrafficMirrorTargets, callInfo)
	mock.lockDescribeTrafficMirrorTargets.Unlock()
	return mock.DescribeTrafficMirrorTargetsFunc(ctx, params, optFns...)
}

// DescribeTrafficMirrorTargetsCalls gets all the calls that were made to DescribeTrafficMirrorTargets.
// Check the length with:
//     len(mockedClient.DescribeTrafficMirrorTargetsCalls())
func (mock *ClientMock) DescribeTrafficMirrorTargetsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTrafficMirrorTargetsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTrafficMirrorTargetsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTrafficMirrorTargets.RLock()
	calls = mock.calls.DescribeTrafficMirrorTargets
	mock.lockDescribeTrafficMirrorTargets.RUnlock()
	return calls
}

// DescribeTransitGatewayAttachments calls DescribeTransitGatewayAttachmentsFunc.
func (mock *ClientMock) DescribeTransitGatewayAttachments(ctx context.Context, params *ec2.DescribeTransitGatewayAttachmentsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
	if mock.DescribeTransitGatewayAttachmentsFunc == nil {
		panic("ClientMock.DescribeTransitGatewayAttachmentsFunc: method is nil but Client.DescribeTransitGatewayAttachments was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayAttachmentsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTransitGatewayAttachments.Lock()
	mock.calls.DescribeTransitGatewayAttachments = append(mock.calls.DescribeTransitGatewayAttachments, callInfo)
	mock.lockDescribeTransitGatewayAttachments.Unlock()
	return mock.DescribeTransitGatewayAttachmentsFunc(ctx, params, optFns...)
}

// DescribeTransitGatewayAttachmentsCalls gets all the calls that were made to DescribeTransitGatewayAttachments.
// Check the length with:
//     len(mockedClient.DescribeTransitGatewayAttachmentsCalls())
func (mock *ClientMock) DescribeTransitGatewayAttachmentsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTransitGatewayAttachmentsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayAttachmentsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTransitGatewayAttachments.RLock()
	calls = mock.calls.DescribeTransitGatewayAttachments
	mock.lockDescribeTransitGatewayAttachments.RUnlock()
	return calls
}

// DescribeTransitGatewayConnectPeers calls DescribeTransitGatewayConnectPeersFunc.
func (mock *ClientMock) DescribeTransitGatewayConnectPeers(ctx context.Context, params *ec2.DescribeTransitGatewayConnectPeersInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayConnectPeersOutput, error) {
	if mock.DescribeTransitGatewayConnectPeersFunc == nil {
		panic("ClientMock.DescribeTransitGatewayConnectPeersFunc: method is nil but Client.DescribeTransitGatewayConnectPeers was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayConnectPeersInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTransitGatewayConnectPeers.Lock()
	mock.calls.DescribeTransitGatewayConnectPeers = append(mock.calls.DescribeTransitGatewayConnectPeers, callInfo)
	mock.lockDescribeTransitGatewayConnectPeers.Unlock()
	return mock.DescribeTransitGatewayConnectPeersFunc(ctx, params, optFns...)
}

// DescribeTransitGatewayConnectPeersCalls gets all the calls that were made to DescribeTransitGatewayConnectPeers.
// Check the length with:
//     len(mockedClient.DescribeTransitGatewayConnectPeersCalls())
func (mock *ClientMock) DescribeTransitGatewayConnectPeersCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTransitGatewayConnectPeersInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayConnectPeersInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTransitGatewayConnectPeers.RLock()
	calls = mock.calls.DescribeTransitGatewayConnectPeers
	mock.lockDescribeTransitGatewayConnectPeers.RUnlock()
	return calls
}

// DescribeTransitGatewayConnects calls DescribeTransitGatewayConnectsFunc.
func (mock *ClientMock) DescribeTransitGatewayConnects(ctx context.Context, params *ec2.DescribeTransitGatewayConnectsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayConnectsOutput, error) {
	if mock.DescribeTransitGatewayConnectsFunc == nil {
		panic("ClientMock.DescribeTransitGatewayConnectsFunc: method is nil but Client.DescribeTransitGatewayConnects was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayConnectsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTransitGatewayConnects.Lock()
	mock.calls.DescribeTransitGatewayConnects = append(mock.calls.DescribeTransitGatewayConnects, callInfo)
	mock.lockDescribeTransitGatewayConnects.Unlock()
	return mock.DescribeTransitGatewayConnectsFunc(ctx, params, optFns...)
}

// DescribeTransitGatewayConnectsCalls gets all the calls that were made to DescribeTransitGatewayConnects.
// Check the length with:
//     len(mockedClient.DescribeTransitGatewayConnectsCalls())
func (mock *ClientMock) DescribeTransitGatewayConnectsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTransitGatewayConnectsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayConnectsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTransitGatewayConnects.RLock()
	calls = mock.calls.DescribeTransitGatewayConnects
	mock.lockDescribeTransitGatewayConnects.RUnlock()
	return calls
}

// DescribeTransitGatewayMulticastDomains calls DescribeTransitGatewayMulticastDomainsFunc.
func (mock *ClientMock) DescribeTransitGatewayMulticastDomains(ctx context.Context, params *ec2.DescribeTransitGatewayMulticastDomainsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {
	if mock.DescribeTransitGatewayMulticastDomainsFunc == nil {
		panic("ClientMock.DescribeTransitGatewayMulticastDomainsFunc: method is nil but Client.DescribeTransitGatewayMulticastDomains was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayMulticastDomainsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTransitGatewayMulticastDomains.Lock()
	mock.calls.DescribeTransitGatewayMulticastDomains = append(mock.calls.DescribeTransitGatewayMulticastDomains, callInfo)
	mock.lockDescribeTransitGatewayMulticastDomains.Unlock()
	return mock.DescribeTransitGatewayMulticastDomainsFunc(ctx, params, optFns...)
}

// DescribeTransitGatewayMulticastDomainsCalls gets all the calls that were made to DescribeTransitGatewayMulticastDomains.
// Check the length with:
//     len(mockedClient.DescribeTransitGatewayMulticastDomainsCalls())
func (mock *ClientMock) DescribeTransitGatewayMulticastDomainsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTransitGatewayMulticastDomainsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayMulticastDomainsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTransitGatewayMulticastDomains.RLock()
	calls = mock.calls.DescribeTransitGatewayMulticastDomains
	mock.lockDescribeTransitGatewayMulticastDomains.RUnlock()
	return calls
}

// DescribeTransitGatewayPeeringAttachments calls DescribeTransitGatewayPeeringAttachmentsFunc.
func (mock *ClientMock) DescribeTransitGatewayPeeringAttachments(ctx context.Context, params *ec2.DescribeTransitGatewayPeeringAttachmentsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {
	if mock.DescribeTransitGatewayPeeringAttachmentsFunc == nil {
		panic("ClientMock.DescribeTransitGatewayPeeringAttachmentsFunc: method is nil but Client.DescribeTransitGatewayPeeringAttachments was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayPeeringAttachmentsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTransitGatewayPeeringAttachments.Lock()
	mock.calls.DescribeTransitGatewayPeeringAttachments = append(mock.calls.DescribeTransitGatewayPeeringAttachments, callInfo)
	mock.lockDescribeTransitGatewayPeeringAttachments.Unlock()
	return mock.DescribeTransitGatewayPeeringAttachmentsFunc(ctx, params, optFns...)
}

// DescribeTransitGatewayPeeringAttachmentsCalls gets all the calls that were made to DescribeTransitGatewayPeeringAttachments.
// Check the length with:
//     len(mockedClient.DescribeTransitGatewayPeeringAttachmentsCalls())
func (mock *ClientMock) DescribeTransitGatewayPeeringAttachmentsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTransitGatewayPeeringAttachmentsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayPeeringAttachmentsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTransitGatewayPeeringAttachments.RLock()
	calls = mock.calls.DescribeTransitGatewayPeeringAttachments
	mock.lockDescribeTransitGatewayPeeringAttachments.RUnlock()
	return calls
}

// DescribeTransitGatewayPolicyTables calls DescribeTransitGatewayPolicyTablesFunc.
func (mock *ClientMock) DescribeTransitGatewayPolicyTables(ctx context.Context, params *ec2.DescribeTransitGatewayPolicyTablesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayPolicyTablesOutput, error) {
	if mock.DescribeTransitGatewayPolicyTablesFunc == nil {
		panic("ClientMock.DescribeTransitGatewayPolicyTablesFunc: method is nil but Client.DescribeTransitGatewayPolicyTables was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayPolicyTablesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTransitGatewayPolicyTables.Lock()
	mock.calls.DescribeTransitGatewayPolicyTables = append(mock.calls.DescribeTransitGatewayPolicyTables, callInfo)
	mock.lockDescribeTransitGatewayPolicyTables.Unlock()
	return mock.DescribeTransitGatewayPolicyTablesFunc(ctx, params, optFns...)
}

// DescribeTransitGatewayPolicyTablesCalls gets all the calls that were made to DescribeTransitGatewayPolicyTables.
// Check the length with:
//     len(mockedClient.DescribeTransitGatewayPolicyTablesCalls())
func (mock *ClientMock) DescribeTransitGatewayPolicyTablesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTransitGatewayPolicyTablesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayPolicyTablesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTransitGatewayPolicyTables.RLock()
	calls = mock.calls.DescribeTransitGatewayPolicyTables
	mock.lockDescribeTransitGatewayPolicyTables.RUnlock()
	return calls
}

// DescribeTransitGatewayRouteTableAnnouncements calls DescribeTransitGatewayRouteTableAnnouncementsFunc.
func (mock *ClientMock) DescribeTransitGatewayRouteTableAnnouncements(ctx context.Context, params *ec2.DescribeTransitGatewayRouteTableAnnouncementsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayRouteTableAnnouncementsOutput, error) {
	if mock.DescribeTransitGatewayRouteTableAnnouncementsFunc == nil {
		panic("ClientMock.DescribeTransitGatewayRouteTableAnnouncementsFunc: method is nil but Client.DescribeTransitGatewayRouteTableAnnouncements was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayRouteTableAnnouncementsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTransitGatewayRouteTableAnnouncements.Lock()
	mock.calls.DescribeTransitGatewayRouteTableAnnouncements = append(mock.calls.DescribeTransitGatewayRouteTableAnnouncements, callInfo)
	mock.lockDescribeTransitGatewayRouteTableAnnouncements.Unlock()
	return mock.DescribeTransitGatewayRouteTableAnnouncementsFunc(ctx, params, optFns...)
}

// DescribeTransitGatewayRouteTableAnnouncementsCalls gets all the calls that were made to DescribeTransitGatewayRouteTableAnnouncements.
// Check the length with:
//     len(mockedClient.DescribeTransitGatewayRouteTableAnnouncementsCalls())
func (mock *ClientMock) DescribeTransitGatewayRouteTableAnnouncementsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTransitGatewayRouteTableAnnouncementsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayRouteTableAnnouncementsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTransitGatewayRouteTableAnnouncements.RLock()
	calls = mock.calls.DescribeTransitGatewayRouteTableAnnouncements
	mock.lockDescribeTransitGatewayRouteTableAnnouncements.RUnlock()
	return calls
}

// DescribeTransitGatewayRouteTables calls DescribeTransitGatewayRouteTablesFunc.
func (mock *ClientMock) DescribeTransitGatewayRouteTables(ctx context.Context, params *ec2.DescribeTransitGatewayRouteTablesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
	if mock.DescribeTransitGatewayRouteTablesFunc == nil {
		panic("ClientMock.DescribeTransitGatewayRouteTablesFunc: method is nil but Client.DescribeTransitGatewayRouteTables was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayRouteTablesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTransitGatewayRouteTables.Lock()
	mock.calls.DescribeTransitGatewayRouteTables = append(mock.calls.DescribeTransitGatewayRouteTables, callInfo)
	mock.lockDescribeTransitGatewayRouteTables.Unlock()
	return mock.DescribeTransitGatewayRouteTablesFunc(ctx, params, optFns...)
}

// DescribeTransitGatewayRouteTablesCalls gets all the calls that were made to DescribeTransitGatewayRouteTables.
// Check the length with:
//     len(mockedClient.DescribeTransitGatewayRouteTablesCalls())
func (mock *ClientMock) DescribeTransitGatewayRouteTablesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTransitGatewayRouteTablesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayRouteTablesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTransitGatewayRouteTables.RLock()
	calls = mock.calls.DescribeTransitGatewayRouteTables
	mock.lockDescribeTransitGatewayRouteTables.RUnlock()
	return calls
}

// DescribeTransitGatewayVpcAttachments calls DescribeTransitGatewayVpcAttachmentsFunc.
func (mock *ClientMock) DescribeTransitGatewayVpcAttachments(ctx context.Context, params *ec2.DescribeTransitGatewayVpcAttachmentsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
	if mock.DescribeTransitGatewayVpcAttachmentsFunc == nil {
		panic("ClientMock.DescribeTransitGatewayVpcAttachmentsFunc: method is nil but Client.DescribeTransitGatewayVpcAttachments was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayVpcAttachmentsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTransitGatewayVpcAttachments.Lock()
	mock.calls.DescribeTransitGatewayVpcAttachments = append(mock.calls.DescribeTransitGatewayVpcAttachments, callInfo)
	mock.lockDescribeTransitGatewayVpcAttachments.Unlock()
	return mock.DescribeTransitGatewayVpcAttachmentsFunc(ctx, params, optFns...)
}

// DescribeTransitGatewayVpcAttachmentsCalls gets all the calls that were made to DescribeTransitGatewayVpcAttachments.
// Check the length with:
//     len(mockedClient.DescribeTransitGatewayVpcAttachmentsCalls())
func (mock *ClientMock) DescribeTransitGatewayVpcAttachmentsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTransitGatewayVpcAttachmentsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewayVpcAttachmentsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTransitGatewayVpcAttachments.RLock()
	calls = mock.calls.DescribeTransitGatewayVpcAttachments
	mock.lockDescribeTransitGatewayVpcAttachments.RUnlock()
	return calls
}

// DescribeTransitGateways calls DescribeTransitGatewaysFunc.
func (mock *ClientMock) DescribeTransitGateways(ctx context.Context, params *ec2.DescribeTransitGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTransitGatewaysOutput, error) {
	if mock.DescribeTransitGatewaysFunc == nil {
		panic("ClientMock.DescribeTransitGatewaysFunc: method is nil but Client.DescribeTransitGateways was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewaysInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTransitGateways.Lock()
	mock.calls.DescribeTransitGateways = append(mock.calls.DescribeTransitGateways, callInfo)
	mock.lockDescribeTransitGateways.Unlock()
	return mock.DescribeTransitGatewaysFunc(ctx, params, optFns...)
}

// DescribeTransitGatewaysCalls gets all the calls that were made to DescribeTransitGateways.
// Check the length with:
//     len(mockedClient.DescribeTransitGatewaysCalls())
func (mock *ClientMock) DescribeTransitGatewaysCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTransitGatewaysInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTransitGatewaysInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTransitGateways.RLock()
	calls = mock.calls.DescribeTransitGateways
	mock.lockDescribeTransitGateways.RUnlock()
	return calls
}

// DescribeTrunkInterfaceAssociations calls DescribeTrunkInterfaceAssociationsFunc.
func (mock *ClientMock) DescribeTrunkInterfaceAssociations(ctx context.Context, params *ec2.DescribeTrunkInterfaceAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeTrunkInterfaceAssociationsOutput, error) {
	if mock.DescribeTrunkInterfaceAssociationsFunc == nil {
		panic("ClientMock.DescribeTrunkInterfaceAssociationsFunc: method is nil but Client.DescribeTrunkInterfaceAssociations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeTrunkInterfaceAssociationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeTrunkInterfaceAssociations.Lock()
	mock.calls.DescribeTrunkInterfaceAssociations = append(mock.calls.DescribeTrunkInterfaceAssociations, callInfo)
	mock.lockDescribeTrunkInterfaceAssociations.Unlock()
	return mock.DescribeTrunkInterfaceAssociationsFunc(ctx, params, optFns...)
}

// DescribeTrunkInterfaceAssociationsCalls gets all the calls that were made to DescribeTrunkInterfaceAssociations.
// Check the length with:
//     len(mockedClient.DescribeTrunkInterfaceAssociationsCalls())
func (mock *ClientMock) DescribeTrunkInterfaceAssociationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeTrunkInterfaceAssociationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeTrunkInterfaceAssociationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeTrunkInterfaceAssociations.RLock()
	calls = mock.calls.DescribeTrunkInterfaceAssociations
	mock.lockDescribeTrunkInterfaceAssociations.RUnlock()
	return calls
}

// DescribeVolumeAttribute calls DescribeVolumeAttributeFunc.
func (mock *ClientMock) DescribeVolumeAttribute(ctx context.Context, params *ec2.DescribeVolumeAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVolumeAttributeOutput, error) {
	if mock.DescribeVolumeAttributeFunc == nil {
		panic("ClientMock.DescribeVolumeAttributeFunc: method is nil but Client.DescribeVolumeAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVolumeAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVolumeAttribute.Lock()
	mock.calls.DescribeVolumeAttribute = append(mock.calls.DescribeVolumeAttribute, callInfo)
	mock.lockDescribeVolumeAttribute.Unlock()
	return mock.DescribeVolumeAttributeFunc(ctx, params, optFns...)
}

// DescribeVolumeAttributeCalls gets all the calls that were made to DescribeVolumeAttribute.
// Check the length with:
//     len(mockedClient.DescribeVolumeAttributeCalls())
func (mock *ClientMock) DescribeVolumeAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVolumeAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVolumeAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVolumeAttribute.RLock()
	calls = mock.calls.DescribeVolumeAttribute
	mock.lockDescribeVolumeAttribute.RUnlock()
	return calls
}

// DescribeVolumeStatus calls DescribeVolumeStatusFunc.
func (mock *ClientMock) DescribeVolumeStatus(ctx context.Context, params *ec2.DescribeVolumeStatusInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVolumeStatusOutput, error) {
	if mock.DescribeVolumeStatusFunc == nil {
		panic("ClientMock.DescribeVolumeStatusFunc: method is nil but Client.DescribeVolumeStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVolumeStatusInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVolumeStatus.Lock()
	mock.calls.DescribeVolumeStatus = append(mock.calls.DescribeVolumeStatus, callInfo)
	mock.lockDescribeVolumeStatus.Unlock()
	return mock.DescribeVolumeStatusFunc(ctx, params, optFns...)
}

// DescribeVolumeStatusCalls gets all the calls that were made to DescribeVolumeStatus.
// Check the length with:
//     len(mockedClient.DescribeVolumeStatusCalls())
func (mock *ClientMock) DescribeVolumeStatusCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVolumeStatusInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVolumeStatusInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVolumeStatus.RLock()
	calls = mock.calls.DescribeVolumeStatus
	mock.lockDescribeVolumeStatus.RUnlock()
	return calls
}

// DescribeVolumes calls DescribeVolumesFunc.
func (mock *ClientMock) DescribeVolumes(ctx context.Context, params *ec2.DescribeVolumesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVolumesOutput, error) {
	if mock.DescribeVolumesFunc == nil {
		panic("ClientMock.DescribeVolumesFunc: method is nil but Client.DescribeVolumes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVolumesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVolumes.Lock()
	mock.calls.DescribeVolumes = append(mock.calls.DescribeVolumes, callInfo)
	mock.lockDescribeVolumes.Unlock()
	return mock.DescribeVolumesFunc(ctx, params, optFns...)
}

// DescribeVolumesCalls gets all the calls that were made to DescribeVolumes.
// Check the length with:
//     len(mockedClient.DescribeVolumesCalls())
func (mock *ClientMock) DescribeVolumesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVolumesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVolumesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVolumes.RLock()
	calls = mock.calls.DescribeVolumes
	mock.lockDescribeVolumes.RUnlock()
	return calls
}

// DescribeVolumesModifications calls DescribeVolumesModificationsFunc.
func (mock *ClientMock) DescribeVolumesModifications(ctx context.Context, params *ec2.DescribeVolumesModificationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVolumesModificationsOutput, error) {
	if mock.DescribeVolumesModificationsFunc == nil {
		panic("ClientMock.DescribeVolumesModificationsFunc: method is nil but Client.DescribeVolumesModifications was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVolumesModificationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVolumesModifications.Lock()
	mock.calls.DescribeVolumesModifications = append(mock.calls.DescribeVolumesModifications, callInfo)
	mock.lockDescribeVolumesModifications.Unlock()
	return mock.DescribeVolumesModificationsFunc(ctx, params, optFns...)
}

// DescribeVolumesModificationsCalls gets all the calls that were made to DescribeVolumesModifications.
// Check the length with:
//     len(mockedClient.DescribeVolumesModificationsCalls())
func (mock *ClientMock) DescribeVolumesModificationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVolumesModificationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVolumesModificationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVolumesModifications.RLock()
	calls = mock.calls.DescribeVolumesModifications
	mock.lockDescribeVolumesModifications.RUnlock()
	return calls
}

// DescribeVpcAttribute calls DescribeVpcAttributeFunc.
func (mock *ClientMock) DescribeVpcAttribute(ctx context.Context, params *ec2.DescribeVpcAttributeInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcAttributeOutput, error) {
	if mock.DescribeVpcAttributeFunc == nil {
		panic("ClientMock.DescribeVpcAttributeFunc: method is nil but Client.DescribeVpcAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVpcAttribute.Lock()
	mock.calls.DescribeVpcAttribute = append(mock.calls.DescribeVpcAttribute, callInfo)
	mock.lockDescribeVpcAttribute.Unlock()
	return mock.DescribeVpcAttributeFunc(ctx, params, optFns...)
}

// DescribeVpcAttributeCalls gets all the calls that were made to DescribeVpcAttribute.
// Check the length with:
//     len(mockedClient.DescribeVpcAttributeCalls())
func (mock *ClientMock) DescribeVpcAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVpcAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVpcAttribute.RLock()
	calls = mock.calls.DescribeVpcAttribute
	mock.lockDescribeVpcAttribute.RUnlock()
	return calls
}

// DescribeVpcClassicLink calls DescribeVpcClassicLinkFunc.
func (mock *ClientMock) DescribeVpcClassicLink(ctx context.Context, params *ec2.DescribeVpcClassicLinkInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcClassicLinkOutput, error) {
	if mock.DescribeVpcClassicLinkFunc == nil {
		panic("ClientMock.DescribeVpcClassicLinkFunc: method is nil but Client.DescribeVpcClassicLink was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcClassicLinkInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVpcClassicLink.Lock()
	mock.calls.DescribeVpcClassicLink = append(mock.calls.DescribeVpcClassicLink, callInfo)
	mock.lockDescribeVpcClassicLink.Unlock()
	return mock.DescribeVpcClassicLinkFunc(ctx, params, optFns...)
}

// DescribeVpcClassicLinkCalls gets all the calls that were made to DescribeVpcClassicLink.
// Check the length with:
//     len(mockedClient.DescribeVpcClassicLinkCalls())
func (mock *ClientMock) DescribeVpcClassicLinkCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVpcClassicLinkInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcClassicLinkInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVpcClassicLink.RLock()
	calls = mock.calls.DescribeVpcClassicLink
	mock.lockDescribeVpcClassicLink.RUnlock()
	return calls
}

// DescribeVpcClassicLinkDnsSupport calls DescribeVpcClassicLinkDnsSupportFunc.
func (mock *ClientMock) DescribeVpcClassicLinkDnsSupport(ctx context.Context, params *ec2.DescribeVpcClassicLinkDnsSupportInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
	if mock.DescribeVpcClassicLinkDnsSupportFunc == nil {
		panic("ClientMock.DescribeVpcClassicLinkDnsSupportFunc: method is nil but Client.DescribeVpcClassicLinkDnsSupport was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcClassicLinkDnsSupportInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVpcClassicLinkDnsSupport.Lock()
	mock.calls.DescribeVpcClassicLinkDnsSupport = append(mock.calls.DescribeVpcClassicLinkDnsSupport, callInfo)
	mock.lockDescribeVpcClassicLinkDnsSupport.Unlock()
	return mock.DescribeVpcClassicLinkDnsSupportFunc(ctx, params, optFns...)
}

// DescribeVpcClassicLinkDnsSupportCalls gets all the calls that were made to DescribeVpcClassicLinkDnsSupport.
// Check the length with:
//     len(mockedClient.DescribeVpcClassicLinkDnsSupportCalls())
func (mock *ClientMock) DescribeVpcClassicLinkDnsSupportCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVpcClassicLinkDnsSupportInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcClassicLinkDnsSupportInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVpcClassicLinkDnsSupport.RLock()
	calls = mock.calls.DescribeVpcClassicLinkDnsSupport
	mock.lockDescribeVpcClassicLinkDnsSupport.RUnlock()
	return calls
}

// DescribeVpcEndpointConnectionNotifications calls DescribeVpcEndpointConnectionNotificationsFunc.
func (mock *ClientMock) DescribeVpcEndpointConnectionNotifications(ctx context.Context, params *ec2.DescribeVpcEndpointConnectionNotificationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
	if mock.DescribeVpcEndpointConnectionNotificationsFunc == nil {
		panic("ClientMock.DescribeVpcEndpointConnectionNotificationsFunc: method is nil but Client.DescribeVpcEndpointConnectionNotifications was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcEndpointConnectionNotificationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVpcEndpointConnectionNotifications.Lock()
	mock.calls.DescribeVpcEndpointConnectionNotifications = append(mock.calls.DescribeVpcEndpointConnectionNotifications, callInfo)
	mock.lockDescribeVpcEndpointConnectionNotifications.Unlock()
	return mock.DescribeVpcEndpointConnectionNotificationsFunc(ctx, params, optFns...)
}

// DescribeVpcEndpointConnectionNotificationsCalls gets all the calls that were made to DescribeVpcEndpointConnectionNotifications.
// Check the length with:
//     len(mockedClient.DescribeVpcEndpointConnectionNotificationsCalls())
func (mock *ClientMock) DescribeVpcEndpointConnectionNotificationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVpcEndpointConnectionNotificationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcEndpointConnectionNotificationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVpcEndpointConnectionNotifications.RLock()
	calls = mock.calls.DescribeVpcEndpointConnectionNotifications
	mock.lockDescribeVpcEndpointConnectionNotifications.RUnlock()
	return calls
}

// DescribeVpcEndpointConnections calls DescribeVpcEndpointConnectionsFunc.
func (mock *ClientMock) DescribeVpcEndpointConnections(ctx context.Context, params *ec2.DescribeVpcEndpointConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
	if mock.DescribeVpcEndpointConnectionsFunc == nil {
		panic("ClientMock.DescribeVpcEndpointConnectionsFunc: method is nil but Client.DescribeVpcEndpointConnections was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcEndpointConnectionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVpcEndpointConnections.Lock()
	mock.calls.DescribeVpcEndpointConnections = append(mock.calls.DescribeVpcEndpointConnections, callInfo)
	mock.lockDescribeVpcEndpointConnections.Unlock()
	return mock.DescribeVpcEndpointConnectionsFunc(ctx, params, optFns...)
}

// DescribeVpcEndpointConnectionsCalls gets all the calls that were made to DescribeVpcEndpointConnections.
// Check the length with:
//     len(mockedClient.DescribeVpcEndpointConnectionsCalls())
func (mock *ClientMock) DescribeVpcEndpointConnectionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVpcEndpointConnectionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcEndpointConnectionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVpcEndpointConnections.RLock()
	calls = mock.calls.DescribeVpcEndpointConnections
	mock.lockDescribeVpcEndpointConnections.RUnlock()
	return calls
}

// DescribeVpcEndpointServiceConfigurations calls DescribeVpcEndpointServiceConfigurationsFunc.
func (mock *ClientMock) DescribeVpcEndpointServiceConfigurations(ctx context.Context, params *ec2.DescribeVpcEndpointServiceConfigurationsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
	if mock.DescribeVpcEndpointServiceConfigurationsFunc == nil {
		panic("ClientMock.DescribeVpcEndpointServiceConfigurationsFunc: method is nil but Client.DescribeVpcEndpointServiceConfigurations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcEndpointServiceConfigurationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVpcEndpointServiceConfigurations.Lock()
	mock.calls.DescribeVpcEndpointServiceConfigurations = append(mock.calls.DescribeVpcEndpointServiceConfigurations, callInfo)
	mock.lockDescribeVpcEndpointServiceConfigurations.Unlock()
	return mock.DescribeVpcEndpointServiceConfigurationsFunc(ctx, params, optFns...)
}

// DescribeVpcEndpointServiceConfigurationsCalls gets all the calls that were made to DescribeVpcEndpointServiceConfigurations.
// Check the length with:
//     len(mockedClient.DescribeVpcEndpointServiceConfigurationsCalls())
func (mock *ClientMock) DescribeVpcEndpointServiceConfigurationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVpcEndpointServiceConfigurationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcEndpointServiceConfigurationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVpcEndpointServiceConfigurations.RLock()
	calls = mock.calls.DescribeVpcEndpointServiceConfigurations
	mock.lockDescribeVpcEndpointServiceConfigurations.RUnlock()
	return calls
}

// DescribeVpcEndpointServicePermissions calls DescribeVpcEndpointServicePermissionsFunc.
func (mock *ClientMock) DescribeVpcEndpointServicePermissions(ctx context.Context, params *ec2.DescribeVpcEndpointServicePermissionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
	if mock.DescribeVpcEndpointServicePermissionsFunc == nil {
		panic("ClientMock.DescribeVpcEndpointServicePermissionsFunc: method is nil but Client.DescribeVpcEndpointServicePermissions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcEndpointServicePermissionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVpcEndpointServicePermissions.Lock()
	mock.calls.DescribeVpcEndpointServicePermissions = append(mock.calls.DescribeVpcEndpointServicePermissions, callInfo)
	mock.lockDescribeVpcEndpointServicePermissions.Unlock()
	return mock.DescribeVpcEndpointServicePermissionsFunc(ctx, params, optFns...)
}

// DescribeVpcEndpointServicePermissionsCalls gets all the calls that were made to DescribeVpcEndpointServicePermissions.
// Check the length with:
//     len(mockedClient.DescribeVpcEndpointServicePermissionsCalls())
func (mock *ClientMock) DescribeVpcEndpointServicePermissionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVpcEndpointServicePermissionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcEndpointServicePermissionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVpcEndpointServicePermissions.RLock()
	calls = mock.calls.DescribeVpcEndpointServicePermissions
	mock.lockDescribeVpcEndpointServicePermissions.RUnlock()
	return calls
}

// DescribeVpcEndpointServices calls DescribeVpcEndpointServicesFunc.
func (mock *ClientMock) DescribeVpcEndpointServices(ctx context.Context, params *ec2.DescribeVpcEndpointServicesInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServicesOutput, error) {
	if mock.DescribeVpcEndpointServicesFunc == nil {
		panic("ClientMock.DescribeVpcEndpointServicesFunc: method is nil but Client.DescribeVpcEndpointServices was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcEndpointServicesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVpcEndpointServices.Lock()
	mock.calls.DescribeVpcEndpointServices = append(mock.calls.DescribeVpcEndpointServices, callInfo)
	mock.lockDescribeVpcEndpointServices.Unlock()
	return mock.DescribeVpcEndpointServicesFunc(ctx, params, optFns...)
}

// DescribeVpcEndpointServicesCalls gets all the calls that were made to DescribeVpcEndpointServices.
// Check the length with:
//     len(mockedClient.DescribeVpcEndpointServicesCalls())
func (mock *ClientMock) DescribeVpcEndpointServicesCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVpcEndpointServicesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcEndpointServicesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVpcEndpointServices.RLock()
	calls = mock.calls.DescribeVpcEndpointServices
	mock.lockDescribeVpcEndpointServices.RUnlock()
	return calls
}

// DescribeVpcEndpoints calls DescribeVpcEndpointsFunc.
func (mock *ClientMock) DescribeVpcEndpoints(ctx context.Context, params *ec2.DescribeVpcEndpointsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointsOutput, error) {
	if mock.DescribeVpcEndpointsFunc == nil {
		panic("ClientMock.DescribeVpcEndpointsFunc: method is nil but Client.DescribeVpcEndpoints was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcEndpointsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVpcEndpoints.Lock()
	mock.calls.DescribeVpcEndpoints = append(mock.calls.DescribeVpcEndpoints, callInfo)
	mock.lockDescribeVpcEndpoints.Unlock()
	return mock.DescribeVpcEndpointsFunc(ctx, params, optFns...)
}

// DescribeVpcEndpointsCalls gets all the calls that were made to DescribeVpcEndpoints.
// Check the length with:
//     len(mockedClient.DescribeVpcEndpointsCalls())
func (mock *ClientMock) DescribeVpcEndpointsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVpcEndpointsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcEndpointsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVpcEndpoints.RLock()
	calls = mock.calls.DescribeVpcEndpoints
	mock.lockDescribeVpcEndpoints.RUnlock()
	return calls
}

// DescribeVpcPeeringConnections calls DescribeVpcPeeringConnectionsFunc.
func (mock *ClientMock) DescribeVpcPeeringConnections(ctx context.Context, params *ec2.DescribeVpcPeeringConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	if mock.DescribeVpcPeeringConnectionsFunc == nil {
		panic("ClientMock.DescribeVpcPeeringConnectionsFunc: method is nil but Client.DescribeVpcPeeringConnections was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcPeeringConnectionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVpcPeeringConnections.Lock()
	mock.calls.DescribeVpcPeeringConnections = append(mock.calls.DescribeVpcPeeringConnections, callInfo)
	mock.lockDescribeVpcPeeringConnections.Unlock()
	return mock.DescribeVpcPeeringConnectionsFunc(ctx, params, optFns...)
}

// DescribeVpcPeeringConnectionsCalls gets all the calls that were made to DescribeVpcPeeringConnections.
// Check the length with:
//     len(mockedClient.DescribeVpcPeeringConnectionsCalls())
func (mock *ClientMock) DescribeVpcPeeringConnectionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVpcPeeringConnectionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcPeeringConnectionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVpcPeeringConnections.RLock()
	calls = mock.calls.DescribeVpcPeeringConnections
	mock.lockDescribeVpcPeeringConnections.RUnlock()
	return calls
}

// DescribeVpcs calls DescribeVpcsFunc.
func (mock *ClientMock) DescribeVpcs(ctx context.Context, params *ec2.DescribeVpcsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpcsOutput, error) {
	if mock.DescribeVpcsFunc == nil {
		panic("ClientMock.DescribeVpcsFunc: method is nil but Client.DescribeVpcs was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVpcs.Lock()
	mock.calls.DescribeVpcs = append(mock.calls.DescribeVpcs, callInfo)
	mock.lockDescribeVpcs.Unlock()
	return mock.DescribeVpcsFunc(ctx, params, optFns...)
}

// DescribeVpcsCalls gets all the calls that were made to DescribeVpcs.
// Check the length with:
//     len(mockedClient.DescribeVpcsCalls())
func (mock *ClientMock) DescribeVpcsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVpcsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVpcsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVpcs.RLock()
	calls = mock.calls.DescribeVpcs
	mock.lockDescribeVpcs.RUnlock()
	return calls
}

// DescribeVpnConnections calls DescribeVpnConnectionsFunc.
func (mock *ClientMock) DescribeVpnConnections(ctx context.Context, params *ec2.DescribeVpnConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpnConnectionsOutput, error) {
	if mock.DescribeVpnConnectionsFunc == nil {
		panic("ClientMock.DescribeVpnConnectionsFunc: method is nil but Client.DescribeVpnConnections was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVpnConnectionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVpnConnections.Lock()
	mock.calls.DescribeVpnConnections = append(mock.calls.DescribeVpnConnections, callInfo)
	mock.lockDescribeVpnConnections.Unlock()
	return mock.DescribeVpnConnectionsFunc(ctx, params, optFns...)
}

// DescribeVpnConnectionsCalls gets all the calls that were made to DescribeVpnConnections.
// Check the length with:
//     len(mockedClient.DescribeVpnConnectionsCalls())
func (mock *ClientMock) DescribeVpnConnectionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVpnConnectionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVpnConnectionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVpnConnections.RLock()
	calls = mock.calls.DescribeVpnConnections
	mock.lockDescribeVpnConnections.RUnlock()
	return calls
}

// DescribeVpnGateways calls DescribeVpnGatewaysFunc.
func (mock *ClientMock) DescribeVpnGateways(ctx context.Context, params *ec2.DescribeVpnGatewaysInput, optFns ...func(*ec2.Options)) (*ec2.DescribeVpnGatewaysOutput, error) {
	if mock.DescribeVpnGatewaysFunc == nil {
		panic("ClientMock.DescribeVpnGatewaysFunc: method is nil but Client.DescribeVpnGateways was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DescribeVpnGatewaysInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeVpnGateways.Lock()
	mock.calls.DescribeVpnGateways = append(mock.calls.DescribeVpnGateways, callInfo)
	mock.lockDescribeVpnGateways.Unlock()
	return mock.DescribeVpnGatewaysFunc(ctx, params, optFns...)
}

// DescribeVpnGatewaysCalls gets all the calls that were made to DescribeVpnGateways.
// Check the length with:
//     len(mockedClient.DescribeVpnGatewaysCalls())
func (mock *ClientMock) DescribeVpnGatewaysCalls() []struct {
	Ctx    context.Context
	Params *ec2.DescribeVpnGatewaysInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DescribeVpnGatewaysInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDescribeVpnGateways.RLock()
	calls = mock.calls.DescribeVpnGateways
	mock.lockDescribeVpnGateways.RUnlock()
	return calls
}

// DetachClassicLinkVpc calls DetachClassicLinkVpcFunc.
func (mock *ClientMock) DetachClassicLinkVpc(ctx context.Context, params *ec2.DetachClassicLinkVpcInput, optFns ...func(*ec2.Options)) (*ec2.DetachClassicLinkVpcOutput, error) {
	if mock.DetachClassicLinkVpcFunc == nil {
		panic("ClientMock.DetachClassicLinkVpcFunc: method is nil but Client.DetachClassicLinkVpc was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DetachClassicLinkVpcInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDetachClassicLinkVpc.Lock()
	mock.calls.DetachClassicLinkVpc = append(mock.calls.DetachClassicLinkVpc, callInfo)
	mock.lockDetachClassicLinkVpc.Unlock()
	return mock.DetachClassicLinkVpcFunc(ctx, params, optFns...)
}

// DetachClassicLinkVpcCalls gets all the calls that were made to DetachClassicLinkVpc.
// Check the length with:
//     len(mockedClient.DetachClassicLinkVpcCalls())
func (mock *ClientMock) DetachClassicLinkVpcCalls() []struct {
	Ctx    context.Context
	Params *ec2.DetachClassicLinkVpcInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DetachClassicLinkVpcInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDetachClassicLinkVpc.RLock()
	calls = mock.calls.DetachClassicLinkVpc
	mock.lockDetachClassicLinkVpc.RUnlock()
	return calls
}

// DetachInternetGateway calls DetachInternetGatewayFunc.
func (mock *ClientMock) DetachInternetGateway(ctx context.Context, params *ec2.DetachInternetGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DetachInternetGatewayOutput, error) {
	if mock.DetachInternetGatewayFunc == nil {
		panic("ClientMock.DetachInternetGatewayFunc: method is nil but Client.DetachInternetGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DetachInternetGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDetachInternetGateway.Lock()
	mock.calls.DetachInternetGateway = append(mock.calls.DetachInternetGateway, callInfo)
	mock.lockDetachInternetGateway.Unlock()
	return mock.DetachInternetGatewayFunc(ctx, params, optFns...)
}

// DetachInternetGatewayCalls gets all the calls that were made to DetachInternetGateway.
// Check the length with:
//     len(mockedClient.DetachInternetGatewayCalls())
func (mock *ClientMock) DetachInternetGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.DetachInternetGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DetachInternetGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDetachInternetGateway.RLock()
	calls = mock.calls.DetachInternetGateway
	mock.lockDetachInternetGateway.RUnlock()
	return calls
}

// DetachNetworkInterface calls DetachNetworkInterfaceFunc.
func (mock *ClientMock) DetachNetworkInterface(ctx context.Context, params *ec2.DetachNetworkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.DetachNetworkInterfaceOutput, error) {
	if mock.DetachNetworkInterfaceFunc == nil {
		panic("ClientMock.DetachNetworkInterfaceFunc: method is nil but Client.DetachNetworkInterface was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DetachNetworkInterfaceInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDetachNetworkInterface.Lock()
	mock.calls.DetachNetworkInterface = append(mock.calls.DetachNetworkInterface, callInfo)
	mock.lockDetachNetworkInterface.Unlock()
	return mock.DetachNetworkInterfaceFunc(ctx, params, optFns...)
}

// DetachNetworkInterfaceCalls gets all the calls that were made to DetachNetworkInterface.
// Check the length with:
//     len(mockedClient.DetachNetworkInterfaceCalls())
func (mock *ClientMock) DetachNetworkInterfaceCalls() []struct {
	Ctx    context.Context
	Params *ec2.DetachNetworkInterfaceInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DetachNetworkInterfaceInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDetachNetworkInterface.RLock()
	calls = mock.calls.DetachNetworkInterface
	mock.lockDetachNetworkInterface.RUnlock()
	return calls
}

// DetachVolume calls DetachVolumeFunc.
func (mock *ClientMock) DetachVolume(ctx context.Context, params *ec2.DetachVolumeInput, optFns ...func(*ec2.Options)) (*ec2.DetachVolumeOutput, error) {
	if mock.DetachVolumeFunc == nil {
		panic("ClientMock.DetachVolumeFunc: method is nil but Client.DetachVolume was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DetachVolumeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDetachVolume.Lock()
	mock.calls.DetachVolume = append(mock.calls.DetachVolume, callInfo)
	mock.lockDetachVolume.Unlock()
	return mock.DetachVolumeFunc(ctx, params, optFns...)
}

// DetachVolumeCalls gets all the calls that were made to DetachVolume.
// Check the length with:
//     len(mockedClient.DetachVolumeCalls())
func (mock *ClientMock) DetachVolumeCalls() []struct {
	Ctx    context.Context
	Params *ec2.DetachVolumeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DetachVolumeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDetachVolume.RLock()
	calls = mock.calls.DetachVolume
	mock.lockDetachVolume.RUnlock()
	return calls
}

// DetachVpnGateway calls DetachVpnGatewayFunc.
func (mock *ClientMock) DetachVpnGateway(ctx context.Context, params *ec2.DetachVpnGatewayInput, optFns ...func(*ec2.Options)) (*ec2.DetachVpnGatewayOutput, error) {
	if mock.DetachVpnGatewayFunc == nil {
		panic("ClientMock.DetachVpnGatewayFunc: method is nil but Client.DetachVpnGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DetachVpnGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDetachVpnGateway.Lock()
	mock.calls.DetachVpnGateway = append(mock.calls.DetachVpnGateway, callInfo)
	mock.lockDetachVpnGateway.Unlock()
	return mock.DetachVpnGatewayFunc(ctx, params, optFns...)
}

// DetachVpnGatewayCalls gets all the calls that were made to DetachVpnGateway.
// Check the length with:
//     len(mockedClient.DetachVpnGatewayCalls())
func (mock *ClientMock) DetachVpnGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.DetachVpnGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DetachVpnGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDetachVpnGateway.RLock()
	calls = mock.calls.DetachVpnGateway
	mock.lockDetachVpnGateway.RUnlock()
	return calls
}

// DisableEbsEncryptionByDefault calls DisableEbsEncryptionByDefaultFunc.
func (mock *ClientMock) DisableEbsEncryptionByDefault(ctx context.Context, params *ec2.DisableEbsEncryptionByDefaultInput, optFns ...func(*ec2.Options)) (*ec2.DisableEbsEncryptionByDefaultOutput, error) {
	if mock.DisableEbsEncryptionByDefaultFunc == nil {
		panic("ClientMock.DisableEbsEncryptionByDefaultFunc: method is nil but Client.DisableEbsEncryptionByDefault was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisableEbsEncryptionByDefaultInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisableEbsEncryptionByDefault.Lock()
	mock.calls.DisableEbsEncryptionByDefault = append(mock.calls.DisableEbsEncryptionByDefault, callInfo)
	mock.lockDisableEbsEncryptionByDefault.Unlock()
	return mock.DisableEbsEncryptionByDefaultFunc(ctx, params, optFns...)
}

// DisableEbsEncryptionByDefaultCalls gets all the calls that were made to DisableEbsEncryptionByDefault.
// Check the length with:
//     len(mockedClient.DisableEbsEncryptionByDefaultCalls())
func (mock *ClientMock) DisableEbsEncryptionByDefaultCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisableEbsEncryptionByDefaultInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisableEbsEncryptionByDefaultInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisableEbsEncryptionByDefault.RLock()
	calls = mock.calls.DisableEbsEncryptionByDefault
	mock.lockDisableEbsEncryptionByDefault.RUnlock()
	return calls
}

// DisableFastLaunch calls DisableFastLaunchFunc.
func (mock *ClientMock) DisableFastLaunch(ctx context.Context, params *ec2.DisableFastLaunchInput, optFns ...func(*ec2.Options)) (*ec2.DisableFastLaunchOutput, error) {
	if mock.DisableFastLaunchFunc == nil {
		panic("ClientMock.DisableFastLaunchFunc: method is nil but Client.DisableFastLaunch was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisableFastLaunchInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisableFastLaunch.Lock()
	mock.calls.DisableFastLaunch = append(mock.calls.DisableFastLaunch, callInfo)
	mock.lockDisableFastLaunch.Unlock()
	return mock.DisableFastLaunchFunc(ctx, params, optFns...)
}

// DisableFastLaunchCalls gets all the calls that were made to DisableFastLaunch.
// Check the length with:
//     len(mockedClient.DisableFastLaunchCalls())
func (mock *ClientMock) DisableFastLaunchCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisableFastLaunchInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisableFastLaunchInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisableFastLaunch.RLock()
	calls = mock.calls.DisableFastLaunch
	mock.lockDisableFastLaunch.RUnlock()
	return calls
}

// DisableFastSnapshotRestores calls DisableFastSnapshotRestoresFunc.
func (mock *ClientMock) DisableFastSnapshotRestores(ctx context.Context, params *ec2.DisableFastSnapshotRestoresInput, optFns ...func(*ec2.Options)) (*ec2.DisableFastSnapshotRestoresOutput, error) {
	if mock.DisableFastSnapshotRestoresFunc == nil {
		panic("ClientMock.DisableFastSnapshotRestoresFunc: method is nil but Client.DisableFastSnapshotRestores was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisableFastSnapshotRestoresInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisableFastSnapshotRestores.Lock()
	mock.calls.DisableFastSnapshotRestores = append(mock.calls.DisableFastSnapshotRestores, callInfo)
	mock.lockDisableFastSnapshotRestores.Unlock()
	return mock.DisableFastSnapshotRestoresFunc(ctx, params, optFns...)
}

// DisableFastSnapshotRestoresCalls gets all the calls that were made to DisableFastSnapshotRestores.
// Check the length with:
//     len(mockedClient.DisableFastSnapshotRestoresCalls())
func (mock *ClientMock) DisableFastSnapshotRestoresCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisableFastSnapshotRestoresInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisableFastSnapshotRestoresInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisableFastSnapshotRestores.RLock()
	calls = mock.calls.DisableFastSnapshotRestores
	mock.lockDisableFastSnapshotRestores.RUnlock()
	return calls
}

// DisableImageDeprecation calls DisableImageDeprecationFunc.
func (mock *ClientMock) DisableImageDeprecation(ctx context.Context, params *ec2.DisableImageDeprecationInput, optFns ...func(*ec2.Options)) (*ec2.DisableImageDeprecationOutput, error) {
	if mock.DisableImageDeprecationFunc == nil {
		panic("ClientMock.DisableImageDeprecationFunc: method is nil but Client.DisableImageDeprecation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisableImageDeprecationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisableImageDeprecation.Lock()
	mock.calls.DisableImageDeprecation = append(mock.calls.DisableImageDeprecation, callInfo)
	mock.lockDisableImageDeprecation.Unlock()
	return mock.DisableImageDeprecationFunc(ctx, params, optFns...)
}

// DisableImageDeprecationCalls gets all the calls that were made to DisableImageDeprecation.
// Check the length with:
//     len(mockedClient.DisableImageDeprecationCalls())
func (mock *ClientMock) DisableImageDeprecationCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisableImageDeprecationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisableImageDeprecationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisableImageDeprecation.RLock()
	calls = mock.calls.DisableImageDeprecation
	mock.lockDisableImageDeprecation.RUnlock()
	return calls
}

// DisableIpamOrganizationAdminAccount calls DisableIpamOrganizationAdminAccountFunc.
func (mock *ClientMock) DisableIpamOrganizationAdminAccount(ctx context.Context, params *ec2.DisableIpamOrganizationAdminAccountInput, optFns ...func(*ec2.Options)) (*ec2.DisableIpamOrganizationAdminAccountOutput, error) {
	if mock.DisableIpamOrganizationAdminAccountFunc == nil {
		panic("ClientMock.DisableIpamOrganizationAdminAccountFunc: method is nil but Client.DisableIpamOrganizationAdminAccount was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisableIpamOrganizationAdminAccountInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisableIpamOrganizationAdminAccount.Lock()
	mock.calls.DisableIpamOrganizationAdminAccount = append(mock.calls.DisableIpamOrganizationAdminAccount, callInfo)
	mock.lockDisableIpamOrganizationAdminAccount.Unlock()
	return mock.DisableIpamOrganizationAdminAccountFunc(ctx, params, optFns...)
}

// DisableIpamOrganizationAdminAccountCalls gets all the calls that were made to DisableIpamOrganizationAdminAccount.
// Check the length with:
//     len(mockedClient.DisableIpamOrganizationAdminAccountCalls())
func (mock *ClientMock) DisableIpamOrganizationAdminAccountCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisableIpamOrganizationAdminAccountInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisableIpamOrganizationAdminAccountInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisableIpamOrganizationAdminAccount.RLock()
	calls = mock.calls.DisableIpamOrganizationAdminAccount
	mock.lockDisableIpamOrganizationAdminAccount.RUnlock()
	return calls
}

// DisableSerialConsoleAccess calls DisableSerialConsoleAccessFunc.
func (mock *ClientMock) DisableSerialConsoleAccess(ctx context.Context, params *ec2.DisableSerialConsoleAccessInput, optFns ...func(*ec2.Options)) (*ec2.DisableSerialConsoleAccessOutput, error) {
	if mock.DisableSerialConsoleAccessFunc == nil {
		panic("ClientMock.DisableSerialConsoleAccessFunc: method is nil but Client.DisableSerialConsoleAccess was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisableSerialConsoleAccessInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisableSerialConsoleAccess.Lock()
	mock.calls.DisableSerialConsoleAccess = append(mock.calls.DisableSerialConsoleAccess, callInfo)
	mock.lockDisableSerialConsoleAccess.Unlock()
	return mock.DisableSerialConsoleAccessFunc(ctx, params, optFns...)
}

// DisableSerialConsoleAccessCalls gets all the calls that were made to DisableSerialConsoleAccess.
// Check the length with:
//     len(mockedClient.DisableSerialConsoleAccessCalls())
func (mock *ClientMock) DisableSerialConsoleAccessCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisableSerialConsoleAccessInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisableSerialConsoleAccessInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisableSerialConsoleAccess.RLock()
	calls = mock.calls.DisableSerialConsoleAccess
	mock.lockDisableSerialConsoleAccess.RUnlock()
	return calls
}

// DisableTransitGatewayRouteTablePropagation calls DisableTransitGatewayRouteTablePropagationFunc.
func (mock *ClientMock) DisableTransitGatewayRouteTablePropagation(ctx context.Context, params *ec2.DisableTransitGatewayRouteTablePropagationInput, optFns ...func(*ec2.Options)) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
	if mock.DisableTransitGatewayRouteTablePropagationFunc == nil {
		panic("ClientMock.DisableTransitGatewayRouteTablePropagationFunc: method is nil but Client.DisableTransitGatewayRouteTablePropagation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisableTransitGatewayRouteTablePropagationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisableTransitGatewayRouteTablePropagation.Lock()
	mock.calls.DisableTransitGatewayRouteTablePropagation = append(mock.calls.DisableTransitGatewayRouteTablePropagation, callInfo)
	mock.lockDisableTransitGatewayRouteTablePropagation.Unlock()
	return mock.DisableTransitGatewayRouteTablePropagationFunc(ctx, params, optFns...)
}

// DisableTransitGatewayRouteTablePropagationCalls gets all the calls that were made to DisableTransitGatewayRouteTablePropagation.
// Check the length with:
//     len(mockedClient.DisableTransitGatewayRouteTablePropagationCalls())
func (mock *ClientMock) DisableTransitGatewayRouteTablePropagationCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisableTransitGatewayRouteTablePropagationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisableTransitGatewayRouteTablePropagationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisableTransitGatewayRouteTablePropagation.RLock()
	calls = mock.calls.DisableTransitGatewayRouteTablePropagation
	mock.lockDisableTransitGatewayRouteTablePropagation.RUnlock()
	return calls
}

// DisableVgwRoutePropagation calls DisableVgwRoutePropagationFunc.
func (mock *ClientMock) DisableVgwRoutePropagation(ctx context.Context, params *ec2.DisableVgwRoutePropagationInput, optFns ...func(*ec2.Options)) (*ec2.DisableVgwRoutePropagationOutput, error) {
	if mock.DisableVgwRoutePropagationFunc == nil {
		panic("ClientMock.DisableVgwRoutePropagationFunc: method is nil but Client.DisableVgwRoutePropagation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisableVgwRoutePropagationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisableVgwRoutePropagation.Lock()
	mock.calls.DisableVgwRoutePropagation = append(mock.calls.DisableVgwRoutePropagation, callInfo)
	mock.lockDisableVgwRoutePropagation.Unlock()
	return mock.DisableVgwRoutePropagationFunc(ctx, params, optFns...)
}

// DisableVgwRoutePropagationCalls gets all the calls that were made to DisableVgwRoutePropagation.
// Check the length with:
//     len(mockedClient.DisableVgwRoutePropagationCalls())
func (mock *ClientMock) DisableVgwRoutePropagationCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisableVgwRoutePropagationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisableVgwRoutePropagationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisableVgwRoutePropagation.RLock()
	calls = mock.calls.DisableVgwRoutePropagation
	mock.lockDisableVgwRoutePropagation.RUnlock()
	return calls
}

// DisableVpcClassicLink calls DisableVpcClassicLinkFunc.
func (mock *ClientMock) DisableVpcClassicLink(ctx context.Context, params *ec2.DisableVpcClassicLinkInput, optFns ...func(*ec2.Options)) (*ec2.DisableVpcClassicLinkOutput, error) {
	if mock.DisableVpcClassicLinkFunc == nil {
		panic("ClientMock.DisableVpcClassicLinkFunc: method is nil but Client.DisableVpcClassicLink was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisableVpcClassicLinkInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisableVpcClassicLink.Lock()
	mock.calls.DisableVpcClassicLink = append(mock.calls.DisableVpcClassicLink, callInfo)
	mock.lockDisableVpcClassicLink.Unlock()
	return mock.DisableVpcClassicLinkFunc(ctx, params, optFns...)
}

// DisableVpcClassicLinkCalls gets all the calls that were made to DisableVpcClassicLink.
// Check the length with:
//     len(mockedClient.DisableVpcClassicLinkCalls())
func (mock *ClientMock) DisableVpcClassicLinkCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisableVpcClassicLinkInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisableVpcClassicLinkInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisableVpcClassicLink.RLock()
	calls = mock.calls.DisableVpcClassicLink
	mock.lockDisableVpcClassicLink.RUnlock()
	return calls
}

// DisableVpcClassicLinkDnsSupport calls DisableVpcClassicLinkDnsSupportFunc.
func (mock *ClientMock) DisableVpcClassicLinkDnsSupport(ctx context.Context, params *ec2.DisableVpcClassicLinkDnsSupportInput, optFns ...func(*ec2.Options)) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
	if mock.DisableVpcClassicLinkDnsSupportFunc == nil {
		panic("ClientMock.DisableVpcClassicLinkDnsSupportFunc: method is nil but Client.DisableVpcClassicLinkDnsSupport was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisableVpcClassicLinkDnsSupportInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisableVpcClassicLinkDnsSupport.Lock()
	mock.calls.DisableVpcClassicLinkDnsSupport = append(mock.calls.DisableVpcClassicLinkDnsSupport, callInfo)
	mock.lockDisableVpcClassicLinkDnsSupport.Unlock()
	return mock.DisableVpcClassicLinkDnsSupportFunc(ctx, params, optFns...)
}

// DisableVpcClassicLinkDnsSupportCalls gets all the calls that were made to DisableVpcClassicLinkDnsSupport.
// Check the length with:
//     len(mockedClient.DisableVpcClassicLinkDnsSupportCalls())
func (mock *ClientMock) DisableVpcClassicLinkDnsSupportCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisableVpcClassicLinkDnsSupportInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisableVpcClassicLinkDnsSupportInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisableVpcClassicLinkDnsSupport.RLock()
	calls = mock.calls.DisableVpcClassicLinkDnsSupport
	mock.lockDisableVpcClassicLinkDnsSupport.RUnlock()
	return calls
}

// DisassociateAddress calls DisassociateAddressFunc.
func (mock *ClientMock) DisassociateAddress(ctx context.Context, params *ec2.DisassociateAddressInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateAddressOutput, error) {
	if mock.DisassociateAddressFunc == nil {
		panic("ClientMock.DisassociateAddressFunc: method is nil but Client.DisassociateAddress was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisassociateAddressInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisassociateAddress.Lock()
	mock.calls.DisassociateAddress = append(mock.calls.DisassociateAddress, callInfo)
	mock.lockDisassociateAddress.Unlock()
	return mock.DisassociateAddressFunc(ctx, params, optFns...)
}

// DisassociateAddressCalls gets all the calls that were made to DisassociateAddress.
// Check the length with:
//     len(mockedClient.DisassociateAddressCalls())
func (mock *ClientMock) DisassociateAddressCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisassociateAddressInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisassociateAddressInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisassociateAddress.RLock()
	calls = mock.calls.DisassociateAddress
	mock.lockDisassociateAddress.RUnlock()
	return calls
}

// DisassociateClientVpnTargetNetwork calls DisassociateClientVpnTargetNetworkFunc.
func (mock *ClientMock) DisassociateClientVpnTargetNetwork(ctx context.Context, params *ec2.DisassociateClientVpnTargetNetworkInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
	if mock.DisassociateClientVpnTargetNetworkFunc == nil {
		panic("ClientMock.DisassociateClientVpnTargetNetworkFunc: method is nil but Client.DisassociateClientVpnTargetNetwork was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisassociateClientVpnTargetNetworkInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisassociateClientVpnTargetNetwork.Lock()
	mock.calls.DisassociateClientVpnTargetNetwork = append(mock.calls.DisassociateClientVpnTargetNetwork, callInfo)
	mock.lockDisassociateClientVpnTargetNetwork.Unlock()
	return mock.DisassociateClientVpnTargetNetworkFunc(ctx, params, optFns...)
}

// DisassociateClientVpnTargetNetworkCalls gets all the calls that were made to DisassociateClientVpnTargetNetwork.
// Check the length with:
//     len(mockedClient.DisassociateClientVpnTargetNetworkCalls())
func (mock *ClientMock) DisassociateClientVpnTargetNetworkCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisassociateClientVpnTargetNetworkInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisassociateClientVpnTargetNetworkInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisassociateClientVpnTargetNetwork.RLock()
	calls = mock.calls.DisassociateClientVpnTargetNetwork
	mock.lockDisassociateClientVpnTargetNetwork.RUnlock()
	return calls
}

// DisassociateEnclaveCertificateIamRole calls DisassociateEnclaveCertificateIamRoleFunc.
func (mock *ClientMock) DisassociateEnclaveCertificateIamRole(ctx context.Context, params *ec2.DisassociateEnclaveCertificateIamRoleInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateEnclaveCertificateIamRoleOutput, error) {
	if mock.DisassociateEnclaveCertificateIamRoleFunc == nil {
		panic("ClientMock.DisassociateEnclaveCertificateIamRoleFunc: method is nil but Client.DisassociateEnclaveCertificateIamRole was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisassociateEnclaveCertificateIamRoleInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisassociateEnclaveCertificateIamRole.Lock()
	mock.calls.DisassociateEnclaveCertificateIamRole = append(mock.calls.DisassociateEnclaveCertificateIamRole, callInfo)
	mock.lockDisassociateEnclaveCertificateIamRole.Unlock()
	return mock.DisassociateEnclaveCertificateIamRoleFunc(ctx, params, optFns...)
}

// DisassociateEnclaveCertificateIamRoleCalls gets all the calls that were made to DisassociateEnclaveCertificateIamRole.
// Check the length with:
//     len(mockedClient.DisassociateEnclaveCertificateIamRoleCalls())
func (mock *ClientMock) DisassociateEnclaveCertificateIamRoleCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisassociateEnclaveCertificateIamRoleInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisassociateEnclaveCertificateIamRoleInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisassociateEnclaveCertificateIamRole.RLock()
	calls = mock.calls.DisassociateEnclaveCertificateIamRole
	mock.lockDisassociateEnclaveCertificateIamRole.RUnlock()
	return calls
}

// DisassociateIamInstanceProfile calls DisassociateIamInstanceProfileFunc.
func (mock *ClientMock) DisassociateIamInstanceProfile(ctx context.Context, params *ec2.DisassociateIamInstanceProfileInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateIamInstanceProfileOutput, error) {
	if mock.DisassociateIamInstanceProfileFunc == nil {
		panic("ClientMock.DisassociateIamInstanceProfileFunc: method is nil but Client.DisassociateIamInstanceProfile was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisassociateIamInstanceProfileInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisassociateIamInstanceProfile.Lock()
	mock.calls.DisassociateIamInstanceProfile = append(mock.calls.DisassociateIamInstanceProfile, callInfo)
	mock.lockDisassociateIamInstanceProfile.Unlock()
	return mock.DisassociateIamInstanceProfileFunc(ctx, params, optFns...)
}

// DisassociateIamInstanceProfileCalls gets all the calls that were made to DisassociateIamInstanceProfile.
// Check the length with:
//     len(mockedClient.DisassociateIamInstanceProfileCalls())
func (mock *ClientMock) DisassociateIamInstanceProfileCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisassociateIamInstanceProfileInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisassociateIamInstanceProfileInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisassociateIamInstanceProfile.RLock()
	calls = mock.calls.DisassociateIamInstanceProfile
	mock.lockDisassociateIamInstanceProfile.RUnlock()
	return calls
}

// DisassociateInstanceEventWindow calls DisassociateInstanceEventWindowFunc.
func (mock *ClientMock) DisassociateInstanceEventWindow(ctx context.Context, params *ec2.DisassociateInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateInstanceEventWindowOutput, error) {
	if mock.DisassociateInstanceEventWindowFunc == nil {
		panic("ClientMock.DisassociateInstanceEventWindowFunc: method is nil but Client.DisassociateInstanceEventWindow was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisassociateInstanceEventWindowInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisassociateInstanceEventWindow.Lock()
	mock.calls.DisassociateInstanceEventWindow = append(mock.calls.DisassociateInstanceEventWindow, callInfo)
	mock.lockDisassociateInstanceEventWindow.Unlock()
	return mock.DisassociateInstanceEventWindowFunc(ctx, params, optFns...)
}

// DisassociateInstanceEventWindowCalls gets all the calls that were made to DisassociateInstanceEventWindow.
// Check the length with:
//     len(mockedClient.DisassociateInstanceEventWindowCalls())
func (mock *ClientMock) DisassociateInstanceEventWindowCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisassociateInstanceEventWindowInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisassociateInstanceEventWindowInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisassociateInstanceEventWindow.RLock()
	calls = mock.calls.DisassociateInstanceEventWindow
	mock.lockDisassociateInstanceEventWindow.RUnlock()
	return calls
}

// DisassociateRouteTable calls DisassociateRouteTableFunc.
func (mock *ClientMock) DisassociateRouteTable(ctx context.Context, params *ec2.DisassociateRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateRouteTableOutput, error) {
	if mock.DisassociateRouteTableFunc == nil {
		panic("ClientMock.DisassociateRouteTableFunc: method is nil but Client.DisassociateRouteTable was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisassociateRouteTableInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisassociateRouteTable.Lock()
	mock.calls.DisassociateRouteTable = append(mock.calls.DisassociateRouteTable, callInfo)
	mock.lockDisassociateRouteTable.Unlock()
	return mock.DisassociateRouteTableFunc(ctx, params, optFns...)
}

// DisassociateRouteTableCalls gets all the calls that were made to DisassociateRouteTable.
// Check the length with:
//     len(mockedClient.DisassociateRouteTableCalls())
func (mock *ClientMock) DisassociateRouteTableCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisassociateRouteTableInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisassociateRouteTableInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisassociateRouteTable.RLock()
	calls = mock.calls.DisassociateRouteTable
	mock.lockDisassociateRouteTable.RUnlock()
	return calls
}

// DisassociateSubnetCidrBlock calls DisassociateSubnetCidrBlockFunc.
func (mock *ClientMock) DisassociateSubnetCidrBlock(ctx context.Context, params *ec2.DisassociateSubnetCidrBlockInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
	if mock.DisassociateSubnetCidrBlockFunc == nil {
		panic("ClientMock.DisassociateSubnetCidrBlockFunc: method is nil but Client.DisassociateSubnetCidrBlock was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisassociateSubnetCidrBlockInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisassociateSubnetCidrBlock.Lock()
	mock.calls.DisassociateSubnetCidrBlock = append(mock.calls.DisassociateSubnetCidrBlock, callInfo)
	mock.lockDisassociateSubnetCidrBlock.Unlock()
	return mock.DisassociateSubnetCidrBlockFunc(ctx, params, optFns...)
}

// DisassociateSubnetCidrBlockCalls gets all the calls that were made to DisassociateSubnetCidrBlock.
// Check the length with:
//     len(mockedClient.DisassociateSubnetCidrBlockCalls())
func (mock *ClientMock) DisassociateSubnetCidrBlockCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisassociateSubnetCidrBlockInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisassociateSubnetCidrBlockInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisassociateSubnetCidrBlock.RLock()
	calls = mock.calls.DisassociateSubnetCidrBlock
	mock.lockDisassociateSubnetCidrBlock.RUnlock()
	return calls
}

// DisassociateTransitGatewayMulticastDomain calls DisassociateTransitGatewayMulticastDomainFunc.
func (mock *ClientMock) DisassociateTransitGatewayMulticastDomain(ctx context.Context, params *ec2.DisassociateTransitGatewayMulticastDomainInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error) {
	if mock.DisassociateTransitGatewayMulticastDomainFunc == nil {
		panic("ClientMock.DisassociateTransitGatewayMulticastDomainFunc: method is nil but Client.DisassociateTransitGatewayMulticastDomain was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisassociateTransitGatewayMulticastDomainInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisassociateTransitGatewayMulticastDomain.Lock()
	mock.calls.DisassociateTransitGatewayMulticastDomain = append(mock.calls.DisassociateTransitGatewayMulticastDomain, callInfo)
	mock.lockDisassociateTransitGatewayMulticastDomain.Unlock()
	return mock.DisassociateTransitGatewayMulticastDomainFunc(ctx, params, optFns...)
}

// DisassociateTransitGatewayMulticastDomainCalls gets all the calls that were made to DisassociateTransitGatewayMulticastDomain.
// Check the length with:
//     len(mockedClient.DisassociateTransitGatewayMulticastDomainCalls())
func (mock *ClientMock) DisassociateTransitGatewayMulticastDomainCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisassociateTransitGatewayMulticastDomainInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisassociateTransitGatewayMulticastDomainInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisassociateTransitGatewayMulticastDomain.RLock()
	calls = mock.calls.DisassociateTransitGatewayMulticastDomain
	mock.lockDisassociateTransitGatewayMulticastDomain.RUnlock()
	return calls
}

// DisassociateTransitGatewayPolicyTable calls DisassociateTransitGatewayPolicyTableFunc.
func (mock *ClientMock) DisassociateTransitGatewayPolicyTable(ctx context.Context, params *ec2.DisassociateTransitGatewayPolicyTableInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateTransitGatewayPolicyTableOutput, error) {
	if mock.DisassociateTransitGatewayPolicyTableFunc == nil {
		panic("ClientMock.DisassociateTransitGatewayPolicyTableFunc: method is nil but Client.DisassociateTransitGatewayPolicyTable was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisassociateTransitGatewayPolicyTableInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisassociateTransitGatewayPolicyTable.Lock()
	mock.calls.DisassociateTransitGatewayPolicyTable = append(mock.calls.DisassociateTransitGatewayPolicyTable, callInfo)
	mock.lockDisassociateTransitGatewayPolicyTable.Unlock()
	return mock.DisassociateTransitGatewayPolicyTableFunc(ctx, params, optFns...)
}

// DisassociateTransitGatewayPolicyTableCalls gets all the calls that were made to DisassociateTransitGatewayPolicyTable.
// Check the length with:
//     len(mockedClient.DisassociateTransitGatewayPolicyTableCalls())
func (mock *ClientMock) DisassociateTransitGatewayPolicyTableCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisassociateTransitGatewayPolicyTableInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisassociateTransitGatewayPolicyTableInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisassociateTransitGatewayPolicyTable.RLock()
	calls = mock.calls.DisassociateTransitGatewayPolicyTable
	mock.lockDisassociateTransitGatewayPolicyTable.RUnlock()
	return calls
}

// DisassociateTransitGatewayRouteTable calls DisassociateTransitGatewayRouteTableFunc.
func (mock *ClientMock) DisassociateTransitGatewayRouteTable(ctx context.Context, params *ec2.DisassociateTransitGatewayRouteTableInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
	if mock.DisassociateTransitGatewayRouteTableFunc == nil {
		panic("ClientMock.DisassociateTransitGatewayRouteTableFunc: method is nil but Client.DisassociateTransitGatewayRouteTable was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisassociateTransitGatewayRouteTableInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisassociateTransitGatewayRouteTable.Lock()
	mock.calls.DisassociateTransitGatewayRouteTable = append(mock.calls.DisassociateTransitGatewayRouteTable, callInfo)
	mock.lockDisassociateTransitGatewayRouteTable.Unlock()
	return mock.DisassociateTransitGatewayRouteTableFunc(ctx, params, optFns...)
}

// DisassociateTransitGatewayRouteTableCalls gets all the calls that were made to DisassociateTransitGatewayRouteTable.
// Check the length with:
//     len(mockedClient.DisassociateTransitGatewayRouteTableCalls())
func (mock *ClientMock) DisassociateTransitGatewayRouteTableCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisassociateTransitGatewayRouteTableInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisassociateTransitGatewayRouteTableInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisassociateTransitGatewayRouteTable.RLock()
	calls = mock.calls.DisassociateTransitGatewayRouteTable
	mock.lockDisassociateTransitGatewayRouteTable.RUnlock()
	return calls
}

// DisassociateTrunkInterface calls DisassociateTrunkInterfaceFunc.
func (mock *ClientMock) DisassociateTrunkInterface(ctx context.Context, params *ec2.DisassociateTrunkInterfaceInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateTrunkInterfaceOutput, error) {
	if mock.DisassociateTrunkInterfaceFunc == nil {
		panic("ClientMock.DisassociateTrunkInterfaceFunc: method is nil but Client.DisassociateTrunkInterface was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisassociateTrunkInterfaceInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisassociateTrunkInterface.Lock()
	mock.calls.DisassociateTrunkInterface = append(mock.calls.DisassociateTrunkInterface, callInfo)
	mock.lockDisassociateTrunkInterface.Unlock()
	return mock.DisassociateTrunkInterfaceFunc(ctx, params, optFns...)
}

// DisassociateTrunkInterfaceCalls gets all the calls that were made to DisassociateTrunkInterface.
// Check the length with:
//     len(mockedClient.DisassociateTrunkInterfaceCalls())
func (mock *ClientMock) DisassociateTrunkInterfaceCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisassociateTrunkInterfaceInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisassociateTrunkInterfaceInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisassociateTrunkInterface.RLock()
	calls = mock.calls.DisassociateTrunkInterface
	mock.lockDisassociateTrunkInterface.RUnlock()
	return calls
}

// DisassociateVpcCidrBlock calls DisassociateVpcCidrBlockFunc.
func (mock *ClientMock) DisassociateVpcCidrBlock(ctx context.Context, params *ec2.DisassociateVpcCidrBlockInput, optFns ...func(*ec2.Options)) (*ec2.DisassociateVpcCidrBlockOutput, error) {
	if mock.DisassociateVpcCidrBlockFunc == nil {
		panic("ClientMock.DisassociateVpcCidrBlockFunc: method is nil but Client.DisassociateVpcCidrBlock was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.DisassociateVpcCidrBlockInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDisassociateVpcCidrBlock.Lock()
	mock.calls.DisassociateVpcCidrBlock = append(mock.calls.DisassociateVpcCidrBlock, callInfo)
	mock.lockDisassociateVpcCidrBlock.Unlock()
	return mock.DisassociateVpcCidrBlockFunc(ctx, params, optFns...)
}

// DisassociateVpcCidrBlockCalls gets all the calls that were made to DisassociateVpcCidrBlock.
// Check the length with:
//     len(mockedClient.DisassociateVpcCidrBlockCalls())
func (mock *ClientMock) DisassociateVpcCidrBlockCalls() []struct {
	Ctx    context.Context
	Params *ec2.DisassociateVpcCidrBlockInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.DisassociateVpcCidrBlockInput
		OptFns []func(*ec2.Options)
	}
	mock.lockDisassociateVpcCidrBlock.RLock()
	calls = mock.calls.DisassociateVpcCidrBlock
	mock.lockDisassociateVpcCidrBlock.RUnlock()
	return calls
}

// EnableEbsEncryptionByDefault calls EnableEbsEncryptionByDefaultFunc.
func (mock *ClientMock) EnableEbsEncryptionByDefault(ctx context.Context, params *ec2.EnableEbsEncryptionByDefaultInput, optFns ...func(*ec2.Options)) (*ec2.EnableEbsEncryptionByDefaultOutput, error) {
	if mock.EnableEbsEncryptionByDefaultFunc == nil {
		panic("ClientMock.EnableEbsEncryptionByDefaultFunc: method is nil but Client.EnableEbsEncryptionByDefault was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.EnableEbsEncryptionByDefaultInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockEnableEbsEncryptionByDefault.Lock()
	mock.calls.EnableEbsEncryptionByDefault = append(mock.calls.EnableEbsEncryptionByDefault, callInfo)
	mock.lockEnableEbsEncryptionByDefault.Unlock()
	return mock.EnableEbsEncryptionByDefaultFunc(ctx, params, optFns...)
}

// EnableEbsEncryptionByDefaultCalls gets all the calls that were made to EnableEbsEncryptionByDefault.
// Check the length with:
//     len(mockedClient.EnableEbsEncryptionByDefaultCalls())
func (mock *ClientMock) EnableEbsEncryptionByDefaultCalls() []struct {
	Ctx    context.Context
	Params *ec2.EnableEbsEncryptionByDefaultInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.EnableEbsEncryptionByDefaultInput
		OptFns []func(*ec2.Options)
	}
	mock.lockEnableEbsEncryptionByDefault.RLock()
	calls = mock.calls.EnableEbsEncryptionByDefault
	mock.lockEnableEbsEncryptionByDefault.RUnlock()
	return calls
}

// EnableFastLaunch calls EnableFastLaunchFunc.
func (mock *ClientMock) EnableFastLaunch(ctx context.Context, params *ec2.EnableFastLaunchInput, optFns ...func(*ec2.Options)) (*ec2.EnableFastLaunchOutput, error) {
	if mock.EnableFastLaunchFunc == nil {
		panic("ClientMock.EnableFastLaunchFunc: method is nil but Client.EnableFastLaunch was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.EnableFastLaunchInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockEnableFastLaunch.Lock()
	mock.calls.EnableFastLaunch = append(mock.calls.EnableFastLaunch, callInfo)
	mock.lockEnableFastLaunch.Unlock()
	return mock.EnableFastLaunchFunc(ctx, params, optFns...)
}

// EnableFastLaunchCalls gets all the calls that were made to EnableFastLaunch.
// Check the length with:
//     len(mockedClient.EnableFastLaunchCalls())
func (mock *ClientMock) EnableFastLaunchCalls() []struct {
	Ctx    context.Context
	Params *ec2.EnableFastLaunchInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.EnableFastLaunchInput
		OptFns []func(*ec2.Options)
	}
	mock.lockEnableFastLaunch.RLock()
	calls = mock.calls.EnableFastLaunch
	mock.lockEnableFastLaunch.RUnlock()
	return calls
}

// EnableFastSnapshotRestores calls EnableFastSnapshotRestoresFunc.
func (mock *ClientMock) EnableFastSnapshotRestores(ctx context.Context, params *ec2.EnableFastSnapshotRestoresInput, optFns ...func(*ec2.Options)) (*ec2.EnableFastSnapshotRestoresOutput, error) {
	if mock.EnableFastSnapshotRestoresFunc == nil {
		panic("ClientMock.EnableFastSnapshotRestoresFunc: method is nil but Client.EnableFastSnapshotRestores was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.EnableFastSnapshotRestoresInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockEnableFastSnapshotRestores.Lock()
	mock.calls.EnableFastSnapshotRestores = append(mock.calls.EnableFastSnapshotRestores, callInfo)
	mock.lockEnableFastSnapshotRestores.Unlock()
	return mock.EnableFastSnapshotRestoresFunc(ctx, params, optFns...)
}

// EnableFastSnapshotRestoresCalls gets all the calls that were made to EnableFastSnapshotRestores.
// Check the length with:
//     len(mockedClient.EnableFastSnapshotRestoresCalls())
func (mock *ClientMock) EnableFastSnapshotRestoresCalls() []struct {
	Ctx    context.Context
	Params *ec2.EnableFastSnapshotRestoresInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.EnableFastSnapshotRestoresInput
		OptFns []func(*ec2.Options)
	}
	mock.lockEnableFastSnapshotRestores.RLock()
	calls = mock.calls.EnableFastSnapshotRestores
	mock.lockEnableFastSnapshotRestores.RUnlock()
	return calls
}

// EnableImageDeprecation calls EnableImageDeprecationFunc.
func (mock *ClientMock) EnableImageDeprecation(ctx context.Context, params *ec2.EnableImageDeprecationInput, optFns ...func(*ec2.Options)) (*ec2.EnableImageDeprecationOutput, error) {
	if mock.EnableImageDeprecationFunc == nil {
		panic("ClientMock.EnableImageDeprecationFunc: method is nil but Client.EnableImageDeprecation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.EnableImageDeprecationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockEnableImageDeprecation.Lock()
	mock.calls.EnableImageDeprecation = append(mock.calls.EnableImageDeprecation, callInfo)
	mock.lockEnableImageDeprecation.Unlock()
	return mock.EnableImageDeprecationFunc(ctx, params, optFns...)
}

// EnableImageDeprecationCalls gets all the calls that were made to EnableImageDeprecation.
// Check the length with:
//     len(mockedClient.EnableImageDeprecationCalls())
func (mock *ClientMock) EnableImageDeprecationCalls() []struct {
	Ctx    context.Context
	Params *ec2.EnableImageDeprecationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.EnableImageDeprecationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockEnableImageDeprecation.RLock()
	calls = mock.calls.EnableImageDeprecation
	mock.lockEnableImageDeprecation.RUnlock()
	return calls
}

// EnableIpamOrganizationAdminAccount calls EnableIpamOrganizationAdminAccountFunc.
func (mock *ClientMock) EnableIpamOrganizationAdminAccount(ctx context.Context, params *ec2.EnableIpamOrganizationAdminAccountInput, optFns ...func(*ec2.Options)) (*ec2.EnableIpamOrganizationAdminAccountOutput, error) {
	if mock.EnableIpamOrganizationAdminAccountFunc == nil {
		panic("ClientMock.EnableIpamOrganizationAdminAccountFunc: method is nil but Client.EnableIpamOrganizationAdminAccount was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.EnableIpamOrganizationAdminAccountInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockEnableIpamOrganizationAdminAccount.Lock()
	mock.calls.EnableIpamOrganizationAdminAccount = append(mock.calls.EnableIpamOrganizationAdminAccount, callInfo)
	mock.lockEnableIpamOrganizationAdminAccount.Unlock()
	return mock.EnableIpamOrganizationAdminAccountFunc(ctx, params, optFns...)
}

// EnableIpamOrganizationAdminAccountCalls gets all the calls that were made to EnableIpamOrganizationAdminAccount.
// Check the length with:
//     len(mockedClient.EnableIpamOrganizationAdminAccountCalls())
func (mock *ClientMock) EnableIpamOrganizationAdminAccountCalls() []struct {
	Ctx    context.Context
	Params *ec2.EnableIpamOrganizationAdminAccountInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.EnableIpamOrganizationAdminAccountInput
		OptFns []func(*ec2.Options)
	}
	mock.lockEnableIpamOrganizationAdminAccount.RLock()
	calls = mock.calls.EnableIpamOrganizationAdminAccount
	mock.lockEnableIpamOrganizationAdminAccount.RUnlock()
	return calls
}

// EnableSerialConsoleAccess calls EnableSerialConsoleAccessFunc.
func (mock *ClientMock) EnableSerialConsoleAccess(ctx context.Context, params *ec2.EnableSerialConsoleAccessInput, optFns ...func(*ec2.Options)) (*ec2.EnableSerialConsoleAccessOutput, error) {
	if mock.EnableSerialConsoleAccessFunc == nil {
		panic("ClientMock.EnableSerialConsoleAccessFunc: method is nil but Client.EnableSerialConsoleAccess was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.EnableSerialConsoleAccessInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockEnableSerialConsoleAccess.Lock()
	mock.calls.EnableSerialConsoleAccess = append(mock.calls.EnableSerialConsoleAccess, callInfo)
	mock.lockEnableSerialConsoleAccess.Unlock()
	return mock.EnableSerialConsoleAccessFunc(ctx, params, optFns...)
}

// EnableSerialConsoleAccessCalls gets all the calls that were made to EnableSerialConsoleAccess.
// Check the length with:
//     len(mockedClient.EnableSerialConsoleAccessCalls())
func (mock *ClientMock) EnableSerialConsoleAccessCalls() []struct {
	Ctx    context.Context
	Params *ec2.EnableSerialConsoleAccessInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.EnableSerialConsoleAccessInput
		OptFns []func(*ec2.Options)
	}
	mock.lockEnableSerialConsoleAccess.RLock()
	calls = mock.calls.EnableSerialConsoleAccess
	mock.lockEnableSerialConsoleAccess.RUnlock()
	return calls
}

// EnableTransitGatewayRouteTablePropagation calls EnableTransitGatewayRouteTablePropagationFunc.
func (mock *ClientMock) EnableTransitGatewayRouteTablePropagation(ctx context.Context, params *ec2.EnableTransitGatewayRouteTablePropagationInput, optFns ...func(*ec2.Options)) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
	if mock.EnableTransitGatewayRouteTablePropagationFunc == nil {
		panic("ClientMock.EnableTransitGatewayRouteTablePropagationFunc: method is nil but Client.EnableTransitGatewayRouteTablePropagation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.EnableTransitGatewayRouteTablePropagationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockEnableTransitGatewayRouteTablePropagation.Lock()
	mock.calls.EnableTransitGatewayRouteTablePropagation = append(mock.calls.EnableTransitGatewayRouteTablePropagation, callInfo)
	mock.lockEnableTransitGatewayRouteTablePropagation.Unlock()
	return mock.EnableTransitGatewayRouteTablePropagationFunc(ctx, params, optFns...)
}

// EnableTransitGatewayRouteTablePropagationCalls gets all the calls that were made to EnableTransitGatewayRouteTablePropagation.
// Check the length with:
//     len(mockedClient.EnableTransitGatewayRouteTablePropagationCalls())
func (mock *ClientMock) EnableTransitGatewayRouteTablePropagationCalls() []struct {
	Ctx    context.Context
	Params *ec2.EnableTransitGatewayRouteTablePropagationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.EnableTransitGatewayRouteTablePropagationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockEnableTransitGatewayRouteTablePropagation.RLock()
	calls = mock.calls.EnableTransitGatewayRouteTablePropagation
	mock.lockEnableTransitGatewayRouteTablePropagation.RUnlock()
	return calls
}

// EnableVgwRoutePropagation calls EnableVgwRoutePropagationFunc.
func (mock *ClientMock) EnableVgwRoutePropagation(ctx context.Context, params *ec2.EnableVgwRoutePropagationInput, optFns ...func(*ec2.Options)) (*ec2.EnableVgwRoutePropagationOutput, error) {
	if mock.EnableVgwRoutePropagationFunc == nil {
		panic("ClientMock.EnableVgwRoutePropagationFunc: method is nil but Client.EnableVgwRoutePropagation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.EnableVgwRoutePropagationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockEnableVgwRoutePropagation.Lock()
	mock.calls.EnableVgwRoutePropagation = append(mock.calls.EnableVgwRoutePropagation, callInfo)
	mock.lockEnableVgwRoutePropagation.Unlock()
	return mock.EnableVgwRoutePropagationFunc(ctx, params, optFns...)
}

// EnableVgwRoutePropagationCalls gets all the calls that were made to EnableVgwRoutePropagation.
// Check the length with:
//     len(mockedClient.EnableVgwRoutePropagationCalls())
func (mock *ClientMock) EnableVgwRoutePropagationCalls() []struct {
	Ctx    context.Context
	Params *ec2.EnableVgwRoutePropagationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.EnableVgwRoutePropagationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockEnableVgwRoutePropagation.RLock()
	calls = mock.calls.EnableVgwRoutePropagation
	mock.lockEnableVgwRoutePropagation.RUnlock()
	return calls
}

// EnableVolumeIO calls EnableVolumeIOFunc.
func (mock *ClientMock) EnableVolumeIO(ctx context.Context, params *ec2.EnableVolumeIOInput, optFns ...func(*ec2.Options)) (*ec2.EnableVolumeIOOutput, error) {
	if mock.EnableVolumeIOFunc == nil {
		panic("ClientMock.EnableVolumeIOFunc: method is nil but Client.EnableVolumeIO was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.EnableVolumeIOInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockEnableVolumeIO.Lock()
	mock.calls.EnableVolumeIO = append(mock.calls.EnableVolumeIO, callInfo)
	mock.lockEnableVolumeIO.Unlock()
	return mock.EnableVolumeIOFunc(ctx, params, optFns...)
}

// EnableVolumeIOCalls gets all the calls that were made to EnableVolumeIO.
// Check the length with:
//     len(mockedClient.EnableVolumeIOCalls())
func (mock *ClientMock) EnableVolumeIOCalls() []struct {
	Ctx    context.Context
	Params *ec2.EnableVolumeIOInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.EnableVolumeIOInput
		OptFns []func(*ec2.Options)
	}
	mock.lockEnableVolumeIO.RLock()
	calls = mock.calls.EnableVolumeIO
	mock.lockEnableVolumeIO.RUnlock()
	return calls
}

// EnableVpcClassicLink calls EnableVpcClassicLinkFunc.
func (mock *ClientMock) EnableVpcClassicLink(ctx context.Context, params *ec2.EnableVpcClassicLinkInput, optFns ...func(*ec2.Options)) (*ec2.EnableVpcClassicLinkOutput, error) {
	if mock.EnableVpcClassicLinkFunc == nil {
		panic("ClientMock.EnableVpcClassicLinkFunc: method is nil but Client.EnableVpcClassicLink was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.EnableVpcClassicLinkInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockEnableVpcClassicLink.Lock()
	mock.calls.EnableVpcClassicLink = append(mock.calls.EnableVpcClassicLink, callInfo)
	mock.lockEnableVpcClassicLink.Unlock()
	return mock.EnableVpcClassicLinkFunc(ctx, params, optFns...)
}

// EnableVpcClassicLinkCalls gets all the calls that were made to EnableVpcClassicLink.
// Check the length with:
//     len(mockedClient.EnableVpcClassicLinkCalls())
func (mock *ClientMock) EnableVpcClassicLinkCalls() []struct {
	Ctx    context.Context
	Params *ec2.EnableVpcClassicLinkInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.EnableVpcClassicLinkInput
		OptFns []func(*ec2.Options)
	}
	mock.lockEnableVpcClassicLink.RLock()
	calls = mock.calls.EnableVpcClassicLink
	mock.lockEnableVpcClassicLink.RUnlock()
	return calls
}

// EnableVpcClassicLinkDnsSupport calls EnableVpcClassicLinkDnsSupportFunc.
func (mock *ClientMock) EnableVpcClassicLinkDnsSupport(ctx context.Context, params *ec2.EnableVpcClassicLinkDnsSupportInput, optFns ...func(*ec2.Options)) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
	if mock.EnableVpcClassicLinkDnsSupportFunc == nil {
		panic("ClientMock.EnableVpcClassicLinkDnsSupportFunc: method is nil but Client.EnableVpcClassicLinkDnsSupport was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.EnableVpcClassicLinkDnsSupportInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockEnableVpcClassicLinkDnsSupport.Lock()
	mock.calls.EnableVpcClassicLinkDnsSupport = append(mock.calls.EnableVpcClassicLinkDnsSupport, callInfo)
	mock.lockEnableVpcClassicLinkDnsSupport.Unlock()
	return mock.EnableVpcClassicLinkDnsSupportFunc(ctx, params, optFns...)
}

// EnableVpcClassicLinkDnsSupportCalls gets all the calls that were made to EnableVpcClassicLinkDnsSupport.
// Check the length with:
//     len(mockedClient.EnableVpcClassicLinkDnsSupportCalls())
func (mock *ClientMock) EnableVpcClassicLinkDnsSupportCalls() []struct {
	Ctx    context.Context
	Params *ec2.EnableVpcClassicLinkDnsSupportInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.EnableVpcClassicLinkDnsSupportInput
		OptFns []func(*ec2.Options)
	}
	mock.lockEnableVpcClassicLinkDnsSupport.RLock()
	calls = mock.calls.EnableVpcClassicLinkDnsSupport
	mock.lockEnableVpcClassicLinkDnsSupport.RUnlock()
	return calls
}

// ExportClientVpnClientCertificateRevocationList calls ExportClientVpnClientCertificateRevocationListFunc.
func (mock *ClientMock) ExportClientVpnClientCertificateRevocationList(ctx context.Context, params *ec2.ExportClientVpnClientCertificateRevocationListInput, optFns ...func(*ec2.Options)) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
	if mock.ExportClientVpnClientCertificateRevocationListFunc == nil {
		panic("ClientMock.ExportClientVpnClientCertificateRevocationListFunc: method is nil but Client.ExportClientVpnClientCertificateRevocationList was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ExportClientVpnClientCertificateRevocationListInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockExportClientVpnClientCertificateRevocationList.Lock()
	mock.calls.ExportClientVpnClientCertificateRevocationList = append(mock.calls.ExportClientVpnClientCertificateRevocationList, callInfo)
	mock.lockExportClientVpnClientCertificateRevocationList.Unlock()
	return mock.ExportClientVpnClientCertificateRevocationListFunc(ctx, params, optFns...)
}

// ExportClientVpnClientCertificateRevocationListCalls gets all the calls that were made to ExportClientVpnClientCertificateRevocationList.
// Check the length with:
//     len(mockedClient.ExportClientVpnClientCertificateRevocationListCalls())
func (mock *ClientMock) ExportClientVpnClientCertificateRevocationListCalls() []struct {
	Ctx    context.Context
	Params *ec2.ExportClientVpnClientCertificateRevocationListInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ExportClientVpnClientCertificateRevocationListInput
		OptFns []func(*ec2.Options)
	}
	mock.lockExportClientVpnClientCertificateRevocationList.RLock()
	calls = mock.calls.ExportClientVpnClientCertificateRevocationList
	mock.lockExportClientVpnClientCertificateRevocationList.RUnlock()
	return calls
}

// ExportClientVpnClientConfiguration calls ExportClientVpnClientConfigurationFunc.
func (mock *ClientMock) ExportClientVpnClientConfiguration(ctx context.Context, params *ec2.ExportClientVpnClientConfigurationInput, optFns ...func(*ec2.Options)) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
	if mock.ExportClientVpnClientConfigurationFunc == nil {
		panic("ClientMock.ExportClientVpnClientConfigurationFunc: method is nil but Client.ExportClientVpnClientConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ExportClientVpnClientConfigurationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockExportClientVpnClientConfiguration.Lock()
	mock.calls.ExportClientVpnClientConfiguration = append(mock.calls.ExportClientVpnClientConfiguration, callInfo)
	mock.lockExportClientVpnClientConfiguration.Unlock()
	return mock.ExportClientVpnClientConfigurationFunc(ctx, params, optFns...)
}

// ExportClientVpnClientConfigurationCalls gets all the calls that were made to ExportClientVpnClientConfiguration.
// Check the length with:
//     len(mockedClient.ExportClientVpnClientConfigurationCalls())
func (mock *ClientMock) ExportClientVpnClientConfigurationCalls() []struct {
	Ctx    context.Context
	Params *ec2.ExportClientVpnClientConfigurationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ExportClientVpnClientConfigurationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockExportClientVpnClientConfiguration.RLock()
	calls = mock.calls.ExportClientVpnClientConfiguration
	mock.lockExportClientVpnClientConfiguration.RUnlock()
	return calls
}

// ExportImage calls ExportImageFunc.
func (mock *ClientMock) ExportImage(ctx context.Context, params *ec2.ExportImageInput, optFns ...func(*ec2.Options)) (*ec2.ExportImageOutput, error) {
	if mock.ExportImageFunc == nil {
		panic("ClientMock.ExportImageFunc: method is nil but Client.ExportImage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ExportImageInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockExportImage.Lock()
	mock.calls.ExportImage = append(mock.calls.ExportImage, callInfo)
	mock.lockExportImage.Unlock()
	return mock.ExportImageFunc(ctx, params, optFns...)
}

// ExportImageCalls gets all the calls that were made to ExportImage.
// Check the length with:
//     len(mockedClient.ExportImageCalls())
func (mock *ClientMock) ExportImageCalls() []struct {
	Ctx    context.Context
	Params *ec2.ExportImageInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ExportImageInput
		OptFns []func(*ec2.Options)
	}
	mock.lockExportImage.RLock()
	calls = mock.calls.ExportImage
	mock.lockExportImage.RUnlock()
	return calls
}

// ExportTransitGatewayRoutes calls ExportTransitGatewayRoutesFunc.
func (mock *ClientMock) ExportTransitGatewayRoutes(ctx context.Context, params *ec2.ExportTransitGatewayRoutesInput, optFns ...func(*ec2.Options)) (*ec2.ExportTransitGatewayRoutesOutput, error) {
	if mock.ExportTransitGatewayRoutesFunc == nil {
		panic("ClientMock.ExportTransitGatewayRoutesFunc: method is nil but Client.ExportTransitGatewayRoutes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ExportTransitGatewayRoutesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockExportTransitGatewayRoutes.Lock()
	mock.calls.ExportTransitGatewayRoutes = append(mock.calls.ExportTransitGatewayRoutes, callInfo)
	mock.lockExportTransitGatewayRoutes.Unlock()
	return mock.ExportTransitGatewayRoutesFunc(ctx, params, optFns...)
}

// ExportTransitGatewayRoutesCalls gets all the calls that were made to ExportTransitGatewayRoutes.
// Check the length with:
//     len(mockedClient.ExportTransitGatewayRoutesCalls())
func (mock *ClientMock) ExportTransitGatewayRoutesCalls() []struct {
	Ctx    context.Context
	Params *ec2.ExportTransitGatewayRoutesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ExportTransitGatewayRoutesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockExportTransitGatewayRoutes.RLock()
	calls = mock.calls.ExportTransitGatewayRoutes
	mock.lockExportTransitGatewayRoutes.RUnlock()
	return calls
}

// GetAssociatedEnclaveCertificateIamRoles calls GetAssociatedEnclaveCertificateIamRolesFunc.
func (mock *ClientMock) GetAssociatedEnclaveCertificateIamRoles(ctx context.Context, params *ec2.GetAssociatedEnclaveCertificateIamRolesInput, optFns ...func(*ec2.Options)) (*ec2.GetAssociatedEnclaveCertificateIamRolesOutput, error) {
	if mock.GetAssociatedEnclaveCertificateIamRolesFunc == nil {
		panic("ClientMock.GetAssociatedEnclaveCertificateIamRolesFunc: method is nil but Client.GetAssociatedEnclaveCertificateIamRoles was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetAssociatedEnclaveCertificateIamRolesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetAssociatedEnclaveCertificateIamRoles.Lock()
	mock.calls.GetAssociatedEnclaveCertificateIamRoles = append(mock.calls.GetAssociatedEnclaveCertificateIamRoles, callInfo)
	mock.lockGetAssociatedEnclaveCertificateIamRoles.Unlock()
	return mock.GetAssociatedEnclaveCertificateIamRolesFunc(ctx, params, optFns...)
}

// GetAssociatedEnclaveCertificateIamRolesCalls gets all the calls that were made to GetAssociatedEnclaveCertificateIamRoles.
// Check the length with:
//     len(mockedClient.GetAssociatedEnclaveCertificateIamRolesCalls())
func (mock *ClientMock) GetAssociatedEnclaveCertificateIamRolesCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetAssociatedEnclaveCertificateIamRolesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetAssociatedEnclaveCertificateIamRolesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetAssociatedEnclaveCertificateIamRoles.RLock()
	calls = mock.calls.GetAssociatedEnclaveCertificateIamRoles
	mock.lockGetAssociatedEnclaveCertificateIamRoles.RUnlock()
	return calls
}

// GetAssociatedIpv6PoolCidrs calls GetAssociatedIpv6PoolCidrsFunc.
func (mock *ClientMock) GetAssociatedIpv6PoolCidrs(ctx context.Context, params *ec2.GetAssociatedIpv6PoolCidrsInput, optFns ...func(*ec2.Options)) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {
	if mock.GetAssociatedIpv6PoolCidrsFunc == nil {
		panic("ClientMock.GetAssociatedIpv6PoolCidrsFunc: method is nil but Client.GetAssociatedIpv6PoolCidrs was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetAssociatedIpv6PoolCidrsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetAssociatedIpv6PoolCidrs.Lock()
	mock.calls.GetAssociatedIpv6PoolCidrs = append(mock.calls.GetAssociatedIpv6PoolCidrs, callInfo)
	mock.lockGetAssociatedIpv6PoolCidrs.Unlock()
	return mock.GetAssociatedIpv6PoolCidrsFunc(ctx, params, optFns...)
}

// GetAssociatedIpv6PoolCidrsCalls gets all the calls that were made to GetAssociatedIpv6PoolCidrs.
// Check the length with:
//     len(mockedClient.GetAssociatedIpv6PoolCidrsCalls())
func (mock *ClientMock) GetAssociatedIpv6PoolCidrsCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetAssociatedIpv6PoolCidrsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetAssociatedIpv6PoolCidrsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetAssociatedIpv6PoolCidrs.RLock()
	calls = mock.calls.GetAssociatedIpv6PoolCidrs
	mock.lockGetAssociatedIpv6PoolCidrs.RUnlock()
	return calls
}

// GetCapacityReservationUsage calls GetCapacityReservationUsageFunc.
func (mock *ClientMock) GetCapacityReservationUsage(ctx context.Context, params *ec2.GetCapacityReservationUsageInput, optFns ...func(*ec2.Options)) (*ec2.GetCapacityReservationUsageOutput, error) {
	if mock.GetCapacityReservationUsageFunc == nil {
		panic("ClientMock.GetCapacityReservationUsageFunc: method is nil but Client.GetCapacityReservationUsage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetCapacityReservationUsageInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetCapacityReservationUsage.Lock()
	mock.calls.GetCapacityReservationUsage = append(mock.calls.GetCapacityReservationUsage, callInfo)
	mock.lockGetCapacityReservationUsage.Unlock()
	return mock.GetCapacityReservationUsageFunc(ctx, params, optFns...)
}

// GetCapacityReservationUsageCalls gets all the calls that were made to GetCapacityReservationUsage.
// Check the length with:
//     len(mockedClient.GetCapacityReservationUsageCalls())
func (mock *ClientMock) GetCapacityReservationUsageCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetCapacityReservationUsageInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetCapacityReservationUsageInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetCapacityReservationUsage.RLock()
	calls = mock.calls.GetCapacityReservationUsage
	mock.lockGetCapacityReservationUsage.RUnlock()
	return calls
}

// GetCoipPoolUsage calls GetCoipPoolUsageFunc.
func (mock *ClientMock) GetCoipPoolUsage(ctx context.Context, params *ec2.GetCoipPoolUsageInput, optFns ...func(*ec2.Options)) (*ec2.GetCoipPoolUsageOutput, error) {
	if mock.GetCoipPoolUsageFunc == nil {
		panic("ClientMock.GetCoipPoolUsageFunc: method is nil but Client.GetCoipPoolUsage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetCoipPoolUsageInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetCoipPoolUsage.Lock()
	mock.calls.GetCoipPoolUsage = append(mock.calls.GetCoipPoolUsage, callInfo)
	mock.lockGetCoipPoolUsage.Unlock()
	return mock.GetCoipPoolUsageFunc(ctx, params, optFns...)
}

// GetCoipPoolUsageCalls gets all the calls that were made to GetCoipPoolUsage.
// Check the length with:
//     len(mockedClient.GetCoipPoolUsageCalls())
func (mock *ClientMock) GetCoipPoolUsageCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetCoipPoolUsageInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetCoipPoolUsageInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetCoipPoolUsage.RLock()
	calls = mock.calls.GetCoipPoolUsage
	mock.lockGetCoipPoolUsage.RUnlock()
	return calls
}

// GetConsoleOutput calls GetConsoleOutputFunc.
func (mock *ClientMock) GetConsoleOutput(ctx context.Context, params *ec2.GetConsoleOutputInput, optFns ...func(*ec2.Options)) (*ec2.GetConsoleOutputOutput, error) {
	if mock.GetConsoleOutputFunc == nil {
		panic("ClientMock.GetConsoleOutputFunc: method is nil but Client.GetConsoleOutput was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetConsoleOutputInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetConsoleOutput.Lock()
	mock.calls.GetConsoleOutput = append(mock.calls.GetConsoleOutput, callInfo)
	mock.lockGetConsoleOutput.Unlock()
	return mock.GetConsoleOutputFunc(ctx, params, optFns...)
}

// GetConsoleOutputCalls gets all the calls that were made to GetConsoleOutput.
// Check the length with:
//     len(mockedClient.GetConsoleOutputCalls())
func (mock *ClientMock) GetConsoleOutputCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetConsoleOutputInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetConsoleOutputInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetConsoleOutput.RLock()
	calls = mock.calls.GetConsoleOutput
	mock.lockGetConsoleOutput.RUnlock()
	return calls
}

// GetConsoleScreenshot calls GetConsoleScreenshotFunc.
func (mock *ClientMock) GetConsoleScreenshot(ctx context.Context, params *ec2.GetConsoleScreenshotInput, optFns ...func(*ec2.Options)) (*ec2.GetConsoleScreenshotOutput, error) {
	if mock.GetConsoleScreenshotFunc == nil {
		panic("ClientMock.GetConsoleScreenshotFunc: method is nil but Client.GetConsoleScreenshot was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetConsoleScreenshotInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetConsoleScreenshot.Lock()
	mock.calls.GetConsoleScreenshot = append(mock.calls.GetConsoleScreenshot, callInfo)
	mock.lockGetConsoleScreenshot.Unlock()
	return mock.GetConsoleScreenshotFunc(ctx, params, optFns...)
}

// GetConsoleScreenshotCalls gets all the calls that were made to GetConsoleScreenshot.
// Check the length with:
//     len(mockedClient.GetConsoleScreenshotCalls())
func (mock *ClientMock) GetConsoleScreenshotCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetConsoleScreenshotInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetConsoleScreenshotInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetConsoleScreenshot.RLock()
	calls = mock.calls.GetConsoleScreenshot
	mock.lockGetConsoleScreenshot.RUnlock()
	return calls
}

// GetDefaultCreditSpecification calls GetDefaultCreditSpecificationFunc.
func (mock *ClientMock) GetDefaultCreditSpecification(ctx context.Context, params *ec2.GetDefaultCreditSpecificationInput, optFns ...func(*ec2.Options)) (*ec2.GetDefaultCreditSpecificationOutput, error) {
	if mock.GetDefaultCreditSpecificationFunc == nil {
		panic("ClientMock.GetDefaultCreditSpecificationFunc: method is nil but Client.GetDefaultCreditSpecification was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetDefaultCreditSpecificationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetDefaultCreditSpecification.Lock()
	mock.calls.GetDefaultCreditSpecification = append(mock.calls.GetDefaultCreditSpecification, callInfo)
	mock.lockGetDefaultCreditSpecification.Unlock()
	return mock.GetDefaultCreditSpecificationFunc(ctx, params, optFns...)
}

// GetDefaultCreditSpecificationCalls gets all the calls that were made to GetDefaultCreditSpecification.
// Check the length with:
//     len(mockedClient.GetDefaultCreditSpecificationCalls())
func (mock *ClientMock) GetDefaultCreditSpecificationCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetDefaultCreditSpecificationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetDefaultCreditSpecificationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetDefaultCreditSpecification.RLock()
	calls = mock.calls.GetDefaultCreditSpecification
	mock.lockGetDefaultCreditSpecification.RUnlock()
	return calls
}

// GetEbsDefaultKmsKeyId calls GetEbsDefaultKmsKeyIdFunc.
func (mock *ClientMock) GetEbsDefaultKmsKeyId(ctx context.Context, params *ec2.GetEbsDefaultKmsKeyIdInput, optFns ...func(*ec2.Options)) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {
	if mock.GetEbsDefaultKmsKeyIdFunc == nil {
		panic("ClientMock.GetEbsDefaultKmsKeyIdFunc: method is nil but Client.GetEbsDefaultKmsKeyId was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetEbsDefaultKmsKeyIdInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetEbsDefaultKmsKeyId.Lock()
	mock.calls.GetEbsDefaultKmsKeyId = append(mock.calls.GetEbsDefaultKmsKeyId, callInfo)
	mock.lockGetEbsDefaultKmsKeyId.Unlock()
	return mock.GetEbsDefaultKmsKeyIdFunc(ctx, params, optFns...)
}

// GetEbsDefaultKmsKeyIdCalls gets all the calls that were made to GetEbsDefaultKmsKeyId.
// Check the length with:
//     len(mockedClient.GetEbsDefaultKmsKeyIdCalls())
func (mock *ClientMock) GetEbsDefaultKmsKeyIdCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetEbsDefaultKmsKeyIdInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetEbsDefaultKmsKeyIdInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetEbsDefaultKmsKeyId.RLock()
	calls = mock.calls.GetEbsDefaultKmsKeyId
	mock.lockGetEbsDefaultKmsKeyId.RUnlock()
	return calls
}

// GetEbsEncryptionByDefault calls GetEbsEncryptionByDefaultFunc.
func (mock *ClientMock) GetEbsEncryptionByDefault(ctx context.Context, params *ec2.GetEbsEncryptionByDefaultInput, optFns ...func(*ec2.Options)) (*ec2.GetEbsEncryptionByDefaultOutput, error) {
	if mock.GetEbsEncryptionByDefaultFunc == nil {
		panic("ClientMock.GetEbsEncryptionByDefaultFunc: method is nil but Client.GetEbsEncryptionByDefault was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetEbsEncryptionByDefaultInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetEbsEncryptionByDefault.Lock()
	mock.calls.GetEbsEncryptionByDefault = append(mock.calls.GetEbsEncryptionByDefault, callInfo)
	mock.lockGetEbsEncryptionByDefault.Unlock()
	return mock.GetEbsEncryptionByDefaultFunc(ctx, params, optFns...)
}

// GetEbsEncryptionByDefaultCalls gets all the calls that were made to GetEbsEncryptionByDefault.
// Check the length with:
//     len(mockedClient.GetEbsEncryptionByDefaultCalls())
func (mock *ClientMock) GetEbsEncryptionByDefaultCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetEbsEncryptionByDefaultInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetEbsEncryptionByDefaultInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetEbsEncryptionByDefault.RLock()
	calls = mock.calls.GetEbsEncryptionByDefault
	mock.lockGetEbsEncryptionByDefault.RUnlock()
	return calls
}

// GetFlowLogsIntegrationTemplate calls GetFlowLogsIntegrationTemplateFunc.
func (mock *ClientMock) GetFlowLogsIntegrationTemplate(ctx context.Context, params *ec2.GetFlowLogsIntegrationTemplateInput, optFns ...func(*ec2.Options)) (*ec2.GetFlowLogsIntegrationTemplateOutput, error) {
	if mock.GetFlowLogsIntegrationTemplateFunc == nil {
		panic("ClientMock.GetFlowLogsIntegrationTemplateFunc: method is nil but Client.GetFlowLogsIntegrationTemplate was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetFlowLogsIntegrationTemplateInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetFlowLogsIntegrationTemplate.Lock()
	mock.calls.GetFlowLogsIntegrationTemplate = append(mock.calls.GetFlowLogsIntegrationTemplate, callInfo)
	mock.lockGetFlowLogsIntegrationTemplate.Unlock()
	return mock.GetFlowLogsIntegrationTemplateFunc(ctx, params, optFns...)
}

// GetFlowLogsIntegrationTemplateCalls gets all the calls that were made to GetFlowLogsIntegrationTemplate.
// Check the length with:
//     len(mockedClient.GetFlowLogsIntegrationTemplateCalls())
func (mock *ClientMock) GetFlowLogsIntegrationTemplateCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetFlowLogsIntegrationTemplateInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetFlowLogsIntegrationTemplateInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetFlowLogsIntegrationTemplate.RLock()
	calls = mock.calls.GetFlowLogsIntegrationTemplate
	mock.lockGetFlowLogsIntegrationTemplate.RUnlock()
	return calls
}

// GetGroupsForCapacityReservation calls GetGroupsForCapacityReservationFunc.
func (mock *ClientMock) GetGroupsForCapacityReservation(ctx context.Context, params *ec2.GetGroupsForCapacityReservationInput, optFns ...func(*ec2.Options)) (*ec2.GetGroupsForCapacityReservationOutput, error) {
	if mock.GetGroupsForCapacityReservationFunc == nil {
		panic("ClientMock.GetGroupsForCapacityReservationFunc: method is nil but Client.GetGroupsForCapacityReservation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetGroupsForCapacityReservationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetGroupsForCapacityReservation.Lock()
	mock.calls.GetGroupsForCapacityReservation = append(mock.calls.GetGroupsForCapacityReservation, callInfo)
	mock.lockGetGroupsForCapacityReservation.Unlock()
	return mock.GetGroupsForCapacityReservationFunc(ctx, params, optFns...)
}

// GetGroupsForCapacityReservationCalls gets all the calls that were made to GetGroupsForCapacityReservation.
// Check the length with:
//     len(mockedClient.GetGroupsForCapacityReservationCalls())
func (mock *ClientMock) GetGroupsForCapacityReservationCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetGroupsForCapacityReservationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetGroupsForCapacityReservationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetGroupsForCapacityReservation.RLock()
	calls = mock.calls.GetGroupsForCapacityReservation
	mock.lockGetGroupsForCapacityReservation.RUnlock()
	return calls
}

// GetHostReservationPurchasePreview calls GetHostReservationPurchasePreviewFunc.
func (mock *ClientMock) GetHostReservationPurchasePreview(ctx context.Context, params *ec2.GetHostReservationPurchasePreviewInput, optFns ...func(*ec2.Options)) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
	if mock.GetHostReservationPurchasePreviewFunc == nil {
		panic("ClientMock.GetHostReservationPurchasePreviewFunc: method is nil but Client.GetHostReservationPurchasePreview was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetHostReservationPurchasePreviewInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetHostReservationPurchasePreview.Lock()
	mock.calls.GetHostReservationPurchasePreview = append(mock.calls.GetHostReservationPurchasePreview, callInfo)
	mock.lockGetHostReservationPurchasePreview.Unlock()
	return mock.GetHostReservationPurchasePreviewFunc(ctx, params, optFns...)
}

// GetHostReservationPurchasePreviewCalls gets all the calls that were made to GetHostReservationPurchasePreview.
// Check the length with:
//     len(mockedClient.GetHostReservationPurchasePreviewCalls())
func (mock *ClientMock) GetHostReservationPurchasePreviewCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetHostReservationPurchasePreviewInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetHostReservationPurchasePreviewInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetHostReservationPurchasePreview.RLock()
	calls = mock.calls.GetHostReservationPurchasePreview
	mock.lockGetHostReservationPurchasePreview.RUnlock()
	return calls
}

// GetInstanceTypesFromInstanceRequirements calls GetInstanceTypesFromInstanceRequirementsFunc.
func (mock *ClientMock) GetInstanceTypesFromInstanceRequirements(ctx context.Context, params *ec2.GetInstanceTypesFromInstanceRequirementsInput, optFns ...func(*ec2.Options)) (*ec2.GetInstanceTypesFromInstanceRequirementsOutput, error) {
	if mock.GetInstanceTypesFromInstanceRequirementsFunc == nil {
		panic("ClientMock.GetInstanceTypesFromInstanceRequirementsFunc: method is nil but Client.GetInstanceTypesFromInstanceRequirements was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetInstanceTypesFromInstanceRequirementsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetInstanceTypesFromInstanceRequirements.Lock()
	mock.calls.GetInstanceTypesFromInstanceRequirements = append(mock.calls.GetInstanceTypesFromInstanceRequirements, callInfo)
	mock.lockGetInstanceTypesFromInstanceRequirements.Unlock()
	return mock.GetInstanceTypesFromInstanceRequirementsFunc(ctx, params, optFns...)
}

// GetInstanceTypesFromInstanceRequirementsCalls gets all the calls that were made to GetInstanceTypesFromInstanceRequirements.
// Check the length with:
//     len(mockedClient.GetInstanceTypesFromInstanceRequirementsCalls())
func (mock *ClientMock) GetInstanceTypesFromInstanceRequirementsCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetInstanceTypesFromInstanceRequirementsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetInstanceTypesFromInstanceRequirementsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetInstanceTypesFromInstanceRequirements.RLock()
	calls = mock.calls.GetInstanceTypesFromInstanceRequirements
	mock.lockGetInstanceTypesFromInstanceRequirements.RUnlock()
	return calls
}

// GetInstanceUefiData calls GetInstanceUefiDataFunc.
func (mock *ClientMock) GetInstanceUefiData(ctx context.Context, params *ec2.GetInstanceUefiDataInput, optFns ...func(*ec2.Options)) (*ec2.GetInstanceUefiDataOutput, error) {
	if mock.GetInstanceUefiDataFunc == nil {
		panic("ClientMock.GetInstanceUefiDataFunc: method is nil but Client.GetInstanceUefiData was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetInstanceUefiDataInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetInstanceUefiData.Lock()
	mock.calls.GetInstanceUefiData = append(mock.calls.GetInstanceUefiData, callInfo)
	mock.lockGetInstanceUefiData.Unlock()
	return mock.GetInstanceUefiDataFunc(ctx, params, optFns...)
}

// GetInstanceUefiDataCalls gets all the calls that were made to GetInstanceUefiData.
// Check the length with:
//     len(mockedClient.GetInstanceUefiDataCalls())
func (mock *ClientMock) GetInstanceUefiDataCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetInstanceUefiDataInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetInstanceUefiDataInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetInstanceUefiData.RLock()
	calls = mock.calls.GetInstanceUefiData
	mock.lockGetInstanceUefiData.RUnlock()
	return calls
}

// GetIpamAddressHistory calls GetIpamAddressHistoryFunc.
func (mock *ClientMock) GetIpamAddressHistory(ctx context.Context, params *ec2.GetIpamAddressHistoryInput, optFns ...func(*ec2.Options)) (*ec2.GetIpamAddressHistoryOutput, error) {
	if mock.GetIpamAddressHistoryFunc == nil {
		panic("ClientMock.GetIpamAddressHistoryFunc: method is nil but Client.GetIpamAddressHistory was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetIpamAddressHistoryInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetIpamAddressHistory.Lock()
	mock.calls.GetIpamAddressHistory = append(mock.calls.GetIpamAddressHistory, callInfo)
	mock.lockGetIpamAddressHistory.Unlock()
	return mock.GetIpamAddressHistoryFunc(ctx, params, optFns...)
}

// GetIpamAddressHistoryCalls gets all the calls that were made to GetIpamAddressHistory.
// Check the length with:
//     len(mockedClient.GetIpamAddressHistoryCalls())
func (mock *ClientMock) GetIpamAddressHistoryCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetIpamAddressHistoryInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetIpamAddressHistoryInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetIpamAddressHistory.RLock()
	calls = mock.calls.GetIpamAddressHistory
	mock.lockGetIpamAddressHistory.RUnlock()
	return calls
}

// GetIpamPoolAllocations calls GetIpamPoolAllocationsFunc.
func (mock *ClientMock) GetIpamPoolAllocations(ctx context.Context, params *ec2.GetIpamPoolAllocationsInput, optFns ...func(*ec2.Options)) (*ec2.GetIpamPoolAllocationsOutput, error) {
	if mock.GetIpamPoolAllocationsFunc == nil {
		panic("ClientMock.GetIpamPoolAllocationsFunc: method is nil but Client.GetIpamPoolAllocations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetIpamPoolAllocationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetIpamPoolAllocations.Lock()
	mock.calls.GetIpamPoolAllocations = append(mock.calls.GetIpamPoolAllocations, callInfo)
	mock.lockGetIpamPoolAllocations.Unlock()
	return mock.GetIpamPoolAllocationsFunc(ctx, params, optFns...)
}

// GetIpamPoolAllocationsCalls gets all the calls that were made to GetIpamPoolAllocations.
// Check the length with:
//     len(mockedClient.GetIpamPoolAllocationsCalls())
func (mock *ClientMock) GetIpamPoolAllocationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetIpamPoolAllocationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetIpamPoolAllocationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetIpamPoolAllocations.RLock()
	calls = mock.calls.GetIpamPoolAllocations
	mock.lockGetIpamPoolAllocations.RUnlock()
	return calls
}

// GetIpamPoolCidrs calls GetIpamPoolCidrsFunc.
func (mock *ClientMock) GetIpamPoolCidrs(ctx context.Context, params *ec2.GetIpamPoolCidrsInput, optFns ...func(*ec2.Options)) (*ec2.GetIpamPoolCidrsOutput, error) {
	if mock.GetIpamPoolCidrsFunc == nil {
		panic("ClientMock.GetIpamPoolCidrsFunc: method is nil but Client.GetIpamPoolCidrs was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetIpamPoolCidrsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetIpamPoolCidrs.Lock()
	mock.calls.GetIpamPoolCidrs = append(mock.calls.GetIpamPoolCidrs, callInfo)
	mock.lockGetIpamPoolCidrs.Unlock()
	return mock.GetIpamPoolCidrsFunc(ctx, params, optFns...)
}

// GetIpamPoolCidrsCalls gets all the calls that were made to GetIpamPoolCidrs.
// Check the length with:
//     len(mockedClient.GetIpamPoolCidrsCalls())
func (mock *ClientMock) GetIpamPoolCidrsCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetIpamPoolCidrsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetIpamPoolCidrsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetIpamPoolCidrs.RLock()
	calls = mock.calls.GetIpamPoolCidrs
	mock.lockGetIpamPoolCidrs.RUnlock()
	return calls
}

// GetIpamResourceCidrs calls GetIpamResourceCidrsFunc.
func (mock *ClientMock) GetIpamResourceCidrs(ctx context.Context, params *ec2.GetIpamResourceCidrsInput, optFns ...func(*ec2.Options)) (*ec2.GetIpamResourceCidrsOutput, error) {
	if mock.GetIpamResourceCidrsFunc == nil {
		panic("ClientMock.GetIpamResourceCidrsFunc: method is nil but Client.GetIpamResourceCidrs was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetIpamResourceCidrsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetIpamResourceCidrs.Lock()
	mock.calls.GetIpamResourceCidrs = append(mock.calls.GetIpamResourceCidrs, callInfo)
	mock.lockGetIpamResourceCidrs.Unlock()
	return mock.GetIpamResourceCidrsFunc(ctx, params, optFns...)
}

// GetIpamResourceCidrsCalls gets all the calls that were made to GetIpamResourceCidrs.
// Check the length with:
//     len(mockedClient.GetIpamResourceCidrsCalls())
func (mock *ClientMock) GetIpamResourceCidrsCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetIpamResourceCidrsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetIpamResourceCidrsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetIpamResourceCidrs.RLock()
	calls = mock.calls.GetIpamResourceCidrs
	mock.lockGetIpamResourceCidrs.RUnlock()
	return calls
}

// GetLaunchTemplateData calls GetLaunchTemplateDataFunc.
func (mock *ClientMock) GetLaunchTemplateData(ctx context.Context, params *ec2.GetLaunchTemplateDataInput, optFns ...func(*ec2.Options)) (*ec2.GetLaunchTemplateDataOutput, error) {
	if mock.GetLaunchTemplateDataFunc == nil {
		panic("ClientMock.GetLaunchTemplateDataFunc: method is nil but Client.GetLaunchTemplateData was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetLaunchTemplateDataInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetLaunchTemplateData.Lock()
	mock.calls.GetLaunchTemplateData = append(mock.calls.GetLaunchTemplateData, callInfo)
	mock.lockGetLaunchTemplateData.Unlock()
	return mock.GetLaunchTemplateDataFunc(ctx, params, optFns...)
}

// GetLaunchTemplateDataCalls gets all the calls that were made to GetLaunchTemplateData.
// Check the length with:
//     len(mockedClient.GetLaunchTemplateDataCalls())
func (mock *ClientMock) GetLaunchTemplateDataCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetLaunchTemplateDataInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetLaunchTemplateDataInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetLaunchTemplateData.RLock()
	calls = mock.calls.GetLaunchTemplateData
	mock.lockGetLaunchTemplateData.RUnlock()
	return calls
}

// GetManagedPrefixListAssociations calls GetManagedPrefixListAssociationsFunc.
func (mock *ClientMock) GetManagedPrefixListAssociations(ctx context.Context, params *ec2.GetManagedPrefixListAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.GetManagedPrefixListAssociationsOutput, error) {
	if mock.GetManagedPrefixListAssociationsFunc == nil {
		panic("ClientMock.GetManagedPrefixListAssociationsFunc: method is nil but Client.GetManagedPrefixListAssociations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetManagedPrefixListAssociationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetManagedPrefixListAssociations.Lock()
	mock.calls.GetManagedPrefixListAssociations = append(mock.calls.GetManagedPrefixListAssociations, callInfo)
	mock.lockGetManagedPrefixListAssociations.Unlock()
	return mock.GetManagedPrefixListAssociationsFunc(ctx, params, optFns...)
}

// GetManagedPrefixListAssociationsCalls gets all the calls that were made to GetManagedPrefixListAssociations.
// Check the length with:
//     len(mockedClient.GetManagedPrefixListAssociationsCalls())
func (mock *ClientMock) GetManagedPrefixListAssociationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetManagedPrefixListAssociationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetManagedPrefixListAssociationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetManagedPrefixListAssociations.RLock()
	calls = mock.calls.GetManagedPrefixListAssociations
	mock.lockGetManagedPrefixListAssociations.RUnlock()
	return calls
}

// GetManagedPrefixListEntries calls GetManagedPrefixListEntriesFunc.
func (mock *ClientMock) GetManagedPrefixListEntries(ctx context.Context, params *ec2.GetManagedPrefixListEntriesInput, optFns ...func(*ec2.Options)) (*ec2.GetManagedPrefixListEntriesOutput, error) {
	if mock.GetManagedPrefixListEntriesFunc == nil {
		panic("ClientMock.GetManagedPrefixListEntriesFunc: method is nil but Client.GetManagedPrefixListEntries was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetManagedPrefixListEntriesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetManagedPrefixListEntries.Lock()
	mock.calls.GetManagedPrefixListEntries = append(mock.calls.GetManagedPrefixListEntries, callInfo)
	mock.lockGetManagedPrefixListEntries.Unlock()
	return mock.GetManagedPrefixListEntriesFunc(ctx, params, optFns...)
}

// GetManagedPrefixListEntriesCalls gets all the calls that were made to GetManagedPrefixListEntries.
// Check the length with:
//     len(mockedClient.GetManagedPrefixListEntriesCalls())
func (mock *ClientMock) GetManagedPrefixListEntriesCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetManagedPrefixListEntriesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetManagedPrefixListEntriesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetManagedPrefixListEntries.RLock()
	calls = mock.calls.GetManagedPrefixListEntries
	mock.lockGetManagedPrefixListEntries.RUnlock()
	return calls
}

// GetNetworkInsightsAccessScopeAnalysisFindings calls GetNetworkInsightsAccessScopeAnalysisFindingsFunc.
func (mock *ClientMock) GetNetworkInsightsAccessScopeAnalysisFindings(ctx context.Context, params *ec2.GetNetworkInsightsAccessScopeAnalysisFindingsInput, optFns ...func(*ec2.Options)) (*ec2.GetNetworkInsightsAccessScopeAnalysisFindingsOutput, error) {
	if mock.GetNetworkInsightsAccessScopeAnalysisFindingsFunc == nil {
		panic("ClientMock.GetNetworkInsightsAccessScopeAnalysisFindingsFunc: method is nil but Client.GetNetworkInsightsAccessScopeAnalysisFindings was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetNetworkInsightsAccessScopeAnalysisFindingsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetNetworkInsightsAccessScopeAnalysisFindings.Lock()
	mock.calls.GetNetworkInsightsAccessScopeAnalysisFindings = append(mock.calls.GetNetworkInsightsAccessScopeAnalysisFindings, callInfo)
	mock.lockGetNetworkInsightsAccessScopeAnalysisFindings.Unlock()
	return mock.GetNetworkInsightsAccessScopeAnalysisFindingsFunc(ctx, params, optFns...)
}

// GetNetworkInsightsAccessScopeAnalysisFindingsCalls gets all the calls that were made to GetNetworkInsightsAccessScopeAnalysisFindings.
// Check the length with:
//     len(mockedClient.GetNetworkInsightsAccessScopeAnalysisFindingsCalls())
func (mock *ClientMock) GetNetworkInsightsAccessScopeAnalysisFindingsCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetNetworkInsightsAccessScopeAnalysisFindingsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetNetworkInsightsAccessScopeAnalysisFindingsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetNetworkInsightsAccessScopeAnalysisFindings.RLock()
	calls = mock.calls.GetNetworkInsightsAccessScopeAnalysisFindings
	mock.lockGetNetworkInsightsAccessScopeAnalysisFindings.RUnlock()
	return calls
}

// GetNetworkInsightsAccessScopeContent calls GetNetworkInsightsAccessScopeContentFunc.
func (mock *ClientMock) GetNetworkInsightsAccessScopeContent(ctx context.Context, params *ec2.GetNetworkInsightsAccessScopeContentInput, optFns ...func(*ec2.Options)) (*ec2.GetNetworkInsightsAccessScopeContentOutput, error) {
	if mock.GetNetworkInsightsAccessScopeContentFunc == nil {
		panic("ClientMock.GetNetworkInsightsAccessScopeContentFunc: method is nil but Client.GetNetworkInsightsAccessScopeContent was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetNetworkInsightsAccessScopeContentInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetNetworkInsightsAccessScopeContent.Lock()
	mock.calls.GetNetworkInsightsAccessScopeContent = append(mock.calls.GetNetworkInsightsAccessScopeContent, callInfo)
	mock.lockGetNetworkInsightsAccessScopeContent.Unlock()
	return mock.GetNetworkInsightsAccessScopeContentFunc(ctx, params, optFns...)
}

// GetNetworkInsightsAccessScopeContentCalls gets all the calls that were made to GetNetworkInsightsAccessScopeContent.
// Check the length with:
//     len(mockedClient.GetNetworkInsightsAccessScopeContentCalls())
func (mock *ClientMock) GetNetworkInsightsAccessScopeContentCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetNetworkInsightsAccessScopeContentInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetNetworkInsightsAccessScopeContentInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetNetworkInsightsAccessScopeContent.RLock()
	calls = mock.calls.GetNetworkInsightsAccessScopeContent
	mock.lockGetNetworkInsightsAccessScopeContent.RUnlock()
	return calls
}

// GetPasswordData calls GetPasswordDataFunc.
func (mock *ClientMock) GetPasswordData(ctx context.Context, params *ec2.GetPasswordDataInput, optFns ...func(*ec2.Options)) (*ec2.GetPasswordDataOutput, error) {
	if mock.GetPasswordDataFunc == nil {
		panic("ClientMock.GetPasswordDataFunc: method is nil but Client.GetPasswordData was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetPasswordDataInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetPasswordData.Lock()
	mock.calls.GetPasswordData = append(mock.calls.GetPasswordData, callInfo)
	mock.lockGetPasswordData.Unlock()
	return mock.GetPasswordDataFunc(ctx, params, optFns...)
}

// GetPasswordDataCalls gets all the calls that were made to GetPasswordData.
// Check the length with:
//     len(mockedClient.GetPasswordDataCalls())
func (mock *ClientMock) GetPasswordDataCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetPasswordDataInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetPasswordDataInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetPasswordData.RLock()
	calls = mock.calls.GetPasswordData
	mock.lockGetPasswordData.RUnlock()
	return calls
}

// GetReservedInstancesExchangeQuote calls GetReservedInstancesExchangeQuoteFunc.
func (mock *ClientMock) GetReservedInstancesExchangeQuote(ctx context.Context, params *ec2.GetReservedInstancesExchangeQuoteInput, optFns ...func(*ec2.Options)) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
	if mock.GetReservedInstancesExchangeQuoteFunc == nil {
		panic("ClientMock.GetReservedInstancesExchangeQuoteFunc: method is nil but Client.GetReservedInstancesExchangeQuote was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetReservedInstancesExchangeQuoteInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetReservedInstancesExchangeQuote.Lock()
	mock.calls.GetReservedInstancesExchangeQuote = append(mock.calls.GetReservedInstancesExchangeQuote, callInfo)
	mock.lockGetReservedInstancesExchangeQuote.Unlock()
	return mock.GetReservedInstancesExchangeQuoteFunc(ctx, params, optFns...)
}

// GetReservedInstancesExchangeQuoteCalls gets all the calls that were made to GetReservedInstancesExchangeQuote.
// Check the length with:
//     len(mockedClient.GetReservedInstancesExchangeQuoteCalls())
func (mock *ClientMock) GetReservedInstancesExchangeQuoteCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetReservedInstancesExchangeQuoteInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetReservedInstancesExchangeQuoteInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetReservedInstancesExchangeQuote.RLock()
	calls = mock.calls.GetReservedInstancesExchangeQuote
	mock.lockGetReservedInstancesExchangeQuote.RUnlock()
	return calls
}

// GetSerialConsoleAccessStatus calls GetSerialConsoleAccessStatusFunc.
func (mock *ClientMock) GetSerialConsoleAccessStatus(ctx context.Context, params *ec2.GetSerialConsoleAccessStatusInput, optFns ...func(*ec2.Options)) (*ec2.GetSerialConsoleAccessStatusOutput, error) {
	if mock.GetSerialConsoleAccessStatusFunc == nil {
		panic("ClientMock.GetSerialConsoleAccessStatusFunc: method is nil but Client.GetSerialConsoleAccessStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetSerialConsoleAccessStatusInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetSerialConsoleAccessStatus.Lock()
	mock.calls.GetSerialConsoleAccessStatus = append(mock.calls.GetSerialConsoleAccessStatus, callInfo)
	mock.lockGetSerialConsoleAccessStatus.Unlock()
	return mock.GetSerialConsoleAccessStatusFunc(ctx, params, optFns...)
}

// GetSerialConsoleAccessStatusCalls gets all the calls that were made to GetSerialConsoleAccessStatus.
// Check the length with:
//     len(mockedClient.GetSerialConsoleAccessStatusCalls())
func (mock *ClientMock) GetSerialConsoleAccessStatusCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetSerialConsoleAccessStatusInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetSerialConsoleAccessStatusInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetSerialConsoleAccessStatus.RLock()
	calls = mock.calls.GetSerialConsoleAccessStatus
	mock.lockGetSerialConsoleAccessStatus.RUnlock()
	return calls
}

// GetSpotPlacementScores calls GetSpotPlacementScoresFunc.
func (mock *ClientMock) GetSpotPlacementScores(ctx context.Context, params *ec2.GetSpotPlacementScoresInput, optFns ...func(*ec2.Options)) (*ec2.GetSpotPlacementScoresOutput, error) {
	if mock.GetSpotPlacementScoresFunc == nil {
		panic("ClientMock.GetSpotPlacementScoresFunc: method is nil but Client.GetSpotPlacementScores was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetSpotPlacementScoresInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetSpotPlacementScores.Lock()
	mock.calls.GetSpotPlacementScores = append(mock.calls.GetSpotPlacementScores, callInfo)
	mock.lockGetSpotPlacementScores.Unlock()
	return mock.GetSpotPlacementScoresFunc(ctx, params, optFns...)
}

// GetSpotPlacementScoresCalls gets all the calls that were made to GetSpotPlacementScores.
// Check the length with:
//     len(mockedClient.GetSpotPlacementScoresCalls())
func (mock *ClientMock) GetSpotPlacementScoresCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetSpotPlacementScoresInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetSpotPlacementScoresInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetSpotPlacementScores.RLock()
	calls = mock.calls.GetSpotPlacementScores
	mock.lockGetSpotPlacementScores.RUnlock()
	return calls
}

// GetSubnetCidrReservations calls GetSubnetCidrReservationsFunc.
func (mock *ClientMock) GetSubnetCidrReservations(ctx context.Context, params *ec2.GetSubnetCidrReservationsInput, optFns ...func(*ec2.Options)) (*ec2.GetSubnetCidrReservationsOutput, error) {
	if mock.GetSubnetCidrReservationsFunc == nil {
		panic("ClientMock.GetSubnetCidrReservationsFunc: method is nil but Client.GetSubnetCidrReservations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetSubnetCidrReservationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetSubnetCidrReservations.Lock()
	mock.calls.GetSubnetCidrReservations = append(mock.calls.GetSubnetCidrReservations, callInfo)
	mock.lockGetSubnetCidrReservations.Unlock()
	return mock.GetSubnetCidrReservationsFunc(ctx, params, optFns...)
}

// GetSubnetCidrReservationsCalls gets all the calls that were made to GetSubnetCidrReservations.
// Check the length with:
//     len(mockedClient.GetSubnetCidrReservationsCalls())
func (mock *ClientMock) GetSubnetCidrReservationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetSubnetCidrReservationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetSubnetCidrReservationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetSubnetCidrReservations.RLock()
	calls = mock.calls.GetSubnetCidrReservations
	mock.lockGetSubnetCidrReservations.RUnlock()
	return calls
}

// GetTransitGatewayAttachmentPropagations calls GetTransitGatewayAttachmentPropagationsFunc.
func (mock *ClientMock) GetTransitGatewayAttachmentPropagations(ctx context.Context, params *ec2.GetTransitGatewayAttachmentPropagationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
	if mock.GetTransitGatewayAttachmentPropagationsFunc == nil {
		panic("ClientMock.GetTransitGatewayAttachmentPropagationsFunc: method is nil but Client.GetTransitGatewayAttachmentPropagations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetTransitGatewayAttachmentPropagationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetTransitGatewayAttachmentPropagations.Lock()
	mock.calls.GetTransitGatewayAttachmentPropagations = append(mock.calls.GetTransitGatewayAttachmentPropagations, callInfo)
	mock.lockGetTransitGatewayAttachmentPropagations.Unlock()
	return mock.GetTransitGatewayAttachmentPropagationsFunc(ctx, params, optFns...)
}

// GetTransitGatewayAttachmentPropagationsCalls gets all the calls that were made to GetTransitGatewayAttachmentPropagations.
// Check the length with:
//     len(mockedClient.GetTransitGatewayAttachmentPropagationsCalls())
func (mock *ClientMock) GetTransitGatewayAttachmentPropagationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetTransitGatewayAttachmentPropagationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetTransitGatewayAttachmentPropagationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetTransitGatewayAttachmentPropagations.RLock()
	calls = mock.calls.GetTransitGatewayAttachmentPropagations
	mock.lockGetTransitGatewayAttachmentPropagations.RUnlock()
	return calls
}

// GetTransitGatewayMulticastDomainAssociations calls GetTransitGatewayMulticastDomainAssociationsFunc.
func (mock *ClientMock) GetTransitGatewayMulticastDomainAssociations(ctx context.Context, params *ec2.GetTransitGatewayMulticastDomainAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {
	if mock.GetTransitGatewayMulticastDomainAssociationsFunc == nil {
		panic("ClientMock.GetTransitGatewayMulticastDomainAssociationsFunc: method is nil but Client.GetTransitGatewayMulticastDomainAssociations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetTransitGatewayMulticastDomainAssociationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetTransitGatewayMulticastDomainAssociations.Lock()
	mock.calls.GetTransitGatewayMulticastDomainAssociations = append(mock.calls.GetTransitGatewayMulticastDomainAssociations, callInfo)
	mock.lockGetTransitGatewayMulticastDomainAssociations.Unlock()
	return mock.GetTransitGatewayMulticastDomainAssociationsFunc(ctx, params, optFns...)
}

// GetTransitGatewayMulticastDomainAssociationsCalls gets all the calls that were made to GetTransitGatewayMulticastDomainAssociations.
// Check the length with:
//     len(mockedClient.GetTransitGatewayMulticastDomainAssociationsCalls())
func (mock *ClientMock) GetTransitGatewayMulticastDomainAssociationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetTransitGatewayMulticastDomainAssociationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetTransitGatewayMulticastDomainAssociationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetTransitGatewayMulticastDomainAssociations.RLock()
	calls = mock.calls.GetTransitGatewayMulticastDomainAssociations
	mock.lockGetTransitGatewayMulticastDomainAssociations.RUnlock()
	return calls
}

// GetTransitGatewayPolicyTableAssociations calls GetTransitGatewayPolicyTableAssociationsFunc.
func (mock *ClientMock) GetTransitGatewayPolicyTableAssociations(ctx context.Context, params *ec2.GetTransitGatewayPolicyTableAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayPolicyTableAssociationsOutput, error) {
	if mock.GetTransitGatewayPolicyTableAssociationsFunc == nil {
		panic("ClientMock.GetTransitGatewayPolicyTableAssociationsFunc: method is nil but Client.GetTransitGatewayPolicyTableAssociations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetTransitGatewayPolicyTableAssociationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetTransitGatewayPolicyTableAssociations.Lock()
	mock.calls.GetTransitGatewayPolicyTableAssociations = append(mock.calls.GetTransitGatewayPolicyTableAssociations, callInfo)
	mock.lockGetTransitGatewayPolicyTableAssociations.Unlock()
	return mock.GetTransitGatewayPolicyTableAssociationsFunc(ctx, params, optFns...)
}

// GetTransitGatewayPolicyTableAssociationsCalls gets all the calls that were made to GetTransitGatewayPolicyTableAssociations.
// Check the length with:
//     len(mockedClient.GetTransitGatewayPolicyTableAssociationsCalls())
func (mock *ClientMock) GetTransitGatewayPolicyTableAssociationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetTransitGatewayPolicyTableAssociationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetTransitGatewayPolicyTableAssociationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetTransitGatewayPolicyTableAssociations.RLock()
	calls = mock.calls.GetTransitGatewayPolicyTableAssociations
	mock.lockGetTransitGatewayPolicyTableAssociations.RUnlock()
	return calls
}

// GetTransitGatewayPolicyTableEntries calls GetTransitGatewayPolicyTableEntriesFunc.
func (mock *ClientMock) GetTransitGatewayPolicyTableEntries(ctx context.Context, params *ec2.GetTransitGatewayPolicyTableEntriesInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayPolicyTableEntriesOutput, error) {
	if mock.GetTransitGatewayPolicyTableEntriesFunc == nil {
		panic("ClientMock.GetTransitGatewayPolicyTableEntriesFunc: method is nil but Client.GetTransitGatewayPolicyTableEntries was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetTransitGatewayPolicyTableEntriesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetTransitGatewayPolicyTableEntries.Lock()
	mock.calls.GetTransitGatewayPolicyTableEntries = append(mock.calls.GetTransitGatewayPolicyTableEntries, callInfo)
	mock.lockGetTransitGatewayPolicyTableEntries.Unlock()
	return mock.GetTransitGatewayPolicyTableEntriesFunc(ctx, params, optFns...)
}

// GetTransitGatewayPolicyTableEntriesCalls gets all the calls that were made to GetTransitGatewayPolicyTableEntries.
// Check the length with:
//     len(mockedClient.GetTransitGatewayPolicyTableEntriesCalls())
func (mock *ClientMock) GetTransitGatewayPolicyTableEntriesCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetTransitGatewayPolicyTableEntriesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetTransitGatewayPolicyTableEntriesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetTransitGatewayPolicyTableEntries.RLock()
	calls = mock.calls.GetTransitGatewayPolicyTableEntries
	mock.lockGetTransitGatewayPolicyTableEntries.RUnlock()
	return calls
}

// GetTransitGatewayPrefixListReferences calls GetTransitGatewayPrefixListReferencesFunc.
func (mock *ClientMock) GetTransitGatewayPrefixListReferences(ctx context.Context, params *ec2.GetTransitGatewayPrefixListReferencesInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayPrefixListReferencesOutput, error) {
	if mock.GetTransitGatewayPrefixListReferencesFunc == nil {
		panic("ClientMock.GetTransitGatewayPrefixListReferencesFunc: method is nil but Client.GetTransitGatewayPrefixListReferences was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetTransitGatewayPrefixListReferencesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetTransitGatewayPrefixListReferences.Lock()
	mock.calls.GetTransitGatewayPrefixListReferences = append(mock.calls.GetTransitGatewayPrefixListReferences, callInfo)
	mock.lockGetTransitGatewayPrefixListReferences.Unlock()
	return mock.GetTransitGatewayPrefixListReferencesFunc(ctx, params, optFns...)
}

// GetTransitGatewayPrefixListReferencesCalls gets all the calls that were made to GetTransitGatewayPrefixListReferences.
// Check the length with:
//     len(mockedClient.GetTransitGatewayPrefixListReferencesCalls())
func (mock *ClientMock) GetTransitGatewayPrefixListReferencesCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetTransitGatewayPrefixListReferencesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetTransitGatewayPrefixListReferencesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetTransitGatewayPrefixListReferences.RLock()
	calls = mock.calls.GetTransitGatewayPrefixListReferences
	mock.lockGetTransitGatewayPrefixListReferences.RUnlock()
	return calls
}

// GetTransitGatewayRouteTableAssociations calls GetTransitGatewayRouteTableAssociationsFunc.
func (mock *ClientMock) GetTransitGatewayRouteTableAssociations(ctx context.Context, params *ec2.GetTransitGatewayRouteTableAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
	if mock.GetTransitGatewayRouteTableAssociationsFunc == nil {
		panic("ClientMock.GetTransitGatewayRouteTableAssociationsFunc: method is nil but Client.GetTransitGatewayRouteTableAssociations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetTransitGatewayRouteTableAssociationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetTransitGatewayRouteTableAssociations.Lock()
	mock.calls.GetTransitGatewayRouteTableAssociations = append(mock.calls.GetTransitGatewayRouteTableAssociations, callInfo)
	mock.lockGetTransitGatewayRouteTableAssociations.Unlock()
	return mock.GetTransitGatewayRouteTableAssociationsFunc(ctx, params, optFns...)
}

// GetTransitGatewayRouteTableAssociationsCalls gets all the calls that were made to GetTransitGatewayRouteTableAssociations.
// Check the length with:
//     len(mockedClient.GetTransitGatewayRouteTableAssociationsCalls())
func (mock *ClientMock) GetTransitGatewayRouteTableAssociationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetTransitGatewayRouteTableAssociationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetTransitGatewayRouteTableAssociationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetTransitGatewayRouteTableAssociations.RLock()
	calls = mock.calls.GetTransitGatewayRouteTableAssociations
	mock.lockGetTransitGatewayRouteTableAssociations.RUnlock()
	return calls
}

// GetTransitGatewayRouteTablePropagations calls GetTransitGatewayRouteTablePropagationsFunc.
func (mock *ClientMock) GetTransitGatewayRouteTablePropagations(ctx context.Context, params *ec2.GetTransitGatewayRouteTablePropagationsInput, optFns ...func(*ec2.Options)) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
	if mock.GetTransitGatewayRouteTablePropagationsFunc == nil {
		panic("ClientMock.GetTransitGatewayRouteTablePropagationsFunc: method is nil but Client.GetTransitGatewayRouteTablePropagations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetTransitGatewayRouteTablePropagationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetTransitGatewayRouteTablePropagations.Lock()
	mock.calls.GetTransitGatewayRouteTablePropagations = append(mock.calls.GetTransitGatewayRouteTablePropagations, callInfo)
	mock.lockGetTransitGatewayRouteTablePropagations.Unlock()
	return mock.GetTransitGatewayRouteTablePropagationsFunc(ctx, params, optFns...)
}

// GetTransitGatewayRouteTablePropagationsCalls gets all the calls that were made to GetTransitGatewayRouteTablePropagations.
// Check the length with:
//     len(mockedClient.GetTransitGatewayRouteTablePropagationsCalls())
func (mock *ClientMock) GetTransitGatewayRouteTablePropagationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetTransitGatewayRouteTablePropagationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetTransitGatewayRouteTablePropagationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetTransitGatewayRouteTablePropagations.RLock()
	calls = mock.calls.GetTransitGatewayRouteTablePropagations
	mock.lockGetTransitGatewayRouteTablePropagations.RUnlock()
	return calls
}

// GetVpnConnectionDeviceSampleConfiguration calls GetVpnConnectionDeviceSampleConfigurationFunc.
func (mock *ClientMock) GetVpnConnectionDeviceSampleConfiguration(ctx context.Context, params *ec2.GetVpnConnectionDeviceSampleConfigurationInput, optFns ...func(*ec2.Options)) (*ec2.GetVpnConnectionDeviceSampleConfigurationOutput, error) {
	if mock.GetVpnConnectionDeviceSampleConfigurationFunc == nil {
		panic("ClientMock.GetVpnConnectionDeviceSampleConfigurationFunc: method is nil but Client.GetVpnConnectionDeviceSampleConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetVpnConnectionDeviceSampleConfigurationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetVpnConnectionDeviceSampleConfiguration.Lock()
	mock.calls.GetVpnConnectionDeviceSampleConfiguration = append(mock.calls.GetVpnConnectionDeviceSampleConfiguration, callInfo)
	mock.lockGetVpnConnectionDeviceSampleConfiguration.Unlock()
	return mock.GetVpnConnectionDeviceSampleConfigurationFunc(ctx, params, optFns...)
}

// GetVpnConnectionDeviceSampleConfigurationCalls gets all the calls that were made to GetVpnConnectionDeviceSampleConfiguration.
// Check the length with:
//     len(mockedClient.GetVpnConnectionDeviceSampleConfigurationCalls())
func (mock *ClientMock) GetVpnConnectionDeviceSampleConfigurationCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetVpnConnectionDeviceSampleConfigurationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetVpnConnectionDeviceSampleConfigurationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetVpnConnectionDeviceSampleConfiguration.RLock()
	calls = mock.calls.GetVpnConnectionDeviceSampleConfiguration
	mock.lockGetVpnConnectionDeviceSampleConfiguration.RUnlock()
	return calls
}

// GetVpnConnectionDeviceTypes calls GetVpnConnectionDeviceTypesFunc.
func (mock *ClientMock) GetVpnConnectionDeviceTypes(ctx context.Context, params *ec2.GetVpnConnectionDeviceTypesInput, optFns ...func(*ec2.Options)) (*ec2.GetVpnConnectionDeviceTypesOutput, error) {
	if mock.GetVpnConnectionDeviceTypesFunc == nil {
		panic("ClientMock.GetVpnConnectionDeviceTypesFunc: method is nil but Client.GetVpnConnectionDeviceTypes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.GetVpnConnectionDeviceTypesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetVpnConnectionDeviceTypes.Lock()
	mock.calls.GetVpnConnectionDeviceTypes = append(mock.calls.GetVpnConnectionDeviceTypes, callInfo)
	mock.lockGetVpnConnectionDeviceTypes.Unlock()
	return mock.GetVpnConnectionDeviceTypesFunc(ctx, params, optFns...)
}

// GetVpnConnectionDeviceTypesCalls gets all the calls that were made to GetVpnConnectionDeviceTypes.
// Check the length with:
//     len(mockedClient.GetVpnConnectionDeviceTypesCalls())
func (mock *ClientMock) GetVpnConnectionDeviceTypesCalls() []struct {
	Ctx    context.Context
	Params *ec2.GetVpnConnectionDeviceTypesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.GetVpnConnectionDeviceTypesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockGetVpnConnectionDeviceTypes.RLock()
	calls = mock.calls.GetVpnConnectionDeviceTypes
	mock.lockGetVpnConnectionDeviceTypes.RUnlock()
	return calls
}

// ImportClientVpnClientCertificateRevocationList calls ImportClientVpnClientCertificateRevocationListFunc.
func (mock *ClientMock) ImportClientVpnClientCertificateRevocationList(ctx context.Context, params *ec2.ImportClientVpnClientCertificateRevocationListInput, optFns ...func(*ec2.Options)) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
	if mock.ImportClientVpnClientCertificateRevocationListFunc == nil {
		panic("ClientMock.ImportClientVpnClientCertificateRevocationListFunc: method is nil but Client.ImportClientVpnClientCertificateRevocationList was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ImportClientVpnClientCertificateRevocationListInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockImportClientVpnClientCertificateRevocationList.Lock()
	mock.calls.ImportClientVpnClientCertificateRevocationList = append(mock.calls.ImportClientVpnClientCertificateRevocationList, callInfo)
	mock.lockImportClientVpnClientCertificateRevocationList.Unlock()
	return mock.ImportClientVpnClientCertificateRevocationListFunc(ctx, params, optFns...)
}

// ImportClientVpnClientCertificateRevocationListCalls gets all the calls that were made to ImportClientVpnClientCertificateRevocationList.
// Check the length with:
//     len(mockedClient.ImportClientVpnClientCertificateRevocationListCalls())
func (mock *ClientMock) ImportClientVpnClientCertificateRevocationListCalls() []struct {
	Ctx    context.Context
	Params *ec2.ImportClientVpnClientCertificateRevocationListInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ImportClientVpnClientCertificateRevocationListInput
		OptFns []func(*ec2.Options)
	}
	mock.lockImportClientVpnClientCertificateRevocationList.RLock()
	calls = mock.calls.ImportClientVpnClientCertificateRevocationList
	mock.lockImportClientVpnClientCertificateRevocationList.RUnlock()
	return calls
}

// ImportImage calls ImportImageFunc.
func (mock *ClientMock) ImportImage(ctx context.Context, params *ec2.ImportImageInput, optFns ...func(*ec2.Options)) (*ec2.ImportImageOutput, error) {
	if mock.ImportImageFunc == nil {
		panic("ClientMock.ImportImageFunc: method is nil but Client.ImportImage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ImportImageInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockImportImage.Lock()
	mock.calls.ImportImage = append(mock.calls.ImportImage, callInfo)
	mock.lockImportImage.Unlock()
	return mock.ImportImageFunc(ctx, params, optFns...)
}

// ImportImageCalls gets all the calls that were made to ImportImage.
// Check the length with:
//     len(mockedClient.ImportImageCalls())
func (mock *ClientMock) ImportImageCalls() []struct {
	Ctx    context.Context
	Params *ec2.ImportImageInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ImportImageInput
		OptFns []func(*ec2.Options)
	}
	mock.lockImportImage.RLock()
	calls = mock.calls.ImportImage
	mock.lockImportImage.RUnlock()
	return calls
}

// ImportInstance calls ImportInstanceFunc.
func (mock *ClientMock) ImportInstance(ctx context.Context, params *ec2.ImportInstanceInput, optFns ...func(*ec2.Options)) (*ec2.ImportInstanceOutput, error) {
	if mock.ImportInstanceFunc == nil {
		panic("ClientMock.ImportInstanceFunc: method is nil but Client.ImportInstance was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ImportInstanceInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockImportInstance.Lock()
	mock.calls.ImportInstance = append(mock.calls.ImportInstance, callInfo)
	mock.lockImportInstance.Unlock()
	return mock.ImportInstanceFunc(ctx, params, optFns...)
}

// ImportInstanceCalls gets all the calls that were made to ImportInstance.
// Check the length with:
//     len(mockedClient.ImportInstanceCalls())
func (mock *ClientMock) ImportInstanceCalls() []struct {
	Ctx    context.Context
	Params *ec2.ImportInstanceInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ImportInstanceInput
		OptFns []func(*ec2.Options)
	}
	mock.lockImportInstance.RLock()
	calls = mock.calls.ImportInstance
	mock.lockImportInstance.RUnlock()
	return calls
}

// ImportKeyPair calls ImportKeyPairFunc.
func (mock *ClientMock) ImportKeyPair(ctx context.Context, params *ec2.ImportKeyPairInput, optFns ...func(*ec2.Options)) (*ec2.ImportKeyPairOutput, error) {
	if mock.ImportKeyPairFunc == nil {
		panic("ClientMock.ImportKeyPairFunc: method is nil but Client.ImportKeyPair was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ImportKeyPairInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockImportKeyPair.Lock()
	mock.calls.ImportKeyPair = append(mock.calls.ImportKeyPair, callInfo)
	mock.lockImportKeyPair.Unlock()
	return mock.ImportKeyPairFunc(ctx, params, optFns...)
}

// ImportKeyPairCalls gets all the calls that were made to ImportKeyPair.
// Check the length with:
//     len(mockedClient.ImportKeyPairCalls())
func (mock *ClientMock) ImportKeyPairCalls() []struct {
	Ctx    context.Context
	Params *ec2.ImportKeyPairInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ImportKeyPairInput
		OptFns []func(*ec2.Options)
	}
	mock.lockImportKeyPair.RLock()
	calls = mock.calls.ImportKeyPair
	mock.lockImportKeyPair.RUnlock()
	return calls
}

// ImportSnapshot calls ImportSnapshotFunc.
func (mock *ClientMock) ImportSnapshot(ctx context.Context, params *ec2.ImportSnapshotInput, optFns ...func(*ec2.Options)) (*ec2.ImportSnapshotOutput, error) {
	if mock.ImportSnapshotFunc == nil {
		panic("ClientMock.ImportSnapshotFunc: method is nil but Client.ImportSnapshot was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ImportSnapshotInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockImportSnapshot.Lock()
	mock.calls.ImportSnapshot = append(mock.calls.ImportSnapshot, callInfo)
	mock.lockImportSnapshot.Unlock()
	return mock.ImportSnapshotFunc(ctx, params, optFns...)
}

// ImportSnapshotCalls gets all the calls that were made to ImportSnapshot.
// Check the length with:
//     len(mockedClient.ImportSnapshotCalls())
func (mock *ClientMock) ImportSnapshotCalls() []struct {
	Ctx    context.Context
	Params *ec2.ImportSnapshotInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ImportSnapshotInput
		OptFns []func(*ec2.Options)
	}
	mock.lockImportSnapshot.RLock()
	calls = mock.calls.ImportSnapshot
	mock.lockImportSnapshot.RUnlock()
	return calls
}

// ImportVolume calls ImportVolumeFunc.
func (mock *ClientMock) ImportVolume(ctx context.Context, params *ec2.ImportVolumeInput, optFns ...func(*ec2.Options)) (*ec2.ImportVolumeOutput, error) {
	if mock.ImportVolumeFunc == nil {
		panic("ClientMock.ImportVolumeFunc: method is nil but Client.ImportVolume was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ImportVolumeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockImportVolume.Lock()
	mock.calls.ImportVolume = append(mock.calls.ImportVolume, callInfo)
	mock.lockImportVolume.Unlock()
	return mock.ImportVolumeFunc(ctx, params, optFns...)
}

// ImportVolumeCalls gets all the calls that were made to ImportVolume.
// Check the length with:
//     len(mockedClient.ImportVolumeCalls())
func (mock *ClientMock) ImportVolumeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ImportVolumeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ImportVolumeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockImportVolume.RLock()
	calls = mock.calls.ImportVolume
	mock.lockImportVolume.RUnlock()
	return calls
}

// ListImagesInRecycleBin calls ListImagesInRecycleBinFunc.
func (mock *ClientMock) ListImagesInRecycleBin(ctx context.Context, params *ec2.ListImagesInRecycleBinInput, optFns ...func(*ec2.Options)) (*ec2.ListImagesInRecycleBinOutput, error) {
	if mock.ListImagesInRecycleBinFunc == nil {
		panic("ClientMock.ListImagesInRecycleBinFunc: method is nil but Client.ListImagesInRecycleBin was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ListImagesInRecycleBinInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListImagesInRecycleBin.Lock()
	mock.calls.ListImagesInRecycleBin = append(mock.calls.ListImagesInRecycleBin, callInfo)
	mock.lockListImagesInRecycleBin.Unlock()
	return mock.ListImagesInRecycleBinFunc(ctx, params, optFns...)
}

// ListImagesInRecycleBinCalls gets all the calls that were made to ListImagesInRecycleBin.
// Check the length with:
//     len(mockedClient.ListImagesInRecycleBinCalls())
func (mock *ClientMock) ListImagesInRecycleBinCalls() []struct {
	Ctx    context.Context
	Params *ec2.ListImagesInRecycleBinInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ListImagesInRecycleBinInput
		OptFns []func(*ec2.Options)
	}
	mock.lockListImagesInRecycleBin.RLock()
	calls = mock.calls.ListImagesInRecycleBin
	mock.lockListImagesInRecycleBin.RUnlock()
	return calls
}

// ListSnapshotsInRecycleBin calls ListSnapshotsInRecycleBinFunc.
func (mock *ClientMock) ListSnapshotsInRecycleBin(ctx context.Context, params *ec2.ListSnapshotsInRecycleBinInput, optFns ...func(*ec2.Options)) (*ec2.ListSnapshotsInRecycleBinOutput, error) {
	if mock.ListSnapshotsInRecycleBinFunc == nil {
		panic("ClientMock.ListSnapshotsInRecycleBinFunc: method is nil but Client.ListSnapshotsInRecycleBin was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ListSnapshotsInRecycleBinInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockListSnapshotsInRecycleBin.Lock()
	mock.calls.ListSnapshotsInRecycleBin = append(mock.calls.ListSnapshotsInRecycleBin, callInfo)
	mock.lockListSnapshotsInRecycleBin.Unlock()
	return mock.ListSnapshotsInRecycleBinFunc(ctx, params, optFns...)
}

// ListSnapshotsInRecycleBinCalls gets all the calls that were made to ListSnapshotsInRecycleBin.
// Check the length with:
//     len(mockedClient.ListSnapshotsInRecycleBinCalls())
func (mock *ClientMock) ListSnapshotsInRecycleBinCalls() []struct {
	Ctx    context.Context
	Params *ec2.ListSnapshotsInRecycleBinInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ListSnapshotsInRecycleBinInput
		OptFns []func(*ec2.Options)
	}
	mock.lockListSnapshotsInRecycleBin.RLock()
	calls = mock.calls.ListSnapshotsInRecycleBin
	mock.lockListSnapshotsInRecycleBin.RUnlock()
	return calls
}

// ModifyAddressAttribute calls ModifyAddressAttributeFunc.
func (mock *ClientMock) ModifyAddressAttribute(ctx context.Context, params *ec2.ModifyAddressAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyAddressAttributeOutput, error) {
	if mock.ModifyAddressAttributeFunc == nil {
		panic("ClientMock.ModifyAddressAttributeFunc: method is nil but Client.ModifyAddressAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyAddressAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyAddressAttribute.Lock()
	mock.calls.ModifyAddressAttribute = append(mock.calls.ModifyAddressAttribute, callInfo)
	mock.lockModifyAddressAttribute.Unlock()
	return mock.ModifyAddressAttributeFunc(ctx, params, optFns...)
}

// ModifyAddressAttributeCalls gets all the calls that were made to ModifyAddressAttribute.
// Check the length with:
//     len(mockedClient.ModifyAddressAttributeCalls())
func (mock *ClientMock) ModifyAddressAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyAddressAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyAddressAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyAddressAttribute.RLock()
	calls = mock.calls.ModifyAddressAttribute
	mock.lockModifyAddressAttribute.RUnlock()
	return calls
}

// ModifyAvailabilityZoneGroup calls ModifyAvailabilityZoneGroupFunc.
func (mock *ClientMock) ModifyAvailabilityZoneGroup(ctx context.Context, params *ec2.ModifyAvailabilityZoneGroupInput, optFns ...func(*ec2.Options)) (*ec2.ModifyAvailabilityZoneGroupOutput, error) {
	if mock.ModifyAvailabilityZoneGroupFunc == nil {
		panic("ClientMock.ModifyAvailabilityZoneGroupFunc: method is nil but Client.ModifyAvailabilityZoneGroup was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyAvailabilityZoneGroupInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyAvailabilityZoneGroup.Lock()
	mock.calls.ModifyAvailabilityZoneGroup = append(mock.calls.ModifyAvailabilityZoneGroup, callInfo)
	mock.lockModifyAvailabilityZoneGroup.Unlock()
	return mock.ModifyAvailabilityZoneGroupFunc(ctx, params, optFns...)
}

// ModifyAvailabilityZoneGroupCalls gets all the calls that were made to ModifyAvailabilityZoneGroup.
// Check the length with:
//     len(mockedClient.ModifyAvailabilityZoneGroupCalls())
func (mock *ClientMock) ModifyAvailabilityZoneGroupCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyAvailabilityZoneGroupInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyAvailabilityZoneGroupInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyAvailabilityZoneGroup.RLock()
	calls = mock.calls.ModifyAvailabilityZoneGroup
	mock.lockModifyAvailabilityZoneGroup.RUnlock()
	return calls
}

// ModifyCapacityReservation calls ModifyCapacityReservationFunc.
func (mock *ClientMock) ModifyCapacityReservation(ctx context.Context, params *ec2.ModifyCapacityReservationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyCapacityReservationOutput, error) {
	if mock.ModifyCapacityReservationFunc == nil {
		panic("ClientMock.ModifyCapacityReservationFunc: method is nil but Client.ModifyCapacityReservation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyCapacityReservationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyCapacityReservation.Lock()
	mock.calls.ModifyCapacityReservation = append(mock.calls.ModifyCapacityReservation, callInfo)
	mock.lockModifyCapacityReservation.Unlock()
	return mock.ModifyCapacityReservationFunc(ctx, params, optFns...)
}

// ModifyCapacityReservationCalls gets all the calls that were made to ModifyCapacityReservation.
// Check the length with:
//     len(mockedClient.ModifyCapacityReservationCalls())
func (mock *ClientMock) ModifyCapacityReservationCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyCapacityReservationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyCapacityReservationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyCapacityReservation.RLock()
	calls = mock.calls.ModifyCapacityReservation
	mock.lockModifyCapacityReservation.RUnlock()
	return calls
}

// ModifyCapacityReservationFleet calls ModifyCapacityReservationFleetFunc.
func (mock *ClientMock) ModifyCapacityReservationFleet(ctx context.Context, params *ec2.ModifyCapacityReservationFleetInput, optFns ...func(*ec2.Options)) (*ec2.ModifyCapacityReservationFleetOutput, error) {
	if mock.ModifyCapacityReservationFleetFunc == nil {
		panic("ClientMock.ModifyCapacityReservationFleetFunc: method is nil but Client.ModifyCapacityReservationFleet was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyCapacityReservationFleetInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyCapacityReservationFleet.Lock()
	mock.calls.ModifyCapacityReservationFleet = append(mock.calls.ModifyCapacityReservationFleet, callInfo)
	mock.lockModifyCapacityReservationFleet.Unlock()
	return mock.ModifyCapacityReservationFleetFunc(ctx, params, optFns...)
}

// ModifyCapacityReservationFleetCalls gets all the calls that were made to ModifyCapacityReservationFleet.
// Check the length with:
//     len(mockedClient.ModifyCapacityReservationFleetCalls())
func (mock *ClientMock) ModifyCapacityReservationFleetCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyCapacityReservationFleetInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyCapacityReservationFleetInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyCapacityReservationFleet.RLock()
	calls = mock.calls.ModifyCapacityReservationFleet
	mock.lockModifyCapacityReservationFleet.RUnlock()
	return calls
}

// ModifyClientVpnEndpoint calls ModifyClientVpnEndpointFunc.
func (mock *ClientMock) ModifyClientVpnEndpoint(ctx context.Context, params *ec2.ModifyClientVpnEndpointInput, optFns ...func(*ec2.Options)) (*ec2.ModifyClientVpnEndpointOutput, error) {
	if mock.ModifyClientVpnEndpointFunc == nil {
		panic("ClientMock.ModifyClientVpnEndpointFunc: method is nil but Client.ModifyClientVpnEndpoint was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyClientVpnEndpointInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyClientVpnEndpoint.Lock()
	mock.calls.ModifyClientVpnEndpoint = append(mock.calls.ModifyClientVpnEndpoint, callInfo)
	mock.lockModifyClientVpnEndpoint.Unlock()
	return mock.ModifyClientVpnEndpointFunc(ctx, params, optFns...)
}

// ModifyClientVpnEndpointCalls gets all the calls that were made to ModifyClientVpnEndpoint.
// Check the length with:
//     len(mockedClient.ModifyClientVpnEndpointCalls())
func (mock *ClientMock) ModifyClientVpnEndpointCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyClientVpnEndpointInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyClientVpnEndpointInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyClientVpnEndpoint.RLock()
	calls = mock.calls.ModifyClientVpnEndpoint
	mock.lockModifyClientVpnEndpoint.RUnlock()
	return calls
}

// ModifyDefaultCreditSpecification calls ModifyDefaultCreditSpecificationFunc.
func (mock *ClientMock) ModifyDefaultCreditSpecification(ctx context.Context, params *ec2.ModifyDefaultCreditSpecificationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyDefaultCreditSpecificationOutput, error) {
	if mock.ModifyDefaultCreditSpecificationFunc == nil {
		panic("ClientMock.ModifyDefaultCreditSpecificationFunc: method is nil but Client.ModifyDefaultCreditSpecification was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyDefaultCreditSpecificationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyDefaultCreditSpecification.Lock()
	mock.calls.ModifyDefaultCreditSpecification = append(mock.calls.ModifyDefaultCreditSpecification, callInfo)
	mock.lockModifyDefaultCreditSpecification.Unlock()
	return mock.ModifyDefaultCreditSpecificationFunc(ctx, params, optFns...)
}

// ModifyDefaultCreditSpecificationCalls gets all the calls that were made to ModifyDefaultCreditSpecification.
// Check the length with:
//     len(mockedClient.ModifyDefaultCreditSpecificationCalls())
func (mock *ClientMock) ModifyDefaultCreditSpecificationCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyDefaultCreditSpecificationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyDefaultCreditSpecificationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyDefaultCreditSpecification.RLock()
	calls = mock.calls.ModifyDefaultCreditSpecification
	mock.lockModifyDefaultCreditSpecification.RUnlock()
	return calls
}

// ModifyEbsDefaultKmsKeyId calls ModifyEbsDefaultKmsKeyIdFunc.
func (mock *ClientMock) ModifyEbsDefaultKmsKeyId(ctx context.Context, params *ec2.ModifyEbsDefaultKmsKeyIdInput, optFns ...func(*ec2.Options)) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error) {
	if mock.ModifyEbsDefaultKmsKeyIdFunc == nil {
		panic("ClientMock.ModifyEbsDefaultKmsKeyIdFunc: method is nil but Client.ModifyEbsDefaultKmsKeyId was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyEbsDefaultKmsKeyIdInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyEbsDefaultKmsKeyId.Lock()
	mock.calls.ModifyEbsDefaultKmsKeyId = append(mock.calls.ModifyEbsDefaultKmsKeyId, callInfo)
	mock.lockModifyEbsDefaultKmsKeyId.Unlock()
	return mock.ModifyEbsDefaultKmsKeyIdFunc(ctx, params, optFns...)
}

// ModifyEbsDefaultKmsKeyIdCalls gets all the calls that were made to ModifyEbsDefaultKmsKeyId.
// Check the length with:
//     len(mockedClient.ModifyEbsDefaultKmsKeyIdCalls())
func (mock *ClientMock) ModifyEbsDefaultKmsKeyIdCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyEbsDefaultKmsKeyIdInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyEbsDefaultKmsKeyIdInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyEbsDefaultKmsKeyId.RLock()
	calls = mock.calls.ModifyEbsDefaultKmsKeyId
	mock.lockModifyEbsDefaultKmsKeyId.RUnlock()
	return calls
}

// ModifyFleet calls ModifyFleetFunc.
func (mock *ClientMock) ModifyFleet(ctx context.Context, params *ec2.ModifyFleetInput, optFns ...func(*ec2.Options)) (*ec2.ModifyFleetOutput, error) {
	if mock.ModifyFleetFunc == nil {
		panic("ClientMock.ModifyFleetFunc: method is nil but Client.ModifyFleet was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyFleetInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyFleet.Lock()
	mock.calls.ModifyFleet = append(mock.calls.ModifyFleet, callInfo)
	mock.lockModifyFleet.Unlock()
	return mock.ModifyFleetFunc(ctx, params, optFns...)
}

// ModifyFleetCalls gets all the calls that were made to ModifyFleet.
// Check the length with:
//     len(mockedClient.ModifyFleetCalls())
func (mock *ClientMock) ModifyFleetCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyFleetInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyFleetInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyFleet.RLock()
	calls = mock.calls.ModifyFleet
	mock.lockModifyFleet.RUnlock()
	return calls
}

// ModifyFpgaImageAttribute calls ModifyFpgaImageAttributeFunc.
func (mock *ClientMock) ModifyFpgaImageAttribute(ctx context.Context, params *ec2.ModifyFpgaImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyFpgaImageAttributeOutput, error) {
	if mock.ModifyFpgaImageAttributeFunc == nil {
		panic("ClientMock.ModifyFpgaImageAttributeFunc: method is nil but Client.ModifyFpgaImageAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyFpgaImageAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyFpgaImageAttribute.Lock()
	mock.calls.ModifyFpgaImageAttribute = append(mock.calls.ModifyFpgaImageAttribute, callInfo)
	mock.lockModifyFpgaImageAttribute.Unlock()
	return mock.ModifyFpgaImageAttributeFunc(ctx, params, optFns...)
}

// ModifyFpgaImageAttributeCalls gets all the calls that were made to ModifyFpgaImageAttribute.
// Check the length with:
//     len(mockedClient.ModifyFpgaImageAttributeCalls())
func (mock *ClientMock) ModifyFpgaImageAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyFpgaImageAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyFpgaImageAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyFpgaImageAttribute.RLock()
	calls = mock.calls.ModifyFpgaImageAttribute
	mock.lockModifyFpgaImageAttribute.RUnlock()
	return calls
}

// ModifyHosts calls ModifyHostsFunc.
func (mock *ClientMock) ModifyHosts(ctx context.Context, params *ec2.ModifyHostsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyHostsOutput, error) {
	if mock.ModifyHostsFunc == nil {
		panic("ClientMock.ModifyHostsFunc: method is nil but Client.ModifyHosts was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyHostsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyHosts.Lock()
	mock.calls.ModifyHosts = append(mock.calls.ModifyHosts, callInfo)
	mock.lockModifyHosts.Unlock()
	return mock.ModifyHostsFunc(ctx, params, optFns...)
}

// ModifyHostsCalls gets all the calls that were made to ModifyHosts.
// Check the length with:
//     len(mockedClient.ModifyHostsCalls())
func (mock *ClientMock) ModifyHostsCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyHostsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyHostsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyHosts.RLock()
	calls = mock.calls.ModifyHosts
	mock.lockModifyHosts.RUnlock()
	return calls
}

// ModifyIdFormat calls ModifyIdFormatFunc.
func (mock *ClientMock) ModifyIdFormat(ctx context.Context, params *ec2.ModifyIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIdFormatOutput, error) {
	if mock.ModifyIdFormatFunc == nil {
		panic("ClientMock.ModifyIdFormatFunc: method is nil but Client.ModifyIdFormat was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyIdFormatInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyIdFormat.Lock()
	mock.calls.ModifyIdFormat = append(mock.calls.ModifyIdFormat, callInfo)
	mock.lockModifyIdFormat.Unlock()
	return mock.ModifyIdFormatFunc(ctx, params, optFns...)
}

// ModifyIdFormatCalls gets all the calls that were made to ModifyIdFormat.
// Check the length with:
//     len(mockedClient.ModifyIdFormatCalls())
func (mock *ClientMock) ModifyIdFormatCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyIdFormatInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyIdFormatInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyIdFormat.RLock()
	calls = mock.calls.ModifyIdFormat
	mock.lockModifyIdFormat.RUnlock()
	return calls
}

// ModifyIdentityIdFormat calls ModifyIdentityIdFormatFunc.
func (mock *ClientMock) ModifyIdentityIdFormat(ctx context.Context, params *ec2.ModifyIdentityIdFormatInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIdentityIdFormatOutput, error) {
	if mock.ModifyIdentityIdFormatFunc == nil {
		panic("ClientMock.ModifyIdentityIdFormatFunc: method is nil but Client.ModifyIdentityIdFormat was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyIdentityIdFormatInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyIdentityIdFormat.Lock()
	mock.calls.ModifyIdentityIdFormat = append(mock.calls.ModifyIdentityIdFormat, callInfo)
	mock.lockModifyIdentityIdFormat.Unlock()
	return mock.ModifyIdentityIdFormatFunc(ctx, params, optFns...)
}

// ModifyIdentityIdFormatCalls gets all the calls that were made to ModifyIdentityIdFormat.
// Check the length with:
//     len(mockedClient.ModifyIdentityIdFormatCalls())
func (mock *ClientMock) ModifyIdentityIdFormatCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyIdentityIdFormatInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyIdentityIdFormatInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyIdentityIdFormat.RLock()
	calls = mock.calls.ModifyIdentityIdFormat
	mock.lockModifyIdentityIdFormat.RUnlock()
	return calls
}

// ModifyImageAttribute calls ModifyImageAttributeFunc.
func (mock *ClientMock) ModifyImageAttribute(ctx context.Context, params *ec2.ModifyImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyImageAttributeOutput, error) {
	if mock.ModifyImageAttributeFunc == nil {
		panic("ClientMock.ModifyImageAttributeFunc: method is nil but Client.ModifyImageAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyImageAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyImageAttribute.Lock()
	mock.calls.ModifyImageAttribute = append(mock.calls.ModifyImageAttribute, callInfo)
	mock.lockModifyImageAttribute.Unlock()
	return mock.ModifyImageAttributeFunc(ctx, params, optFns...)
}

// ModifyImageAttributeCalls gets all the calls that were made to ModifyImageAttribute.
// Check the length with:
//     len(mockedClient.ModifyImageAttributeCalls())
func (mock *ClientMock) ModifyImageAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyImageAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyImageAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyImageAttribute.RLock()
	calls = mock.calls.ModifyImageAttribute
	mock.lockModifyImageAttribute.RUnlock()
	return calls
}

// ModifyInstanceAttribute calls ModifyInstanceAttributeFunc.
func (mock *ClientMock) ModifyInstanceAttribute(ctx context.Context, params *ec2.ModifyInstanceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceAttributeOutput, error) {
	if mock.ModifyInstanceAttributeFunc == nil {
		panic("ClientMock.ModifyInstanceAttributeFunc: method is nil but Client.ModifyInstanceAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyInstanceAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyInstanceAttribute.Lock()
	mock.calls.ModifyInstanceAttribute = append(mock.calls.ModifyInstanceAttribute, callInfo)
	mock.lockModifyInstanceAttribute.Unlock()
	return mock.ModifyInstanceAttributeFunc(ctx, params, optFns...)
}

// ModifyInstanceAttributeCalls gets all the calls that were made to ModifyInstanceAttribute.
// Check the length with:
//     len(mockedClient.ModifyInstanceAttributeCalls())
func (mock *ClientMock) ModifyInstanceAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyInstanceAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyInstanceAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyInstanceAttribute.RLock()
	calls = mock.calls.ModifyInstanceAttribute
	mock.lockModifyInstanceAttribute.RUnlock()
	return calls
}

// ModifyInstanceCapacityReservationAttributes calls ModifyInstanceCapacityReservationAttributesFunc.
func (mock *ClientMock) ModifyInstanceCapacityReservationAttributes(ctx context.Context, params *ec2.ModifyInstanceCapacityReservationAttributesInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
	if mock.ModifyInstanceCapacityReservationAttributesFunc == nil {
		panic("ClientMock.ModifyInstanceCapacityReservationAttributesFunc: method is nil but Client.ModifyInstanceCapacityReservationAttributes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyInstanceCapacityReservationAttributesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyInstanceCapacityReservationAttributes.Lock()
	mock.calls.ModifyInstanceCapacityReservationAttributes = append(mock.calls.ModifyInstanceCapacityReservationAttributes, callInfo)
	mock.lockModifyInstanceCapacityReservationAttributes.Unlock()
	return mock.ModifyInstanceCapacityReservationAttributesFunc(ctx, params, optFns...)
}

// ModifyInstanceCapacityReservationAttributesCalls gets all the calls that were made to ModifyInstanceCapacityReservationAttributes.
// Check the length with:
//     len(mockedClient.ModifyInstanceCapacityReservationAttributesCalls())
func (mock *ClientMock) ModifyInstanceCapacityReservationAttributesCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyInstanceCapacityReservationAttributesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyInstanceCapacityReservationAttributesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyInstanceCapacityReservationAttributes.RLock()
	calls = mock.calls.ModifyInstanceCapacityReservationAttributes
	mock.lockModifyInstanceCapacityReservationAttributes.RUnlock()
	return calls
}

// ModifyInstanceCreditSpecification calls ModifyInstanceCreditSpecificationFunc.
func (mock *ClientMock) ModifyInstanceCreditSpecification(ctx context.Context, params *ec2.ModifyInstanceCreditSpecificationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
	if mock.ModifyInstanceCreditSpecificationFunc == nil {
		panic("ClientMock.ModifyInstanceCreditSpecificationFunc: method is nil but Client.ModifyInstanceCreditSpecification was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyInstanceCreditSpecificationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyInstanceCreditSpecification.Lock()
	mock.calls.ModifyInstanceCreditSpecification = append(mock.calls.ModifyInstanceCreditSpecification, callInfo)
	mock.lockModifyInstanceCreditSpecification.Unlock()
	return mock.ModifyInstanceCreditSpecificationFunc(ctx, params, optFns...)
}

// ModifyInstanceCreditSpecificationCalls gets all the calls that were made to ModifyInstanceCreditSpecification.
// Check the length with:
//     len(mockedClient.ModifyInstanceCreditSpecificationCalls())
func (mock *ClientMock) ModifyInstanceCreditSpecificationCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyInstanceCreditSpecificationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyInstanceCreditSpecificationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyInstanceCreditSpecification.RLock()
	calls = mock.calls.ModifyInstanceCreditSpecification
	mock.lockModifyInstanceCreditSpecification.RUnlock()
	return calls
}

// ModifyInstanceEventStartTime calls ModifyInstanceEventStartTimeFunc.
func (mock *ClientMock) ModifyInstanceEventStartTime(ctx context.Context, params *ec2.ModifyInstanceEventStartTimeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceEventStartTimeOutput, error) {
	if mock.ModifyInstanceEventStartTimeFunc == nil {
		panic("ClientMock.ModifyInstanceEventStartTimeFunc: method is nil but Client.ModifyInstanceEventStartTime was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyInstanceEventStartTimeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyInstanceEventStartTime.Lock()
	mock.calls.ModifyInstanceEventStartTime = append(mock.calls.ModifyInstanceEventStartTime, callInfo)
	mock.lockModifyInstanceEventStartTime.Unlock()
	return mock.ModifyInstanceEventStartTimeFunc(ctx, params, optFns...)
}

// ModifyInstanceEventStartTimeCalls gets all the calls that were made to ModifyInstanceEventStartTime.
// Check the length with:
//     len(mockedClient.ModifyInstanceEventStartTimeCalls())
func (mock *ClientMock) ModifyInstanceEventStartTimeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyInstanceEventStartTimeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyInstanceEventStartTimeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyInstanceEventStartTime.RLock()
	calls = mock.calls.ModifyInstanceEventStartTime
	mock.lockModifyInstanceEventStartTime.RUnlock()
	return calls
}

// ModifyInstanceEventWindow calls ModifyInstanceEventWindowFunc.
func (mock *ClientMock) ModifyInstanceEventWindow(ctx context.Context, params *ec2.ModifyInstanceEventWindowInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceEventWindowOutput, error) {
	if mock.ModifyInstanceEventWindowFunc == nil {
		panic("ClientMock.ModifyInstanceEventWindowFunc: method is nil but Client.ModifyInstanceEventWindow was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyInstanceEventWindowInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyInstanceEventWindow.Lock()
	mock.calls.ModifyInstanceEventWindow = append(mock.calls.ModifyInstanceEventWindow, callInfo)
	mock.lockModifyInstanceEventWindow.Unlock()
	return mock.ModifyInstanceEventWindowFunc(ctx, params, optFns...)
}

// ModifyInstanceEventWindowCalls gets all the calls that were made to ModifyInstanceEventWindow.
// Check the length with:
//     len(mockedClient.ModifyInstanceEventWindowCalls())
func (mock *ClientMock) ModifyInstanceEventWindowCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyInstanceEventWindowInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyInstanceEventWindowInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyInstanceEventWindow.RLock()
	calls = mock.calls.ModifyInstanceEventWindow
	mock.lockModifyInstanceEventWindow.RUnlock()
	return calls
}

// ModifyInstanceMaintenanceOptions calls ModifyInstanceMaintenanceOptionsFunc.
func (mock *ClientMock) ModifyInstanceMaintenanceOptions(ctx context.Context, params *ec2.ModifyInstanceMaintenanceOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceMaintenanceOptionsOutput, error) {
	if mock.ModifyInstanceMaintenanceOptionsFunc == nil {
		panic("ClientMock.ModifyInstanceMaintenanceOptionsFunc: method is nil but Client.ModifyInstanceMaintenanceOptions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyInstanceMaintenanceOptionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyInstanceMaintenanceOptions.Lock()
	mock.calls.ModifyInstanceMaintenanceOptions = append(mock.calls.ModifyInstanceMaintenanceOptions, callInfo)
	mock.lockModifyInstanceMaintenanceOptions.Unlock()
	return mock.ModifyInstanceMaintenanceOptionsFunc(ctx, params, optFns...)
}

// ModifyInstanceMaintenanceOptionsCalls gets all the calls that were made to ModifyInstanceMaintenanceOptions.
// Check the length with:
//     len(mockedClient.ModifyInstanceMaintenanceOptionsCalls())
func (mock *ClientMock) ModifyInstanceMaintenanceOptionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyInstanceMaintenanceOptionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyInstanceMaintenanceOptionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyInstanceMaintenanceOptions.RLock()
	calls = mock.calls.ModifyInstanceMaintenanceOptions
	mock.lockModifyInstanceMaintenanceOptions.RUnlock()
	return calls
}

// ModifyInstanceMetadataOptions calls ModifyInstanceMetadataOptionsFunc.
func (mock *ClientMock) ModifyInstanceMetadataOptions(ctx context.Context, params *ec2.ModifyInstanceMetadataOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstanceMetadataOptionsOutput, error) {
	if mock.ModifyInstanceMetadataOptionsFunc == nil {
		panic("ClientMock.ModifyInstanceMetadataOptionsFunc: method is nil but Client.ModifyInstanceMetadataOptions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyInstanceMetadataOptionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyInstanceMetadataOptions.Lock()
	mock.calls.ModifyInstanceMetadataOptions = append(mock.calls.ModifyInstanceMetadataOptions, callInfo)
	mock.lockModifyInstanceMetadataOptions.Unlock()
	return mock.ModifyInstanceMetadataOptionsFunc(ctx, params, optFns...)
}

// ModifyInstanceMetadataOptionsCalls gets all the calls that were made to ModifyInstanceMetadataOptions.
// Check the length with:
//     len(mockedClient.ModifyInstanceMetadataOptionsCalls())
func (mock *ClientMock) ModifyInstanceMetadataOptionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyInstanceMetadataOptionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyInstanceMetadataOptionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyInstanceMetadataOptions.RLock()
	calls = mock.calls.ModifyInstanceMetadataOptions
	mock.lockModifyInstanceMetadataOptions.RUnlock()
	return calls
}

// ModifyInstancePlacement calls ModifyInstancePlacementFunc.
func (mock *ClientMock) ModifyInstancePlacement(ctx context.Context, params *ec2.ModifyInstancePlacementInput, optFns ...func(*ec2.Options)) (*ec2.ModifyInstancePlacementOutput, error) {
	if mock.ModifyInstancePlacementFunc == nil {
		panic("ClientMock.ModifyInstancePlacementFunc: method is nil but Client.ModifyInstancePlacement was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyInstancePlacementInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyInstancePlacement.Lock()
	mock.calls.ModifyInstancePlacement = append(mock.calls.ModifyInstancePlacement, callInfo)
	mock.lockModifyInstancePlacement.Unlock()
	return mock.ModifyInstancePlacementFunc(ctx, params, optFns...)
}

// ModifyInstancePlacementCalls gets all the calls that were made to ModifyInstancePlacement.
// Check the length with:
//     len(mockedClient.ModifyInstancePlacementCalls())
func (mock *ClientMock) ModifyInstancePlacementCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyInstancePlacementInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyInstancePlacementInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyInstancePlacement.RLock()
	calls = mock.calls.ModifyInstancePlacement
	mock.lockModifyInstancePlacement.RUnlock()
	return calls
}

// ModifyIpam calls ModifyIpamFunc.
func (mock *ClientMock) ModifyIpam(ctx context.Context, params *ec2.ModifyIpamInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIpamOutput, error) {
	if mock.ModifyIpamFunc == nil {
		panic("ClientMock.ModifyIpamFunc: method is nil but Client.ModifyIpam was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyIpamInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyIpam.Lock()
	mock.calls.ModifyIpam = append(mock.calls.ModifyIpam, callInfo)
	mock.lockModifyIpam.Unlock()
	return mock.ModifyIpamFunc(ctx, params, optFns...)
}

// ModifyIpamCalls gets all the calls that were made to ModifyIpam.
// Check the length with:
//     len(mockedClient.ModifyIpamCalls())
func (mock *ClientMock) ModifyIpamCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyIpamInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyIpamInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyIpam.RLock()
	calls = mock.calls.ModifyIpam
	mock.lockModifyIpam.RUnlock()
	return calls
}

// ModifyIpamPool calls ModifyIpamPoolFunc.
func (mock *ClientMock) ModifyIpamPool(ctx context.Context, params *ec2.ModifyIpamPoolInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIpamPoolOutput, error) {
	if mock.ModifyIpamPoolFunc == nil {
		panic("ClientMock.ModifyIpamPoolFunc: method is nil but Client.ModifyIpamPool was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyIpamPoolInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyIpamPool.Lock()
	mock.calls.ModifyIpamPool = append(mock.calls.ModifyIpamPool, callInfo)
	mock.lockModifyIpamPool.Unlock()
	return mock.ModifyIpamPoolFunc(ctx, params, optFns...)
}

// ModifyIpamPoolCalls gets all the calls that were made to ModifyIpamPool.
// Check the length with:
//     len(mockedClient.ModifyIpamPoolCalls())
func (mock *ClientMock) ModifyIpamPoolCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyIpamPoolInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyIpamPoolInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyIpamPool.RLock()
	calls = mock.calls.ModifyIpamPool
	mock.lockModifyIpamPool.RUnlock()
	return calls
}

// ModifyIpamResourceCidr calls ModifyIpamResourceCidrFunc.
func (mock *ClientMock) ModifyIpamResourceCidr(ctx context.Context, params *ec2.ModifyIpamResourceCidrInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIpamResourceCidrOutput, error) {
	if mock.ModifyIpamResourceCidrFunc == nil {
		panic("ClientMock.ModifyIpamResourceCidrFunc: method is nil but Client.ModifyIpamResourceCidr was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyIpamResourceCidrInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyIpamResourceCidr.Lock()
	mock.calls.ModifyIpamResourceCidr = append(mock.calls.ModifyIpamResourceCidr, callInfo)
	mock.lockModifyIpamResourceCidr.Unlock()
	return mock.ModifyIpamResourceCidrFunc(ctx, params, optFns...)
}

// ModifyIpamResourceCidrCalls gets all the calls that were made to ModifyIpamResourceCidr.
// Check the length with:
//     len(mockedClient.ModifyIpamResourceCidrCalls())
func (mock *ClientMock) ModifyIpamResourceCidrCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyIpamResourceCidrInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyIpamResourceCidrInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyIpamResourceCidr.RLock()
	calls = mock.calls.ModifyIpamResourceCidr
	mock.lockModifyIpamResourceCidr.RUnlock()
	return calls
}

// ModifyIpamScope calls ModifyIpamScopeFunc.
func (mock *ClientMock) ModifyIpamScope(ctx context.Context, params *ec2.ModifyIpamScopeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyIpamScopeOutput, error) {
	if mock.ModifyIpamScopeFunc == nil {
		panic("ClientMock.ModifyIpamScopeFunc: method is nil but Client.ModifyIpamScope was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyIpamScopeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyIpamScope.Lock()
	mock.calls.ModifyIpamScope = append(mock.calls.ModifyIpamScope, callInfo)
	mock.lockModifyIpamScope.Unlock()
	return mock.ModifyIpamScopeFunc(ctx, params, optFns...)
}

// ModifyIpamScopeCalls gets all the calls that were made to ModifyIpamScope.
// Check the length with:
//     len(mockedClient.ModifyIpamScopeCalls())
func (mock *ClientMock) ModifyIpamScopeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyIpamScopeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyIpamScopeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyIpamScope.RLock()
	calls = mock.calls.ModifyIpamScope
	mock.lockModifyIpamScope.RUnlock()
	return calls
}

// ModifyLaunchTemplate calls ModifyLaunchTemplateFunc.
func (mock *ClientMock) ModifyLaunchTemplate(ctx context.Context, params *ec2.ModifyLaunchTemplateInput, optFns ...func(*ec2.Options)) (*ec2.ModifyLaunchTemplateOutput, error) {
	if mock.ModifyLaunchTemplateFunc == nil {
		panic("ClientMock.ModifyLaunchTemplateFunc: method is nil but Client.ModifyLaunchTemplate was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyLaunchTemplateInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyLaunchTemplate.Lock()
	mock.calls.ModifyLaunchTemplate = append(mock.calls.ModifyLaunchTemplate, callInfo)
	mock.lockModifyLaunchTemplate.Unlock()
	return mock.ModifyLaunchTemplateFunc(ctx, params, optFns...)
}

// ModifyLaunchTemplateCalls gets all the calls that were made to ModifyLaunchTemplate.
// Check the length with:
//     len(mockedClient.ModifyLaunchTemplateCalls())
func (mock *ClientMock) ModifyLaunchTemplateCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyLaunchTemplateInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyLaunchTemplateInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyLaunchTemplate.RLock()
	calls = mock.calls.ModifyLaunchTemplate
	mock.lockModifyLaunchTemplate.RUnlock()
	return calls
}

// ModifyManagedPrefixList calls ModifyManagedPrefixListFunc.
func (mock *ClientMock) ModifyManagedPrefixList(ctx context.Context, params *ec2.ModifyManagedPrefixListInput, optFns ...func(*ec2.Options)) (*ec2.ModifyManagedPrefixListOutput, error) {
	if mock.ModifyManagedPrefixListFunc == nil {
		panic("ClientMock.ModifyManagedPrefixListFunc: method is nil but Client.ModifyManagedPrefixList was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyManagedPrefixListInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyManagedPrefixList.Lock()
	mock.calls.ModifyManagedPrefixList = append(mock.calls.ModifyManagedPrefixList, callInfo)
	mock.lockModifyManagedPrefixList.Unlock()
	return mock.ModifyManagedPrefixListFunc(ctx, params, optFns...)
}

// ModifyManagedPrefixListCalls gets all the calls that were made to ModifyManagedPrefixList.
// Check the length with:
//     len(mockedClient.ModifyManagedPrefixListCalls())
func (mock *ClientMock) ModifyManagedPrefixListCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyManagedPrefixListInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyManagedPrefixListInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyManagedPrefixList.RLock()
	calls = mock.calls.ModifyManagedPrefixList
	mock.lockModifyManagedPrefixList.RUnlock()
	return calls
}

// ModifyNetworkInterfaceAttribute calls ModifyNetworkInterfaceAttributeFunc.
func (mock *ClientMock) ModifyNetworkInterfaceAttribute(ctx context.Context, params *ec2.ModifyNetworkInterfaceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	if mock.ModifyNetworkInterfaceAttributeFunc == nil {
		panic("ClientMock.ModifyNetworkInterfaceAttributeFunc: method is nil but Client.ModifyNetworkInterfaceAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyNetworkInterfaceAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyNetworkInterfaceAttribute.Lock()
	mock.calls.ModifyNetworkInterfaceAttribute = append(mock.calls.ModifyNetworkInterfaceAttribute, callInfo)
	mock.lockModifyNetworkInterfaceAttribute.Unlock()
	return mock.ModifyNetworkInterfaceAttributeFunc(ctx, params, optFns...)
}

// ModifyNetworkInterfaceAttributeCalls gets all the calls that were made to ModifyNetworkInterfaceAttribute.
// Check the length with:
//     len(mockedClient.ModifyNetworkInterfaceAttributeCalls())
func (mock *ClientMock) ModifyNetworkInterfaceAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyNetworkInterfaceAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyNetworkInterfaceAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyNetworkInterfaceAttribute.RLock()
	calls = mock.calls.ModifyNetworkInterfaceAttribute
	mock.lockModifyNetworkInterfaceAttribute.RUnlock()
	return calls
}

// ModifyPrivateDnsNameOptions calls ModifyPrivateDnsNameOptionsFunc.
func (mock *ClientMock) ModifyPrivateDnsNameOptions(ctx context.Context, params *ec2.ModifyPrivateDnsNameOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyPrivateDnsNameOptionsOutput, error) {
	if mock.ModifyPrivateDnsNameOptionsFunc == nil {
		panic("ClientMock.ModifyPrivateDnsNameOptionsFunc: method is nil but Client.ModifyPrivateDnsNameOptions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyPrivateDnsNameOptionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyPrivateDnsNameOptions.Lock()
	mock.calls.ModifyPrivateDnsNameOptions = append(mock.calls.ModifyPrivateDnsNameOptions, callInfo)
	mock.lockModifyPrivateDnsNameOptions.Unlock()
	return mock.ModifyPrivateDnsNameOptionsFunc(ctx, params, optFns...)
}

// ModifyPrivateDnsNameOptionsCalls gets all the calls that were made to ModifyPrivateDnsNameOptions.
// Check the length with:
//     len(mockedClient.ModifyPrivateDnsNameOptionsCalls())
func (mock *ClientMock) ModifyPrivateDnsNameOptionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyPrivateDnsNameOptionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyPrivateDnsNameOptionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyPrivateDnsNameOptions.RLock()
	calls = mock.calls.ModifyPrivateDnsNameOptions
	mock.lockModifyPrivateDnsNameOptions.RUnlock()
	return calls
}

// ModifyReservedInstances calls ModifyReservedInstancesFunc.
func (mock *ClientMock) ModifyReservedInstances(ctx context.Context, params *ec2.ModifyReservedInstancesInput, optFns ...func(*ec2.Options)) (*ec2.ModifyReservedInstancesOutput, error) {
	if mock.ModifyReservedInstancesFunc == nil {
		panic("ClientMock.ModifyReservedInstancesFunc: method is nil but Client.ModifyReservedInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyReservedInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyReservedInstances.Lock()
	mock.calls.ModifyReservedInstances = append(mock.calls.ModifyReservedInstances, callInfo)
	mock.lockModifyReservedInstances.Unlock()
	return mock.ModifyReservedInstancesFunc(ctx, params, optFns...)
}

// ModifyReservedInstancesCalls gets all the calls that were made to ModifyReservedInstances.
// Check the length with:
//     len(mockedClient.ModifyReservedInstancesCalls())
func (mock *ClientMock) ModifyReservedInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyReservedInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyReservedInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyReservedInstances.RLock()
	calls = mock.calls.ModifyReservedInstances
	mock.lockModifyReservedInstances.RUnlock()
	return calls
}

// ModifySecurityGroupRules calls ModifySecurityGroupRulesFunc.
func (mock *ClientMock) ModifySecurityGroupRules(ctx context.Context, params *ec2.ModifySecurityGroupRulesInput, optFns ...func(*ec2.Options)) (*ec2.ModifySecurityGroupRulesOutput, error) {
	if mock.ModifySecurityGroupRulesFunc == nil {
		panic("ClientMock.ModifySecurityGroupRulesFunc: method is nil but Client.ModifySecurityGroupRules was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifySecurityGroupRulesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifySecurityGroupRules.Lock()
	mock.calls.ModifySecurityGroupRules = append(mock.calls.ModifySecurityGroupRules, callInfo)
	mock.lockModifySecurityGroupRules.Unlock()
	return mock.ModifySecurityGroupRulesFunc(ctx, params, optFns...)
}

// ModifySecurityGroupRulesCalls gets all the calls that were made to ModifySecurityGroupRules.
// Check the length with:
//     len(mockedClient.ModifySecurityGroupRulesCalls())
func (mock *ClientMock) ModifySecurityGroupRulesCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifySecurityGroupRulesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifySecurityGroupRulesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifySecurityGroupRules.RLock()
	calls = mock.calls.ModifySecurityGroupRules
	mock.lockModifySecurityGroupRules.RUnlock()
	return calls
}

// ModifySnapshotAttribute calls ModifySnapshotAttributeFunc.
func (mock *ClientMock) ModifySnapshotAttribute(ctx context.Context, params *ec2.ModifySnapshotAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifySnapshotAttributeOutput, error) {
	if mock.ModifySnapshotAttributeFunc == nil {
		panic("ClientMock.ModifySnapshotAttributeFunc: method is nil but Client.ModifySnapshotAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifySnapshotAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifySnapshotAttribute.Lock()
	mock.calls.ModifySnapshotAttribute = append(mock.calls.ModifySnapshotAttribute, callInfo)
	mock.lockModifySnapshotAttribute.Unlock()
	return mock.ModifySnapshotAttributeFunc(ctx, params, optFns...)
}

// ModifySnapshotAttributeCalls gets all the calls that were made to ModifySnapshotAttribute.
// Check the length with:
//     len(mockedClient.ModifySnapshotAttributeCalls())
func (mock *ClientMock) ModifySnapshotAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifySnapshotAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifySnapshotAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifySnapshotAttribute.RLock()
	calls = mock.calls.ModifySnapshotAttribute
	mock.lockModifySnapshotAttribute.RUnlock()
	return calls
}

// ModifySnapshotTier calls ModifySnapshotTierFunc.
func (mock *ClientMock) ModifySnapshotTier(ctx context.Context, params *ec2.ModifySnapshotTierInput, optFns ...func(*ec2.Options)) (*ec2.ModifySnapshotTierOutput, error) {
	if mock.ModifySnapshotTierFunc == nil {
		panic("ClientMock.ModifySnapshotTierFunc: method is nil but Client.ModifySnapshotTier was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifySnapshotTierInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifySnapshotTier.Lock()
	mock.calls.ModifySnapshotTier = append(mock.calls.ModifySnapshotTier, callInfo)
	mock.lockModifySnapshotTier.Unlock()
	return mock.ModifySnapshotTierFunc(ctx, params, optFns...)
}

// ModifySnapshotTierCalls gets all the calls that were made to ModifySnapshotTier.
// Check the length with:
//     len(mockedClient.ModifySnapshotTierCalls())
func (mock *ClientMock) ModifySnapshotTierCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifySnapshotTierInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifySnapshotTierInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifySnapshotTier.RLock()
	calls = mock.calls.ModifySnapshotTier
	mock.lockModifySnapshotTier.RUnlock()
	return calls
}

// ModifySpotFleetRequest calls ModifySpotFleetRequestFunc.
func (mock *ClientMock) ModifySpotFleetRequest(ctx context.Context, params *ec2.ModifySpotFleetRequestInput, optFns ...func(*ec2.Options)) (*ec2.ModifySpotFleetRequestOutput, error) {
	if mock.ModifySpotFleetRequestFunc == nil {
		panic("ClientMock.ModifySpotFleetRequestFunc: method is nil but Client.ModifySpotFleetRequest was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifySpotFleetRequestInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifySpotFleetRequest.Lock()
	mock.calls.ModifySpotFleetRequest = append(mock.calls.ModifySpotFleetRequest, callInfo)
	mock.lockModifySpotFleetRequest.Unlock()
	return mock.ModifySpotFleetRequestFunc(ctx, params, optFns...)
}

// ModifySpotFleetRequestCalls gets all the calls that were made to ModifySpotFleetRequest.
// Check the length with:
//     len(mockedClient.ModifySpotFleetRequestCalls())
func (mock *ClientMock) ModifySpotFleetRequestCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifySpotFleetRequestInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifySpotFleetRequestInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifySpotFleetRequest.RLock()
	calls = mock.calls.ModifySpotFleetRequest
	mock.lockModifySpotFleetRequest.RUnlock()
	return calls
}

// ModifySubnetAttribute calls ModifySubnetAttributeFunc.
func (mock *ClientMock) ModifySubnetAttribute(ctx context.Context, params *ec2.ModifySubnetAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifySubnetAttributeOutput, error) {
	if mock.ModifySubnetAttributeFunc == nil {
		panic("ClientMock.ModifySubnetAttributeFunc: method is nil but Client.ModifySubnetAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifySubnetAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifySubnetAttribute.Lock()
	mock.calls.ModifySubnetAttribute = append(mock.calls.ModifySubnetAttribute, callInfo)
	mock.lockModifySubnetAttribute.Unlock()
	return mock.ModifySubnetAttributeFunc(ctx, params, optFns...)
}

// ModifySubnetAttributeCalls gets all the calls that were made to ModifySubnetAttribute.
// Check the length with:
//     len(mockedClient.ModifySubnetAttributeCalls())
func (mock *ClientMock) ModifySubnetAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifySubnetAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifySubnetAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifySubnetAttribute.RLock()
	calls = mock.calls.ModifySubnetAttribute
	mock.lockModifySubnetAttribute.RUnlock()
	return calls
}

// ModifyTrafficMirrorFilterNetworkServices calls ModifyTrafficMirrorFilterNetworkServicesFunc.
func (mock *ClientMock) ModifyTrafficMirrorFilterNetworkServices(ctx context.Context, params *ec2.ModifyTrafficMirrorFilterNetworkServicesInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error) {
	if mock.ModifyTrafficMirrorFilterNetworkServicesFunc == nil {
		panic("ClientMock.ModifyTrafficMirrorFilterNetworkServicesFunc: method is nil but Client.ModifyTrafficMirrorFilterNetworkServices was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyTrafficMirrorFilterNetworkServices.Lock()
	mock.calls.ModifyTrafficMirrorFilterNetworkServices = append(mock.calls.ModifyTrafficMirrorFilterNetworkServices, callInfo)
	mock.lockModifyTrafficMirrorFilterNetworkServices.Unlock()
	return mock.ModifyTrafficMirrorFilterNetworkServicesFunc(ctx, params, optFns...)
}

// ModifyTrafficMirrorFilterNetworkServicesCalls gets all the calls that were made to ModifyTrafficMirrorFilterNetworkServices.
// Check the length with:
//     len(mockedClient.ModifyTrafficMirrorFilterNetworkServicesCalls())
func (mock *ClientMock) ModifyTrafficMirrorFilterNetworkServicesCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyTrafficMirrorFilterNetworkServicesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyTrafficMirrorFilterNetworkServices.RLock()
	calls = mock.calls.ModifyTrafficMirrorFilterNetworkServices
	mock.lockModifyTrafficMirrorFilterNetworkServices.RUnlock()
	return calls
}

// ModifyTrafficMirrorFilterRule calls ModifyTrafficMirrorFilterRuleFunc.
func (mock *ClientMock) ModifyTrafficMirrorFilterRule(ctx context.Context, params *ec2.ModifyTrafficMirrorFilterRuleInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error) {
	if mock.ModifyTrafficMirrorFilterRuleFunc == nil {
		panic("ClientMock.ModifyTrafficMirrorFilterRuleFunc: method is nil but Client.ModifyTrafficMirrorFilterRule was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyTrafficMirrorFilterRuleInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyTrafficMirrorFilterRule.Lock()
	mock.calls.ModifyTrafficMirrorFilterRule = append(mock.calls.ModifyTrafficMirrorFilterRule, callInfo)
	mock.lockModifyTrafficMirrorFilterRule.Unlock()
	return mock.ModifyTrafficMirrorFilterRuleFunc(ctx, params, optFns...)
}

// ModifyTrafficMirrorFilterRuleCalls gets all the calls that were made to ModifyTrafficMirrorFilterRule.
// Check the length with:
//     len(mockedClient.ModifyTrafficMirrorFilterRuleCalls())
func (mock *ClientMock) ModifyTrafficMirrorFilterRuleCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyTrafficMirrorFilterRuleInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyTrafficMirrorFilterRuleInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyTrafficMirrorFilterRule.RLock()
	calls = mock.calls.ModifyTrafficMirrorFilterRule
	mock.lockModifyTrafficMirrorFilterRule.RUnlock()
	return calls
}

// ModifyTrafficMirrorSession calls ModifyTrafficMirrorSessionFunc.
func (mock *ClientMock) ModifyTrafficMirrorSession(ctx context.Context, params *ec2.ModifyTrafficMirrorSessionInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTrafficMirrorSessionOutput, error) {
	if mock.ModifyTrafficMirrorSessionFunc == nil {
		panic("ClientMock.ModifyTrafficMirrorSessionFunc: method is nil but Client.ModifyTrafficMirrorSession was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyTrafficMirrorSessionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyTrafficMirrorSession.Lock()
	mock.calls.ModifyTrafficMirrorSession = append(mock.calls.ModifyTrafficMirrorSession, callInfo)
	mock.lockModifyTrafficMirrorSession.Unlock()
	return mock.ModifyTrafficMirrorSessionFunc(ctx, params, optFns...)
}

// ModifyTrafficMirrorSessionCalls gets all the calls that were made to ModifyTrafficMirrorSession.
// Check the length with:
//     len(mockedClient.ModifyTrafficMirrorSessionCalls())
func (mock *ClientMock) ModifyTrafficMirrorSessionCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyTrafficMirrorSessionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyTrafficMirrorSessionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyTrafficMirrorSession.RLock()
	calls = mock.calls.ModifyTrafficMirrorSession
	mock.lockModifyTrafficMirrorSession.RUnlock()
	return calls
}

// ModifyTransitGateway calls ModifyTransitGatewayFunc.
func (mock *ClientMock) ModifyTransitGateway(ctx context.Context, params *ec2.ModifyTransitGatewayInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTransitGatewayOutput, error) {
	if mock.ModifyTransitGatewayFunc == nil {
		panic("ClientMock.ModifyTransitGatewayFunc: method is nil but Client.ModifyTransitGateway was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyTransitGatewayInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyTransitGateway.Lock()
	mock.calls.ModifyTransitGateway = append(mock.calls.ModifyTransitGateway, callInfo)
	mock.lockModifyTransitGateway.Unlock()
	return mock.ModifyTransitGatewayFunc(ctx, params, optFns...)
}

// ModifyTransitGatewayCalls gets all the calls that were made to ModifyTransitGateway.
// Check the length with:
//     len(mockedClient.ModifyTransitGatewayCalls())
func (mock *ClientMock) ModifyTransitGatewayCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyTransitGatewayInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyTransitGatewayInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyTransitGateway.RLock()
	calls = mock.calls.ModifyTransitGateway
	mock.lockModifyTransitGateway.RUnlock()
	return calls
}

// ModifyTransitGatewayPrefixListReference calls ModifyTransitGatewayPrefixListReferenceFunc.
func (mock *ClientMock) ModifyTransitGatewayPrefixListReference(ctx context.Context, params *ec2.ModifyTransitGatewayPrefixListReferenceInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTransitGatewayPrefixListReferenceOutput, error) {
	if mock.ModifyTransitGatewayPrefixListReferenceFunc == nil {
		panic("ClientMock.ModifyTransitGatewayPrefixListReferenceFunc: method is nil but Client.ModifyTransitGatewayPrefixListReference was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyTransitGatewayPrefixListReferenceInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyTransitGatewayPrefixListReference.Lock()
	mock.calls.ModifyTransitGatewayPrefixListReference = append(mock.calls.ModifyTransitGatewayPrefixListReference, callInfo)
	mock.lockModifyTransitGatewayPrefixListReference.Unlock()
	return mock.ModifyTransitGatewayPrefixListReferenceFunc(ctx, params, optFns...)
}

// ModifyTransitGatewayPrefixListReferenceCalls gets all the calls that were made to ModifyTransitGatewayPrefixListReference.
// Check the length with:
//     len(mockedClient.ModifyTransitGatewayPrefixListReferenceCalls())
func (mock *ClientMock) ModifyTransitGatewayPrefixListReferenceCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyTransitGatewayPrefixListReferenceInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyTransitGatewayPrefixListReferenceInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyTransitGatewayPrefixListReference.RLock()
	calls = mock.calls.ModifyTransitGatewayPrefixListReference
	mock.lockModifyTransitGatewayPrefixListReference.RUnlock()
	return calls
}

// ModifyTransitGatewayVpcAttachment calls ModifyTransitGatewayVpcAttachmentFunc.
func (mock *ClientMock) ModifyTransitGatewayVpcAttachment(ctx context.Context, params *ec2.ModifyTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
	if mock.ModifyTransitGatewayVpcAttachmentFunc == nil {
		panic("ClientMock.ModifyTransitGatewayVpcAttachmentFunc: method is nil but Client.ModifyTransitGatewayVpcAttachment was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyTransitGatewayVpcAttachmentInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyTransitGatewayVpcAttachment.Lock()
	mock.calls.ModifyTransitGatewayVpcAttachment = append(mock.calls.ModifyTransitGatewayVpcAttachment, callInfo)
	mock.lockModifyTransitGatewayVpcAttachment.Unlock()
	return mock.ModifyTransitGatewayVpcAttachmentFunc(ctx, params, optFns...)
}

// ModifyTransitGatewayVpcAttachmentCalls gets all the calls that were made to ModifyTransitGatewayVpcAttachment.
// Check the length with:
//     len(mockedClient.ModifyTransitGatewayVpcAttachmentCalls())
func (mock *ClientMock) ModifyTransitGatewayVpcAttachmentCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyTransitGatewayVpcAttachmentInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyTransitGatewayVpcAttachmentInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyTransitGatewayVpcAttachment.RLock()
	calls = mock.calls.ModifyTransitGatewayVpcAttachment
	mock.lockModifyTransitGatewayVpcAttachment.RUnlock()
	return calls
}

// ModifyVolume calls ModifyVolumeFunc.
func (mock *ClientMock) ModifyVolume(ctx context.Context, params *ec2.ModifyVolumeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVolumeOutput, error) {
	if mock.ModifyVolumeFunc == nil {
		panic("ClientMock.ModifyVolumeFunc: method is nil but Client.ModifyVolume was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyVolumeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyVolume.Lock()
	mock.calls.ModifyVolume = append(mock.calls.ModifyVolume, callInfo)
	mock.lockModifyVolume.Unlock()
	return mock.ModifyVolumeFunc(ctx, params, optFns...)
}

// ModifyVolumeCalls gets all the calls that were made to ModifyVolume.
// Check the length with:
//     len(mockedClient.ModifyVolumeCalls())
func (mock *ClientMock) ModifyVolumeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyVolumeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyVolumeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyVolume.RLock()
	calls = mock.calls.ModifyVolume
	mock.lockModifyVolume.RUnlock()
	return calls
}

// ModifyVolumeAttribute calls ModifyVolumeAttributeFunc.
func (mock *ClientMock) ModifyVolumeAttribute(ctx context.Context, params *ec2.ModifyVolumeAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVolumeAttributeOutput, error) {
	if mock.ModifyVolumeAttributeFunc == nil {
		panic("ClientMock.ModifyVolumeAttributeFunc: method is nil but Client.ModifyVolumeAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyVolumeAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyVolumeAttribute.Lock()
	mock.calls.ModifyVolumeAttribute = append(mock.calls.ModifyVolumeAttribute, callInfo)
	mock.lockModifyVolumeAttribute.Unlock()
	return mock.ModifyVolumeAttributeFunc(ctx, params, optFns...)
}

// ModifyVolumeAttributeCalls gets all the calls that were made to ModifyVolumeAttribute.
// Check the length with:
//     len(mockedClient.ModifyVolumeAttributeCalls())
func (mock *ClientMock) ModifyVolumeAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyVolumeAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyVolumeAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyVolumeAttribute.RLock()
	calls = mock.calls.ModifyVolumeAttribute
	mock.lockModifyVolumeAttribute.RUnlock()
	return calls
}

// ModifyVpcAttribute calls ModifyVpcAttributeFunc.
func (mock *ClientMock) ModifyVpcAttribute(ctx context.Context, params *ec2.ModifyVpcAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcAttributeOutput, error) {
	if mock.ModifyVpcAttributeFunc == nil {
		panic("ClientMock.ModifyVpcAttributeFunc: method is nil but Client.ModifyVpcAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyVpcAttribute.Lock()
	mock.calls.ModifyVpcAttribute = append(mock.calls.ModifyVpcAttribute, callInfo)
	mock.lockModifyVpcAttribute.Unlock()
	return mock.ModifyVpcAttributeFunc(ctx, params, optFns...)
}

// ModifyVpcAttributeCalls gets all the calls that were made to ModifyVpcAttribute.
// Check the length with:
//     len(mockedClient.ModifyVpcAttributeCalls())
func (mock *ClientMock) ModifyVpcAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyVpcAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyVpcAttribute.RLock()
	calls = mock.calls.ModifyVpcAttribute
	mock.lockModifyVpcAttribute.RUnlock()
	return calls
}

// ModifyVpcEndpoint calls ModifyVpcEndpointFunc.
func (mock *ClientMock) ModifyVpcEndpoint(ctx context.Context, params *ec2.ModifyVpcEndpointInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointOutput, error) {
	if mock.ModifyVpcEndpointFunc == nil {
		panic("ClientMock.ModifyVpcEndpointFunc: method is nil but Client.ModifyVpcEndpoint was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcEndpointInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyVpcEndpoint.Lock()
	mock.calls.ModifyVpcEndpoint = append(mock.calls.ModifyVpcEndpoint, callInfo)
	mock.lockModifyVpcEndpoint.Unlock()
	return mock.ModifyVpcEndpointFunc(ctx, params, optFns...)
}

// ModifyVpcEndpointCalls gets all the calls that were made to ModifyVpcEndpoint.
// Check the length with:
//     len(mockedClient.ModifyVpcEndpointCalls())
func (mock *ClientMock) ModifyVpcEndpointCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyVpcEndpointInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcEndpointInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyVpcEndpoint.RLock()
	calls = mock.calls.ModifyVpcEndpoint
	mock.lockModifyVpcEndpoint.RUnlock()
	return calls
}

// ModifyVpcEndpointConnectionNotification calls ModifyVpcEndpointConnectionNotificationFunc.
func (mock *ClientMock) ModifyVpcEndpointConnectionNotification(ctx context.Context, params *ec2.ModifyVpcEndpointConnectionNotificationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
	if mock.ModifyVpcEndpointConnectionNotificationFunc == nil {
		panic("ClientMock.ModifyVpcEndpointConnectionNotificationFunc: method is nil but Client.ModifyVpcEndpointConnectionNotification was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcEndpointConnectionNotificationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyVpcEndpointConnectionNotification.Lock()
	mock.calls.ModifyVpcEndpointConnectionNotification = append(mock.calls.ModifyVpcEndpointConnectionNotification, callInfo)
	mock.lockModifyVpcEndpointConnectionNotification.Unlock()
	return mock.ModifyVpcEndpointConnectionNotificationFunc(ctx, params, optFns...)
}

// ModifyVpcEndpointConnectionNotificationCalls gets all the calls that were made to ModifyVpcEndpointConnectionNotification.
// Check the length with:
//     len(mockedClient.ModifyVpcEndpointConnectionNotificationCalls())
func (mock *ClientMock) ModifyVpcEndpointConnectionNotificationCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyVpcEndpointConnectionNotificationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcEndpointConnectionNotificationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyVpcEndpointConnectionNotification.RLock()
	calls = mock.calls.ModifyVpcEndpointConnectionNotification
	mock.lockModifyVpcEndpointConnectionNotification.RUnlock()
	return calls
}

// ModifyVpcEndpointServiceConfiguration calls ModifyVpcEndpointServiceConfigurationFunc.
func (mock *ClientMock) ModifyVpcEndpointServiceConfiguration(ctx context.Context, params *ec2.ModifyVpcEndpointServiceConfigurationInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
	if mock.ModifyVpcEndpointServiceConfigurationFunc == nil {
		panic("ClientMock.ModifyVpcEndpointServiceConfigurationFunc: method is nil but Client.ModifyVpcEndpointServiceConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcEndpointServiceConfigurationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyVpcEndpointServiceConfiguration.Lock()
	mock.calls.ModifyVpcEndpointServiceConfiguration = append(mock.calls.ModifyVpcEndpointServiceConfiguration, callInfo)
	mock.lockModifyVpcEndpointServiceConfiguration.Unlock()
	return mock.ModifyVpcEndpointServiceConfigurationFunc(ctx, params, optFns...)
}

// ModifyVpcEndpointServiceConfigurationCalls gets all the calls that were made to ModifyVpcEndpointServiceConfiguration.
// Check the length with:
//     len(mockedClient.ModifyVpcEndpointServiceConfigurationCalls())
func (mock *ClientMock) ModifyVpcEndpointServiceConfigurationCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyVpcEndpointServiceConfigurationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcEndpointServiceConfigurationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyVpcEndpointServiceConfiguration.RLock()
	calls = mock.calls.ModifyVpcEndpointServiceConfiguration
	mock.lockModifyVpcEndpointServiceConfiguration.RUnlock()
	return calls
}

// ModifyVpcEndpointServicePayerResponsibility calls ModifyVpcEndpointServicePayerResponsibilityFunc.
func (mock *ClientMock) ModifyVpcEndpointServicePayerResponsibility(ctx context.Context, params *ec2.ModifyVpcEndpointServicePayerResponsibilityInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointServicePayerResponsibilityOutput, error) {
	if mock.ModifyVpcEndpointServicePayerResponsibilityFunc == nil {
		panic("ClientMock.ModifyVpcEndpointServicePayerResponsibilityFunc: method is nil but Client.ModifyVpcEndpointServicePayerResponsibility was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcEndpointServicePayerResponsibilityInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyVpcEndpointServicePayerResponsibility.Lock()
	mock.calls.ModifyVpcEndpointServicePayerResponsibility = append(mock.calls.ModifyVpcEndpointServicePayerResponsibility, callInfo)
	mock.lockModifyVpcEndpointServicePayerResponsibility.Unlock()
	return mock.ModifyVpcEndpointServicePayerResponsibilityFunc(ctx, params, optFns...)
}

// ModifyVpcEndpointServicePayerResponsibilityCalls gets all the calls that were made to ModifyVpcEndpointServicePayerResponsibility.
// Check the length with:
//     len(mockedClient.ModifyVpcEndpointServicePayerResponsibilityCalls())
func (mock *ClientMock) ModifyVpcEndpointServicePayerResponsibilityCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyVpcEndpointServicePayerResponsibilityInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcEndpointServicePayerResponsibilityInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyVpcEndpointServicePayerResponsibility.RLock()
	calls = mock.calls.ModifyVpcEndpointServicePayerResponsibility
	mock.lockModifyVpcEndpointServicePayerResponsibility.RUnlock()
	return calls
}

// ModifyVpcEndpointServicePermissions calls ModifyVpcEndpointServicePermissionsFunc.
func (mock *ClientMock) ModifyVpcEndpointServicePermissions(ctx context.Context, params *ec2.ModifyVpcEndpointServicePermissionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
	if mock.ModifyVpcEndpointServicePermissionsFunc == nil {
		panic("ClientMock.ModifyVpcEndpointServicePermissionsFunc: method is nil but Client.ModifyVpcEndpointServicePermissions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcEndpointServicePermissionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyVpcEndpointServicePermissions.Lock()
	mock.calls.ModifyVpcEndpointServicePermissions = append(mock.calls.ModifyVpcEndpointServicePermissions, callInfo)
	mock.lockModifyVpcEndpointServicePermissions.Unlock()
	return mock.ModifyVpcEndpointServicePermissionsFunc(ctx, params, optFns...)
}

// ModifyVpcEndpointServicePermissionsCalls gets all the calls that were made to ModifyVpcEndpointServicePermissions.
// Check the length with:
//     len(mockedClient.ModifyVpcEndpointServicePermissionsCalls())
func (mock *ClientMock) ModifyVpcEndpointServicePermissionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyVpcEndpointServicePermissionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcEndpointServicePermissionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyVpcEndpointServicePermissions.RLock()
	calls = mock.calls.ModifyVpcEndpointServicePermissions
	mock.lockModifyVpcEndpointServicePermissions.RUnlock()
	return calls
}

// ModifyVpcPeeringConnectionOptions calls ModifyVpcPeeringConnectionOptionsFunc.
func (mock *ClientMock) ModifyVpcPeeringConnectionOptions(ctx context.Context, params *ec2.ModifyVpcPeeringConnectionOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
	if mock.ModifyVpcPeeringConnectionOptionsFunc == nil {
		panic("ClientMock.ModifyVpcPeeringConnectionOptionsFunc: method is nil but Client.ModifyVpcPeeringConnectionOptions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcPeeringConnectionOptionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyVpcPeeringConnectionOptions.Lock()
	mock.calls.ModifyVpcPeeringConnectionOptions = append(mock.calls.ModifyVpcPeeringConnectionOptions, callInfo)
	mock.lockModifyVpcPeeringConnectionOptions.Unlock()
	return mock.ModifyVpcPeeringConnectionOptionsFunc(ctx, params, optFns...)
}

// ModifyVpcPeeringConnectionOptionsCalls gets all the calls that were made to ModifyVpcPeeringConnectionOptions.
// Check the length with:
//     len(mockedClient.ModifyVpcPeeringConnectionOptionsCalls())
func (mock *ClientMock) ModifyVpcPeeringConnectionOptionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyVpcPeeringConnectionOptionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcPeeringConnectionOptionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyVpcPeeringConnectionOptions.RLock()
	calls = mock.calls.ModifyVpcPeeringConnectionOptions
	mock.lockModifyVpcPeeringConnectionOptions.RUnlock()
	return calls
}

// ModifyVpcTenancy calls ModifyVpcTenancyFunc.
func (mock *ClientMock) ModifyVpcTenancy(ctx context.Context, params *ec2.ModifyVpcTenancyInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpcTenancyOutput, error) {
	if mock.ModifyVpcTenancyFunc == nil {
		panic("ClientMock.ModifyVpcTenancyFunc: method is nil but Client.ModifyVpcTenancy was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcTenancyInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyVpcTenancy.Lock()
	mock.calls.ModifyVpcTenancy = append(mock.calls.ModifyVpcTenancy, callInfo)
	mock.lockModifyVpcTenancy.Unlock()
	return mock.ModifyVpcTenancyFunc(ctx, params, optFns...)
}

// ModifyVpcTenancyCalls gets all the calls that were made to ModifyVpcTenancy.
// Check the length with:
//     len(mockedClient.ModifyVpcTenancyCalls())
func (mock *ClientMock) ModifyVpcTenancyCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyVpcTenancyInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyVpcTenancyInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyVpcTenancy.RLock()
	calls = mock.calls.ModifyVpcTenancy
	mock.lockModifyVpcTenancy.RUnlock()
	return calls
}

// ModifyVpnConnection calls ModifyVpnConnectionFunc.
func (mock *ClientMock) ModifyVpnConnection(ctx context.Context, params *ec2.ModifyVpnConnectionInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpnConnectionOutput, error) {
	if mock.ModifyVpnConnectionFunc == nil {
		panic("ClientMock.ModifyVpnConnectionFunc: method is nil but Client.ModifyVpnConnection was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyVpnConnectionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyVpnConnection.Lock()
	mock.calls.ModifyVpnConnection = append(mock.calls.ModifyVpnConnection, callInfo)
	mock.lockModifyVpnConnection.Unlock()
	return mock.ModifyVpnConnectionFunc(ctx, params, optFns...)
}

// ModifyVpnConnectionCalls gets all the calls that were made to ModifyVpnConnection.
// Check the length with:
//     len(mockedClient.ModifyVpnConnectionCalls())
func (mock *ClientMock) ModifyVpnConnectionCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyVpnConnectionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyVpnConnectionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyVpnConnection.RLock()
	calls = mock.calls.ModifyVpnConnection
	mock.lockModifyVpnConnection.RUnlock()
	return calls
}

// ModifyVpnConnectionOptions calls ModifyVpnConnectionOptionsFunc.
func (mock *ClientMock) ModifyVpnConnectionOptions(ctx context.Context, params *ec2.ModifyVpnConnectionOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpnConnectionOptionsOutput, error) {
	if mock.ModifyVpnConnectionOptionsFunc == nil {
		panic("ClientMock.ModifyVpnConnectionOptionsFunc: method is nil but Client.ModifyVpnConnectionOptions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyVpnConnectionOptionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyVpnConnectionOptions.Lock()
	mock.calls.ModifyVpnConnectionOptions = append(mock.calls.ModifyVpnConnectionOptions, callInfo)
	mock.lockModifyVpnConnectionOptions.Unlock()
	return mock.ModifyVpnConnectionOptionsFunc(ctx, params, optFns...)
}

// ModifyVpnConnectionOptionsCalls gets all the calls that were made to ModifyVpnConnectionOptions.
// Check the length with:
//     len(mockedClient.ModifyVpnConnectionOptionsCalls())
func (mock *ClientMock) ModifyVpnConnectionOptionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyVpnConnectionOptionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyVpnConnectionOptionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyVpnConnectionOptions.RLock()
	calls = mock.calls.ModifyVpnConnectionOptions
	mock.lockModifyVpnConnectionOptions.RUnlock()
	return calls
}

// ModifyVpnTunnelCertificate calls ModifyVpnTunnelCertificateFunc.
func (mock *ClientMock) ModifyVpnTunnelCertificate(ctx context.Context, params *ec2.ModifyVpnTunnelCertificateInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpnTunnelCertificateOutput, error) {
	if mock.ModifyVpnTunnelCertificateFunc == nil {
		panic("ClientMock.ModifyVpnTunnelCertificateFunc: method is nil but Client.ModifyVpnTunnelCertificate was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyVpnTunnelCertificateInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyVpnTunnelCertificate.Lock()
	mock.calls.ModifyVpnTunnelCertificate = append(mock.calls.ModifyVpnTunnelCertificate, callInfo)
	mock.lockModifyVpnTunnelCertificate.Unlock()
	return mock.ModifyVpnTunnelCertificateFunc(ctx, params, optFns...)
}

// ModifyVpnTunnelCertificateCalls gets all the calls that were made to ModifyVpnTunnelCertificate.
// Check the length with:
//     len(mockedClient.ModifyVpnTunnelCertificateCalls())
func (mock *ClientMock) ModifyVpnTunnelCertificateCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyVpnTunnelCertificateInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyVpnTunnelCertificateInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyVpnTunnelCertificate.RLock()
	calls = mock.calls.ModifyVpnTunnelCertificate
	mock.lockModifyVpnTunnelCertificate.RUnlock()
	return calls
}

// ModifyVpnTunnelOptions calls ModifyVpnTunnelOptionsFunc.
func (mock *ClientMock) ModifyVpnTunnelOptions(ctx context.Context, params *ec2.ModifyVpnTunnelOptionsInput, optFns ...func(*ec2.Options)) (*ec2.ModifyVpnTunnelOptionsOutput, error) {
	if mock.ModifyVpnTunnelOptionsFunc == nil {
		panic("ClientMock.ModifyVpnTunnelOptionsFunc: method is nil but Client.ModifyVpnTunnelOptions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ModifyVpnTunnelOptionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockModifyVpnTunnelOptions.Lock()
	mock.calls.ModifyVpnTunnelOptions = append(mock.calls.ModifyVpnTunnelOptions, callInfo)
	mock.lockModifyVpnTunnelOptions.Unlock()
	return mock.ModifyVpnTunnelOptionsFunc(ctx, params, optFns...)
}

// ModifyVpnTunnelOptionsCalls gets all the calls that were made to ModifyVpnTunnelOptions.
// Check the length with:
//     len(mockedClient.ModifyVpnTunnelOptionsCalls())
func (mock *ClientMock) ModifyVpnTunnelOptionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.ModifyVpnTunnelOptionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ModifyVpnTunnelOptionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockModifyVpnTunnelOptions.RLock()
	calls = mock.calls.ModifyVpnTunnelOptions
	mock.lockModifyVpnTunnelOptions.RUnlock()
	return calls
}

// MonitorInstances calls MonitorInstancesFunc.
func (mock *ClientMock) MonitorInstances(ctx context.Context, params *ec2.MonitorInstancesInput, optFns ...func(*ec2.Options)) (*ec2.MonitorInstancesOutput, error) {
	if mock.MonitorInstancesFunc == nil {
		panic("ClientMock.MonitorInstancesFunc: method is nil but Client.MonitorInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.MonitorInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockMonitorInstances.Lock()
	mock.calls.MonitorInstances = append(mock.calls.MonitorInstances, callInfo)
	mock.lockMonitorInstances.Unlock()
	return mock.MonitorInstancesFunc(ctx, params, optFns...)
}

// MonitorInstancesCalls gets all the calls that were made to MonitorInstances.
// Check the length with:
//     len(mockedClient.MonitorInstancesCalls())
func (mock *ClientMock) MonitorInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.MonitorInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.MonitorInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockMonitorInstances.RLock()
	calls = mock.calls.MonitorInstances
	mock.lockMonitorInstances.RUnlock()
	return calls
}

// MoveAddressToVpc calls MoveAddressToVpcFunc.
func (mock *ClientMock) MoveAddressToVpc(ctx context.Context, params *ec2.MoveAddressToVpcInput, optFns ...func(*ec2.Options)) (*ec2.MoveAddressToVpcOutput, error) {
	if mock.MoveAddressToVpcFunc == nil {
		panic("ClientMock.MoveAddressToVpcFunc: method is nil but Client.MoveAddressToVpc was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.MoveAddressToVpcInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockMoveAddressToVpc.Lock()
	mock.calls.MoveAddressToVpc = append(mock.calls.MoveAddressToVpc, callInfo)
	mock.lockMoveAddressToVpc.Unlock()
	return mock.MoveAddressToVpcFunc(ctx, params, optFns...)
}

// MoveAddressToVpcCalls gets all the calls that were made to MoveAddressToVpc.
// Check the length with:
//     len(mockedClient.MoveAddressToVpcCalls())
func (mock *ClientMock) MoveAddressToVpcCalls() []struct {
	Ctx    context.Context
	Params *ec2.MoveAddressToVpcInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.MoveAddressToVpcInput
		OptFns []func(*ec2.Options)
	}
	mock.lockMoveAddressToVpc.RLock()
	calls = mock.calls.MoveAddressToVpc
	mock.lockMoveAddressToVpc.RUnlock()
	return calls
}

// MoveByoipCidrToIpam calls MoveByoipCidrToIpamFunc.
func (mock *ClientMock) MoveByoipCidrToIpam(ctx context.Context, params *ec2.MoveByoipCidrToIpamInput, optFns ...func(*ec2.Options)) (*ec2.MoveByoipCidrToIpamOutput, error) {
	if mock.MoveByoipCidrToIpamFunc == nil {
		panic("ClientMock.MoveByoipCidrToIpamFunc: method is nil but Client.MoveByoipCidrToIpam was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.MoveByoipCidrToIpamInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockMoveByoipCidrToIpam.Lock()
	mock.calls.MoveByoipCidrToIpam = append(mock.calls.MoveByoipCidrToIpam, callInfo)
	mock.lockMoveByoipCidrToIpam.Unlock()
	return mock.MoveByoipCidrToIpamFunc(ctx, params, optFns...)
}

// MoveByoipCidrToIpamCalls gets all the calls that were made to MoveByoipCidrToIpam.
// Check the length with:
//     len(mockedClient.MoveByoipCidrToIpamCalls())
func (mock *ClientMock) MoveByoipCidrToIpamCalls() []struct {
	Ctx    context.Context
	Params *ec2.MoveByoipCidrToIpamInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.MoveByoipCidrToIpamInput
		OptFns []func(*ec2.Options)
	}
	mock.lockMoveByoipCidrToIpam.RLock()
	calls = mock.calls.MoveByoipCidrToIpam
	mock.lockMoveByoipCidrToIpam.RUnlock()
	return calls
}

// ProvisionByoipCidr calls ProvisionByoipCidrFunc.
func (mock *ClientMock) ProvisionByoipCidr(ctx context.Context, params *ec2.ProvisionByoipCidrInput, optFns ...func(*ec2.Options)) (*ec2.ProvisionByoipCidrOutput, error) {
	if mock.ProvisionByoipCidrFunc == nil {
		panic("ClientMock.ProvisionByoipCidrFunc: method is nil but Client.ProvisionByoipCidr was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ProvisionByoipCidrInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockProvisionByoipCidr.Lock()
	mock.calls.ProvisionByoipCidr = append(mock.calls.ProvisionByoipCidr, callInfo)
	mock.lockProvisionByoipCidr.Unlock()
	return mock.ProvisionByoipCidrFunc(ctx, params, optFns...)
}

// ProvisionByoipCidrCalls gets all the calls that were made to ProvisionByoipCidr.
// Check the length with:
//     len(mockedClient.ProvisionByoipCidrCalls())
func (mock *ClientMock) ProvisionByoipCidrCalls() []struct {
	Ctx    context.Context
	Params *ec2.ProvisionByoipCidrInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ProvisionByoipCidrInput
		OptFns []func(*ec2.Options)
	}
	mock.lockProvisionByoipCidr.RLock()
	calls = mock.calls.ProvisionByoipCidr
	mock.lockProvisionByoipCidr.RUnlock()
	return calls
}

// ProvisionIpamPoolCidr calls ProvisionIpamPoolCidrFunc.
func (mock *ClientMock) ProvisionIpamPoolCidr(ctx context.Context, params *ec2.ProvisionIpamPoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.ProvisionIpamPoolCidrOutput, error) {
	if mock.ProvisionIpamPoolCidrFunc == nil {
		panic("ClientMock.ProvisionIpamPoolCidrFunc: method is nil but Client.ProvisionIpamPoolCidr was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ProvisionIpamPoolCidrInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockProvisionIpamPoolCidr.Lock()
	mock.calls.ProvisionIpamPoolCidr = append(mock.calls.ProvisionIpamPoolCidr, callInfo)
	mock.lockProvisionIpamPoolCidr.Unlock()
	return mock.ProvisionIpamPoolCidrFunc(ctx, params, optFns...)
}

// ProvisionIpamPoolCidrCalls gets all the calls that were made to ProvisionIpamPoolCidr.
// Check the length with:
//     len(mockedClient.ProvisionIpamPoolCidrCalls())
func (mock *ClientMock) ProvisionIpamPoolCidrCalls() []struct {
	Ctx    context.Context
	Params *ec2.ProvisionIpamPoolCidrInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ProvisionIpamPoolCidrInput
		OptFns []func(*ec2.Options)
	}
	mock.lockProvisionIpamPoolCidr.RLock()
	calls = mock.calls.ProvisionIpamPoolCidr
	mock.lockProvisionIpamPoolCidr.RUnlock()
	return calls
}

// ProvisionPublicIpv4PoolCidr calls ProvisionPublicIpv4PoolCidrFunc.
func (mock *ClientMock) ProvisionPublicIpv4PoolCidr(ctx context.Context, params *ec2.ProvisionPublicIpv4PoolCidrInput, optFns ...func(*ec2.Options)) (*ec2.ProvisionPublicIpv4PoolCidrOutput, error) {
	if mock.ProvisionPublicIpv4PoolCidrFunc == nil {
		panic("ClientMock.ProvisionPublicIpv4PoolCidrFunc: method is nil but Client.ProvisionPublicIpv4PoolCidr was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ProvisionPublicIpv4PoolCidrInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockProvisionPublicIpv4PoolCidr.Lock()
	mock.calls.ProvisionPublicIpv4PoolCidr = append(mock.calls.ProvisionPublicIpv4PoolCidr, callInfo)
	mock.lockProvisionPublicIpv4PoolCidr.Unlock()
	return mock.ProvisionPublicIpv4PoolCidrFunc(ctx, params, optFns...)
}

// ProvisionPublicIpv4PoolCidrCalls gets all the calls that were made to ProvisionPublicIpv4PoolCidr.
// Check the length with:
//     len(mockedClient.ProvisionPublicIpv4PoolCidrCalls())
func (mock *ClientMock) ProvisionPublicIpv4PoolCidrCalls() []struct {
	Ctx    context.Context
	Params *ec2.ProvisionPublicIpv4PoolCidrInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ProvisionPublicIpv4PoolCidrInput
		OptFns []func(*ec2.Options)
	}
	mock.lockProvisionPublicIpv4PoolCidr.RLock()
	calls = mock.calls.ProvisionPublicIpv4PoolCidr
	mock.lockProvisionPublicIpv4PoolCidr.RUnlock()
	return calls
}

// PurchaseHostReservation calls PurchaseHostReservationFunc.
func (mock *ClientMock) PurchaseHostReservation(ctx context.Context, params *ec2.PurchaseHostReservationInput, optFns ...func(*ec2.Options)) (*ec2.PurchaseHostReservationOutput, error) {
	if mock.PurchaseHostReservationFunc == nil {
		panic("ClientMock.PurchaseHostReservationFunc: method is nil but Client.PurchaseHostReservation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.PurchaseHostReservationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPurchaseHostReservation.Lock()
	mock.calls.PurchaseHostReservation = append(mock.calls.PurchaseHostReservation, callInfo)
	mock.lockPurchaseHostReservation.Unlock()
	return mock.PurchaseHostReservationFunc(ctx, params, optFns...)
}

// PurchaseHostReservationCalls gets all the calls that were made to PurchaseHostReservation.
// Check the length with:
//     len(mockedClient.PurchaseHostReservationCalls())
func (mock *ClientMock) PurchaseHostReservationCalls() []struct {
	Ctx    context.Context
	Params *ec2.PurchaseHostReservationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.PurchaseHostReservationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockPurchaseHostReservation.RLock()
	calls = mock.calls.PurchaseHostReservation
	mock.lockPurchaseHostReservation.RUnlock()
	return calls
}

// PurchaseReservedInstancesOffering calls PurchaseReservedInstancesOfferingFunc.
func (mock *ClientMock) PurchaseReservedInstancesOffering(ctx context.Context, params *ec2.PurchaseReservedInstancesOfferingInput, optFns ...func(*ec2.Options)) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	if mock.PurchaseReservedInstancesOfferingFunc == nil {
		panic("ClientMock.PurchaseReservedInstancesOfferingFunc: method is nil but Client.PurchaseReservedInstancesOffering was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.PurchaseReservedInstancesOfferingInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPurchaseReservedInstancesOffering.Lock()
	mock.calls.PurchaseReservedInstancesOffering = append(mock.calls.PurchaseReservedInstancesOffering, callInfo)
	mock.lockPurchaseReservedInstancesOffering.Unlock()
	return mock.PurchaseReservedInstancesOfferingFunc(ctx, params, optFns...)
}

// PurchaseReservedInstancesOfferingCalls gets all the calls that were made to PurchaseReservedInstancesOffering.
// Check the length with:
//     len(mockedClient.PurchaseReservedInstancesOfferingCalls())
func (mock *ClientMock) PurchaseReservedInstancesOfferingCalls() []struct {
	Ctx    context.Context
	Params *ec2.PurchaseReservedInstancesOfferingInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.PurchaseReservedInstancesOfferingInput
		OptFns []func(*ec2.Options)
	}
	mock.lockPurchaseReservedInstancesOffering.RLock()
	calls = mock.calls.PurchaseReservedInstancesOffering
	mock.lockPurchaseReservedInstancesOffering.RUnlock()
	return calls
}

// PurchaseScheduledInstances calls PurchaseScheduledInstancesFunc.
func (mock *ClientMock) PurchaseScheduledInstances(ctx context.Context, params *ec2.PurchaseScheduledInstancesInput, optFns ...func(*ec2.Options)) (*ec2.PurchaseScheduledInstancesOutput, error) {
	if mock.PurchaseScheduledInstancesFunc == nil {
		panic("ClientMock.PurchaseScheduledInstancesFunc: method is nil but Client.PurchaseScheduledInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.PurchaseScheduledInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPurchaseScheduledInstances.Lock()
	mock.calls.PurchaseScheduledInstances = append(mock.calls.PurchaseScheduledInstances, callInfo)
	mock.lockPurchaseScheduledInstances.Unlock()
	return mock.PurchaseScheduledInstancesFunc(ctx, params, optFns...)
}

// PurchaseScheduledInstancesCalls gets all the calls that were made to PurchaseScheduledInstances.
// Check the length with:
//     len(mockedClient.PurchaseScheduledInstancesCalls())
func (mock *ClientMock) PurchaseScheduledInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.PurchaseScheduledInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.PurchaseScheduledInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockPurchaseScheduledInstances.RLock()
	calls = mock.calls.PurchaseScheduledInstances
	mock.lockPurchaseScheduledInstances.RUnlock()
	return calls
}

// RebootInstances calls RebootInstancesFunc.
func (mock *ClientMock) RebootInstances(ctx context.Context, params *ec2.RebootInstancesInput, optFns ...func(*ec2.Options)) (*ec2.RebootInstancesOutput, error) {
	if mock.RebootInstancesFunc == nil {
		panic("ClientMock.RebootInstancesFunc: method is nil but Client.RebootInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RebootInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRebootInstances.Lock()
	mock.calls.RebootInstances = append(mock.calls.RebootInstances, callInfo)
	mock.lockRebootInstances.Unlock()
	return mock.RebootInstancesFunc(ctx, params, optFns...)
}

// RebootInstancesCalls gets all the calls that were made to RebootInstances.
// Check the length with:
//     len(mockedClient.RebootInstancesCalls())
func (mock *ClientMock) RebootInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.RebootInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RebootInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRebootInstances.RLock()
	calls = mock.calls.RebootInstances
	mock.lockRebootInstances.RUnlock()
	return calls
}

// RegisterImage calls RegisterImageFunc.
func (mock *ClientMock) RegisterImage(ctx context.Context, params *ec2.RegisterImageInput, optFns ...func(*ec2.Options)) (*ec2.RegisterImageOutput, error) {
	if mock.RegisterImageFunc == nil {
		panic("ClientMock.RegisterImageFunc: method is nil but Client.RegisterImage was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RegisterImageInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRegisterImage.Lock()
	mock.calls.RegisterImage = append(mock.calls.RegisterImage, callInfo)
	mock.lockRegisterImage.Unlock()
	return mock.RegisterImageFunc(ctx, params, optFns...)
}

// RegisterImageCalls gets all the calls that were made to RegisterImage.
// Check the length with:
//     len(mockedClient.RegisterImageCalls())
func (mock *ClientMock) RegisterImageCalls() []struct {
	Ctx    context.Context
	Params *ec2.RegisterImageInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RegisterImageInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRegisterImage.RLock()
	calls = mock.calls.RegisterImage
	mock.lockRegisterImage.RUnlock()
	return calls
}

// RegisterInstanceEventNotificationAttributes calls RegisterInstanceEventNotificationAttributesFunc.
func (mock *ClientMock) RegisterInstanceEventNotificationAttributes(ctx context.Context, params *ec2.RegisterInstanceEventNotificationAttributesInput, optFns ...func(*ec2.Options)) (*ec2.RegisterInstanceEventNotificationAttributesOutput, error) {
	if mock.RegisterInstanceEventNotificationAttributesFunc == nil {
		panic("ClientMock.RegisterInstanceEventNotificationAttributesFunc: method is nil but Client.RegisterInstanceEventNotificationAttributes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RegisterInstanceEventNotificationAttributesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRegisterInstanceEventNotificationAttributes.Lock()
	mock.calls.RegisterInstanceEventNotificationAttributes = append(mock.calls.RegisterInstanceEventNotificationAttributes, callInfo)
	mock.lockRegisterInstanceEventNotificationAttributes.Unlock()
	return mock.RegisterInstanceEventNotificationAttributesFunc(ctx, params, optFns...)
}

// RegisterInstanceEventNotificationAttributesCalls gets all the calls that were made to RegisterInstanceEventNotificationAttributes.
// Check the length with:
//     len(mockedClient.RegisterInstanceEventNotificationAttributesCalls())
func (mock *ClientMock) RegisterInstanceEventNotificationAttributesCalls() []struct {
	Ctx    context.Context
	Params *ec2.RegisterInstanceEventNotificationAttributesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RegisterInstanceEventNotificationAttributesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRegisterInstanceEventNotificationAttributes.RLock()
	calls = mock.calls.RegisterInstanceEventNotificationAttributes
	mock.lockRegisterInstanceEventNotificationAttributes.RUnlock()
	return calls
}

// RegisterTransitGatewayMulticastGroupMembers calls RegisterTransitGatewayMulticastGroupMembersFunc.
func (mock *ClientMock) RegisterTransitGatewayMulticastGroupMembers(ctx context.Context, params *ec2.RegisterTransitGatewayMulticastGroupMembersInput, optFns ...func(*ec2.Options)) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error) {
	if mock.RegisterTransitGatewayMulticastGroupMembersFunc == nil {
		panic("ClientMock.RegisterTransitGatewayMulticastGroupMembersFunc: method is nil but Client.RegisterTransitGatewayMulticastGroupMembers was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RegisterTransitGatewayMulticastGroupMembersInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRegisterTransitGatewayMulticastGroupMembers.Lock()
	mock.calls.RegisterTransitGatewayMulticastGroupMembers = append(mock.calls.RegisterTransitGatewayMulticastGroupMembers, callInfo)
	mock.lockRegisterTransitGatewayMulticastGroupMembers.Unlock()
	return mock.RegisterTransitGatewayMulticastGroupMembersFunc(ctx, params, optFns...)
}

// RegisterTransitGatewayMulticastGroupMembersCalls gets all the calls that were made to RegisterTransitGatewayMulticastGroupMembers.
// Check the length with:
//     len(mockedClient.RegisterTransitGatewayMulticastGroupMembersCalls())
func (mock *ClientMock) RegisterTransitGatewayMulticastGroupMembersCalls() []struct {
	Ctx    context.Context
	Params *ec2.RegisterTransitGatewayMulticastGroupMembersInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RegisterTransitGatewayMulticastGroupMembersInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRegisterTransitGatewayMulticastGroupMembers.RLock()
	calls = mock.calls.RegisterTransitGatewayMulticastGroupMembers
	mock.lockRegisterTransitGatewayMulticastGroupMembers.RUnlock()
	return calls
}

// RegisterTransitGatewayMulticastGroupSources calls RegisterTransitGatewayMulticastGroupSourcesFunc.
func (mock *ClientMock) RegisterTransitGatewayMulticastGroupSources(ctx context.Context, params *ec2.RegisterTransitGatewayMulticastGroupSourcesInput, optFns ...func(*ec2.Options)) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error) {
	if mock.RegisterTransitGatewayMulticastGroupSourcesFunc == nil {
		panic("ClientMock.RegisterTransitGatewayMulticastGroupSourcesFunc: method is nil but Client.RegisterTransitGatewayMulticastGroupSources was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRegisterTransitGatewayMulticastGroupSources.Lock()
	mock.calls.RegisterTransitGatewayMulticastGroupSources = append(mock.calls.RegisterTransitGatewayMulticastGroupSources, callInfo)
	mock.lockRegisterTransitGatewayMulticastGroupSources.Unlock()
	return mock.RegisterTransitGatewayMulticastGroupSourcesFunc(ctx, params, optFns...)
}

// RegisterTransitGatewayMulticastGroupSourcesCalls gets all the calls that were made to RegisterTransitGatewayMulticastGroupSources.
// Check the length with:
//     len(mockedClient.RegisterTransitGatewayMulticastGroupSourcesCalls())
func (mock *ClientMock) RegisterTransitGatewayMulticastGroupSourcesCalls() []struct {
	Ctx    context.Context
	Params *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RegisterTransitGatewayMulticastGroupSourcesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRegisterTransitGatewayMulticastGroupSources.RLock()
	calls = mock.calls.RegisterTransitGatewayMulticastGroupSources
	mock.lockRegisterTransitGatewayMulticastGroupSources.RUnlock()
	return calls
}

// RejectTransitGatewayMulticastDomainAssociations calls RejectTransitGatewayMulticastDomainAssociationsFunc.
func (mock *ClientMock) RejectTransitGatewayMulticastDomainAssociations(ctx context.Context, params *ec2.RejectTransitGatewayMulticastDomainAssociationsInput, optFns ...func(*ec2.Options)) (*ec2.RejectTransitGatewayMulticastDomainAssociationsOutput, error) {
	if mock.RejectTransitGatewayMulticastDomainAssociationsFunc == nil {
		panic("ClientMock.RejectTransitGatewayMulticastDomainAssociationsFunc: method is nil but Client.RejectTransitGatewayMulticastDomainAssociations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RejectTransitGatewayMulticastDomainAssociationsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRejectTransitGatewayMulticastDomainAssociations.Lock()
	mock.calls.RejectTransitGatewayMulticastDomainAssociations = append(mock.calls.RejectTransitGatewayMulticastDomainAssociations, callInfo)
	mock.lockRejectTransitGatewayMulticastDomainAssociations.Unlock()
	return mock.RejectTransitGatewayMulticastDomainAssociationsFunc(ctx, params, optFns...)
}

// RejectTransitGatewayMulticastDomainAssociationsCalls gets all the calls that were made to RejectTransitGatewayMulticastDomainAssociations.
// Check the length with:
//     len(mockedClient.RejectTransitGatewayMulticastDomainAssociationsCalls())
func (mock *ClientMock) RejectTransitGatewayMulticastDomainAssociationsCalls() []struct {
	Ctx    context.Context
	Params *ec2.RejectTransitGatewayMulticastDomainAssociationsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RejectTransitGatewayMulticastDomainAssociationsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRejectTransitGatewayMulticastDomainAssociations.RLock()
	calls = mock.calls.RejectTransitGatewayMulticastDomainAssociations
	mock.lockRejectTransitGatewayMulticastDomainAssociations.RUnlock()
	return calls
}

// RejectTransitGatewayPeeringAttachment calls RejectTransitGatewayPeeringAttachmentFunc.
func (mock *ClientMock) RejectTransitGatewayPeeringAttachment(ctx context.Context, params *ec2.RejectTransitGatewayPeeringAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error) {
	if mock.RejectTransitGatewayPeeringAttachmentFunc == nil {
		panic("ClientMock.RejectTransitGatewayPeeringAttachmentFunc: method is nil but Client.RejectTransitGatewayPeeringAttachment was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RejectTransitGatewayPeeringAttachmentInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRejectTransitGatewayPeeringAttachment.Lock()
	mock.calls.RejectTransitGatewayPeeringAttachment = append(mock.calls.RejectTransitGatewayPeeringAttachment, callInfo)
	mock.lockRejectTransitGatewayPeeringAttachment.Unlock()
	return mock.RejectTransitGatewayPeeringAttachmentFunc(ctx, params, optFns...)
}

// RejectTransitGatewayPeeringAttachmentCalls gets all the calls that were made to RejectTransitGatewayPeeringAttachment.
// Check the length with:
//     len(mockedClient.RejectTransitGatewayPeeringAttachmentCalls())
func (mock *ClientMock) RejectTransitGatewayPeeringAttachmentCalls() []struct {
	Ctx    context.Context
	Params *ec2.RejectTransitGatewayPeeringAttachmentInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RejectTransitGatewayPeeringAttachmentInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRejectTransitGatewayPeeringAttachment.RLock()
	calls = mock.calls.RejectTransitGatewayPeeringAttachment
	mock.lockRejectTransitGatewayPeeringAttachment.RUnlock()
	return calls
}

// RejectTransitGatewayVpcAttachment calls RejectTransitGatewayVpcAttachmentFunc.
func (mock *ClientMock) RejectTransitGatewayVpcAttachment(ctx context.Context, params *ec2.RejectTransitGatewayVpcAttachmentInput, optFns ...func(*ec2.Options)) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
	if mock.RejectTransitGatewayVpcAttachmentFunc == nil {
		panic("ClientMock.RejectTransitGatewayVpcAttachmentFunc: method is nil but Client.RejectTransitGatewayVpcAttachment was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RejectTransitGatewayVpcAttachmentInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRejectTransitGatewayVpcAttachment.Lock()
	mock.calls.RejectTransitGatewayVpcAttachment = append(mock.calls.RejectTransitGatewayVpcAttachment, callInfo)
	mock.lockRejectTransitGatewayVpcAttachment.Unlock()
	return mock.RejectTransitGatewayVpcAttachmentFunc(ctx, params, optFns...)
}

// RejectTransitGatewayVpcAttachmentCalls gets all the calls that were made to RejectTransitGatewayVpcAttachment.
// Check the length with:
//     len(mockedClient.RejectTransitGatewayVpcAttachmentCalls())
func (mock *ClientMock) RejectTransitGatewayVpcAttachmentCalls() []struct {
	Ctx    context.Context
	Params *ec2.RejectTransitGatewayVpcAttachmentInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RejectTransitGatewayVpcAttachmentInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRejectTransitGatewayVpcAttachment.RLock()
	calls = mock.calls.RejectTransitGatewayVpcAttachment
	mock.lockRejectTransitGatewayVpcAttachment.RUnlock()
	return calls
}

// RejectVpcEndpointConnections calls RejectVpcEndpointConnectionsFunc.
func (mock *ClientMock) RejectVpcEndpointConnections(ctx context.Context, params *ec2.RejectVpcEndpointConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
	if mock.RejectVpcEndpointConnectionsFunc == nil {
		panic("ClientMock.RejectVpcEndpointConnectionsFunc: method is nil but Client.RejectVpcEndpointConnections was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RejectVpcEndpointConnectionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRejectVpcEndpointConnections.Lock()
	mock.calls.RejectVpcEndpointConnections = append(mock.calls.RejectVpcEndpointConnections, callInfo)
	mock.lockRejectVpcEndpointConnections.Unlock()
	return mock.RejectVpcEndpointConnectionsFunc(ctx, params, optFns...)
}

// RejectVpcEndpointConnectionsCalls gets all the calls that were made to RejectVpcEndpointConnections.
// Check the length with:
//     len(mockedClient.RejectVpcEndpointConnectionsCalls())
func (mock *ClientMock) RejectVpcEndpointConnectionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.RejectVpcEndpointConnectionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RejectVpcEndpointConnectionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRejectVpcEndpointConnections.RLock()
	calls = mock.calls.RejectVpcEndpointConnections
	mock.lockRejectVpcEndpointConnections.RUnlock()
	return calls
}

// RejectVpcPeeringConnection calls RejectVpcPeeringConnectionFunc.
func (mock *ClientMock) RejectVpcPeeringConnection(ctx context.Context, params *ec2.RejectVpcPeeringConnectionInput, optFns ...func(*ec2.Options)) (*ec2.RejectVpcPeeringConnectionOutput, error) {
	if mock.RejectVpcPeeringConnectionFunc == nil {
		panic("ClientMock.RejectVpcPeeringConnectionFunc: method is nil but Client.RejectVpcPeeringConnection was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RejectVpcPeeringConnectionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRejectVpcPeeringConnection.Lock()
	mock.calls.RejectVpcPeeringConnection = append(mock.calls.RejectVpcPeeringConnection, callInfo)
	mock.lockRejectVpcPeeringConnection.Unlock()
	return mock.RejectVpcPeeringConnectionFunc(ctx, params, optFns...)
}

// RejectVpcPeeringConnectionCalls gets all the calls that were made to RejectVpcPeeringConnection.
// Check the length with:
//     len(mockedClient.RejectVpcPeeringConnectionCalls())
func (mock *ClientMock) RejectVpcPeeringConnectionCalls() []struct {
	Ctx    context.Context
	Params *ec2.RejectVpcPeeringConnectionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RejectVpcPeeringConnectionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRejectVpcPeeringConnection.RLock()
	calls = mock.calls.RejectVpcPeeringConnection
	mock.lockRejectVpcPeeringConnection.RUnlock()
	return calls
}

// ReleaseAddress calls ReleaseAddressFunc.
func (mock *ClientMock) ReleaseAddress(ctx context.Context, params *ec2.ReleaseAddressInput, optFns ...func(*ec2.Options)) (*ec2.ReleaseAddressOutput, error) {
	if mock.ReleaseAddressFunc == nil {
		panic("ClientMock.ReleaseAddressFunc: method is nil but Client.ReleaseAddress was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ReleaseAddressInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockReleaseAddress.Lock()
	mock.calls.ReleaseAddress = append(mock.calls.ReleaseAddress, callInfo)
	mock.lockReleaseAddress.Unlock()
	return mock.ReleaseAddressFunc(ctx, params, optFns...)
}

// ReleaseAddressCalls gets all the calls that were made to ReleaseAddress.
// Check the length with:
//     len(mockedClient.ReleaseAddressCalls())
func (mock *ClientMock) ReleaseAddressCalls() []struct {
	Ctx    context.Context
	Params *ec2.ReleaseAddressInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ReleaseAddressInput
		OptFns []func(*ec2.Options)
	}
	mock.lockReleaseAddress.RLock()
	calls = mock.calls.ReleaseAddress
	mock.lockReleaseAddress.RUnlock()
	return calls
}

// ReleaseHosts calls ReleaseHostsFunc.
func (mock *ClientMock) ReleaseHosts(ctx context.Context, params *ec2.ReleaseHostsInput, optFns ...func(*ec2.Options)) (*ec2.ReleaseHostsOutput, error) {
	if mock.ReleaseHostsFunc == nil {
		panic("ClientMock.ReleaseHostsFunc: method is nil but Client.ReleaseHosts was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ReleaseHostsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockReleaseHosts.Lock()
	mock.calls.ReleaseHosts = append(mock.calls.ReleaseHosts, callInfo)
	mock.lockReleaseHosts.Unlock()
	return mock.ReleaseHostsFunc(ctx, params, optFns...)
}

// ReleaseHostsCalls gets all the calls that were made to ReleaseHosts.
// Check the length with:
//     len(mockedClient.ReleaseHostsCalls())
func (mock *ClientMock) ReleaseHostsCalls() []struct {
	Ctx    context.Context
	Params *ec2.ReleaseHostsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ReleaseHostsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockReleaseHosts.RLock()
	calls = mock.calls.ReleaseHosts
	mock.lockReleaseHosts.RUnlock()
	return calls
}

// ReleaseIpamPoolAllocation calls ReleaseIpamPoolAllocationFunc.
func (mock *ClientMock) ReleaseIpamPoolAllocation(ctx context.Context, params *ec2.ReleaseIpamPoolAllocationInput, optFns ...func(*ec2.Options)) (*ec2.ReleaseIpamPoolAllocationOutput, error) {
	if mock.ReleaseIpamPoolAllocationFunc == nil {
		panic("ClientMock.ReleaseIpamPoolAllocationFunc: method is nil but Client.ReleaseIpamPoolAllocation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ReleaseIpamPoolAllocationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockReleaseIpamPoolAllocation.Lock()
	mock.calls.ReleaseIpamPoolAllocation = append(mock.calls.ReleaseIpamPoolAllocation, callInfo)
	mock.lockReleaseIpamPoolAllocation.Unlock()
	return mock.ReleaseIpamPoolAllocationFunc(ctx, params, optFns...)
}

// ReleaseIpamPoolAllocationCalls gets all the calls that were made to ReleaseIpamPoolAllocation.
// Check the length with:
//     len(mockedClient.ReleaseIpamPoolAllocationCalls())
func (mock *ClientMock) ReleaseIpamPoolAllocationCalls() []struct {
	Ctx    context.Context
	Params *ec2.ReleaseIpamPoolAllocationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ReleaseIpamPoolAllocationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockReleaseIpamPoolAllocation.RLock()
	calls = mock.calls.ReleaseIpamPoolAllocation
	mock.lockReleaseIpamPoolAllocation.RUnlock()
	return calls
}

// ReplaceIamInstanceProfileAssociation calls ReplaceIamInstanceProfileAssociationFunc.
func (mock *ClientMock) ReplaceIamInstanceProfileAssociation(ctx context.Context, params *ec2.ReplaceIamInstanceProfileAssociationInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
	if mock.ReplaceIamInstanceProfileAssociationFunc == nil {
		panic("ClientMock.ReplaceIamInstanceProfileAssociationFunc: method is nil but Client.ReplaceIamInstanceProfileAssociation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ReplaceIamInstanceProfileAssociationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockReplaceIamInstanceProfileAssociation.Lock()
	mock.calls.ReplaceIamInstanceProfileAssociation = append(mock.calls.ReplaceIamInstanceProfileAssociation, callInfo)
	mock.lockReplaceIamInstanceProfileAssociation.Unlock()
	return mock.ReplaceIamInstanceProfileAssociationFunc(ctx, params, optFns...)
}

// ReplaceIamInstanceProfileAssociationCalls gets all the calls that were made to ReplaceIamInstanceProfileAssociation.
// Check the length with:
//     len(mockedClient.ReplaceIamInstanceProfileAssociationCalls())
func (mock *ClientMock) ReplaceIamInstanceProfileAssociationCalls() []struct {
	Ctx    context.Context
	Params *ec2.ReplaceIamInstanceProfileAssociationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ReplaceIamInstanceProfileAssociationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockReplaceIamInstanceProfileAssociation.RLock()
	calls = mock.calls.ReplaceIamInstanceProfileAssociation
	mock.lockReplaceIamInstanceProfileAssociation.RUnlock()
	return calls
}

// ReplaceNetworkAclAssociation calls ReplaceNetworkAclAssociationFunc.
func (mock *ClientMock) ReplaceNetworkAclAssociation(ctx context.Context, params *ec2.ReplaceNetworkAclAssociationInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
	if mock.ReplaceNetworkAclAssociationFunc == nil {
		panic("ClientMock.ReplaceNetworkAclAssociationFunc: method is nil but Client.ReplaceNetworkAclAssociation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ReplaceNetworkAclAssociationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockReplaceNetworkAclAssociation.Lock()
	mock.calls.ReplaceNetworkAclAssociation = append(mock.calls.ReplaceNetworkAclAssociation, callInfo)
	mock.lockReplaceNetworkAclAssociation.Unlock()
	return mock.ReplaceNetworkAclAssociationFunc(ctx, params, optFns...)
}

// ReplaceNetworkAclAssociationCalls gets all the calls that were made to ReplaceNetworkAclAssociation.
// Check the length with:
//     len(mockedClient.ReplaceNetworkAclAssociationCalls())
func (mock *ClientMock) ReplaceNetworkAclAssociationCalls() []struct {
	Ctx    context.Context
	Params *ec2.ReplaceNetworkAclAssociationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ReplaceNetworkAclAssociationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockReplaceNetworkAclAssociation.RLock()
	calls = mock.calls.ReplaceNetworkAclAssociation
	mock.lockReplaceNetworkAclAssociation.RUnlock()
	return calls
}

// ReplaceNetworkAclEntry calls ReplaceNetworkAclEntryFunc.
func (mock *ClientMock) ReplaceNetworkAclEntry(ctx context.Context, params *ec2.ReplaceNetworkAclEntryInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceNetworkAclEntryOutput, error) {
	if mock.ReplaceNetworkAclEntryFunc == nil {
		panic("ClientMock.ReplaceNetworkAclEntryFunc: method is nil but Client.ReplaceNetworkAclEntry was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ReplaceNetworkAclEntryInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockReplaceNetworkAclEntry.Lock()
	mock.calls.ReplaceNetworkAclEntry = append(mock.calls.ReplaceNetworkAclEntry, callInfo)
	mock.lockReplaceNetworkAclEntry.Unlock()
	return mock.ReplaceNetworkAclEntryFunc(ctx, params, optFns...)
}

// ReplaceNetworkAclEntryCalls gets all the calls that were made to ReplaceNetworkAclEntry.
// Check the length with:
//     len(mockedClient.ReplaceNetworkAclEntryCalls())
func (mock *ClientMock) ReplaceNetworkAclEntryCalls() []struct {
	Ctx    context.Context
	Params *ec2.ReplaceNetworkAclEntryInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ReplaceNetworkAclEntryInput
		OptFns []func(*ec2.Options)
	}
	mock.lockReplaceNetworkAclEntry.RLock()
	calls = mock.calls.ReplaceNetworkAclEntry
	mock.lockReplaceNetworkAclEntry.RUnlock()
	return calls
}

// ReplaceRoute calls ReplaceRouteFunc.
func (mock *ClientMock) ReplaceRoute(ctx context.Context, params *ec2.ReplaceRouteInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceRouteOutput, error) {
	if mock.ReplaceRouteFunc == nil {
		panic("ClientMock.ReplaceRouteFunc: method is nil but Client.ReplaceRoute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ReplaceRouteInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockReplaceRoute.Lock()
	mock.calls.ReplaceRoute = append(mock.calls.ReplaceRoute, callInfo)
	mock.lockReplaceRoute.Unlock()
	return mock.ReplaceRouteFunc(ctx, params, optFns...)
}

// ReplaceRouteCalls gets all the calls that were made to ReplaceRoute.
// Check the length with:
//     len(mockedClient.ReplaceRouteCalls())
func (mock *ClientMock) ReplaceRouteCalls() []struct {
	Ctx    context.Context
	Params *ec2.ReplaceRouteInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ReplaceRouteInput
		OptFns []func(*ec2.Options)
	}
	mock.lockReplaceRoute.RLock()
	calls = mock.calls.ReplaceRoute
	mock.lockReplaceRoute.RUnlock()
	return calls
}

// ReplaceRouteTableAssociation calls ReplaceRouteTableAssociationFunc.
func (mock *ClientMock) ReplaceRouteTableAssociation(ctx context.Context, params *ec2.ReplaceRouteTableAssociationInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	if mock.ReplaceRouteTableAssociationFunc == nil {
		panic("ClientMock.ReplaceRouteTableAssociationFunc: method is nil but Client.ReplaceRouteTableAssociation was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ReplaceRouteTableAssociationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockReplaceRouteTableAssociation.Lock()
	mock.calls.ReplaceRouteTableAssociation = append(mock.calls.ReplaceRouteTableAssociation, callInfo)
	mock.lockReplaceRouteTableAssociation.Unlock()
	return mock.ReplaceRouteTableAssociationFunc(ctx, params, optFns...)
}

// ReplaceRouteTableAssociationCalls gets all the calls that were made to ReplaceRouteTableAssociation.
// Check the length with:
//     len(mockedClient.ReplaceRouteTableAssociationCalls())
func (mock *ClientMock) ReplaceRouteTableAssociationCalls() []struct {
	Ctx    context.Context
	Params *ec2.ReplaceRouteTableAssociationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ReplaceRouteTableAssociationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockReplaceRouteTableAssociation.RLock()
	calls = mock.calls.ReplaceRouteTableAssociation
	mock.lockReplaceRouteTableAssociation.RUnlock()
	return calls
}

// ReplaceTransitGatewayRoute calls ReplaceTransitGatewayRouteFunc.
func (mock *ClientMock) ReplaceTransitGatewayRoute(ctx context.Context, params *ec2.ReplaceTransitGatewayRouteInput, optFns ...func(*ec2.Options)) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
	if mock.ReplaceTransitGatewayRouteFunc == nil {
		panic("ClientMock.ReplaceTransitGatewayRouteFunc: method is nil but Client.ReplaceTransitGatewayRoute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ReplaceTransitGatewayRouteInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockReplaceTransitGatewayRoute.Lock()
	mock.calls.ReplaceTransitGatewayRoute = append(mock.calls.ReplaceTransitGatewayRoute, callInfo)
	mock.lockReplaceTransitGatewayRoute.Unlock()
	return mock.ReplaceTransitGatewayRouteFunc(ctx, params, optFns...)
}

// ReplaceTransitGatewayRouteCalls gets all the calls that were made to ReplaceTransitGatewayRoute.
// Check the length with:
//     len(mockedClient.ReplaceTransitGatewayRouteCalls())
func (mock *ClientMock) ReplaceTransitGatewayRouteCalls() []struct {
	Ctx    context.Context
	Params *ec2.ReplaceTransitGatewayRouteInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ReplaceTransitGatewayRouteInput
		OptFns []func(*ec2.Options)
	}
	mock.lockReplaceTransitGatewayRoute.RLock()
	calls = mock.calls.ReplaceTransitGatewayRoute
	mock.lockReplaceTransitGatewayRoute.RUnlock()
	return calls
}

// ReportInstanceStatus calls ReportInstanceStatusFunc.
func (mock *ClientMock) ReportInstanceStatus(ctx context.Context, params *ec2.ReportInstanceStatusInput, optFns ...func(*ec2.Options)) (*ec2.ReportInstanceStatusOutput, error) {
	if mock.ReportInstanceStatusFunc == nil {
		panic("ClientMock.ReportInstanceStatusFunc: method is nil but Client.ReportInstanceStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ReportInstanceStatusInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockReportInstanceStatus.Lock()
	mock.calls.ReportInstanceStatus = append(mock.calls.ReportInstanceStatus, callInfo)
	mock.lockReportInstanceStatus.Unlock()
	return mock.ReportInstanceStatusFunc(ctx, params, optFns...)
}

// ReportInstanceStatusCalls gets all the calls that were made to ReportInstanceStatus.
// Check the length with:
//     len(mockedClient.ReportInstanceStatusCalls())
func (mock *ClientMock) ReportInstanceStatusCalls() []struct {
	Ctx    context.Context
	Params *ec2.ReportInstanceStatusInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ReportInstanceStatusInput
		OptFns []func(*ec2.Options)
	}
	mock.lockReportInstanceStatus.RLock()
	calls = mock.calls.ReportInstanceStatus
	mock.lockReportInstanceStatus.RUnlock()
	return calls
}

// RequestSpotFleet calls RequestSpotFleetFunc.
func (mock *ClientMock) RequestSpotFleet(ctx context.Context, params *ec2.RequestSpotFleetInput, optFns ...func(*ec2.Options)) (*ec2.RequestSpotFleetOutput, error) {
	if mock.RequestSpotFleetFunc == nil {
		panic("ClientMock.RequestSpotFleetFunc: method is nil but Client.RequestSpotFleet was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RequestSpotFleetInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRequestSpotFleet.Lock()
	mock.calls.RequestSpotFleet = append(mock.calls.RequestSpotFleet, callInfo)
	mock.lockRequestSpotFleet.Unlock()
	return mock.RequestSpotFleetFunc(ctx, params, optFns...)
}

// RequestSpotFleetCalls gets all the calls that were made to RequestSpotFleet.
// Check the length with:
//     len(mockedClient.RequestSpotFleetCalls())
func (mock *ClientMock) RequestSpotFleetCalls() []struct {
	Ctx    context.Context
	Params *ec2.RequestSpotFleetInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RequestSpotFleetInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRequestSpotFleet.RLock()
	calls = mock.calls.RequestSpotFleet
	mock.lockRequestSpotFleet.RUnlock()
	return calls
}

// RequestSpotInstances calls RequestSpotInstancesFunc.
func (mock *ClientMock) RequestSpotInstances(ctx context.Context, params *ec2.RequestSpotInstancesInput, optFns ...func(*ec2.Options)) (*ec2.RequestSpotInstancesOutput, error) {
	if mock.RequestSpotInstancesFunc == nil {
		panic("ClientMock.RequestSpotInstancesFunc: method is nil but Client.RequestSpotInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RequestSpotInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRequestSpotInstances.Lock()
	mock.calls.RequestSpotInstances = append(mock.calls.RequestSpotInstances, callInfo)
	mock.lockRequestSpotInstances.Unlock()
	return mock.RequestSpotInstancesFunc(ctx, params, optFns...)
}

// RequestSpotInstancesCalls gets all the calls that were made to RequestSpotInstances.
// Check the length with:
//     len(mockedClient.RequestSpotInstancesCalls())
func (mock *ClientMock) RequestSpotInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.RequestSpotInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RequestSpotInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRequestSpotInstances.RLock()
	calls = mock.calls.RequestSpotInstances
	mock.lockRequestSpotInstances.RUnlock()
	return calls
}

// ResetAddressAttribute calls ResetAddressAttributeFunc.
func (mock *ClientMock) ResetAddressAttribute(ctx context.Context, params *ec2.ResetAddressAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetAddressAttributeOutput, error) {
	if mock.ResetAddressAttributeFunc == nil {
		panic("ClientMock.ResetAddressAttributeFunc: method is nil but Client.ResetAddressAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ResetAddressAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockResetAddressAttribute.Lock()
	mock.calls.ResetAddressAttribute = append(mock.calls.ResetAddressAttribute, callInfo)
	mock.lockResetAddressAttribute.Unlock()
	return mock.ResetAddressAttributeFunc(ctx, params, optFns...)
}

// ResetAddressAttributeCalls gets all the calls that were made to ResetAddressAttribute.
// Check the length with:
//     len(mockedClient.ResetAddressAttributeCalls())
func (mock *ClientMock) ResetAddressAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ResetAddressAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ResetAddressAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockResetAddressAttribute.RLock()
	calls = mock.calls.ResetAddressAttribute
	mock.lockResetAddressAttribute.RUnlock()
	return calls
}

// ResetEbsDefaultKmsKeyId calls ResetEbsDefaultKmsKeyIdFunc.
func (mock *ClientMock) ResetEbsDefaultKmsKeyId(ctx context.Context, params *ec2.ResetEbsDefaultKmsKeyIdInput, optFns ...func(*ec2.Options)) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error) {
	if mock.ResetEbsDefaultKmsKeyIdFunc == nil {
		panic("ClientMock.ResetEbsDefaultKmsKeyIdFunc: method is nil but Client.ResetEbsDefaultKmsKeyId was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ResetEbsDefaultKmsKeyIdInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockResetEbsDefaultKmsKeyId.Lock()
	mock.calls.ResetEbsDefaultKmsKeyId = append(mock.calls.ResetEbsDefaultKmsKeyId, callInfo)
	mock.lockResetEbsDefaultKmsKeyId.Unlock()
	return mock.ResetEbsDefaultKmsKeyIdFunc(ctx, params, optFns...)
}

// ResetEbsDefaultKmsKeyIdCalls gets all the calls that were made to ResetEbsDefaultKmsKeyId.
// Check the length with:
//     len(mockedClient.ResetEbsDefaultKmsKeyIdCalls())
func (mock *ClientMock) ResetEbsDefaultKmsKeyIdCalls() []struct {
	Ctx    context.Context
	Params *ec2.ResetEbsDefaultKmsKeyIdInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ResetEbsDefaultKmsKeyIdInput
		OptFns []func(*ec2.Options)
	}
	mock.lockResetEbsDefaultKmsKeyId.RLock()
	calls = mock.calls.ResetEbsDefaultKmsKeyId
	mock.lockResetEbsDefaultKmsKeyId.RUnlock()
	return calls
}

// ResetFpgaImageAttribute calls ResetFpgaImageAttributeFunc.
func (mock *ClientMock) ResetFpgaImageAttribute(ctx context.Context, params *ec2.ResetFpgaImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetFpgaImageAttributeOutput, error) {
	if mock.ResetFpgaImageAttributeFunc == nil {
		panic("ClientMock.ResetFpgaImageAttributeFunc: method is nil but Client.ResetFpgaImageAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ResetFpgaImageAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockResetFpgaImageAttribute.Lock()
	mock.calls.ResetFpgaImageAttribute = append(mock.calls.ResetFpgaImageAttribute, callInfo)
	mock.lockResetFpgaImageAttribute.Unlock()
	return mock.ResetFpgaImageAttributeFunc(ctx, params, optFns...)
}

// ResetFpgaImageAttributeCalls gets all the calls that were made to ResetFpgaImageAttribute.
// Check the length with:
//     len(mockedClient.ResetFpgaImageAttributeCalls())
func (mock *ClientMock) ResetFpgaImageAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ResetFpgaImageAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ResetFpgaImageAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockResetFpgaImageAttribute.RLock()
	calls = mock.calls.ResetFpgaImageAttribute
	mock.lockResetFpgaImageAttribute.RUnlock()
	return calls
}

// ResetImageAttribute calls ResetImageAttributeFunc.
func (mock *ClientMock) ResetImageAttribute(ctx context.Context, params *ec2.ResetImageAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetImageAttributeOutput, error) {
	if mock.ResetImageAttributeFunc == nil {
		panic("ClientMock.ResetImageAttributeFunc: method is nil but Client.ResetImageAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ResetImageAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockResetImageAttribute.Lock()
	mock.calls.ResetImageAttribute = append(mock.calls.ResetImageAttribute, callInfo)
	mock.lockResetImageAttribute.Unlock()
	return mock.ResetImageAttributeFunc(ctx, params, optFns...)
}

// ResetImageAttributeCalls gets all the calls that were made to ResetImageAttribute.
// Check the length with:
//     len(mockedClient.ResetImageAttributeCalls())
func (mock *ClientMock) ResetImageAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ResetImageAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ResetImageAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockResetImageAttribute.RLock()
	calls = mock.calls.ResetImageAttribute
	mock.lockResetImageAttribute.RUnlock()
	return calls
}

// ResetInstanceAttribute calls ResetInstanceAttributeFunc.
func (mock *ClientMock) ResetInstanceAttribute(ctx context.Context, params *ec2.ResetInstanceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetInstanceAttributeOutput, error) {
	if mock.ResetInstanceAttributeFunc == nil {
		panic("ClientMock.ResetInstanceAttributeFunc: method is nil but Client.ResetInstanceAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ResetInstanceAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockResetInstanceAttribute.Lock()
	mock.calls.ResetInstanceAttribute = append(mock.calls.ResetInstanceAttribute, callInfo)
	mock.lockResetInstanceAttribute.Unlock()
	return mock.ResetInstanceAttributeFunc(ctx, params, optFns...)
}

// ResetInstanceAttributeCalls gets all the calls that were made to ResetInstanceAttribute.
// Check the length with:
//     len(mockedClient.ResetInstanceAttributeCalls())
func (mock *ClientMock) ResetInstanceAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ResetInstanceAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ResetInstanceAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockResetInstanceAttribute.RLock()
	calls = mock.calls.ResetInstanceAttribute
	mock.lockResetInstanceAttribute.RUnlock()
	return calls
}

// ResetNetworkInterfaceAttribute calls ResetNetworkInterfaceAttributeFunc.
func (mock *ClientMock) ResetNetworkInterfaceAttribute(ctx context.Context, params *ec2.ResetNetworkInterfaceAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	if mock.ResetNetworkInterfaceAttributeFunc == nil {
		panic("ClientMock.ResetNetworkInterfaceAttributeFunc: method is nil but Client.ResetNetworkInterfaceAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ResetNetworkInterfaceAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockResetNetworkInterfaceAttribute.Lock()
	mock.calls.ResetNetworkInterfaceAttribute = append(mock.calls.ResetNetworkInterfaceAttribute, callInfo)
	mock.lockResetNetworkInterfaceAttribute.Unlock()
	return mock.ResetNetworkInterfaceAttributeFunc(ctx, params, optFns...)
}

// ResetNetworkInterfaceAttributeCalls gets all the calls that were made to ResetNetworkInterfaceAttribute.
// Check the length with:
//     len(mockedClient.ResetNetworkInterfaceAttributeCalls())
func (mock *ClientMock) ResetNetworkInterfaceAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ResetNetworkInterfaceAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ResetNetworkInterfaceAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockResetNetworkInterfaceAttribute.RLock()
	calls = mock.calls.ResetNetworkInterfaceAttribute
	mock.lockResetNetworkInterfaceAttribute.RUnlock()
	return calls
}

// ResetSnapshotAttribute calls ResetSnapshotAttributeFunc.
func (mock *ClientMock) ResetSnapshotAttribute(ctx context.Context, params *ec2.ResetSnapshotAttributeInput, optFns ...func(*ec2.Options)) (*ec2.ResetSnapshotAttributeOutput, error) {
	if mock.ResetSnapshotAttributeFunc == nil {
		panic("ClientMock.ResetSnapshotAttributeFunc: method is nil but Client.ResetSnapshotAttribute was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.ResetSnapshotAttributeInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockResetSnapshotAttribute.Lock()
	mock.calls.ResetSnapshotAttribute = append(mock.calls.ResetSnapshotAttribute, callInfo)
	mock.lockResetSnapshotAttribute.Unlock()
	return mock.ResetSnapshotAttributeFunc(ctx, params, optFns...)
}

// ResetSnapshotAttributeCalls gets all the calls that were made to ResetSnapshotAttribute.
// Check the length with:
//     len(mockedClient.ResetSnapshotAttributeCalls())
func (mock *ClientMock) ResetSnapshotAttributeCalls() []struct {
	Ctx    context.Context
	Params *ec2.ResetSnapshotAttributeInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.ResetSnapshotAttributeInput
		OptFns []func(*ec2.Options)
	}
	mock.lockResetSnapshotAttribute.RLock()
	calls = mock.calls.ResetSnapshotAttribute
	mock.lockResetSnapshotAttribute.RUnlock()
	return calls
}

// RestoreAddressToClassic calls RestoreAddressToClassicFunc.
func (mock *ClientMock) RestoreAddressToClassic(ctx context.Context, params *ec2.RestoreAddressToClassicInput, optFns ...func(*ec2.Options)) (*ec2.RestoreAddressToClassicOutput, error) {
	if mock.RestoreAddressToClassicFunc == nil {
		panic("ClientMock.RestoreAddressToClassicFunc: method is nil but Client.RestoreAddressToClassic was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RestoreAddressToClassicInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRestoreAddressToClassic.Lock()
	mock.calls.RestoreAddressToClassic = append(mock.calls.RestoreAddressToClassic, callInfo)
	mock.lockRestoreAddressToClassic.Unlock()
	return mock.RestoreAddressToClassicFunc(ctx, params, optFns...)
}

// RestoreAddressToClassicCalls gets all the calls that were made to RestoreAddressToClassic.
// Check the length with:
//     len(mockedClient.RestoreAddressToClassicCalls())
func (mock *ClientMock) RestoreAddressToClassicCalls() []struct {
	Ctx    context.Context
	Params *ec2.RestoreAddressToClassicInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RestoreAddressToClassicInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRestoreAddressToClassic.RLock()
	calls = mock.calls.RestoreAddressToClassic
	mock.lockRestoreAddressToClassic.RUnlock()
	return calls
}

// RestoreImageFromRecycleBin calls RestoreImageFromRecycleBinFunc.
func (mock *ClientMock) RestoreImageFromRecycleBin(ctx context.Context, params *ec2.RestoreImageFromRecycleBinInput, optFns ...func(*ec2.Options)) (*ec2.RestoreImageFromRecycleBinOutput, error) {
	if mock.RestoreImageFromRecycleBinFunc == nil {
		panic("ClientMock.RestoreImageFromRecycleBinFunc: method is nil but Client.RestoreImageFromRecycleBin was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RestoreImageFromRecycleBinInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRestoreImageFromRecycleBin.Lock()
	mock.calls.RestoreImageFromRecycleBin = append(mock.calls.RestoreImageFromRecycleBin, callInfo)
	mock.lockRestoreImageFromRecycleBin.Unlock()
	return mock.RestoreImageFromRecycleBinFunc(ctx, params, optFns...)
}

// RestoreImageFromRecycleBinCalls gets all the calls that were made to RestoreImageFromRecycleBin.
// Check the length with:
//     len(mockedClient.RestoreImageFromRecycleBinCalls())
func (mock *ClientMock) RestoreImageFromRecycleBinCalls() []struct {
	Ctx    context.Context
	Params *ec2.RestoreImageFromRecycleBinInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RestoreImageFromRecycleBinInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRestoreImageFromRecycleBin.RLock()
	calls = mock.calls.RestoreImageFromRecycleBin
	mock.lockRestoreImageFromRecycleBin.RUnlock()
	return calls
}

// RestoreManagedPrefixListVersion calls RestoreManagedPrefixListVersionFunc.
func (mock *ClientMock) RestoreManagedPrefixListVersion(ctx context.Context, params *ec2.RestoreManagedPrefixListVersionInput, optFns ...func(*ec2.Options)) (*ec2.RestoreManagedPrefixListVersionOutput, error) {
	if mock.RestoreManagedPrefixListVersionFunc == nil {
		panic("ClientMock.RestoreManagedPrefixListVersionFunc: method is nil but Client.RestoreManagedPrefixListVersion was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RestoreManagedPrefixListVersionInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRestoreManagedPrefixListVersion.Lock()
	mock.calls.RestoreManagedPrefixListVersion = append(mock.calls.RestoreManagedPrefixListVersion, callInfo)
	mock.lockRestoreManagedPrefixListVersion.Unlock()
	return mock.RestoreManagedPrefixListVersionFunc(ctx, params, optFns...)
}

// RestoreManagedPrefixListVersionCalls gets all the calls that were made to RestoreManagedPrefixListVersion.
// Check the length with:
//     len(mockedClient.RestoreManagedPrefixListVersionCalls())
func (mock *ClientMock) RestoreManagedPrefixListVersionCalls() []struct {
	Ctx    context.Context
	Params *ec2.RestoreManagedPrefixListVersionInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RestoreManagedPrefixListVersionInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRestoreManagedPrefixListVersion.RLock()
	calls = mock.calls.RestoreManagedPrefixListVersion
	mock.lockRestoreManagedPrefixListVersion.RUnlock()
	return calls
}

// RestoreSnapshotFromRecycleBin calls RestoreSnapshotFromRecycleBinFunc.
func (mock *ClientMock) RestoreSnapshotFromRecycleBin(ctx context.Context, params *ec2.RestoreSnapshotFromRecycleBinInput, optFns ...func(*ec2.Options)) (*ec2.RestoreSnapshotFromRecycleBinOutput, error) {
	if mock.RestoreSnapshotFromRecycleBinFunc == nil {
		panic("ClientMock.RestoreSnapshotFromRecycleBinFunc: method is nil but Client.RestoreSnapshotFromRecycleBin was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RestoreSnapshotFromRecycleBinInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRestoreSnapshotFromRecycleBin.Lock()
	mock.calls.RestoreSnapshotFromRecycleBin = append(mock.calls.RestoreSnapshotFromRecycleBin, callInfo)
	mock.lockRestoreSnapshotFromRecycleBin.Unlock()
	return mock.RestoreSnapshotFromRecycleBinFunc(ctx, params, optFns...)
}

// RestoreSnapshotFromRecycleBinCalls gets all the calls that were made to RestoreSnapshotFromRecycleBin.
// Check the length with:
//     len(mockedClient.RestoreSnapshotFromRecycleBinCalls())
func (mock *ClientMock) RestoreSnapshotFromRecycleBinCalls() []struct {
	Ctx    context.Context
	Params *ec2.RestoreSnapshotFromRecycleBinInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RestoreSnapshotFromRecycleBinInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRestoreSnapshotFromRecycleBin.RLock()
	calls = mock.calls.RestoreSnapshotFromRecycleBin
	mock.lockRestoreSnapshotFromRecycleBin.RUnlock()
	return calls
}

// RestoreSnapshotTier calls RestoreSnapshotTierFunc.
func (mock *ClientMock) RestoreSnapshotTier(ctx context.Context, params *ec2.RestoreSnapshotTierInput, optFns ...func(*ec2.Options)) (*ec2.RestoreSnapshotTierOutput, error) {
	if mock.RestoreSnapshotTierFunc == nil {
		panic("ClientMock.RestoreSnapshotTierFunc: method is nil but Client.RestoreSnapshotTier was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RestoreSnapshotTierInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRestoreSnapshotTier.Lock()
	mock.calls.RestoreSnapshotTier = append(mock.calls.RestoreSnapshotTier, callInfo)
	mock.lockRestoreSnapshotTier.Unlock()
	return mock.RestoreSnapshotTierFunc(ctx, params, optFns...)
}

// RestoreSnapshotTierCalls gets all the calls that were made to RestoreSnapshotTier.
// Check the length with:
//     len(mockedClient.RestoreSnapshotTierCalls())
func (mock *ClientMock) RestoreSnapshotTierCalls() []struct {
	Ctx    context.Context
	Params *ec2.RestoreSnapshotTierInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RestoreSnapshotTierInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRestoreSnapshotTier.RLock()
	calls = mock.calls.RestoreSnapshotTier
	mock.lockRestoreSnapshotTier.RUnlock()
	return calls
}

// RevokeClientVpnIngress calls RevokeClientVpnIngressFunc.
func (mock *ClientMock) RevokeClientVpnIngress(ctx context.Context, params *ec2.RevokeClientVpnIngressInput, optFns ...func(*ec2.Options)) (*ec2.RevokeClientVpnIngressOutput, error) {
	if mock.RevokeClientVpnIngressFunc == nil {
		panic("ClientMock.RevokeClientVpnIngressFunc: method is nil but Client.RevokeClientVpnIngress was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RevokeClientVpnIngressInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRevokeClientVpnIngress.Lock()
	mock.calls.RevokeClientVpnIngress = append(mock.calls.RevokeClientVpnIngress, callInfo)
	mock.lockRevokeClientVpnIngress.Unlock()
	return mock.RevokeClientVpnIngressFunc(ctx, params, optFns...)
}

// RevokeClientVpnIngressCalls gets all the calls that were made to RevokeClientVpnIngress.
// Check the length with:
//     len(mockedClient.RevokeClientVpnIngressCalls())
func (mock *ClientMock) RevokeClientVpnIngressCalls() []struct {
	Ctx    context.Context
	Params *ec2.RevokeClientVpnIngressInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RevokeClientVpnIngressInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRevokeClientVpnIngress.RLock()
	calls = mock.calls.RevokeClientVpnIngress
	mock.lockRevokeClientVpnIngress.RUnlock()
	return calls
}

// RevokeSecurityGroupEgress calls RevokeSecurityGroupEgressFunc.
func (mock *ClientMock) RevokeSecurityGroupEgress(ctx context.Context, params *ec2.RevokeSecurityGroupEgressInput, optFns ...func(*ec2.Options)) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	if mock.RevokeSecurityGroupEgressFunc == nil {
		panic("ClientMock.RevokeSecurityGroupEgressFunc: method is nil but Client.RevokeSecurityGroupEgress was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RevokeSecurityGroupEgressInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRevokeSecurityGroupEgress.Lock()
	mock.calls.RevokeSecurityGroupEgress = append(mock.calls.RevokeSecurityGroupEgress, callInfo)
	mock.lockRevokeSecurityGroupEgress.Unlock()
	return mock.RevokeSecurityGroupEgressFunc(ctx, params, optFns...)
}

// RevokeSecurityGroupEgressCalls gets all the calls that were made to RevokeSecurityGroupEgress.
// Check the length with:
//     len(mockedClient.RevokeSecurityGroupEgressCalls())
func (mock *ClientMock) RevokeSecurityGroupEgressCalls() []struct {
	Ctx    context.Context
	Params *ec2.RevokeSecurityGroupEgressInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RevokeSecurityGroupEgressInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRevokeSecurityGroupEgress.RLock()
	calls = mock.calls.RevokeSecurityGroupEgress
	mock.lockRevokeSecurityGroupEgress.RUnlock()
	return calls
}

// RevokeSecurityGroupIngress calls RevokeSecurityGroupIngressFunc.
func (mock *ClientMock) RevokeSecurityGroupIngress(ctx context.Context, params *ec2.RevokeSecurityGroupIngressInput, optFns ...func(*ec2.Options)) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	if mock.RevokeSecurityGroupIngressFunc == nil {
		panic("ClientMock.RevokeSecurityGroupIngressFunc: method is nil but Client.RevokeSecurityGroupIngress was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RevokeSecurityGroupIngressInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRevokeSecurityGroupIngress.Lock()
	mock.calls.RevokeSecurityGroupIngress = append(mock.calls.RevokeSecurityGroupIngress, callInfo)
	mock.lockRevokeSecurityGroupIngress.Unlock()
	return mock.RevokeSecurityGroupIngressFunc(ctx, params, optFns...)
}

// RevokeSecurityGroupIngressCalls gets all the calls that were made to RevokeSecurityGroupIngress.
// Check the length with:
//     len(mockedClient.RevokeSecurityGroupIngressCalls())
func (mock *ClientMock) RevokeSecurityGroupIngressCalls() []struct {
	Ctx    context.Context
	Params *ec2.RevokeSecurityGroupIngressInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RevokeSecurityGroupIngressInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRevokeSecurityGroupIngress.RLock()
	calls = mock.calls.RevokeSecurityGroupIngress
	mock.lockRevokeSecurityGroupIngress.RUnlock()
	return calls
}

// RunInstances calls RunInstancesFunc.
func (mock *ClientMock) RunInstances(ctx context.Context, params *ec2.RunInstancesInput, optFns ...func(*ec2.Options)) (*ec2.RunInstancesOutput, error) {
	if mock.RunInstancesFunc == nil {
		panic("ClientMock.RunInstancesFunc: method is nil but Client.RunInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RunInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRunInstances.Lock()
	mock.calls.RunInstances = append(mock.calls.RunInstances, callInfo)
	mock.lockRunInstances.Unlock()
	return mock.RunInstancesFunc(ctx, params, optFns...)
}

// RunInstancesCalls gets all the calls that were made to RunInstances.
// Check the length with:
//     len(mockedClient.RunInstancesCalls())
func (mock *ClientMock) RunInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.RunInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RunInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRunInstances.RLock()
	calls = mock.calls.RunInstances
	mock.lockRunInstances.RUnlock()
	return calls
}

// RunScheduledInstances calls RunScheduledInstancesFunc.
func (mock *ClientMock) RunScheduledInstances(ctx context.Context, params *ec2.RunScheduledInstancesInput, optFns ...func(*ec2.Options)) (*ec2.RunScheduledInstancesOutput, error) {
	if mock.RunScheduledInstancesFunc == nil {
		panic("ClientMock.RunScheduledInstancesFunc: method is nil but Client.RunScheduledInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.RunScheduledInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockRunScheduledInstances.Lock()
	mock.calls.RunScheduledInstances = append(mock.calls.RunScheduledInstances, callInfo)
	mock.lockRunScheduledInstances.Unlock()
	return mock.RunScheduledInstancesFunc(ctx, params, optFns...)
}

// RunScheduledInstancesCalls gets all the calls that were made to RunScheduledInstances.
// Check the length with:
//     len(mockedClient.RunScheduledInstancesCalls())
func (mock *ClientMock) RunScheduledInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.RunScheduledInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.RunScheduledInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockRunScheduledInstances.RLock()
	calls = mock.calls.RunScheduledInstances
	mock.lockRunScheduledInstances.RUnlock()
	return calls
}

// SearchLocalGatewayRoutes calls SearchLocalGatewayRoutesFunc.
func (mock *ClientMock) SearchLocalGatewayRoutes(ctx context.Context, params *ec2.SearchLocalGatewayRoutesInput, optFns ...func(*ec2.Options)) (*ec2.SearchLocalGatewayRoutesOutput, error) {
	if mock.SearchLocalGatewayRoutesFunc == nil {
		panic("ClientMock.SearchLocalGatewayRoutesFunc: method is nil but Client.SearchLocalGatewayRoutes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.SearchLocalGatewayRoutesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockSearchLocalGatewayRoutes.Lock()
	mock.calls.SearchLocalGatewayRoutes = append(mock.calls.SearchLocalGatewayRoutes, callInfo)
	mock.lockSearchLocalGatewayRoutes.Unlock()
	return mock.SearchLocalGatewayRoutesFunc(ctx, params, optFns...)
}

// SearchLocalGatewayRoutesCalls gets all the calls that were made to SearchLocalGatewayRoutes.
// Check the length with:
//     len(mockedClient.SearchLocalGatewayRoutesCalls())
func (mock *ClientMock) SearchLocalGatewayRoutesCalls() []struct {
	Ctx    context.Context
	Params *ec2.SearchLocalGatewayRoutesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.SearchLocalGatewayRoutesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockSearchLocalGatewayRoutes.RLock()
	calls = mock.calls.SearchLocalGatewayRoutes
	mock.lockSearchLocalGatewayRoutes.RUnlock()
	return calls
}

// SearchTransitGatewayMulticastGroups calls SearchTransitGatewayMulticastGroupsFunc.
func (mock *ClientMock) SearchTransitGatewayMulticastGroups(ctx context.Context, params *ec2.SearchTransitGatewayMulticastGroupsInput, optFns ...func(*ec2.Options)) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {
	if mock.SearchTransitGatewayMulticastGroupsFunc == nil {
		panic("ClientMock.SearchTransitGatewayMulticastGroupsFunc: method is nil but Client.SearchTransitGatewayMulticastGroups was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.SearchTransitGatewayMulticastGroupsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockSearchTransitGatewayMulticastGroups.Lock()
	mock.calls.SearchTransitGatewayMulticastGroups = append(mock.calls.SearchTransitGatewayMulticastGroups, callInfo)
	mock.lockSearchTransitGatewayMulticastGroups.Unlock()
	return mock.SearchTransitGatewayMulticastGroupsFunc(ctx, params, optFns...)
}

// SearchTransitGatewayMulticastGroupsCalls gets all the calls that were made to SearchTransitGatewayMulticastGroups.
// Check the length with:
//     len(mockedClient.SearchTransitGatewayMulticastGroupsCalls())
func (mock *ClientMock) SearchTransitGatewayMulticastGroupsCalls() []struct {
	Ctx    context.Context
	Params *ec2.SearchTransitGatewayMulticastGroupsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.SearchTransitGatewayMulticastGroupsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockSearchTransitGatewayMulticastGroups.RLock()
	calls = mock.calls.SearchTransitGatewayMulticastGroups
	mock.lockSearchTransitGatewayMulticastGroups.RUnlock()
	return calls
}

// SearchTransitGatewayRoutes calls SearchTransitGatewayRoutesFunc.
func (mock *ClientMock) SearchTransitGatewayRoutes(ctx context.Context, params *ec2.SearchTransitGatewayRoutesInput, optFns ...func(*ec2.Options)) (*ec2.SearchTransitGatewayRoutesOutput, error) {
	if mock.SearchTransitGatewayRoutesFunc == nil {
		panic("ClientMock.SearchTransitGatewayRoutesFunc: method is nil but Client.SearchTransitGatewayRoutes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.SearchTransitGatewayRoutesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockSearchTransitGatewayRoutes.Lock()
	mock.calls.SearchTransitGatewayRoutes = append(mock.calls.SearchTransitGatewayRoutes, callInfo)
	mock.lockSearchTransitGatewayRoutes.Unlock()
	return mock.SearchTransitGatewayRoutesFunc(ctx, params, optFns...)
}

// SearchTransitGatewayRoutesCalls gets all the calls that were made to SearchTransitGatewayRoutes.
// Check the length with:
//     len(mockedClient.SearchTransitGatewayRoutesCalls())
func (mock *ClientMock) SearchTransitGatewayRoutesCalls() []struct {
	Ctx    context.Context
	Params *ec2.SearchTransitGatewayRoutesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.SearchTransitGatewayRoutesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockSearchTransitGatewayRoutes.RLock()
	calls = mock.calls.SearchTransitGatewayRoutes
	mock.lockSearchTransitGatewayRoutes.RUnlock()
	return calls
}

// SendDiagnosticInterrupt calls SendDiagnosticInterruptFunc.
func (mock *ClientMock) SendDiagnosticInterrupt(ctx context.Context, params *ec2.SendDiagnosticInterruptInput, optFns ...func(*ec2.Options)) (*ec2.SendDiagnosticInterruptOutput, error) {
	if mock.SendDiagnosticInterruptFunc == nil {
		panic("ClientMock.SendDiagnosticInterruptFunc: method is nil but Client.SendDiagnosticInterrupt was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.SendDiagnosticInterruptInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockSendDiagnosticInterrupt.Lock()
	mock.calls.SendDiagnosticInterrupt = append(mock.calls.SendDiagnosticInterrupt, callInfo)
	mock.lockSendDiagnosticInterrupt.Unlock()
	return mock.SendDiagnosticInterruptFunc(ctx, params, optFns...)
}

// SendDiagnosticInterruptCalls gets all the calls that were made to SendDiagnosticInterrupt.
// Check the length with:
//     len(mockedClient.SendDiagnosticInterruptCalls())
func (mock *ClientMock) SendDiagnosticInterruptCalls() []struct {
	Ctx    context.Context
	Params *ec2.SendDiagnosticInterruptInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.SendDiagnosticInterruptInput
		OptFns []func(*ec2.Options)
	}
	mock.lockSendDiagnosticInterrupt.RLock()
	calls = mock.calls.SendDiagnosticInterrupt
	mock.lockSendDiagnosticInterrupt.RUnlock()
	return calls
}

// StartInstances calls StartInstancesFunc.
func (mock *ClientMock) StartInstances(ctx context.Context, params *ec2.StartInstancesInput, optFns ...func(*ec2.Options)) (*ec2.StartInstancesOutput, error) {
	if mock.StartInstancesFunc == nil {
		panic("ClientMock.StartInstancesFunc: method is nil but Client.StartInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.StartInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockStartInstances.Lock()
	mock.calls.StartInstances = append(mock.calls.StartInstances, callInfo)
	mock.lockStartInstances.Unlock()
	return mock.StartInstancesFunc(ctx, params, optFns...)
}

// StartInstancesCalls gets all the calls that were made to StartInstances.
// Check the length with:
//     len(mockedClient.StartInstancesCalls())
func (mock *ClientMock) StartInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.StartInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.StartInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockStartInstances.RLock()
	calls = mock.calls.StartInstances
	mock.lockStartInstances.RUnlock()
	return calls
}

// StartNetworkInsightsAccessScopeAnalysis calls StartNetworkInsightsAccessScopeAnalysisFunc.
func (mock *ClientMock) StartNetworkInsightsAccessScopeAnalysis(ctx context.Context, params *ec2.StartNetworkInsightsAccessScopeAnalysisInput, optFns ...func(*ec2.Options)) (*ec2.StartNetworkInsightsAccessScopeAnalysisOutput, error) {
	if mock.StartNetworkInsightsAccessScopeAnalysisFunc == nil {
		panic("ClientMock.StartNetworkInsightsAccessScopeAnalysisFunc: method is nil but Client.StartNetworkInsightsAccessScopeAnalysis was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.StartNetworkInsightsAccessScopeAnalysisInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockStartNetworkInsightsAccessScopeAnalysis.Lock()
	mock.calls.StartNetworkInsightsAccessScopeAnalysis = append(mock.calls.StartNetworkInsightsAccessScopeAnalysis, callInfo)
	mock.lockStartNetworkInsightsAccessScopeAnalysis.Unlock()
	return mock.StartNetworkInsightsAccessScopeAnalysisFunc(ctx, params, optFns...)
}

// StartNetworkInsightsAccessScopeAnalysisCalls gets all the calls that were made to StartNetworkInsightsAccessScopeAnalysis.
// Check the length with:
//     len(mockedClient.StartNetworkInsightsAccessScopeAnalysisCalls())
func (mock *ClientMock) StartNetworkInsightsAccessScopeAnalysisCalls() []struct {
	Ctx    context.Context
	Params *ec2.StartNetworkInsightsAccessScopeAnalysisInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.StartNetworkInsightsAccessScopeAnalysisInput
		OptFns []func(*ec2.Options)
	}
	mock.lockStartNetworkInsightsAccessScopeAnalysis.RLock()
	calls = mock.calls.StartNetworkInsightsAccessScopeAnalysis
	mock.lockStartNetworkInsightsAccessScopeAnalysis.RUnlock()
	return calls
}

// StartNetworkInsightsAnalysis calls StartNetworkInsightsAnalysisFunc.
func (mock *ClientMock) StartNetworkInsightsAnalysis(ctx context.Context, params *ec2.StartNetworkInsightsAnalysisInput, optFns ...func(*ec2.Options)) (*ec2.StartNetworkInsightsAnalysisOutput, error) {
	if mock.StartNetworkInsightsAnalysisFunc == nil {
		panic("ClientMock.StartNetworkInsightsAnalysisFunc: method is nil but Client.StartNetworkInsightsAnalysis was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.StartNetworkInsightsAnalysisInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockStartNetworkInsightsAnalysis.Lock()
	mock.calls.StartNetworkInsightsAnalysis = append(mock.calls.StartNetworkInsightsAnalysis, callInfo)
	mock.lockStartNetworkInsightsAnalysis.Unlock()
	return mock.StartNetworkInsightsAnalysisFunc(ctx, params, optFns...)
}

// StartNetworkInsightsAnalysisCalls gets all the calls that were made to StartNetworkInsightsAnalysis.
// Check the length with:
//     len(mockedClient.StartNetworkInsightsAnalysisCalls())
func (mock *ClientMock) StartNetworkInsightsAnalysisCalls() []struct {
	Ctx    context.Context
	Params *ec2.StartNetworkInsightsAnalysisInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.StartNetworkInsightsAnalysisInput
		OptFns []func(*ec2.Options)
	}
	mock.lockStartNetworkInsightsAnalysis.RLock()
	calls = mock.calls.StartNetworkInsightsAnalysis
	mock.lockStartNetworkInsightsAnalysis.RUnlock()
	return calls
}

// StartVpcEndpointServicePrivateDnsVerification calls StartVpcEndpointServicePrivateDnsVerificationFunc.
func (mock *ClientMock) StartVpcEndpointServicePrivateDnsVerification(ctx context.Context, params *ec2.StartVpcEndpointServicePrivateDnsVerificationInput, optFns ...func(*ec2.Options)) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error) {
	if mock.StartVpcEndpointServicePrivateDnsVerificationFunc == nil {
		panic("ClientMock.StartVpcEndpointServicePrivateDnsVerificationFunc: method is nil but Client.StartVpcEndpointServicePrivateDnsVerification was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockStartVpcEndpointServicePrivateDnsVerification.Lock()
	mock.calls.StartVpcEndpointServicePrivateDnsVerification = append(mock.calls.StartVpcEndpointServicePrivateDnsVerification, callInfo)
	mock.lockStartVpcEndpointServicePrivateDnsVerification.Unlock()
	return mock.StartVpcEndpointServicePrivateDnsVerificationFunc(ctx, params, optFns...)
}

// StartVpcEndpointServicePrivateDnsVerificationCalls gets all the calls that were made to StartVpcEndpointServicePrivateDnsVerification.
// Check the length with:
//     len(mockedClient.StartVpcEndpointServicePrivateDnsVerificationCalls())
func (mock *ClientMock) StartVpcEndpointServicePrivateDnsVerificationCalls() []struct {
	Ctx    context.Context
	Params *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.StartVpcEndpointServicePrivateDnsVerificationInput
		OptFns []func(*ec2.Options)
	}
	mock.lockStartVpcEndpointServicePrivateDnsVerification.RLock()
	calls = mock.calls.StartVpcEndpointServicePrivateDnsVerification
	mock.lockStartVpcEndpointServicePrivateDnsVerification.RUnlock()
	return calls
}

// StopInstances calls StopInstancesFunc.
func (mock *ClientMock) StopInstances(ctx context.Context, params *ec2.StopInstancesInput, optFns ...func(*ec2.Options)) (*ec2.StopInstancesOutput, error) {
	if mock.StopInstancesFunc == nil {
		panic("ClientMock.StopInstancesFunc: method is nil but Client.StopInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.StopInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockStopInstances.Lock()
	mock.calls.StopInstances = append(mock.calls.StopInstances, callInfo)
	mock.lockStopInstances.Unlock()
	return mock.StopInstancesFunc(ctx, params, optFns...)
}

// StopInstancesCalls gets all the calls that were made to StopInstances.
// Check the length with:
//     len(mockedClient.StopInstancesCalls())
func (mock *ClientMock) StopInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.StopInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.StopInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockStopInstances.RLock()
	calls = mock.calls.StopInstances
	mock.lockStopInstances.RUnlock()
	return calls
}

// TerminateClientVpnConnections calls TerminateClientVpnConnectionsFunc.
func (mock *ClientMock) TerminateClientVpnConnections(ctx context.Context, params *ec2.TerminateClientVpnConnectionsInput, optFns ...func(*ec2.Options)) (*ec2.TerminateClientVpnConnectionsOutput, error) {
	if mock.TerminateClientVpnConnectionsFunc == nil {
		panic("ClientMock.TerminateClientVpnConnectionsFunc: method is nil but Client.TerminateClientVpnConnections was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.TerminateClientVpnConnectionsInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockTerminateClientVpnConnections.Lock()
	mock.calls.TerminateClientVpnConnections = append(mock.calls.TerminateClientVpnConnections, callInfo)
	mock.lockTerminateClientVpnConnections.Unlock()
	return mock.TerminateClientVpnConnectionsFunc(ctx, params, optFns...)
}

// TerminateClientVpnConnectionsCalls gets all the calls that were made to TerminateClientVpnConnections.
// Check the length with:
//     len(mockedClient.TerminateClientVpnConnectionsCalls())
func (mock *ClientMock) TerminateClientVpnConnectionsCalls() []struct {
	Ctx    context.Context
	Params *ec2.TerminateClientVpnConnectionsInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.TerminateClientVpnConnectionsInput
		OptFns []func(*ec2.Options)
	}
	mock.lockTerminateClientVpnConnections.RLock()
	calls = mock.calls.TerminateClientVpnConnections
	mock.lockTerminateClientVpnConnections.RUnlock()
	return calls
}

// TerminateInstances calls TerminateInstancesFunc.
func (mock *ClientMock) TerminateInstances(ctx context.Context, params *ec2.TerminateInstancesInput, optFns ...func(*ec2.Options)) (*ec2.TerminateInstancesOutput, error) {
	if mock.TerminateInstancesFunc == nil {
		panic("ClientMock.TerminateInstancesFunc: method is nil but Client.TerminateInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.TerminateInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockTerminateInstances.Lock()
	mock.calls.TerminateInstances = append(mock.calls.TerminateInstances, callInfo)
	mock.lockTerminateInstances.Unlock()
	return mock.TerminateInstancesFunc(ctx, params, optFns...)
}

// TerminateInstancesCalls gets all the calls that were made to TerminateInstances.
// Check the length with:
//     len(mockedClient.TerminateInstancesCalls())
func (mock *ClientMock) TerminateInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.TerminateInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.TerminateInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockTerminateInstances.RLock()
	calls = mock.calls.TerminateInstances
	mock.lockTerminateInstances.RUnlock()
	return calls
}

// UnassignIpv6Addresses calls UnassignIpv6AddressesFunc.
func (mock *ClientMock) UnassignIpv6Addresses(ctx context.Context, params *ec2.UnassignIpv6AddressesInput, optFns ...func(*ec2.Options)) (*ec2.UnassignIpv6AddressesOutput, error) {
	if mock.UnassignIpv6AddressesFunc == nil {
		panic("ClientMock.UnassignIpv6AddressesFunc: method is nil but Client.UnassignIpv6Addresses was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.UnassignIpv6AddressesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockUnassignIpv6Addresses.Lock()
	mock.calls.UnassignIpv6Addresses = append(mock.calls.UnassignIpv6Addresses, callInfo)
	mock.lockUnassignIpv6Addresses.Unlock()
	return mock.UnassignIpv6AddressesFunc(ctx, params, optFns...)
}

// UnassignIpv6AddressesCalls gets all the calls that were made to UnassignIpv6Addresses.
// Check the length with:
//     len(mockedClient.UnassignIpv6AddressesCalls())
func (mock *ClientMock) UnassignIpv6AddressesCalls() []struct {
	Ctx    context.Context
	Params *ec2.UnassignIpv6AddressesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.UnassignIpv6AddressesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockUnassignIpv6Addresses.RLock()
	calls = mock.calls.UnassignIpv6Addresses
	mock.lockUnassignIpv6Addresses.RUnlock()
	return calls
}

// UnassignPrivateIpAddresses calls UnassignPrivateIpAddressesFunc.
func (mock *ClientMock) UnassignPrivateIpAddresses(ctx context.Context, params *ec2.UnassignPrivateIpAddressesInput, optFns ...func(*ec2.Options)) (*ec2.UnassignPrivateIpAddressesOutput, error) {
	if mock.UnassignPrivateIpAddressesFunc == nil {
		panic("ClientMock.UnassignPrivateIpAddressesFunc: method is nil but Client.UnassignPrivateIpAddresses was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.UnassignPrivateIpAddressesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockUnassignPrivateIpAddresses.Lock()
	mock.calls.UnassignPrivateIpAddresses = append(mock.calls.UnassignPrivateIpAddresses, callInfo)
	mock.lockUnassignPrivateIpAddresses.Unlock()
	return mock.UnassignPrivateIpAddressesFunc(ctx, params, optFns...)
}

// UnassignPrivateIpAddressesCalls gets all the calls that were made to UnassignPrivateIpAddresses.
// Check the length with:
//     len(mockedClient.UnassignPrivateIpAddressesCalls())
func (mock *ClientMock) UnassignPrivateIpAddressesCalls() []struct {
	Ctx    context.Context
	Params *ec2.UnassignPrivateIpAddressesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.UnassignPrivateIpAddressesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockUnassignPrivateIpAddresses.RLock()
	calls = mock.calls.UnassignPrivateIpAddresses
	mock.lockUnassignPrivateIpAddresses.RUnlock()
	return calls
}

// UnmonitorInstances calls UnmonitorInstancesFunc.
func (mock *ClientMock) UnmonitorInstances(ctx context.Context, params *ec2.UnmonitorInstancesInput, optFns ...func(*ec2.Options)) (*ec2.UnmonitorInstancesOutput, error) {
	if mock.UnmonitorInstancesFunc == nil {
		panic("ClientMock.UnmonitorInstancesFunc: method is nil but Client.UnmonitorInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.UnmonitorInstancesInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockUnmonitorInstances.Lock()
	mock.calls.UnmonitorInstances = append(mock.calls.UnmonitorInstances, callInfo)
	mock.lockUnmonitorInstances.Unlock()
	return mock.UnmonitorInstancesFunc(ctx, params, optFns...)
}

// UnmonitorInstancesCalls gets all the calls that were made to UnmonitorInstances.
// Check the length with:
//     len(mockedClient.UnmonitorInstancesCalls())
func (mock *ClientMock) UnmonitorInstancesCalls() []struct {
	Ctx    context.Context
	Params *ec2.UnmonitorInstancesInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.UnmonitorInstancesInput
		OptFns []func(*ec2.Options)
	}
	mock.lockUnmonitorInstances.RLock()
	calls = mock.calls.UnmonitorInstances
	mock.lockUnmonitorInstances.RUnlock()
	return calls
}

// UpdateSecurityGroupRuleDescriptionsEgress calls UpdateSecurityGroupRuleDescriptionsEgressFunc.
func (mock *ClientMock) UpdateSecurityGroupRuleDescriptionsEgress(ctx context.Context, params *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, optFns ...func(*ec2.Options)) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
	if mock.UpdateSecurityGroupRuleDescriptionsEgressFunc == nil {
		panic("ClientMock.UpdateSecurityGroupRuleDescriptionsEgressFunc: method is nil but Client.UpdateSecurityGroupRuleDescriptionsEgress was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockUpdateSecurityGroupRuleDescriptionsEgress.Lock()
	mock.calls.UpdateSecurityGroupRuleDescriptionsEgress = append(mock.calls.UpdateSecurityGroupRuleDescriptionsEgress, callInfo)
	mock.lockUpdateSecurityGroupRuleDescriptionsEgress.Unlock()
	return mock.UpdateSecurityGroupRuleDescriptionsEgressFunc(ctx, params, optFns...)
}

// UpdateSecurityGroupRuleDescriptionsEgressCalls gets all the calls that were made to UpdateSecurityGroupRuleDescriptionsEgress.
// Check the length with:
//     len(mockedClient.UpdateSecurityGroupRuleDescriptionsEgressCalls())
func (mock *ClientMock) UpdateSecurityGroupRuleDescriptionsEgressCalls() []struct {
	Ctx    context.Context
	Params *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput
		OptFns []func(*ec2.Options)
	}
	mock.lockUpdateSecurityGroupRuleDescriptionsEgress.RLock()
	calls = mock.calls.UpdateSecurityGroupRuleDescriptionsEgress
	mock.lockUpdateSecurityGroupRuleDescriptionsEgress.RUnlock()
	return calls
}

// UpdateSecurityGroupRuleDescriptionsIngress calls UpdateSecurityGroupRuleDescriptionsIngressFunc.
func (mock *ClientMock) UpdateSecurityGroupRuleDescriptionsIngress(ctx context.Context, params *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, optFns ...func(*ec2.Options)) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
	if mock.UpdateSecurityGroupRuleDescriptionsIngressFunc == nil {
		panic("ClientMock.UpdateSecurityGroupRuleDescriptionsIngressFunc: method is nil but Client.UpdateSecurityGroupRuleDescriptionsIngress was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockUpdateSecurityGroupRuleDescriptionsIngress.Lock()
	mock.calls.UpdateSecurityGroupRuleDescriptionsIngress = append(mock.calls.UpdateSecurityGroupRuleDescriptionsIngress, callInfo)
	mock.lockUpdateSecurityGroupRuleDescriptionsIngress.Unlock()
	return mock.UpdateSecurityGroupRuleDescriptionsIngressFunc(ctx, params, optFns...)
}

// UpdateSecurityGroupRuleDescriptionsIngressCalls gets all the calls that were made to UpdateSecurityGroupRuleDescriptionsIngress.
// Check the length with:
//     len(mockedClient.UpdateSecurityGroupRuleDescriptionsIngressCalls())
func (mock *ClientMock) UpdateSecurityGroupRuleDescriptionsIngressCalls() []struct {
	Ctx    context.Context
	Params *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput
		OptFns []func(*ec2.Options)
	}
	mock.lockUpdateSecurityGroupRuleDescriptionsIngress.RLock()
	calls = mock.calls.UpdateSecurityGroupRuleDescriptionsIngress
	mock.lockUpdateSecurityGroupRuleDescriptionsIngress.RUnlock()
	return calls
}

// WithdrawByoipCidr calls WithdrawByoipCidrFunc.
func (mock *ClientMock) WithdrawByoipCidr(ctx context.Context, params *ec2.WithdrawByoipCidrInput, optFns ...func(*ec2.Options)) (*ec2.WithdrawByoipCidrOutput, error) {
	if mock.WithdrawByoipCidrFunc == nil {
		panic("ClientMock.WithdrawByoipCidrFunc: method is nil but Client.WithdrawByoipCidr was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *ec2.WithdrawByoipCidrInput
		OptFns []func(*ec2.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockWithdrawByoipCidr.Lock()
	mock.calls.WithdrawByoipCidr = append(mock.calls.WithdrawByoipCidr, callInfo)
	mock.lockWithdrawByoipCidr.Unlock()
	return mock.WithdrawByoipCidrFunc(ctx, params, optFns...)
}

// WithdrawByoipCidrCalls gets all the calls that were made to WithdrawByoipCidr.
// Check the length with:
//     len(mockedClient.WithdrawByoipCidrCalls())
func (mock *ClientMock) WithdrawByoipCidrCalls() []struct {
	Ctx    context.Context
	Params *ec2.WithdrawByoipCidrInput
	OptFns []func(*ec2.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ec2.WithdrawByoipCidrInput
		OptFns []func(*ec2.Options)
	}
	mock.lockWithdrawByoipCidr.RLock()
	calls = mock.calls.WithdrawByoipCidr
	mock.lockWithdrawByoipCidr.RUnlock()
	return calls
}
