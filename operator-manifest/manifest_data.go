// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package operatormanifest generated by go-bindata.
// sources:
// ../core-operator/config/crd/bases/core.calyptia.com_pipelines.yaml
// ../core-operator/config/crd/kustomization.yaml
// ../core-operator/config/crd/kustomizeconfig.yaml
// ../core-operator/config/default/kustomization.yaml
// ../core-operator/config/default/manager_auth_proxy_patch.yaml
// ../core-operator/config/default/manager_config_patch.yaml
// ../core-operator/config/manager/kustomization.yaml
// ../core-operator/config/manager/manager.yaml
// ../core-operator/config/rbac/auth_proxy_client_clusterrole.yaml
// ../core-operator/config/rbac/auth_proxy_role.yaml
// ../core-operator/config/rbac/auth_proxy_role_binding.yaml
// ../core-operator/config/rbac/auth_proxy_service.yaml
// ../core-operator/config/rbac/kustomization.yaml
// ../core-operator/config/rbac/leader_election_role.yaml
// ../core-operator/config/rbac/leader_election_role_binding.yaml
// ../core-operator/config/rbac/pipeline_editor_role.yaml
// ../core-operator/config/rbac/pipeline_viewer_role.yaml
// ../core-operator/config/rbac/role.yaml
// ../core-operator/config/rbac/role_binding.yaml
// ../core-operator/config/rbac/service_account.yaml
package operatormanifest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configCrdBasesCoreCalyptiaCom_pipelinesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x7b\x73\x1c\x37\x72\xff\x9f\x9f\xa2\x6b\x93\x94\x48\x1f\x67\x57\x94\x12\xfb\x6e\xab\x5c\x2e\x85\xb2\x2e\x2c\x5b\xce\x96\x48\x5f\xaa\x22\x2a\x39\xcc\x4c\xef\x2e\x4c\x0c\x30\x07\x60\x48\xae\xaf\xee\xbb\xa7\x1a\x98\xf7\x9b\x14\x19\xfb\xae\x8c\x7f\x24\xce\x62\x1a\xdd\x8d\x7e\xfe\x30\x33\x41\x10\x1c\xb1\x94\xff\x09\xb5\xe1\x4a\xae\x81\xa5\x1c\xef\x2d\x4a\xfa\xcb\x2c\x6f\x7e\x6f\x96\x5c\xad\x6e\xcf\x8e\x6e\xb8\x8c\xd7\x70\x9e\x19\xab\x92\x0f\x68\x54\xa6\x23\x7c\x8b\x5b\x2e\xb9\xe5\x4a\x1e\x25\x68\x59\xcc\x2c\x5b\x1f\x01\x30\x29\x95\x65\x74\xd9\xd0\x9f\x00\x91\x92\x56\x2b\x21\x50\x07\x3b\x94\xcb\x9b\x2c\xc4\x30\xe3\x22\x46\xed\x88\x17\x4b\xdf\xbe\x5c\x9e\x9d\x2d\xcf\x8e\x00\x22\x8d\xee\xfe\x2b\x9e\xa0\xb1\x2c\x49\xd7\x20\x33\x21\x8e\x00\x24\x4b\x70\x0d\x29\x4f\x51\x70\x89\x66\x19\x29\x8d\xcb\x88\x89\x43\x6a\x39\x5b\x46\x2a\x39\x32\x29\x46\xb4\xec\x4e\xab\x2c\x5d\x43\x77\x82\x27\x92\xb3\xe6\xc5\xda\xe4\xf4\xdc\x25\xc1\x8d\xfd\xae\x71\xf9\x7b\x6e\xac\xfb\x29\x15\x99\x66\xa2\xb6\xbe\xbb\x6a\xb8\xdc\x65\x82\xe9\xea\xfa\x11\x80\x89\x54\x8a\x6b\xf8\x81\x96\x4a\x59\x84\xf1\x11\x40\x2e\xa9\x5b\x3a\x00\x16\xc7\x4e\x77\x4c\x6c\x34\x97\x16\xf5\xb9\x12\x59\x52\xe8\x2c\x80\x18\x4d\xa4\x79\x6a\x9d\x6e\x2e\x2d\xb3\x99\x01\xb5\x05\xbb\xc7\xfa\x3a\x34\x7e\x32\x4a\x6e\x98\xdd\xaf\x61\x69\xdc\xbc\xfc\x9f\xfc\x67\xaf\xb3\xcb\xfa\x25\x7b\x20\xe6\x8c\xd5\x5c\xee\x8e\xaa\x39\xb7\x67\x5e\xa0\x68\x8f\x09\x5b\xe7\x73\x55\x8a\xf2\xcd\xe6\xe2\x4f\xaf\x2f\x1b\x97\xa1\xc9\x60\xa1\x2b\xe0\xc6\xb1\xe8\x27\xc3\x56\xe9\x06\xc7\x06\xde\x6c\x2e\x4a\x0a\xa9\x56\x29\x6a\xcb\x8b\xdd\xf0\xa3\x66\x8e\xb5\xab\xad\xf5\x5e\x10\x4b\x7e\x16\xc4\x64\x87\xe8\xd7\xcd\x75\x8c\x71\x2e\x85\x57\x19\x37\xa0\x31\xd5\x68\x50\x7a\xcb\x6c\x10\x06\x9a\xc4\x24\xa8\xf0\x27\x8c\xec\x12\x2e\x51\x13\x19\x30\x7b\x95\x89\x98\xcc\xf7\x16\xb5\x05\x8d\x91\xda\x49\xfe\x73\x49\xdb\x80\x55\x6e\x51\xc1\x2c\xe6\x26\x52\x0d\xb7\xa7\x92\x09\xb8\x65\x22\xc3\x53\x60\x32\x86\x84\x1d\x40\x23\xad\x02\x99\xac\xd1\x73\x53\xcc\x12\xde\x2b\x8d\xc0\xe5\x56\xad\x61\x6f\x6d\x6a\xd6\xab\xd5\x8e\xdb\xc2\x0d\x23\x95\x24\x99\xe4\xf6\xb0\x72\x1e\xc5\xc3\xcc\x2a\x6d\x56\x31\xde\xa2\x58\x19\xbe\x0b\x98\x8e\xf6\xdc\x62\x64\x33\x8d\x2b\x96\xf2\xc0\xb1\x2e\x9d\x2b\x2e\x93\xf8\x9f\x74\xee\xb8\xe6\x45\x83\xd7\x8e\x35\xf8\xe1\x7c\x63\x64\x07\xc8\x49\x68\xbb\x59\x7e\xab\x97\xa2\x52\x34\x5d\x22\xed\x7c\xf8\xf6\xf2\x0a\x8a\xa5\xdd\x66\xb4\xb5\xef\xf4\x5e\xdd\x68\xaa\x2d\x20\x85\x71\xb9\x45\xed\x37\x71\xab\x55\xe2\x68\xa2\x8c\x53\xc5\xa5\x75\x7f\x44\x82\xa3\x6c\xab\xdf\x64\x61\xc2\x2d\xed\xfb\x5f\x32\x34\x96\xf6\x6a\x09\xe7\x2e\x36\x41\x88\x90\xa5\x31\xb3\x18\x2f\xe1\x42\xc2\x39\x4b\x50\x9c\x33\x83\xcf\xbe\x01\xa4\x69\x13\x90\x62\xe7\x6d\x41\x3d\xac\xb6\x27\x7b\xad\xd5\x7e\x28\x22\xdf\xc0\x7e\x15\x1e\x7a\x99\x62\xd4\x70\x99\x18\x0d\xd7\x64\xd4\x96\x59\x24\x57\xd8\x34\xc3\x8b\x1f\xfd\xbe\x4a\x23\x12\x2a\x8b\x8b\x9c\x70\xf1\xb6\xfd\x73\x8b\x8d\xf3\xe6\xec\xda\xae\x3b\x66\x2e\xde\x42\x26\x63\xd4\x70\xb7\xe7\xd1\xbe\x1d\xe9\xea\x03\xef\x39\x6d\x2b\x97\x9e\x64\x23\xb0\x4c\xa8\x95\xc6\x56\x64\x28\x6d\xc8\x6d\x97\xdf\x61\x51\xc1\x67\xb3\x2d\xdf\xf5\xfd\x32\xba\x9e\x5b\x93\x8b\x7e\x9a\x00\xdc\x62\x32\xf0\xd3\x14\x43\x25\x5b\x16\x65\x8f\x34\xb3\xb9\xf3\xc3\x65\x82\xcf\x23\x32\x60\x9f\xed\x09\x4c\x6b\x76\xe8\xf9\x3d\x65\xda\xa0\x1e\x10\x75\x62\x79\x83\x91\x46\xfb\x5c\x3a\xbe\xc1\xc3\xdf\xbd\x7e\x47\x6e\xe6\x09\xdb\xf5\xf0\x16\xe3\x96\x65\xc2\xae\x61\xb7\x8f\x5c\xc5\x56\x94\x53\x2b\x2a\xae\xca\xbf\x02\xef\x51\x01\xb9\xd4\xab\xd7\xcb\xaf\x96\x5f\x3d\xc4\x1d\xbb\xc9\x06\xda\x91\xe3\x5b\x99\x25\xed\xd4\x31\x4a\x33\x55\xba\xcf\x14\x06\xcd\x60\xca\x04\x42\x16\xdd\xa0\x8c\x37\x4a\x0f\xba\x99\xe7\x86\x52\xff\x0e\x75\xef\x9c\xc9\x68\xd9\x23\xf9\x93\xc5\xcc\x4a\x2f\xb3\xc2\x67\x5d\xa6\x11\x8b\xdc\x6a\x17\x7b\x3e\x53\x31\xe9\xc8\xdd\x5b\xa5\x13\x66\xdd\xfd\xaf\x5f\x3d\x7e\x05\xad\xac\x8a\x94\x18\xe7\x71\x50\xd0\x51\xb7\x1b\x76\x39\x8d\xa9\xe0\x11\x33\xe7\x2a\xeb\x0b\xcf\xa5\x77\x9d\x75\x7e\x1a\x97\x7a\x4c\xde\xb2\xd0\x9b\x70\xa9\xc2\xa6\x36\x5a\x51\x6e\x82\x44\xc5\x28\x96\x0f\x4c\x88\x82\x53\xa1\xd5\xaf\xd4\xe9\xa8\x1a\xa5\xd9\x70\x38\x9c\x11\x0c\x13\x4c\x94\x1e\x09\xcb\x93\x24\x26\xa2\x69\x51\x3f\xfe\xdd\xca\x07\x60\xac\xd2\xbd\x91\x7d\xbe\x14\x90\x87\x3f\xa1\x76\x41\x82\x49\xe0\xf6\x7c\x6c\xf2\xcc\x6c\x08\x90\xb0\xfb\x20\xda\x67\xf2\xc6\x04\x29\xcb\xcc\x68\x6e\x2c\x88\x86\x4a\x09\x64\xed\x26\x6e\x80\x6a\x96\xce\x21\x39\x16\x37\xfc\x30\x07\x19\x05\xdb\x4c\x0c\x86\x8f\x87\x71\x78\x4b\xdd\x3e\x06\x86\xff\x3c\x21\x72\x19\x20\x5e\xfd\xdb\x97\xef\xf9\xe7\xab\x7c\x66\xf5\x30\x1a\xe7\x7a\x7e\x24\x3f\xa1\x36\xa2\x29\x4c\xe0\x12\xfb\xac\xee\xc5\xe1\x13\x73\xfa\x17\x0f\x85\xd4\x3b\x18\x15\x1a\xea\x17\x1f\xdf\xc2\xc4\x0c\x13\x25\x0d\xda\x3e\x2e\x3a\x9c\xbc\x75\xb3\x2f\xd1\xe6\xac\xb4\xd2\x71\x94\x69\x8d\xd2\xe6\x12\x39\x6c\x21\x5f\xa0\xb7\x60\xb5\x0f\x8d\xb7\x91\x12\x82\x1b\xae\xe4\x40\x46\xe9\xf0\xeb\xe6\x11\x1f\x7b\x66\xf6\xd5\xed\xa6\x44\x67\x4a\x81\x96\x70\x55\xff\x73\x28\xa4\x95\x78\x1e\x64\xc6\x6d\x01\xb5\xe6\x1c\x45\x0c\xcc\x00\xab\x56\x00\x76\xab\x78\xcc\x64\x84\x90\x60\xb4\x67\x92\x9b\x64\x80\xe6\xdd\x1e\x25\x70\x0b\x12\x31\x76\xb8\x8a\xc3\x00\xd1\xb1\x47\x25\x73\xc9\xab\xc4\x3b\x34\x16\xce\x4b\x1e\x3e\xe0\xad\x5b\xac\xab\x46\x98\x55\x39\x4c\xf9\x7f\xa4\xa4\x07\xea\x06\x82\x63\x2b\xa1\x36\x4c\xc1\x03\x43\xc0\x6e\x19\x17\x2c\x14\x85\xa5\x7a\x70\xd4\x59\xc6\x80\x3a\xca\x2d\x78\x61\x1a\xf6\x84\xfd\x52\x8e\x76\x36\xfd\xb6\x7b\x5e\x88\x95\xff\x1e\xe6\xbe\x54\xba\x10\x9b\xb4\x03\x00\x66\x69\xbb\x51\x5b\xc6\x25\x38\x40\xa6\x9f\xbf\x79\x29\x46\x30\x63\xaf\x34\x93\x86\x17\xe0\xef\x58\x64\x6c\x88\xf5\x3d\x33\x16\x2c\x4f\xbc\xc1\x94\x5b\x06\xb6\x24\x87\xb1\x47\x8f\xd4\x48\x61\x0c\x65\x1c\x22\x0b\x64\x52\xd9\x3d\xea\x21\x89\xa0\x66\x5d\x31\xb3\x18\xd0\xf2\x9f\xdb\x1d\x26\x68\xcc\x68\xaa\x6e\xc9\xfd\x06\xf6\x59\xc2\x24\x68\x64\xb1\x33\xb0\x9c\x00\x70\x19\xf3\x88\x39\x0c\x2e\x46\xcb\xb8\xe8\x76\x4e\xf5\xc1\x42\x95\x79\x30\xad\xd2\xd8\x98\xe0\xb3\x84\xd1\xc8\x4c\x1b\xc4\x1d\x91\x85\x42\x8f\xbf\xa5\x74\xf6\x72\x23\x5f\x18\x67\x1d\x4f\xc9\xdd\x50\xa8\x1f\xe0\xae\x89\xc0\x97\x8c\x9d\x92\x41\xd1\xd5\x2b\x9d\xe1\x29\xbc\x63\xc2\xe0\xe9\xa8\xaa\x7f\x94\x37\x52\xdd\x7d\x3e\xff\x6e\xd2\x6c\xdd\x1e\x52\xc7\x65\xe9\xd2\x95\x04\x9f\xc9\x48\x7f\xde\xaf\x46\x00\x8d\xc3\x88\xee\xcf\xb4\xc6\xf3\x00\x49\x79\xe0\xfc\x21\x4b\x42\xd4\x97\xd1\x1e\xe3\x4c\x0c\x31\xda\x84\xb6\xc9\x14\xa5\xbb\x8d\x94\x26\x55\xec\x82\x23\x45\x3b\x8d\xa0\x33\x29\xc9\xaf\x98\x05\x81\x64\x94\xdd\xce\x2d\xa7\xe9\x94\x0d\xa9\x8a\x1d\xf8\x4f\xf7\x9a\x2c\x4d\x95\xc1\x98\xe2\x8b\xce\xa4\xc7\x5f\xcb\x69\x75\xfc\x79\x80\x66\x81\x4a\xdf\x64\x21\x6a\x89\x16\x1d\x30\x1d\xab\xc8\xac\x22\x25\x23\x4c\xad\x59\xdd\x29\x7d\x23\x14\x8b\xcd\xaa\xca\xd4\x66\x55\xd6\x38\xab\x17\xcf\x94\x29\x73\x20\xf9\x91\xfa\xb6\xca\x32\xd1\xaf\xf5\xfc\x20\x26\x2c\x75\x3f\x64\x2f\x0d\x6d\xc2\x31\x97\x91\xc8\x62\xda\x2b\x4f\x2c\x52\x5a\x63\x64\xc5\xa1\xdc\xc3\xea\x8e\xa1\xbc\xa5\xe2\x93\xde\x63\x81\x5f\xe3\x06\x78\xe5\xbd\x29\xaa\x8d\x19\x9a\x1f\x34\xf4\x8e\xca\x67\xa9\xca\xd9\xf9\x9e\xdd\xa2\x8f\x8a\x1a\x12\x52\x5c\x1e\x33\x6b\x3b\x53\xba\x10\xb9\x45\xc1\xee\x00\xd9\x63\xca\x6d\x07\x97\x12\x4a\x8f\x33\x29\x46\xcb\x84\xcb\x0f\xf4\xd3\x25\x52\x2c\x33\x27\xcf\xaa\xd4\xf7\xdc\x98\x27\x8f\x20\x73\x54\x7a\x0a\x61\xe6\xef\x92\xca\xfe\x63\xc7\x0f\xaf\x2f\xb7\xa7\x33\x54\x5c\x9b\x5d\x1c\x3a\x8f\x5b\xf2\x50\x02\xeb\x6c\xc6\x03\x2c\x79\x82\xe6\x1d\xb7\x7b\x60\xe0\x99\x3c\x1f\xcf\xb8\x4f\xa5\xbf\x1f\x25\xfb\x35\x04\x00\x99\xd7\x45\x73\x3c\x3f\xf7\xf1\x61\xf0\xf7\x97\xf1\xfc\x02\x56\xf8\x23\x4a\xd4\xae\x67\x9b\xa9\xd0\x44\x19\xf7\xb8\x00\x75\x6d\xbb\xf2\xe6\x0a\xa6\x08\x0f\xd3\xca\x34\xbe\x46\xcb\xdd\x6f\xd2\x64\xbe\xfc\xd7\x47\x89\x98\x1f\x83\x3f\x3c\x65\x4f\x64\xec\x7a\x94\xcb\xd7\x98\x2c\x92\x9e\x65\x17\x87\xcb\xd3\x60\xa0\x3e\xec\x99\xd8\x5f\xd8\xf4\x4c\xec\xe6\x8a\xc1\x49\x1f\x7a\x2d\x7e\xa4\xe2\x8d\x31\x15\xea\x90\xa0\x9c\x09\x52\x95\xd3\xf3\xce\x25\x8f\x91\x35\xdb\x14\x87\x26\x72\xd6\x5b\xa4\xe7\x2e\x5c\x91\x7b\x28\x5c\x55\x7a\xf9\x87\xfc\x20\x64\x8e\x75\xb5\x2c\xab\x8a\x14\xa9\x8a\x4d\x5f\x49\x30\x84\x9e\xb7\x22\x05\x58\xa6\x77\x68\x0b\x1f\xe4\xa6\xa6\xd6\xe7\x03\x90\x9e\x1c\xaf\xab\x78\x26\x47\x1c\xc2\x90\xca\x59\x8f\x41\xec\x86\x14\x5a\xe0\x78\x0f\x46\xec\xf2\xed\xbf\xec\x03\x3c\x9f\x4a\xd1\xbf\x00\x52\x57\xd9\xcf\x93\x43\x75\x25\xe5\x19\x58\x5d\xc5\xc6\x6f\x60\xdd\xc0\x78\x72\xb0\x8e\x54\xf0\xa3\x4b\x6e\x0f\x12\xff\xca\x99\x5b\xa5\x02\x6e\x6a\x3a\xb8\x63\xa6\x7c\x36\xed\x37\xe0\xf1\x91\xc2\xfc\x06\x3c\xf6\x8d\x5f\x14\x78\x8c\x1b\xc9\xe8\x1f\x1d\x79\x7c\x74\xe7\x30\xd6\x2d\xf4\xa5\xf3\xe7\xea\x0b\x5c\x81\xf5\x80\x82\xad\x31\xbf\xdb\x8e\xbb\xaa\xad\x5d\x7a\x4d\x97\x2d\xff\xbf\xed\xb3\x7e\x7c\x7d\x2a\x95\x0c\x2c\xea\x84\x4b\x0a\xdc\x0f\x12\xb7\xb6\xad\xc7\x76\x8f\x5c\x83\x60\x21\x0a\x03\x09\xb3\xd1\xde\xa7\x79\x14\x18\x59\xa5\x4f\x9e\x4b\xf2\x4c\x3e\x45\x91\x5e\xa3\xf2\x48\x0d\x50\x35\xcb\x4b\xf3\x69\xb7\x97\x9e\x66\xd1\x5d\x1a\xcb\xdd\x1b\x21\x7d\xa3\x88\x0c\x65\x38\xaf\x29\xd9\x2a\x8f\x4f\x9c\xbd\x7c\xf9\x2f\xb5\x72\x2f\x62\x29\x8b\xb8\x3d\x0c\xc5\xa4\xab\x3d\x1e\xdc\xd3\xe8\xc8\xa9\xce\x80\x10\x5b\xfc\x14\xdd\x6e\x98\x59\x87\xd4\x1d\xd0\x4e\x42\x9b\x4a\xd7\x88\x38\x81\x0a\xec\xc4\x42\x88\x28\xf3\x92\x7a\xa0\x12\x78\x82\x7d\xf7\x85\xc6\x67\xec\xf9\xd3\x18\xbe\x93\xdf\x49\x5e\x7f\x1e\xdd\x62\x92\x52\x59\xee\x31\x9f\x67\x51\xc1\x48\x98\xa7\xe0\xcb\x23\xf4\x29\xa4\xaf\x10\xae\xbf\xbf\x33\x56\x2e\x37\x93\xb9\xa7\x3a\xff\xc1\x91\x9c\x8d\x3e\xf1\xa7\xaa\xf4\xa9\x76\xa8\xdd\x75\x16\xab\xfb\x15\x7d\x73\x31\x70\xe3\x68\x13\xd3\xa2\xbb\xa8\xba\x17\xca\x5b\x8c\x4b\x53\x54\x86\xce\x3f\xa9\x8c\x61\xb4\xc5\xd4\xf2\x8e\x55\x04\x2d\x0d\x61\xf9\x6a\xcf\x9b\xcd\x45\xf9\x24\xe3\x12\x82\x20\xf0\x61\xc4\x58\x9d\x0d\x64\xef\x5c\x0a\xe3\x0c\x43\xc6\x79\xa4\x88\xb9\x76\x6f\xe6\x18\x74\x5d\xb1\xf4\xe9\x9d\xfa\x26\x5a\xdb\xb7\xcb\x29\xb3\xfb\x11\x92\xc5\x0b\x58\x95\xee\x97\x00\xef\x94\x06\xbc\x67\x49\x2a\xf0\x14\xae\xa5\xb3\x3a\x78\xa7\x54\x6e\x05\x9e\xcf\xbf\x8e\x50\x5d\xad\xda\xed\x6a\xa7\x3b\x85\xad\x52\xf3\x1a\xd0\x92\xe4\x77\x54\x0d\xf6\x71\xec\xf8\x63\x1a\xd7\x70\xbd\x28\x0f\x93\xae\x17\xa7\x70\xbd\xd8\x68\xb5\xd3\x68\x0c\x97\xbb\xeb\xc5\x58\xb9\xc9\x64\x0c\xd7\x8b\xb7\xb8\xd3\x2c\xc6\xf8\x7a\x41\x0b\xfe\x2e\xa5\x94\xf6\x1e\xf5\x0e\xbf\xc3\xc3\xd7\x6e\x99\xf2\xf2\xa5\xd5\xcc\xe2\xee\xf0\x75\x42\xbf\x8f\x73\xfe\x3b\xc1\x8d\xa5\xca\xf2\xeb\x84\xa5\xe5\x85\xf7\x2c\x2d\xc9\x96\x36\x67\xe0\xe3\xa7\x04\x2d\xbb\x3d\x5b\x96\xd7\x46\x88\xff\xf9\x27\x6a\x1c\xae\x17\x95\x36\x4e\x55\x42\xd6\x9e\xda\xc3\xf5\x02\x1a\x9c\xae\xaf\x17\x8e\xd7\xe2\x7a\x21\xd8\xfa\x7a\x41\x3c\x5c\x2f\x46\xd6\x71\x8f\x22\x87\xd9\x76\x7d\xbd\x08\x0f\x16\xcd\xe9\xd9\xa9\xc6\xf4\x54\xb2\x04\xbf\xae\xd6\xbe\x5e\xfc\x99\xec\x65\xb5\x02\xd7\xdc\x7a\x13\x1c\xeb\xa7\xfe\x36\xbc\xe6\xbc\x67\x3c\x1f\xd6\xd5\xb7\x3c\xbd\x7b\x73\x91\xca\x45\x7f\xc7\x3f\x4a\x1a\xfa\xf1\x80\x9e\x9e\x3f\x77\x77\x77\x60\x31\x41\x32\x44\x8f\x5b\x11\x1b\xee\x99\x79\x71\xa0\xa4\x5d\xf5\xdf\xd1\x9e\xc9\x1d\xc6\x4b\x80\x8b\xad\xcf\x4b\x83\x09\xac\x18\x94\xad\x5d\x67\x75\x4a\x64\x25\x64\xa6\x38\x2d\x71\x12\x97\xeb\x51\x98\xf2\x41\x24\x5f\x64\x82\x2e\x37\xc0\xa2\x08\x53\x4b\xee\x37\xe6\xcb\x0f\x83\x03\xe6\x3f\x99\x3b\x0d\x09\xb4\x0c\xa0\xc4\x00\x0c\xb0\x69\x7c\x60\x42\xfc\x22\x47\xf4\x22\x04\x7e\xcb\xa9\x1e\x0b\x91\x22\xb5\x73\xd0\x5c\xa4\x71\x55\x25\xec\xfe\x7b\x94\x3b\xbb\x5f\xc3\xeb\x57\x5f\x7d\xf9\xfb\xa7\xd0\xd4\xdc\x76\xaf\x57\x69\xdd\x9b\xdb\x75\xc1\xb2\x78\x0d\x70\x59\xb5\x87\x53\xae\xb3\xcf\xb3\x56\x13\x59\x32\x68\x21\x64\x06\x63\xc8\x52\xd2\x22\x65\x26\x2e\x8d\x65\x32\x9a\x00\x0f\x00\xf8\xb6\x97\x11\xda\xec\x3c\xeb\x88\x03\x9c\xbd\xf2\xe7\xd5\x8e\xed\x4e\x66\xf9\x78\xff\x69\xd9\x15\x77\xda\x0d\xfe\x70\xda\x92\x85\x1b\x20\xa3\x50\x5b\x67\xf1\xbe\x4f\xd4\xe8\x8b\x08\xff\x4e\xee\x04\xd1\x9e\x42\x02\x4b\x4d\xcc\xf3\xb5\xe1\xe6\xba\x18\x09\x97\x3c\xc9\x92\x35\xbc\x9c\x61\x64\xd3\x0f\xa0\x4f\xa3\x5a\xdd\xa6\xdc\xd4\xab\x2e\x46\x49\x60\xa7\x59\x92\x30\xcb\x23\xe0\x31\x4a\xcb\xb7\x7c\x74\x51\x70\x6f\x32\x97\x90\x9e\x7d\x32\xa8\x8c\xc6\x46\xab\x38\x8b\x50\xbb\x12\x86\x76\x8f\x6f\x79\x54\x07\x84\x0f\x29\x7a\x2f\xf7\x4f\x7b\x03\xde\xd3\x16\x4f\x46\x4e\xff\x3a\xb5\x7f\xe3\x1a\x19\xb5\x65\xc5\xd9\x49\x71\xec\xe1\x5f\xc7\xbe\xdb\xa3\xcb\xab\xd3\xf6\x52\x50\xd4\x4e\x5e\xc3\x63\xa4\x0e\x85\xc1\x2e\x63\x9a\x49\x8b\xe8\x5e\xa0\xf2\x8f\x4f\xfb\xd7\xa0\xe7\xa6\x23\x56\xbd\x7e\x5c\xc4\x2f\x1f\xdc\x7c\xaa\x20\xe1\xf3\x57\x96\x5d\x8c\x9b\x1d\xdc\xce\x5e\xbe\x9a\xb4\xce\x72\xee\xe8\xc4\x94\x59\x8b\x5a\xae\xe1\x7f\x3e\xbe\x09\xfe\x9b\x05\x3f\x7f\x3a\xce\xff\xf3\x32\xf8\xc3\xff\x9e\xae\x3f\x7d\x51\xfb\xf3\xd3\xc9\x37\xff\xfc\x14\x21\x75\x1a\x24\x6d\x19\xbb\x79\x2a\x98\x74\x16\x50\x0a\x80\x32\x4b\xc6\xd9\x0b\x60\x41\x8b\x8e\x95\x81\x6e\x92\xe3\x69\x6a\x56\xce\xd3\x53\xa8\x76\x0a\xbf\x6d\x29\xd6\xe6\x08\x6e\x2d\xfa\xd6\x5e\x99\x07\x97\x41\xa8\xfb\x58\xe6\x2d\xce\x32\x52\xc9\xaa\x7a\xa5\x7e\x42\xd7\xd4\xad\xbd\x67\xf2\x00\x55\x9a\xf0\xfd\x47\xdb\xe3\x8c\xa5\x78\xcd\x22\xad\xcc\x54\x41\x56\xbe\xfd\x06\x82\xdf\x20\x94\x2d\x8c\x4f\x4d\x21\x46\xcc\xb5\x78\x3a\xe4\x56\x33\x7d\xa8\x35\xca\x53\x59\x83\x49\xf7\xed\x00\x83\xdb\x4c\xc0\xb1\x41\x84\xa5\x54\x31\x76\x33\xdd\x89\xcf\x58\x2c\xe4\x82\xdb\xa1\x07\x5b\x8a\x61\x15\xc4\x18\x29\xb9\x15\x3c\xb2\xae\x2b\x4d\x52\xa5\x2d\xcb\x8f\x77\x41\xe3\x0e\xef\x81\x5b\x0f\x09\xa2\x99\x2e\x49\x8f\x63\x69\xce\xce\x5e\xbd\xbe\xcc\xc2\x58\x25\x8c\xcb\x77\x89\x5d\x9d\x7c\x73\xfc\x97\x8c\x09\x8a\xf8\xf1\x0f\x2c\xc1\x77\x89\xed\x7f\x72\xa6\x18\xf5\x52\xe9\xec\xcb\x99\x31\xe2\xf8\xa3\x8f\x04\x9f\x8e\x3f\x06\xf9\xff\xbe\x28\x2e\x9d\x7c\x73\x7c\xbd\x1c\xfd\xfd\xe4\x0b\x62\xb3\x16\x5f\x3e\x7d\x0c\xaa\xe0\xb2\xfc\xf4\xc5\xc9\x37\xb5\xdf\x4e\x9e\x20\xd4\x4c\x9d\x22\x90\xf3\x75\x1b\x9b\x91\xc9\x79\xa1\x3b\x32\xc3\x27\xd0\x91\x09\xa3\xe7\x16\x13\x27\x17\x33\xce\x2e\xa6\x4e\x2f\x68\xdc\x07\xd5\x13\x82\x01\x75\xd7\x41\xc2\xd2\xe0\x06\x0f\x83\x31\x79\x94\xab\x2e\x39\xcf\x42\xc2\xd2\xde\x3b\x84\x62\xf1\xbf\x33\x41\xd5\x98\x9e\x85\x5e\x7d\x5f\xbb\xa1\xaa\x78\xfa\x51\xb5\xb1\x74\x4f\x0b\x07\x61\x4e\xe8\x94\x8a\x5e\xe5\x3f\x6a\x93\x57\xe4\x9f\x73\x64\xce\xa5\xc3\x4e\x66\x9f\x9d\x5d\xf8\xf9\xbe\x9d\x22\xa5\x15\x82\x51\x25\x96\x13\xf3\x07\xf9\xe3\xf1\xa0\xa8\xd4\x1a\xb2\x2d\xe1\x4a\xb3\x2d\xd5\x5b\x0d\x0c\xcc\x9f\x37\x38\x04\x70\x94\x66\xf5\x78\xa0\xc9\x51\x75\xbb\x47\x83\x2d\xb6\xc6\xa2\xff\x04\x86\xd8\xd1\xc6\x8b\xfa\x16\x17\xaa\x69\x75\x4a\x13\x8e\xe3\x87\x83\xcb\x1a\xba\x68\x72\xbd\xa6\x0a\xb6\xa3\x99\xc9\x86\x0b\x2b\xe4\xb4\xa3\x1b\x26\x9b\x4b\x2c\xfb\x1f\xa1\x2d\xc6\x3c\xac\x86\xc6\x5e\x19\x3b\xf5\x45\x09\x3f\x1a\xba\xfc\x8f\xfc\x36\x32\x2d\xea\x09\x69\xe7\x7b\x35\x32\x49\x16\xf2\x9d\xae\x0e\x42\xde\xfe\x70\x99\xf7\x98\xc7\xf6\x90\xf2\x88\x09\x71\x80\x37\xff\x75\xd9\x5c\x60\xe0\xa1\xcd\xfa\x98\x59\xce\xd0\xe0\x13\xef\xf8\x76\x14\x70\xb1\x99\x14\x7d\x8e\x67\xe5\x8c\x16\xa2\x5f\x6c\xba\x92\xff\xf1\xfc\x5b\xaa\x91\xfe\x33\x45\x79\x69\x59\x74\xf3\x9c\x6a\x18\xf8\xe0\xc5\xa8\x26\x36\x74\x4f\x2d\xc4\xa8\xad\xfb\xd0\x95\x8e\x7d\x53\x36\x23\x14\xd4\xd6\x86\x8b\x2d\x55\x47\xf1\x29\xe0\x2d\xea\x83\xff\xd2\x84\xef\xdd\x62\x2a\x13\xe7\x46\x17\x3f\x72\x3f\x72\x07\x43\x4c\x02\x4a\xab\x0f\x44\x85\x8f\x81\xfa\x7e\xcc\x08\x2e\x39\xdb\xb3\x5d\xcd\x0f\xd4\x5a\x0d\x66\xa4\xf6\x68\xc6\xaf\x6f\xe9\x56\x87\x88\xaa\x5c\xc5\xfe\xd3\x68\x5a\x85\x02\x87\xde\x8b\xed\x0e\x07\x76\xd4\xc3\x8d\x53\x32\xd5\x89\x1e\x99\x28\x5a\x20\xc7\xe9\x6c\xaa\x66\xcf\x84\x80\x48\x25\xa9\x38\x54\x4b\x6c\x95\x10\xea\x8e\xd2\x8d\xce\x04\x9a\x35\x04\x10\x66\x5c\xd8\x80\x4f\xa1\x36\xd5\x70\x7c\x14\xe5\xbc\x5f\x26\xc4\xa2\xdb\x2f\xcc\xc2\xf5\xbb\x83\xe7\xa4\xdd\x41\xdd\xbb\xdd\x2b\xea\x99\x1d\x45\x2a\xe8\xab\x9e\xc4\x7d\xe0\x0f\x02\xff\xad\x95\xd9\x34\x53\xad\x6e\xa9\xb1\xaf\x90\x88\x06\xeb\x49\x66\xf2\x43\x4a\x47\x7e\x36\x59\x17\x1d\xba\x8a\x75\x5b\xf5\xe8\xb6\xa9\x1a\xfe\xb8\xab\xb7\x49\x98\xdf\x06\x8c\xa7\xa3\x6a\x3c\xa0\x23\xa8\xc6\xaf\xb2\x37\xa8\xc6\x03\xe2\x6b\x2e\xcf\xc8\x87\x6a\xda\xa3\x13\x6a\x8b\x13\x11\xe7\xb4\xd5\x39\xfa\x34\x02\x55\x8d\x86\xdf\xab\x6d\xfe\xd5\x1f\x53\x3e\xe5\xed\x63\x0b\xc6\xb0\x47\x3d\x97\xea\x9c\x0f\xec\xb4\xc7\x5c\xdc\xb2\x1a\x53\x1f\xe0\x69\x8f\xf2\xd3\x17\x57\xe7\x9b\x47\x85\xdc\x4d\xbe\x60\xa9\xf5\xe2\xef\x5f\x81\xca\xdd\x33\x25\xfe\x85\x2e\x6d\xcb\x6f\x40\xfa\x73\xd7\xc5\xd5\xf9\x66\x71\x0a\x8b\x1f\xdf\xba\x7f\x2e\xcf\xaf\x36\x8b\xb9\x3e\xfa\x40\x7b\x9e\xee\x7f\xab\x11\x38\x05\xcc\x9b\x98\x6b\x7a\x4e\xf9\x34\xdd\xaf\xb6\x27\x8f\x75\xae\xd5\x18\x6a\x3a\x99\x55\x09\x8f\x66\x40\x07\x93\x3c\x4d\x73\x33\x41\xe8\x71\xdf\x5a\x19\x86\x47\x47\xbe\x98\xe2\x3e\xd7\x89\x32\x4b\xba\xb9\x65\xd0\x64\x86\x3e\xea\xd2\xd3\x67\xf5\x32\xdb\xb9\xe8\xcf\x7e\xa8\xc3\xca\xbc\x9f\x14\xdf\x26\xaa\x5d\xc9\xc2\xce\xe7\xab\x72\x71\xe1\xaf\x7f\x3b\xfa\xbf\x00\x00\x00\xff\xff\xde\x4a\xf7\xbe\xb1\x58\x00\x00")

func configCrdBasesCoreCalyptiaCom_pipelinesYamlBytes() ([]byte, error) {
	return bindataRead(
		_configCrdBasesCoreCalyptiaCom_pipelinesYaml,
		"config/crd/bases/core.calyptia.com_pipelines.yaml",
	)
}

func configCrdBasesCoreCalyptiaCom_pipelinesYaml() (*asset, error) {
	bytes, err := configCrdBasesCoreCalyptiaCom_pipelinesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crd/bases/core.calyptia.com_pipelines.yaml", size: 22705, mode: os.FileMode(420), modTime: time.Unix(1690372914, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configCrdKustomizationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x4e\x33\x31\x10\x84\x7b\x3f\xc5\x48\x57\xfe\x3f\x97\x3e\x2d\x34\xb4\x88\x1e\xed\xd9\xeb\xdc\x2a\x3e\xef\xc9\xbb\x26\x0a\x4f\x8f\x72\x09\x21\x74\xd6\xd8\x9e\xf9\x66\x06\xbc\xcf\x62\x38\x76\x73\x5d\xe4\x8b\x5c\xb4\x8e\x67\x5a\x0a\xc4\x50\xd5\x21\xd5\xb9\x26\x4e\x70\xc5\xc4\x68\xbd\x62\x3a\x43\xdc\xb8\xe4\xff\x61\x80\x49\x8d\x0c\x71\x24\x5e\xb9\x26\x83\x56\x18\xb7\x4f\x89\x8c\x4a\x0b\x83\x6a\xda\x0e\xb6\x52\x64\xf8\x4c\x0e\x6a\x0c\xed\x0e\xcd\xf0\xc7\x74\xc6\x4a\xf1\x48\x07\x1e\xc3\x80\x57\x87\xcd\xda\x4b\x7a\x88\x8d\x5a\xb3\x1c\x76\x89\x33\xf5\xe2\xa1\xb1\x69\x6f\x91\x6d\x1f\x80\x27\x4c\x64\x6c\xbb\xa8\x8d\xc7\x48\xe5\xbc\xba\xd0\x18\x75\xf9\x58\x65\xe5\x22\x95\x6d\x2b\x16\x86\x7f\xc7\x3e\xf1\xd4\xa5\x24\x6e\x7b\x8b\x94\xb3\x96\xb4\x8f\x2d\xdd\x39\x7e\x8c\x43\x08\x03\x7c\x66\x64\x2d\x45\x4f\x52\x0f\x37\x84\xcb\x3a\x59\x1b\x9c\x29\xce\x17\xf9\xb7\xc2\xac\xa7\xcb\x56\x49\xff\x8e\xba\x3d\x7f\x7e\x7b\xb1\x31\x5c\x2d\x7a\xdb\xf4\x1b\xfb\xfd\xff\xf5\xf2\x4a\xfa\x1d\x00\x00\xff\xff\x5d\x3d\x4c\x91\x9d\x01\x00\x00")

func configCrdKustomizationYamlBytes() ([]byte, error) {
	return bindataRead(
		_configCrdKustomizationYaml,
		"config/crd/kustomization.yaml",
	)
}

func configCrdKustomizationYaml() (*asset, error) {
	bytes, err := configCrdKustomizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crd/kustomization.yaml", size: 413, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configCrdKustomizeconfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4b\x2c\x0a\x4a\x4d\x4b\x2d\x4a\xcd\x4b\x4e\xb5\xe2\x52\x50\xd0\x55\x28\x48\x2c\xc9\xb0\x52\xc8\x4d\x2d\x49\x4c\x49\x2c\x49\xd4\x4f\xcc\xcb\xcb\x2f\x49\x2c\xc9\xcc\xcf\x2b\xe6\x02\x04\x00\x00\xff\xff\x28\x70\x66\x87\x2d\x00\x00\x00")

func configCrdKustomizeconfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configCrdKustomizeconfigYaml,
		"config/crd/kustomizeconfig.yaml",
	)
}

func configCrdKustomizeconfigYaml() (*asset, error) {
	bytes, err := configCrdKustomizeconfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crd/kustomizeconfig.yaml", size: 45, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configDefaultKustomizationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xbd\x6e\xeb\x30\x0c\x85\x77\x3e\x05\x81\x3b\x5b\x8a\xb7\x0b\x6d\x9d\x0b\x14\x1d\x8a\xee\x8c\xcc\x28\x84\x2d\x51\xa0\x94\xf4\xe7\xe9\x8b\xd8\xad\xd1\x76\xea\x76\x80\xef\x1c\xf2\xfb\x87\x77\xd3\xd4\xb0\x50\xe6\x56\x29\x32\x76\x45\x5a\x16\x34\x6e\x7a\xb1\xc8\xcd\xc1\xce\x02\x46\x5a\xde\x6a\x17\x1a\xa2\x1a\xc3\x4a\x1e\x8d\x4f\xf2\xfa\x0b\x0d\x40\x55\x9e\xd9\x9a\x68\x09\x38\x5f\x5a\xd7\x2c\xef\xec\xa2\x96\x93\x24\x37\xff\x6f\x4e\xd4\x5f\xc7\x23\x77\x1a\x61\x96\x32\x05\xbc\xff\x6c\x51\x17\x2d\xb0\xff\x0f\x30\xa0\x73\x3e\xda\xb4\x05\x3b\x52\xdc\x52\xa6\x42\x89\x0d\x24\x53\xda\x7a\x37\x9f\x6f\x26\x5a\xd9\xa8\xab\x01\x62\xe1\x97\x87\x15\x9e\x7b\xaf\xc1\xfb\x74\x8e\x76\x53\xf8\xea\xfa\xd5\xfa\xe7\xe0\x89\x52\xc0\x4c\x52\xf6\xcb\x7f\x5e\x5d\x47\x77\x70\xe3\x01\x3e\x02\x00\x00\xff\xff\xa3\x9d\x83\xf0\x5e\x01\x00\x00")

func configDefaultKustomizationYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultKustomizationYaml,
		"config/default/kustomization.yaml",
	)
}

func configDefaultKustomizationYaml() (*asset, error) {
	bytes, err := configDefaultKustomizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default/kustomization.yaml", size: 350, mode: os.FileMode(420), modTime: time.Unix(1690374331, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configDefaultManager_auth_proxy_patchYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x5d\x6f\x2a\x47\x0c\x7d\xe7\x57\x58\xdc\xd7\x2e\x1f\x37\x34\x4d\x47\xca\x03\xcd\x8d\xd4\xa8\xb7\x12\x4a\x50\xdf\xcd\xac\xd9\x75\x33\x5f\xf5\x78\x09\xf4\xd7\x57\x43\x92\x0d\x6c\x12\xa9\x0f\x17\x5e\xc0\x3e\xb6\xcf\x9c\xe3\x99\x2f\xb0\x6e\x39\x43\x42\xb5\x2d\x70\xf8\x9b\xac\x02\x42\xe6\x9a\x2c\x0a\xd8\x18\x14\x39\x90\xc0\x53\xcb\x05\x90\x01\xe1\xf7\xf5\x7a\x05\x49\xe2\xfe\x00\xdb\x28\xa0\x2d\x8d\xbe\x1c\x91\x12\x9d\x23\x01\x8f\x01\x1b\x92\x9f\x80\x15\x12\xc9\x36\x8a\xcf\x70\xff\xdb\xf2\x06\xb0\xd3\x36\x0a\xff\x8b\xca\x31\x00\x36\xc8\x21\x6b\x69\x00\x7f\x74\x1b\x92\x40\x4a\x19\x96\xab\x3b\xe8\x32\x87\x06\x1e\xba\x4d\xe1\xb3\xb4\x96\x72\xbe\xa7\x1d\xd3\x53\x9e\x8c\x30\xf1\x5f\x24\x99\x63\x30\x80\x29\xe5\xe9\x6e\x3e\x7a\xe4\x50\x1b\xf8\x46\xc9\xc5\x83\xa7\xa0\x23\x4f\x8a\x35\x2a\x9a\x11\x40\x40\x4f\xe6\x84\x60\xf5\x42\xf0\x25\x95\x13\x5a\x32\x90\x0f\x59\xc9\x8f\x72\x22\x5b\x8a\x94\x7c\x72\xa8\x54\x7e\x03\xbc\x46\xcb\x07\xb7\x5b\x0e\xac\x87\xd7\xff\x00\x21\xd6\xb4\x7c\x17\x05\x10\xfa\xa7\x63\xa1\xfa\x5b\x27\x1c\x9a\x07\xdb\x52\xdd\x39\x0e\xcd\x5d\x13\x62\x1f\xbe\xdd\x93\xed\x8a\x1e\xa7\x95\xcf\x3d\x1f\xc8\x91\xd5\x28\x6b\x12\x9f\xcf\xd3\x00\x15\xf8\xe2\xd9\xed\x3e\x09\xe5\xa2\xc6\x3b\x44\xc1\x3c\xd2\xc1\xc0\x63\x2f\xee\x84\xe3\x14\xc5\xb6\xef\x90\x00\x31\x91\xa0\x46\x31\x70\x17\x3e\x48\xef\xd0\x75\xf4\xc1\x88\xe7\x31\xe8\xeb\xcb\xc5\x67\x39\xf1\x9f\xe6\x52\xb2\x97\x0b\x47\x9f\x64\xf3\xc5\xaf\xb3\xfd\xff\x3b\x54\xcc\x3f\xfa\x48\x8e\x43\xf7\x3a\xbc\xbf\x06\x3d\xba\x7a\xd9\xaa\xc2\xa2\x92\x0d\xda\xea\x78\x21\xfa\x5e\x99\x6c\x27\xac\x87\x9b\x18\x94\xf6\x7a\x3a\x04\x9d\x8b\x4f\x2b\xe1\x1d\x3b\x6a\xe8\x36\x5b\x74\xc7\xfb\x60\x60\x8b\x2e\x9f\x6a\x61\x31\xe1\x86\x1d\x2b\x0f\x69\xd6\x12\xd3\xfb\x85\x18\x2f\xbf\x7f\x1f\xf7\x51\xf6\xd8\x90\x81\xc6\x4a\x11\xa8\x10\xdd\x74\xec\x6a\x92\xe9\x80\xb4\xd9\xcd\x26\xf3\x8b\xc9\xbc\xaf\x44\x69\x4e\xe6\x55\x30\xae\xaa\xe3\x79\xa8\x72\x9c\x95\x42\x85\x75\x5d\x96\xee\x7a\x36\x39\x7e\xcd\xd5\x62\x71\x31\x3e\x2f\xe8\x52\x56\x21\xf4\xd7\xad\x6a\x32\xd3\xe9\xfc\xeb\x2f\x47\xf0\xdc\x5c\xcd\xae\x66\xd3\x01\xda\xc5\x46\x63\xd6\x9a\x44\xae\x55\x3a\x1a\xa4\x77\xd7\xb3\xb7\x48\x8a\xa2\x67\xf4\x7a\x77\x56\x51\xd4\x40\x21\x73\x22\x4d\x92\xa8\xd1\x46\x67\x60\x7d\xb3\x3a\x89\x3f\xfb\x57\xd8\xbd\xad\x8e\x50\x8e\x9d\xd8\x73\xb5\x1d\x7b\xd6\x81\xfe\x36\x75\x06\x7e\x9e\xcd\xfc\x59\xd4\x93\x8f\x72\x30\x30\xff\x7a\xf5\x27\x0f\xde\x01\xca\x1f\xf7\xf8\xb8\xc3\xe5\xa2\x6f\xf0\xba\x69\x6f\x8f\xd6\xa7\x26\xb5\x84\x4e\xdb\x62\xea\x86\xaa\x0d\x87\xba\x37\xaa\x88\x3e\x1f\x88\xea\x49\x85\x6d\x3e\x07\x9e\xdb\x34\x74\x89\xb0\x26\xa9\x8e\xaf\xd2\x78\xf4\x5f\x00\x00\x00\xff\xff\x57\xf1\x41\x02\x3a\x06\x00\x00")

func configDefaultManager_auth_proxy_patchYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultManager_auth_proxy_patchYaml,
		"config/default/manager_auth_proxy_patch.yaml",
	)
}

func configDefaultManager_auth_proxy_patchYaml() (*asset, error) {
	bytes, err := configDefaultManager_auth_proxy_patchYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default/manager_auth_proxy_patch.yaml", size: 1594, mode: os.FileMode(420), modTime: time.Unix(1690372911, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configDefaultManager_config_patchYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8d\x41\x0a\xc3\x30\x0c\x04\xef\x7e\x85\x3e\x10\x4a\xaf\x3e\xf7\x0d\xbd\x2f\xc9\x52\x4c\x2d\x59\x58\xa2\x90\xdf\x17\x43\xa2\x93\x98\x65\x67\xe1\xed\xcd\x19\x6d\x58\x15\xb8\xc7\xe3\xf7\x2c\xdf\x66\x47\x95\x17\xbd\x8f\x53\x69\x59\x94\x89\x03\x89\x5a\x44\x0c\xca\x2a\xfb\xb0\x9c\xa3\x77\xce\x4d\x61\xf8\x70\x5e\x51\x38\x76\x56\x89\x33\x92\x5a\xc2\xb9\xaf\x52\x52\xbd\x23\xb9\x7e\x91\x9b\xae\x5b\x22\x34\xe3\x8c\x9b\x6c\xd7\xc4\xed\xfd\x07\x00\x00\xff\xff\x2d\x6a\x89\x42\xa2\x00\x00\x00")

func configDefaultManager_config_patchYamlBytes() ([]byte, error) {
	return bindataRead(
		_configDefaultManager_config_patchYaml,
		"config/default/manager_config_patch.yaml",
	)
}

func configDefaultManager_config_patchYaml() (*asset, error) {
	bytes, err := configDefaultManager_config_patchYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/default/manager_config_patch.yaml", size: 162, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configManagerKustomizationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xca\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\xa7\xc8\x05\x1a\xd4\x0d\xe5\x0a\xec\xec\x1f\x63\x2a\x2b\x8d\x1d\xd9\x29\x52\x39\x3d\x4b\xf7\xa7\xe8\x1c\x03\xc4\x35\x13\xf6\x73\x4c\xc1\x42\xe6\x9c\x9c\xc3\x0e\x27\x8e\x9a\x96\xdc\xa1\xd8\xd8\xcb\x89\xbe\x27\x0c\x79\xb2\x87\x98\xd6\xdc\x8e\x98\xd6\xe5\xc7\x85\x4c\x3f\xb2\x95\x76\x8f\x22\x76\xfb\xae\x2f\x9e\x58\x53\x13\x7d\xd7\xfc\xb8\x14\xa6\x98\xa6\x7f\x00\x00\x00\xff\xff\xf2\xd3\x6a\x53\x73\x00\x00\x00")

func configManagerKustomizationYamlBytes() ([]byte, error) {
	return bindataRead(
		_configManagerKustomizationYaml,
		"config/manager/kustomization.yaml",
	)
}

func configManagerKustomizationYaml() (*asset, error) {
	bytes, err := configManagerKustomizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/manager/kustomization.yaml", size: 115, mode: os.FileMode(420), modTime: time.Unix(1690280873, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configManagerManagerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4f\x73\xdb\xb8\x0f\xbd\xe7\x53\x60\xda\x4b\x7b\x90\x1d\xf7\x97\x76\x5a\x4d\x2f\x99\xa6\xbf\x4e\x67\xdb\x24\xd3\x76\x77\x66\x8f\x30\x09\x5b\xdc\x50\x04\x97\x80\xdc\xa8\x9f\x7e\x87\x92\x2d\x4b\x6e\x9c\x66\xff\xcd\xac\x4e\x36\x01\x3e\x80\x0f\x0f\x20\x31\xba\x5f\x28\x89\xe3\x50\xc2\x66\x71\x72\xe3\x82\x2d\xe1\x12\x6b\x92\x88\x86\x4e\x6a\x52\xb4\xa8\x58\x9e\x00\x78\x5c\x92\x97\xfc\x0b\xc0\x70\xd0\xc4\xbe\x88\x1e\x03\x95\xbb\xbf\x9e\x52\x51\x63\xc0\x35\xa5\xce\x0b\x63\x9c\xdd\x34\x4b\x4a\x81\x94\x64\xe6\x78\x1e\xb0\xa6\x12\xc2\x80\x7f\xb7\x97\x0b\xa2\x18\x0c\x95\x20\xad\x28\xd5\x47\xdc\x0c\xd7\x91\x03\x05\x2d\xe1\xfe\xa8\x26\x11\x2a\xd9\x62\xd9\x96\xc0\x91\x12\x2a\x1f\x73\x8d\x98\xb4\xe0\xd5\x0f\xfd\xfa\x80\x3d\xe4\x4d\x23\xca\xb5\xfb\x96\x8f\xd3\x1f\x70\x9b\x76\x51\x14\x27\x63\x82\x31\x46\x99\x0f\x2c\x5f\x50\xf4\xdc\xd6\x14\x74\x42\x73\x8f\x70\x27\xa3\x03\x6f\x23\x62\xfe\xb9\xaa\xd8\x7d\x3e\x3f\x2a\xcb\x83\x91\xff\x7b\x25\x92\x48\x26\xb3\x25\xe4\xc9\x28\xa7\x9e\xb9\x1a\xd5\x54\x1f\x46\x54\x3e\x8c\xcc\x44\xd1\x3b\x83\x52\xc2\xe2\x04\x40\xa9\x8e\x1e\x95\xb6\x90\xa3\x9a\x76\x09\x86\xc0\x8a\xea\x38\x0c\x21\x00\x72\xc6\x46\xfd\x41\xe6\x96\x56\xd8\x78\x2d\x72\x4c\x74\x81\xd2\x94\xbd\x69\xd1\x1f\x5e\xf8\xdd\xd1\xf3\xf7\x18\xbe\x5c\x5d\x5c\x3d\x69\x84\xd2\xd3\x12\x7e\x0e\x86\xeb\x5c\x79\xd0\x8a\x60\xc5\xde\xf3\x57\x17\xd6\x60\xd8\x12\x28\x67\xc0\x95\x5b\x37\x89\x3a\x7b\x60\x4b\xe7\xab\x95\x0b\x4e\x5b\xa0\xdb\x98\x48\xb2\xbe\x07\x64\x34\x86\x93\xcd\xfb\x95\xbb\x0d\x99\x95\x15\xa7\x5a\xe0\x6b\xe5\x4c\x05\x98\x08\xa4\x89\x91\x93\x92\x85\x65\x0b\x2d\x37\x09\x84\x7d\x93\xe9\x99\x0d\x40\xef\x15\x9c\xe4\xe0\xe2\x2c\xa5\xec\x4a\xa2\x10\x13\x1a\x75\xa6\x4b\x6c\x8b\x02\x75\xe3\xd5\x45\x4f\x80\xc9\x54\x4e\xc9\x68\x93\x48\x66\xf0\x2b\x37\x60\x70\x9f\xda\xb2\x71\xde\xf6\xe1\xb6\xcc\x80\xab\x71\x4d\xd0\x48\x97\x6f\x45\x50\xe3\x0d\xad\x9c\x27\x50\x4c\x6b\x52\xb0\x6c\x6e\x28\x15\xdd\xce\xdb\x7d\x6e\xb8\x25\x60\x4f\x28\x4c\x88\x19\xaf\x67\xa1\xfc\xde\xb8\x44\xf6\xa2\x49\x2e\xac\x3f\x9b\x8a\x6c\xe3\x5d\x58\xbf\x5f\x07\x1e\x96\xdf\xde\x92\xe9\x18\x98\xee\xed\x71\x3f\x6f\xf5\xfa\x85\x52\x2d\x87\x0e\x00\x45\x2f\xe1\xb7\x43\x35\xee\xf0\xc9\x5e\x37\xd4\x75\xc3\x58\x6d\x99\xb2\x3b\x7c\x61\xe8\xaf\x12\xde\x87\x3b\x1d\x36\xe8\x1b\xba\x33\x50\x1f\x0c\x6b\xfb\xe2\xec\xb8\x35\xd5\xf7\x58\x63\x34\x2f\xce\x3c\x1d\xb5\xcb\xff\x5e\x9d\xde\x3e\xf4\x88\x2c\xff\xce\x01\xbd\x0b\xcd\x2e\x09\x21\xd3\x24\xa7\xed\x1b\x0e\x4a\xb7\xba\x6f\xce\xd4\x84\x73\xb9\xe4\xf0\x89\x59\x4b\xd0\xd4\xd0\x60\x9a\x76\xe1\xff\x39\x41\xee\x43\x0e\x60\x50\x48\x40\x2b\xcc\xfa\x83\xc0\xba\x53\x10\x90\x18\xf4\xa8\x59\xad\x31\xb9\x8d\xf3\xb4\x26\x19\x01\xba\xae\x67\x12\xf5\x0d\x6d\xc9\xe6\x36\xa1\x20\x7d\xf3\xa2\x02\x7a\xdf\x37\xc0\x35\x5b\x99\xbf\xd9\x8d\x18\xe9\xba\x32\x91\x68\x72\x46\xdd\x86\x66\x23\xd0\x8f\x9c\x08\x5c\x58\x71\x09\x95\x6a\x94\x72\x3e\x3f\x98\x58\x6c\x64\x6e\x38\x18\x8a\x2a\xf3\x1d\x15\xf3\xc8\xb6\xd8\xfd\x29\xf2\xe5\x61\x31\x59\x99\x3f\xde\x85\x21\x3b\x0a\x72\xed\x09\x85\xa0\xb9\x6f\x16\xb9\x55\x9f\x7b\x4c\xfc\x1b\x99\x4c\x0e\x09\x5c\x5e\x7d\x81\x0a\x37\xdd\x40\xf8\xca\xe9\x06\x38\x00\x7b\x0b\x3f\x0d\x29\x8e\xa2\x6c\xfa\xcb\x58\xe0\x35\x2c\x66\x8b\x57\xc0\x29\xbb\x6f\x28\x58\x4e\xb2\xb7\xf6\x83\xca\x72\x07\xbe\x9b\x32\x5a\x39\x81\x95\x23\xdf\x0d\xad\xed\x94\x86\x27\x6e\x46\x33\xb8\x8a\x14\xa4\x72\x2b\x85\xd7\x70\x36\x5b\x2c\xe0\xe9\x98\x40\x21\x93\xaf\xc2\xeb\xc4\x79\xb4\x94\x23\x0b\x80\xb6\x91\x4a\xf8\xd4\x04\x75\x35\x5d\xf4\xa0\xa3\x3b\xa8\xaf\xce\x7e\x4b\xd1\x69\x04\x83\xdd\x2f\xf5\xcb\xf3\xe9\x1d\x91\xbf\x6e\xb6\x95\x60\xd0\xb7\x51\x1d\x16\x83\xe0\xf3\x35\x25\x3a\xf2\xec\x9f\x00\xdf\x23\x1c\x55\x75\xfe\x30\xd7\xe6\x7a\xa7\xc2\xb7\x5b\x65\xe6\x97\xce\x0a\xbd\xd0\xc4\xd7\x60\xc4\xa5\xf3\x4e\x1d\xc9\x14\x05\xc0\x26\x8e\x87\x6b\xf9\x44\x8f\xce\x3f\x7c\x78\x34\x5a\xf7\x6e\x43\x81\x44\xae\x13\x2f\x69\xba\x21\xcb\xf2\x1d\xe9\x21\x4a\x44\xad\x4a\x98\x57\x84\x5e\xab\x6f\x87\x46\x4e\x5a\xc2\xcb\xd3\x97\x8b\x89\x21\x8f\x6f\x87\xfe\x82\x3c\xb6\x9f\xc9\x70\xb0\xf9\x7e\x7f\x3e\xf1\x89\x94\x1c\xdb\xc1\xfa\xec\x74\x64\x4d\x84\xd6\xfd\xa5\x34\xf3\xce\xf6\xef\x64\x79\x6f\x92\x8b\x71\x92\xd3\xc9\xf3\x66\x72\xbf\x27\x12\x6e\x92\x21\xd9\xdf\xe4\xbe\x85\x25\x0a\xd9\xdc\x2b\xdd\x8d\xbe\xed\xbf\xed\x54\xca\xed\x2a\xb3\x09\xfc\x9f\x1c\x19\xbb\x17\x46\xa7\x9f\xad\x92\x8b\x21\x91\xfd\x4b\x48\xe6\x13\xa6\xb7\xf6\x29\x9f\xde\xd5\x4e\xbf\x13\x99\x89\x4d\x09\xcf\x4f\x4f\xeb\x83\xf5\x9a\x6a\x4e\x6d\x09\x8b\x67\x2f\x3f\xba\x89\x2d\x1f\x8e\xe4\x08\xd2\xe2\x28\xd0\x8b\xb3\x01\x47\x28\x6d\x9c\xa1\x73\x63\xb8\x09\x7a\x79\xfc\x65\x9f\x3f\xa5\x54\xbb\xd0\x11\xf0\x2e\xa1\xa1\xeb\xef\xca\xf7\x47\x00\x00\x00\xff\xff\x6b\xca\xbd\x53\xad\x0d\x00\x00")

func configManagerManagerYamlBytes() ([]byte, error) {
	return bindataRead(
		_configManagerManagerYaml,
		"config/manager/manager.yaml",
	)
}

func configManagerManagerYaml() (*asset, error) {
	bytes, err := configManagerManagerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/manager/manager.yaml", size: 3501, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configRbacAuth_proxy_client_clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xb1\x6e\xeb\x30\x0c\x45\x77\x7f\x05\x91\x5d\x0e\xde\xf6\xa0\xb5\x6b\xa7\x00\xed\x4e\xcb\xb7\xa9\x60\x8b\x14\x28\x2a\x68\xf2\xf5\x85\x93\x4c\x45\x8d\x6e\x82\x78\xce\x05\x2f\xb9\xe6\x77\x58\xcb\x2a\x91\x6c\xe2\x34\x72\xf7\x4f\xb5\x7c\x63\xcf\x2a\xe3\xf2\xbf\x8d\x59\x8f\x97\x7f\xc3\x92\x65\x8e\xf4\xb2\xf6\xe6\xb0\x93\xae\x18\x0a\x9c\x67\x76\x8e\x03\xd1\xca\x13\xd6\xb6\xbd\x88\xb8\xd6\x71\xe9\x13\x4c\xe0\xb8\xeb\xc2\x05\x91\xd2\xc3\xb5\xcd\xfd\x9d\xcb\xd2\x9c\x25\x21\x52\x81\x5b\x4e\x2d\x18\x78\x86\xed\xe0\x49\x4b\x55\x81\x78\xa4\x6d\x10\xb6\xfd\x43\x35\xfd\xba\xee\x09\x06\x76\xcc\x61\xba\x46\xd2\x0a\x63\xd7\xbd\xec\xca\xe6\x41\x3f\xfe\xe4\x0a\x0b\x9f\x9f\x91\x4b\x6f\xae\x25\xdf\xb6\x7a\x8f\xca\x3f\x6a\x58\x5f\xd1\xe2\x10\x48\x54\x4e\x68\xda\x2d\xe1\xed\xf4\x7a\xbf\x5b\xa0\xc3\xf1\x89\x1f\x06\xa2\x0b\x6c\x7a\xfe\x9f\xe1\xc3\x77\x00\x00\x00\xff\xff\x2e\x6f\x4a\x58\xa7\x01\x00\x00")

func configRbacAuth_proxy_client_clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_configRbacAuth_proxy_client_clusterroleYaml,
		"config/rbac/auth_proxy_client_clusterrole.yaml",
	)
}

func configRbacAuth_proxy_client_clusterroleYaml() (*asset, error) {
	bytes, err := configRbacAuth_proxy_client_clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/rbac/auth_proxy_client_clusterrole.yaml", size: 423, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configRbacAuth_proxy_roleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xb1\x52\x2b\x31\x0c\x45\xfb\xfd\x0a\xfd\x80\xf7\xcd\xeb\x18\xb7\x14\xf4\x14\xf4\x5a\xe7\x02\x66\x77\x2d\x8f\x24\x07\x92\xaf\x67\x9c\x6c\x91\x81\x24\x74\x9e\xd1\x39\x77\xa4\x6b\xae\xf9\x05\x6a\x59\x4a\x24\x9d\x38\x8d\xdc\xfc\x5d\x34\x1f\xd9\xb3\x94\x71\x7e\xb0\x31\xcb\xbf\xfd\xff\x61\xce\x65\x17\xe9\x71\x69\xe6\xd0\x67\x59\x30\xac\x70\xde\xb1\x73\x1c\x88\x16\x9e\xb0\x58\x7f\x11\x71\xad\xe3\xdc\x26\x68\x81\xe3\xa4\x17\x5e\x11\x29\x9d\x5d\xed\xee\x75\x2e\x17\x73\x2e\x09\x91\xaa\xca\xd7\x21\xdc\x41\x93\xac\x55\x0a\x8a\x47\xea\x83\xd0\x77\x0f\x27\xeb\x96\xa0\x60\xc7\x2e\x4c\x87\x48\x52\xa1\xec\xa2\x37\xd0\xca\xea\x41\x5e\xff\xe4\x56\x2e\xfc\xb6\x45\xce\xcd\x5c\xd6\x7c\xec\xfb\x9e\xcf\xbd\x38\x41\xdb\x02\x8b\x43\x20\xae\xf9\x49\xa5\xd5\x53\x53\x81\x7a\xd7\x28\x9e\xd3\x65\xd9\x03\x91\xc2\xa4\x69\xc2\x86\xb9\xcc\x28\x8a\x7d\xc6\xa7\x0d\x44\x7b\xe8\xb4\x4d\xce\x47\x5d\x0f\xfe\xf9\x89\xbf\x73\xad\x4d\x1f\x48\xce\x29\xc1\xec\x5e\xfe\x77\x00\x00\x00\xff\xff\x40\x2c\x08\xb1\x25\x02\x00\x00")

func configRbacAuth_proxy_roleYamlBytes() ([]byte, error) {
	return bindataRead(
		_configRbacAuth_proxy_roleYaml,
		"config/rbac/auth_proxy_role.yaml",
	)
}

func configRbacAuth_proxy_roleYaml() (*asset, error) {
	bytes, err := configRbacAuth_proxy_roleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/rbac/auth_proxy_role.yaml", size: 549, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configRbacAuth_proxy_role_bindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\x05\x7f\x40\x7e\x78\x5b\xa1\xad\xed\xd0\x3d\x05\xba\xd3\x32\x93\xaa\x96\x49\x81\xa2\x82\x26\x5f\x5f\x28\x36\xba\x24\x69\x36\x01\xbc\xe7\x40\x97\xc4\x92\x3e\x48\x6b\x12\x0e\xa0\x23\xc6\x01\x9b\x7d\x8a\xa6\x33\x5a\x12\x1e\xe6\xa7\x3a\x24\xf9\x77\xfc\xef\xe6\xc4\x53\x80\xd7\xdc\xaa\x91\xee\x24\xd3\x4b\xe2\x29\xf1\xc1\x2d\x64\x38\xa1\x61\x70\x00\x19\x47\xca\xb5\xbf\x00\xb0\x94\x61\x6e\x23\x29\x93\xd1\xc5\xc2\xb8\x50\x80\xb8\x2a\x54\x32\x8d\x9b\xe2\x76\x3c\x71\x35\xe4\x48\x01\x8a\xca\xf7\xc9\x3f\x26\xa2\x2c\x45\x98\xd8\x02\xf4\x81\xef\x85\xfc\x05\xbe\x07\x28\xa1\xd1\xe4\xc7\x53\x00\x29\xa4\x68\xa2\x77\xa2\x05\xd5\xbc\xec\x1f\xe6\x16\x64\x3c\x6c\xca\xb9\x55\x93\x25\x9d\xc9\x01\xac\xe5\xaf\x9b\xf4\xf7\x8e\xf6\x7d\x67\x58\xd2\x9b\x4a\x2b\x7f\x5c\xc2\x01\x5c\x1d\xe2\x86\xdc\xd5\x36\x7e\x51\xb4\x1a\x9c\xdf\x80\x77\xd2\x63\x8a\xf4\x1c\xa3\x34\xb6\x5f\x26\x0a\x9b\x4a\xce\xa4\x7e\xfd\xb9\x6e\xa3\x5a\xb0\xaf\xbe\x9e\xaa\xd1\xe2\x7e\x02\x00\x00\xff\xff\x9a\x8f\x61\xfb\x27\x02\x00\x00")

func configRbacAuth_proxy_role_bindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_configRbacAuth_proxy_role_bindingYaml,
		"config/rbac/auth_proxy_role_binding.yaml",
	)
}

func configRbacAuth_proxy_role_bindingYaml() (*asset, error) {
	bytes, err := configRbacAuth_proxy_role_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/rbac/auth_proxy_role_binding.yaml", size: 551, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configRbacAuth_proxy_serviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x41\x4e\x33\x31\x0c\x85\xf7\x73\x8a\x5c\x20\xfd\xf5\x8b\x2e\x50\xb6\x5c\xa0\x12\x88\xbd\x27\x63\x4a\x34\x89\x6d\xd9\x6e\xc5\x70\x7a\x94\x99\x76\xd7\x42\x77\x71\xfc\xfc\xe9\xd9\x0f\xa4\xbc\xa3\x5a\x61\x4a\xe1\xfc\x7f\x98\x0b\x4d\x29\xbc\xa2\x9e\x4b\xc6\xa1\xa1\xc3\x04\x0e\x69\x08\xa1\xc2\x88\xd5\xfa\x2b\x84\xcc\xe4\xca\x35\x4a\x05\xc2\x74\x2d\x2b\x6a\x6c\x40\x70\x44\x5d\x55\x20\xb2\x9b\x4f\x23\x2a\xa1\xa3\xed\x0a\xff\x23\x68\x98\x82\x5d\xe8\xb7\x35\x85\xcc\x81\xf2\x4d\x6c\x6c\xe8\x5a\xb2\xc5\xdf\x11\x99\x9b\x30\x21\x79\x0a\xbd\x11\x75\x84\x1c\x45\xf9\x6b\xb9\x37\xa0\x08\x8e\x53\x1c\x97\x14\x58\x50\xc1\xf9\xde\x0a\x02\xea\x91\x3f\xfe\xd4\x6d\x8e\x37\xe4\x7c\x32\xe7\x56\xbe\xbb\xdf\xed\x04\x0f\xad\xd6\xa5\x26\xd0\x4f\x61\x8b\x39\xb6\xc1\x04\x73\x4f\x40\x58\x7d\x8d\x22\x5e\x78\x9f\xee\x62\xab\x93\xde\x4a\xe1\x79\xbf\x7f\xda\x4a\x65\xe7\xcc\x35\x85\xb7\x97\xc3\xfa\xe3\xa0\x47\xf4\xc3\x2a\xbb\x8e\x19\x56\xcc\xce\xfa\x68\xba\x3f\x01\x00\x00\xff\xff\x46\x40\x61\xb6\x35\x02\x00\x00")

func configRbacAuth_proxy_serviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_configRbacAuth_proxy_serviceYaml,
		"config/rbac/auth_proxy_service.yaml",
	)
}

func configRbacAuth_proxy_serviceYaml() (*asset, error) {
	bytes, err := configRbacAuth_proxy_serviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/rbac/auth_proxy_service.yaml", size: 565, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configRbacKustomizationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcc\x51\x0a\x02\x31\x0c\x84\xe1\xf7\x9e\xa2\x17\x58\x0f\xb0\x97\x29\x31\x0e\x5a\xe8\x26\x25\x49\xc5\xde\x5e\x10\x61\x59\x91\x7d\x9c\xf9\xe1\x13\xda\xe0\x9d\x18\x6b\x66\x6a\xb3\x47\xa5\x85\xd5\x90\x92\xc1\x75\x18\xc3\xd7\x94\xf3\x92\x1d\xf6\xac\x8c\x42\xcc\x3a\x24\x2e\x93\xb6\xf6\x09\xa6\x0d\xc7\x55\xae\x55\x6e\x55\xee\xfb\x4b\x23\x1e\xa5\x9b\xbe\x66\xf9\x3a\x7f\xdb\x91\xfa\x09\xa7\x2a\xb7\x0a\x89\xc2\x6d\x78\xc0\x76\xe7\x1d\x00\x00\xff\xff\x47\x3f\xfc\x5b\xdf\x00\x00\x00")

func configRbacKustomizationYamlBytes() ([]byte, error) {
	return bindataRead(
		_configRbacKustomizationYaml,
		"config/rbac/kustomization.yaml",
	)
}

func configRbacKustomizationYaml() (*asset, error) {
	bytes, err := configRbacKustomizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/rbac/kustomization.yaml", size: 223, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configRbacLeader_election_roleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x51\xbd\x6e\xf3\x30\x0c\xdc\xfd\x14\x44\xbe\xd9\xfe\xd0\xad\xf0\x0b\x74\xef\xd0\x9d\x96\x2e\x89\x60\x59\x14\x28\x2a\x45\xf3\xf4\x85\x7f\x52\x04\x4d\xd2\x4e\x9d\x74\x20\xef\xc8\x3b\xea\x1f\x65\xe8\x14\x4a\x09\x92\x0a\x99\x90\x17\x8a\x60\x0f\x25\x44\x38\x0b\x92\xba\x86\x73\x78\x83\xce\x94\x9e\x74\x60\xd7\x71\xb5\xa3\x68\x38\xf3\xd2\x1f\x9f\x4b\x17\xe4\xff\xe9\xa9\x19\x43\xf2\x3d\xbd\x4a\x44\x33\xc1\xd8\xb3\x71\xdf\x10\x45\x1e\x10\xcb\x8c\x88\x38\xe7\x6e\xac\x03\x34\xc1\xb0\xe8\x12\x4f\xe8\x49\x67\xd1\x7d\x42\x48\xc5\x38\x39\xf4\x9b\xb3\xf6\xe2\xac\xfd\x41\xe4\x64\xca\x92\x90\x6c\xb5\xfc\x88\xa5\x60\x83\x6f\x87\x8f\x9e\x24\x43\xd9\x44\x1f\x50\x33\xab\xb5\xb2\xff\x95\x37\x71\xe2\xc3\x36\x72\xac\xc5\x64\x0a\xe7\xd9\xe4\x1a\xf3\x6e\x02\xad\x11\xa5\x6f\x5a\xe2\x1c\x5e\x54\x6a\x5e\x6e\xd5\xd2\x6e\xd7\x10\x29\x8a\x54\x75\xd8\x6a\x4e\xd2\x3e\x1c\x26\xce\xa5\x21\x3a\x41\x87\xad\x7e\x80\x2d\x6f\x0c\x65\x05\xef\x6c\xee\xb8\x4a\x96\x90\x0b\xac\xd9\x5f\x60\xfe\xea\x7b\x44\x18\x6e\xd7\x3b\x11\xf5\x21\x5d\x7f\xf2\xad\x9f\x08\x2e\xf8\x7b\x2f\xf7\x4e\x81\x13\x92\x7d\x5b\x7d\x35\x7f\x1d\xfa\x19\x00\x00\xff\xff\x39\x85\x55\x0a\xe1\x02\x00\x00")

func configRbacLeader_election_roleYamlBytes() ([]byte, error) {
	return bindataRead(
		_configRbacLeader_election_roleYaml,
		"config/rbac/leader_election_role.yaml",
	)
}

func configRbacLeader_election_roleYaml() (*asset, error) {
	bytes, err := configRbacLeader_election_roleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/rbac/leader_election_role.yaml", size: 737, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configRbacLeader_election_role_bindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\x05\x7f\xc0\x7e\x78\x5b\xa1\xad\x5d\xba\xa7\x40\x77\x5a\xbe\x49\x55\xcb\xa4\x40\xd1\x01\x92\xaf\x2f\xdc\x18\xed\xd2\x38\x1b\x01\xdd\x43\xe8\xf0\x72\xcd\xef\xb0\x96\x55\x22\xd9\xc0\xa9\xe7\xc5\x3f\xd4\xf2\x95\x3d\xab\xf4\xd3\x53\xeb\xb3\xfe\x3b\xff\x0f\x53\x96\x31\xd2\x41\x0b\x5e\xb2\x8c\x59\x4e\x61\x86\xf3\xc8\xce\x31\x10\x15\x1e\x50\xda\x3a\x11\x71\xad\xfd\xb4\x0c\x30\x81\xe3\x1b\x17\x9e\x11\xc9\xb4\x60\xd8\xd8\xbf\x73\x59\x9a\xb3\x24\x44\x2a\xe0\x11\xd6\xa1\x20\xad\xff\xe8\x1e\xb3\x49\xe7\xaa\x02\xf1\x9b\xc7\xbd\x94\x81\x1d\x63\x37\x5c\x22\x69\x85\xb1\xab\xdd\x89\x56\x36\xef\xf4\xf8\x30\x37\xb3\xf0\x69\x5b\x39\x2d\xcd\x75\xce\x57\x04\xa2\x9b\xf4\x9e\xc8\x3a\x1f\x70\x5c\xaf\xc6\x35\xbf\x9a\x2e\x75\xa7\x84\x40\xf4\xdb\xc1\xee\xfe\xd0\x96\xe1\x13\xc9\x5b\x0c\xdd\xc6\xbc\xc1\xce\x39\xe1\x39\x25\x5d\xc4\x7f\xe8\xa4\xe2\xa6\xa5\xc0\xba\x9b\x86\x6d\x4f\xad\xf2\x5a\x43\xbb\x34\xc7\x1c\xbe\x02\x00\x00\xff\xff\x47\x55\x58\xa4\x25\x02\x00\x00")

func configRbacLeader_election_role_bindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_configRbacLeader_election_role_bindingYaml,
		"config/rbac/leader_election_role_binding.yaml",
	)
}

func configRbacLeader_election_role_bindingYaml() (*asset, error) {
	bytes, err := configRbacLeader_election_role_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/rbac/leader_election_role_binding.yaml", size: 549, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configRbacPipeline_editor_roleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\x05\x81\x37\x5b\xc1\xdb\x0a\xad\x1d\xba\x77\xe8\x4e\xcb\x4c\x4a\x58\x12\x05\x92\x0a\x90\x7c\x7d\xe1\xc4\xc8\x94\xb4\x9b\x00\x9d\x43\xdc\x4b\xfe\x83\x4e\x5a\xd9\x8c\xa5\x19\x1c\x45\x81\xda\x02\xc3\x48\x0d\x5c\x80\x16\x76\xe8\xdc\xa9\x70\x23\x8b\x01\x3b\x7f\x91\x6e\x70\x02\x9d\x31\x47\x1c\xfe\x2d\xca\x57\x74\x96\x16\xd7\x37\x8b\x2c\x87\xf3\xff\xb0\x72\x5b\x12\xbc\x97\x61\x4e\xfa\x29\x85\x42\x25\xc7\x05\x1d\x53\x00\x28\x38\x53\xb1\xed\x05\x80\xbd\xc7\x75\xcc\xa4\x8d\x9c\x6e\x7a\xc3\x4a\x09\xf2\xdd\xd5\xcd\x7d\xce\x71\x33\xc7\x96\x29\x3d\x12\x4e\x5b\x5e\xd1\xe9\x17\x29\x4b\xed\xd2\xa8\xf9\xbd\xc0\x2b\x4a\x09\x9d\x96\x69\xbe\x24\x90\x4e\x8a\x2e\xfa\x02\xed\xa8\x3e\xc9\xf1\x4f\xae\x62\xc3\xd3\x3e\x72\x1d\xe6\x52\xf9\xba\x85\xbc\xb7\x7d\xda\x40\x47\x21\x4b\x61\x02\xec\xfc\xa1\x32\xfa\x6d\x65\x13\x64\x51\x8a\x19\xcb\xa5\x3b\x63\xcc\x52\x03\x80\x92\xc9\xd0\x4c\x3b\xf2\xb8\xd9\xc1\x1c\x7d\x58\x00\x38\x93\xce\xfb\xef\x89\x3c\xfc\x04\x00\x00\xff\xff\x3c\x8b\x18\x61\xfa\x01\x00\x00")

func configRbacPipeline_editor_roleYamlBytes() ([]byte, error) {
	return bindataRead(
		_configRbacPipeline_editor_roleYaml,
		"config/rbac/pipeline_editor_role.yaml",
	)
}

func configRbacPipeline_editor_roleYaml() (*asset, error) {
	bytes, err := configRbacPipeline_editor_roleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/rbac/pipeline_editor_role.yaml", size: 506, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configRbacPipeline_viewer_roleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xb1\x6e\xf3\x30\x0c\x84\x77\x3f\x05\x81\x7f\xb6\x82\x7f\x2b\xb4\x76\xe8\xde\xa1\x3b\x2d\x33\x09\x61\x49\x14\x48\x2a\x41\xf2\xf4\x85\xe3\x20\x53\xd2\x0e\x9d\x44\x08\xdf\xe9\xee\xc4\x7f\xd0\x48\x0b\x9b\xb1\x54\x83\xbd\x28\x50\x9d\xa1\x1b\xa9\x81\x0b\x9c\x98\xce\xd0\xb8\x51\xe6\x4a\x16\x06\x6c\xfc\x45\xba\xc2\x11\x74\xc2\x14\xb0\xfb\x51\x94\xaf\xe8\x2c\x35\x2c\x6f\x16\x58\x76\xa7\xff\xc3\xc2\x75\x8e\xf0\x9e\xbb\x39\xe9\xa7\x64\x1a\x0a\x39\xce\xe8\x18\x07\x80\x8c\x13\x65\x5b\x27\x00\x6c\x2d\x2c\x7d\x22\xad\xe4\x74\x93\x57\x2c\x14\x21\x6d\x5a\x5d\xb5\xcf\x39\xae\xe6\x58\x13\xc5\x47\xc2\x71\xcd\x4b\x3a\xfe\x20\x4a\x52\x9a\x54\xaa\xbe\x15\x78\x45\x29\xa1\xd3\x3c\x4e\x97\x08\xd2\x48\xd1\x45\x5f\xa0\x0d\xd5\x47\xd9\xff\xca\x15\xac\x78\xb8\x3f\xb9\x74\x73\x29\x7c\x5d\x43\x6e\x6d\x9f\x36\xd0\x9e\xc9\xe2\x30\x02\x36\xfe\x50\xe9\xed\xf6\x65\x23\x24\x51\x0a\x09\xf3\xa5\x39\x63\x48\x52\x06\x00\x25\x93\xae\x89\xee\xc8\x63\x67\x03\xc0\x89\x74\xba\x5f\x1f\xc8\x6f\x67\x66\xdb\x86\x33\x7a\x3a\xfe\xcd\x61\x67\x8e\xde\x9f\x18\x7d\x07\x00\x00\xff\xff\xdc\xfd\xd4\xeb\x5c\x02\x00\x00")

func configRbacPipeline_viewer_roleYamlBytes() ([]byte, error) {
	return bindataRead(
		_configRbacPipeline_viewer_roleYaml,
		"config/rbac/pipeline_viewer_role.yaml",
	)
}

func configRbacPipeline_viewer_roleYaml() (*asset, error) {
	bytes, err := configRbacPipeline_viewer_roleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/rbac/pipeline_viewer_role.yaml", size: 604, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configRbacRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x90\xbd\x8e\xe3\x30\x0c\x84\x7b\x3f\x85\x90\xde\x0e\xae\x3b\xb8\xbd\xe2\xfa\xc3\x61\x7b\x46\x9a\x24\x44\xf4\x43\x90\x52\x16\xc9\xd3\x2f\xec\x0d\x1c\x17\x4e\xb7\xc5\xae\x2a\x0d\x89\xe1\xf0\x63\xdf\xf7\x1d\x09\xbf\x41\x8d\x4b\x1e\x9d\x1e\xc8\x0f\xd4\xea\xb9\x28\xdf\xa9\x72\xc9\xc3\xe5\xb7\x0d\x5c\xf6\xd7\x5f\xdd\x85\x73\x18\xdd\x9f\xd8\xac\x42\xff\x95\x88\x2e\xa1\x52\xa0\x4a\x63\xe7\x9c\x57\xcc\x86\xff\x9c\x60\x95\x92\x8c\x2e\xb7\x18\x3b\xe7\x32\x25\x8c\x2e\x51\xa6\x13\xb4\xd7\xc9\xa8\x2d\xc2\x26\x57\xef\x48\xf8\xaf\x96\x26\xb3\x9c\x5e\xef\x76\xbb\xf9\xab\xb0\xd2\xd4\x63\xd5\x31\xe8\x95\x3d\x6c\x29\x48\x09\x4f\xe1\x4b\x3e\xf2\x29\x91\x3c\x4b\x53\xb6\x09\xad\x2d\x06\xaf\xa8\x9f\xfa\x0a\x3d\xac\xc6\xcf\x0c\x58\x64\x40\xc4\x4a\x9e\x50\x97\x7f\x64\x7b\x0a\xa1\xea\xcf\x8b\x6a\x12\xd6\x43\xde\x1f\xcd\x4d\x52\x92\xc7\xae\x1b\xac\x01\x12\xcb\x2d\x21\x57\x7b\xcd\xbf\x81\x1c\x08\xa9\x64\xfb\x2e\x88\xbe\x28\x06\x4f\xf1\x26\x95\x69\xf0\x25\xbd\xe2\x15\x16\x44\xce\xf8\xa9\x6b\xef\x8f\x9c\x29\xf2\x1d\xba\x49\xb0\x84\x7f\x55\x9c\x55\xaa\x6d\x33\x6a\x7d\x8e\xcd\x0b\x7c\x04\x00\x00\xff\xff\x80\x16\x72\x35\xf7\x03\x00\x00")

func configRbacRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_configRbacRoleYaml,
		"config/rbac/role.yaml",
	)
}

func configRbacRoleYaml() (*asset, error) {
	bytes, err := configRbacRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/rbac/role.yaml", size: 1015, mode: os.FileMode(420), modTime: time.Unix(1690372911, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configRbacRole_bindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xb1\x4e\xc4\x30\x0c\x86\xf7\x3c\x85\x5f\xa0\x45\x6c\x28\x1b\x30\xb0\x1f\x12\xbb\x9b\xfa\x0e\xd3\xd4\x8e\x1c\xe7\xa4\xbb\xa7\x47\xa5\x15\x0b\x3d\x6e\xb3\x94\xef\xff\x94\xdf\xc6\xc2\x1f\x64\x95\x55\x22\xd8\x80\xa9\xc7\xe6\x9f\x6a\x7c\x45\x67\x95\x7e\x7a\xaa\x3d\xeb\xc3\xf9\x31\x4c\x2c\x63\x84\xd7\xdc\xaa\x93\x1d\x34\xd3\x0b\xcb\xc8\x72\x0a\x33\x39\x8e\xe8\x18\x03\x40\xc6\x81\x72\x5d\x26\x00\x2c\xa5\x9f\xda\x40\x26\xe4\xf4\x63\x11\x9c\x29\x42\x5a\x15\xa6\x99\x86\x4d\xb1\x8f\xb3\x54\x47\x49\x14\x61\x46\xc1\x13\x59\x77\x3f\x93\x74\x2e\x2a\x24\xbe\xb6\xb9\x45\x19\xa1\xd3\xd8\x0d\x97\x08\x5a\xc8\xd0\xd5\x6e\xa0\x05\xcd\x3b\x3d\xde\xe5\xd6\x2f\xae\xca\xa9\x55\xd7\x99\xaf\x14\x00\xd6\xce\x7b\x05\x96\xf9\x40\xc7\x65\x59\x58\xf8\xcd\xb4\x95\x7f\x4e\x10\x00\xfe\x5c\x60\x57\x1f\x6a\x1b\xbe\x28\x79\x8d\xa1\xdb\x22\xef\x64\x67\x4e\xf4\x9c\x92\x36\xf1\xdf\x54\x52\x71\xd3\x9c\xc9\xba\x4d\xb0\x3d\xd5\x82\xcb\xd6\xeb\xa5\x3a\xcd\xe1\x3b\x00\x00\xff\xff\x7e\x57\xe7\xdf\x22\x02\x00\x00")

func configRbacRole_bindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_configRbacRole_bindingYaml,
		"config/rbac/role_binding.yaml",
	)
}

func configRbacRole_bindingYaml() (*asset, error) {
	bytes, err := configRbacRole_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/rbac/role_binding.yaml", size: 546, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configRbacService_accountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x6a\xc4\x30\x0c\x45\xf7\x3e\x85\x2e\x90\x29\xdd\x7a\xd7\x33\x14\xba\x57\x9c\xdf\x62\x62\x4b\x46\x52\x06\xa6\xa7\x2f\xc1\x5d\x4e\x98\x9d\x40\xef\x7d\xfe\xe7\x51\xbf\x60\x5e\x55\x32\xdd\xdf\xd3\x5e\x65\xcb\xf4\x09\xbb\xd7\x82\x8f\x52\xf4\x90\x48\x1d\xc1\x1b\x07\xe7\x44\xd4\x78\x45\xf3\xf3\x22\xe2\x31\x6e\xfb\xb1\xc2\x04\x01\xbf\x55\x7d\x13\xee\xc8\xe4\x53\xe7\x7f\xfd\x39\x5a\xc5\x83\xa5\x20\x53\x51\x09\xd3\xd6\x60\x4b\x67\xe1\x1f\xd8\x85\x52\xb4\x0f\x15\x48\x64\xb2\x95\xcb\x15\x65\xe0\xc0\xb6\xac\x8f\x4c\x3a\x60\x1c\x7a\x15\x38\xd8\x62\xd1\xef\x97\xdc\xac\x35\x23\xf7\xc3\x43\x7b\xfd\x45\x22\x9a\x73\x9f\xf6\x3f\x5f\x3e\xf8\xdc\xe7\x0f\x0f\xf4\xf4\x17\x00\x00\xff\xff\x27\x20\xdc\x26\x6a\x01\x00\x00")

func configRbacService_accountYamlBytes() ([]byte, error) {
	return bindataRead(
		_configRbacService_accountYaml,
		"config/rbac/service_account.yaml",
	)
}

func configRbacService_accountYaml() (*asset, error) {
	bytes, err := configRbacService_accountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/rbac/service_account.yaml", size: 362, mode: os.FileMode(420), modTime: time.Unix(1689843818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/crd/bases/core.calyptia.com_pipelines.yaml": configCrdBasesCoreCalyptiaCom_pipelinesYaml,
	"config/crd/kustomization.yaml":                     configCrdKustomizationYaml,
	"config/crd/kustomizeconfig.yaml":                   configCrdKustomizeconfigYaml,
	"config/default/kustomization.yaml":                 configDefaultKustomizationYaml,
	"config/default/manager_auth_proxy_patch.yaml":      configDefaultManager_auth_proxy_patchYaml,
	"config/default/manager_config_patch.yaml":          configDefaultManager_config_patchYaml,
	"config/manager/kustomization.yaml":                 configManagerKustomizationYaml,
	"config/manager/manager.yaml":                       configManagerManagerYaml,
	"config/rbac/auth_proxy_client_clusterrole.yaml":    configRbacAuth_proxy_client_clusterroleYaml,
	"config/rbac/auth_proxy_role.yaml":                  configRbacAuth_proxy_roleYaml,
	"config/rbac/auth_proxy_role_binding.yaml":          configRbacAuth_proxy_role_bindingYaml,
	"config/rbac/auth_proxy_service.yaml":               configRbacAuth_proxy_serviceYaml,
	"config/rbac/kustomization.yaml":                    configRbacKustomizationYaml,
	"config/rbac/leader_election_role.yaml":             configRbacLeader_election_roleYaml,
	"config/rbac/leader_election_role_binding.yaml":     configRbacLeader_election_role_bindingYaml,
	"config/rbac/pipeline_editor_role.yaml":             configRbacPipeline_editor_roleYaml,
	"config/rbac/pipeline_viewer_role.yaml":             configRbacPipeline_viewer_roleYaml,
	"config/rbac/role.yaml":                             configRbacRoleYaml,
	"config/rbac/role_binding.yaml":                     configRbacRole_bindingYaml,
	"config/rbac/service_account.yaml":                  configRbacService_accountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"crd": &bintree{nil, map[string]*bintree{
			"bases": &bintree{nil, map[string]*bintree{
				"core.calyptia.com_pipelines.yaml": &bintree{configCrdBasesCoreCalyptiaCom_pipelinesYaml, map[string]*bintree{}},
			}},
			"kustomization.yaml":   &bintree{configCrdKustomizationYaml, map[string]*bintree{}},
			"kustomizeconfig.yaml": &bintree{configCrdKustomizeconfigYaml, map[string]*bintree{}},
		}},
		"default": &bintree{nil, map[string]*bintree{
			"kustomization.yaml":            &bintree{configDefaultKustomizationYaml, map[string]*bintree{}},
			"manager_auth_proxy_patch.yaml": &bintree{configDefaultManager_auth_proxy_patchYaml, map[string]*bintree{}},
			"manager_config_patch.yaml":     &bintree{configDefaultManager_config_patchYaml, map[string]*bintree{}},
		}},
		"manager": &bintree{nil, map[string]*bintree{
			"kustomization.yaml": &bintree{configManagerKustomizationYaml, map[string]*bintree{}},
			"manager.yaml":       &bintree{configManagerManagerYaml, map[string]*bintree{}},
		}},
		"rbac": &bintree{nil, map[string]*bintree{
			"auth_proxy_client_clusterrole.yaml": &bintree{configRbacAuth_proxy_client_clusterroleYaml, map[string]*bintree{}},
			"auth_proxy_role.yaml":               &bintree{configRbacAuth_proxy_roleYaml, map[string]*bintree{}},
			"auth_proxy_role_binding.yaml":       &bintree{configRbacAuth_proxy_role_bindingYaml, map[string]*bintree{}},
			"auth_proxy_service.yaml":            &bintree{configRbacAuth_proxy_serviceYaml, map[string]*bintree{}},
			"kustomization.yaml":                 &bintree{configRbacKustomizationYaml, map[string]*bintree{}},
			"leader_election_role.yaml":          &bintree{configRbacLeader_election_roleYaml, map[string]*bintree{}},
			"leader_election_role_binding.yaml":  &bintree{configRbacLeader_election_role_bindingYaml, map[string]*bintree{}},
			"pipeline_editor_role.yaml":          &bintree{configRbacPipeline_editor_roleYaml, map[string]*bintree{}},
			"pipeline_viewer_role.yaml":          &bintree{configRbacPipeline_viewer_roleYaml, map[string]*bintree{}},
			"role.yaml":                          &bintree{configRbacRoleYaml, map[string]*bintree{}},
			"role_binding.yaml":                  &bintree{configRbacRole_bindingYaml, map[string]*bintree{}},
			"service_account.yaml":               &bintree{configRbacService_accountYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
